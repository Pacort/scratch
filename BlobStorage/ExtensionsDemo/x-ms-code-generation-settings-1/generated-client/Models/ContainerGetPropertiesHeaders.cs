// Our custom header

namespace blob-storage.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Xml;
    using System.Xml.Linq;

    /// <summary>
    /// Defines headers for GetProperties operation.
    /// </summary>
    public partial class ContainerGetPropertiesHeaders
    {
        /// <summary>
        /// Initializes a new instance of the ContainerGetPropertiesHeaders
        /// class.
        /// </summary>
        public ContainerGetPropertiesHeaders() { }

        /// <summary>
        /// Initializes a new instance of the ContainerGetPropertiesHeaders
        /// class.
        /// </summary>
        /// <param name="eTag">The ETag contains a value that you can use to
        /// perform operations conditionally. If the request version is
        /// 2011-08-18 or newer, the ETag value will be in quotes.</param>
        /// <param name="lastModified">Returns the date and time the container
        /// was last modified. Any operation that modifies the blob, including
        /// an update of the blob's metadata or properties, changes the
        /// last-modified time of the blob.</param>
        /// <param name="xMsLeaseDuration">When a blob is leased, specifies
        /// whether the lease is of infinite or fixed duration. Possible values
        /// include: 'infinite', 'fixed'</param>
        /// <param name="xMsLeaseState">Lease state of the blob. Possible
        /// values include: 'available', 'leased', 'expired', 'breaking',
        /// 'broken'</param>
        /// <param name="xMsLeaseStatus">The current lease status of the blob.
        /// Possible values include: 'locked', 'unlocked'</param>
        /// <param name="xMsRequestId">This header uniquely identifies the
        /// request that was made and can be used for troubleshooting the
        /// request.</param>
        /// <param name="xMsVersion">Indicates the version of the Blob service
        /// used to execute the request. This header is returned for requests
        /// made against version 2009-09-19 and above.</param>
        /// <param name="date">UTC date/time value generated by the service
        /// that indicates the time at which the response was initiated</param>
        /// <param name="xMsBlobPublicAccess">Indicated whether data in the
        /// container may be accessed publicly and the level of access.
        /// Possible values include: 'container', 'blob'</param>
        public ContainerGetPropertiesHeaders(IDictionary<string, string> metadata = default(IDictionary<string, string>), string eTag = default(string), string lastModified = default(string), LeaseDurationType? xMsLeaseDuration = default(LeaseDurationType?), LeaseStateType? xMsLeaseState = default(LeaseStateType?), LeaseStatusType? xMsLeaseStatus = default(LeaseStatusType?), string xMsRequestId = default(string), string xMsVersion = default(string), System.DateTime? date = default(System.DateTime?), string xMsBlobPublicAccess = default(string))
        {
            Metadata = metadata;
            ETag = eTag;
            LastModified = lastModified;
            XMsLeaseDuration = xMsLeaseDuration;
            XMsLeaseState = xMsLeaseState;
            XMsLeaseStatus = xMsLeaseStatus;
            XMsRequestId = xMsRequestId;
            XMsVersion = xMsVersion;
            Date = date;
            XMsBlobPublicAccess = xMsBlobPublicAccess;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "x-ms-meta")]
        public IDictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// Gets or sets the ETag contains a value that you can use to perform
        /// operations conditionally. If the request version is 2011-08-18 or
        /// newer, the ETag value will be in quotes.
        /// </summary>
        [JsonProperty(PropertyName = "ETag")]
        public string ETag { get; set; }

        /// <summary>
        /// Gets or sets returns the date and time the container was last
        /// modified. Any operation that modifies the blob, including an update
        /// of the blob's metadata or properties, changes the last-modified
        /// time of the blob.
        /// </summary>
        [JsonProperty(PropertyName = "Last-Modified")]
        public string LastModified { get; set; }

        /// <summary>
        /// Gets or sets when a blob is leased, specifies whether the lease is
        /// of infinite or fixed duration. Possible values include: 'infinite',
        /// 'fixed'
        /// </summary>
        [JsonProperty(PropertyName = "x-ms-lease-duration")]
        public LeaseDurationType? XMsLeaseDuration { get; set; }

        /// <summary>
        /// Gets or sets lease state of the blob. Possible values include:
        /// 'available', 'leased', 'expired', 'breaking', 'broken'
        /// </summary>
        [JsonProperty(PropertyName = "x-ms-lease-state")]
        public LeaseStateType? XMsLeaseState { get; set; }

        /// <summary>
        /// Gets or sets the current lease status of the blob. Possible values
        /// include: 'locked', 'unlocked'
        /// </summary>
        [JsonProperty(PropertyName = "x-ms-lease-status")]
        public LeaseStatusType? XMsLeaseStatus { get; set; }

        /// <summary>
        /// Gets or sets this header uniquely identifies the request that was
        /// made and can be used for troubleshooting the request.
        /// </summary>
        [JsonProperty(PropertyName = "x-ms-request-id")]
        public string XMsRequestId { get; set; }

        /// <summary>
        /// Gets or sets indicates the version of the Blob service used to
        /// execute the request. This header is returned for requests made
        /// against version 2009-09-19 and above.
        /// </summary>
        [JsonProperty(PropertyName = "x-ms-version")]
        public string XMsVersion { get; set; }

        /// <summary>
        /// Gets or sets UTC date/time value generated by the service that
        /// indicates the time at which the response was initiated
        /// </summary>
        [JsonConverter(typeof(DateTimeRfc1123JsonConverter))]
        [JsonProperty(PropertyName = "Date")]
        public System.DateTime? Date { get; set; }

        /// <summary>
        /// Gets or sets indicated whether data in the container may be
        /// accessed publicly and the level of access. Possible values include:
        /// 'container', 'blob'
        /// </summary>
        [JsonProperty(PropertyName = "x-ms-blob-public-access")]
        public string XMsBlobPublicAccess { get; set; }

        /// <summary>
        /// Serializes the object to an XML node
        /// </summary>
        internal XElement XmlSerialize(XElement result)
        {
            if( null != Metadata )
            {
                var dict = new XElement("x-ms-meta");
                foreach( var key in Metadata.Keys ){
                    dict.Add(new XElement( key, Metadata[key] ) );
                }
                result.Add(dict);
            }
            if( null != ETag )
            {
                result.Add(new XElement("ETag", ETag) );
            }
            if( null != LastModified )
            {
                result.Add(new XElement("Last-Modified", LastModified) );
            }
            if( null != XMsLeaseDuration )
            {
                result.Add(new XElement("x-ms-lease-duration", XMsLeaseDuration.ToSerializedValue()) );
            }
            if( null != XMsLeaseState )
            {
                result.Add(new XElement("x-ms-lease-state", XMsLeaseState.ToSerializedValue()) );
            }
            if( null != XMsLeaseStatus )
            {
                result.Add(new XElement("x-ms-lease-status", XMsLeaseStatus.ToSerializedValue()) );
            }
            if( null != XMsRequestId )
            {
                result.Add(new XElement("x-ms-request-id", XMsRequestId) );
            }
            if( null != XMsVersion )
            {
                result.Add(new XElement("x-ms-version", XMsVersion) );
            }
            if( null != Date )
            {
                result.Add(new XElement("Date", Date?.ToUniversalTime().ToString("R")) );
            }
            if( null != XMsBlobPublicAccess )
            {
                result.Add(new XElement("x-ms-blob-public-access", XMsBlobPublicAccess) );
            }
            return result;
        }
        /// <summary>
        /// Deserializes an XML node to an instance of ContainerGetPropertiesHeaders
        /// </summary>
        internal static ContainerGetPropertiesHeaders XmlDeserialize(string payload)
        {
            // deserialize to xml and use the overload to do the work
            return XmlDeserialize( XElement.Parse( payload ) );
        }
        internal static ContainerGetPropertiesHeaders XmlDeserialize(XElement payload)
        {
            var result = new ContainerGetPropertiesHeaders();
            var deserializeMetadata = XmlSerialization.CreateDictionaryXmlDeserializer(XmlSerialization.ToDeserializer(e => (string)e));
            IDictionary<string, string> resultMetadata;
            if (deserializeMetadata(payload, "x-ms-meta", out resultMetadata))
            {
                result.Metadata = resultMetadata;
            }
            var deserializeETag = XmlSerialization.ToDeserializer(e => (string)e);
            string resultETag;
            if (deserializeETag(payload, "ETag", out resultETag))
            {
                result.ETag = resultETag;
            }
            var deserializeLastModified = XmlSerialization.ToDeserializer(e => (string)e);
            string resultLastModified;
            if (deserializeLastModified(payload, "Last-Modified", out resultLastModified))
            {
                result.LastModified = resultLastModified;
            }
            var deserializeXMsLeaseDuration = XmlSerialization.ToDeserializer(e => e.Value.ParseLeaseDurationType());
            LeaseDurationType? resultXMsLeaseDuration;
            if (deserializeXMsLeaseDuration(payload, "x-ms-lease-duration", out resultXMsLeaseDuration))
            {
                result.XMsLeaseDuration = resultXMsLeaseDuration;
            }
            var deserializeXMsLeaseState = XmlSerialization.ToDeserializer(e => e.Value.ParseLeaseStateType());
            LeaseStateType? resultXMsLeaseState;
            if (deserializeXMsLeaseState(payload, "x-ms-lease-state", out resultXMsLeaseState))
            {
                result.XMsLeaseState = resultXMsLeaseState;
            }
            var deserializeXMsLeaseStatus = XmlSerialization.ToDeserializer(e => e.Value.ParseLeaseStatusType());
            LeaseStatusType? resultXMsLeaseStatus;
            if (deserializeXMsLeaseStatus(payload, "x-ms-lease-status", out resultXMsLeaseStatus))
            {
                result.XMsLeaseStatus = resultXMsLeaseStatus;
            }
            var deserializeXMsRequestId = XmlSerialization.ToDeserializer(e => (string)e);
            string resultXMsRequestId;
            if (deserializeXMsRequestId(payload, "x-ms-request-id", out resultXMsRequestId))
            {
                result.XMsRequestId = resultXMsRequestId;
            }
            var deserializeXMsVersion = XmlSerialization.ToDeserializer(e => (string)e);
            string resultXMsVersion;
            if (deserializeXMsVersion(payload, "x-ms-version", out resultXMsVersion))
            {
                result.XMsVersion = resultXMsVersion;
            }
            var deserializeDate = XmlSerialization.ToDeserializer(e => (System.DateTime?)e);
            System.DateTime? resultDate;
            if (deserializeDate(payload, "Date", out resultDate))
            {
                result.Date = resultDate;
            }
            var deserializeXMsBlobPublicAccess = XmlSerialization.ToDeserializer(e => (string)e);
            string resultXMsBlobPublicAccess;
            if (deserializeXMsBlobPublicAccess(payload, "x-ms-blob-public-access", out resultXMsBlobPublicAccess))
            {
                result.XMsBlobPublicAccess = resultXMsBlobPublicAccess;
            }
            return result;
        }
    }
}


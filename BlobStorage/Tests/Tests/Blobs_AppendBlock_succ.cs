// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// 

using Microsoft.Rest;
using System;
using System.Diagnostics;
using System.Linq;
using System.IO;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;
using Xunit;
using BlobStorageTest.Client;
using BlobStorageTest.Client.Models;
using BlobStorageTest.Tests;
using Microsoft.Rest.Azure;

//<dump disabled/>

public class Test000017 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\000017_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\000017_s.txt", Encoding.UTF8);

    public Test000017() : base(recordedRequest, recordedResponse, "xclientdev3")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{100,22,57,96,239,191,189,126,26,239,191,189,53,239,191,189,21,6,239,191,189,70,68,49,67,90,239,191,189,239,191,189,40,0,239,191,189,239,191,189,4,239,191,189,239,191,189,62,239,191,189,239,191,189,222,134,239,191,189,239,191,189,15,33,239,191,189,30,221,131,239,191,189,29,239,191,189,13,91,239,191,189,75,124,239,191,189,239,191,189,239,191,189,121,239,191,189,99,123,71,239,191,189,239,191,189,230,144,153,239,191,189,239,191,189,55,239,191,189,27,121,52,16,85,239,191,189,239,191,189,239,191,189,68,125,10,239,191,189,239,191,189,239,191,189,62,239,191,189,15,239,191,189,239,191,189,12,239,191,189,105,239,191,189,239,191,189,68,34,55,76,239,191,189,25,82,239,191,189,239,191,189,63,45,22,108,45,95,74,239,191,189,60,31,239,191,189,60,1,239,191,189,239,191,189,81,215,147,239,191,189,84,115,31,16,239,191,189,54,17,123,120,239,191,189,239,191,189,43,42,92,27,105,239,191,189,39,85,226,150,152,127,239,191,189,74,239,191,189,239,191,189,66,50,67,239,191,189,17,239,191,189,126,90,25,32,28,118,53,28,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,48,41,239,191,189,239,191,189,62,239,191,189,239,191,189,95,239,191,189,11,239,191,189,239,191,189,72,53,239,191,189,239,191,189,239,191,189,239,191,189,2,2,72,239,191,189,239,191,189,31,198,178,198,145,62,85,194,188,92,239,191,189,18,209,143,239,191,189,63,239,191,189,37,239,191,189,86,106,239,191,189,77,239,191,189,239,191,189,73,239,191,189,79,38,239,191,189,239,191,189,62,239,191,189,120,98,239,191,189,239,191,189,98,33,112,72,239,191,189,114,239,191,189,35,239,191,189,26,239,191,189,108,100,220,135,80,70,239,191,189,120,22,41,71,103,6,239,191,189,239,191,189,119,109,239,191,189,89,44,234,180,166,195,159,239,191,189,34,239,191,189,239,191,189,239,191,189,121,119,239,191,189,127,239,191,189,121,7,239,191,189,57,49,239,191,189,113,117,239,191,189,26,239,191,189,106,239,191,189,239,191,189,239,191,189,47,239,191,189,121,239,191,189,228,184,189,24,239,191,189,107,36,196,158,23,239,191,189,208,172,239,191,189,239,191,189,99,111,239,191,189,78,40,78,120,62,217,168,239,191,189,123,118,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,205,154,0,239,191,189,239,191,189,239,191,189,239,191,189,12,26,239,191,189,93,28,74,13,239,191,189,201,155,239,191,189,120,76,81,239,191,189,107,122,239,191,189,111,1,239,191,189,5,239,191,189,72,239,191,189,239,191,189,239,191,189,239,191,189,226,167,128,239,191,189,27,51,239,191,189,239,191,189,94,217,152,239,191,189,35,84,86,239,191,189,239,191,189,45,46,239,191,189,239,191,189,127,239,191,189,239,191,189,95,20,20,20,74,119,46,239,191,189,239,191,189,239,191,189,10,239,191,189,239,191,189,54,108,198,152,38,17,40,87,0,239,191,189,105,239,191,189,65,39,239,191,189,239,191,189,91,239,191,189,1,29,239,191,189,239,191,189,31,239,191,189,239,191,189,115,231,170,162,239,191,189,47,74,239,191,189,239,191,189,117,239,191,189,104,239,191,189,110,239,191,189,239,191,189,94,50,239,191,189,34,8,80,125,56,239,191,189,36,8,113,41,122,76,54,203,179,42,125,239,191,189,57,239,191,189,31,41,124,239,191,189,239,191,189,85,109,29,239,191,189,121,27,93,239,191,189,239,191,189,106,239,191,189,45,105,59,10,65,86,239,191,189,239,191,189,116,50,34,239,191,189,67,38,239,191,189,37,127,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,28,7,117,239,191,189,14,28,95,80,32,72,239,191,189,80,75,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,122,35,75,30,79,82,72,56,109,89,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,31,2,239,191,189,93,239,191,189,239,191,189,21,239,191,189,1,239,191,189,239,191,189,214,134,39,215,173,37,239,191,189,239,191,189,19,239,191,189,239,191,189,239,191,189,38,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,111,104,239,191,189,239,191,189,239,191,189,222,165,18,118,84,239,191,189,101,65,73,103,239,191,189,124,239,191,189,16,239,191,189,239,191,189,239,191,189,52,17,239,191,189,239,191,189,77,25,239,191,189,239,191,189,239,191,189,239,191,189,35,239,191,189,77,22,37,239,191,189,73,49,239,191,189,239,191,189,86,14,239,191,189,126,239,191,189,239,191,189,239,191,189,41,3,239,191,189,91,74,239,191,189,52,239,191,189,36,239,191,189,239,191,189,239,191,189,108,239,191,189,239,191,189,239,191,189,66,86,239,191,189,25,239,191,189,86,1,239,191,189,101,17,239,191,189,239,191,189,3,239,191,189,72,196,151,29,239,191,189,239,191,189,36,200,160,239,191,189,25,239,191,189,1,194,184,239,191,189,46,239,191,189,239,191,189,47,107,39,239,191,189,104,0,239,191,189,2,13,239,191,189,57,6,85,239,191,189,69,239,191,189,239,191,189,239,191,189,79,50,199,186,121,239,191,189,8,239,191,189,239,191,189,84,62,14,239,191,189,239,191,189,239,191,189,20,239,191,189,115,33,239,191,189,47,29,239,191,189,239,191,189,23,239,191,189,103,239,191,189,239,191,189,10,239,191,189,11,239,191,189,222,189,2,116,239,191,189,112,239,191,189,104,6,127,239,191,189,239,191,189,54,86,25,65,239,191,189,209,149,239,191,189,239,191,189,49,120,5,239,191,189,239,191,189,79,95,60,239,191,189,51,35,14,3,47,18,96,239,191,189,239,191,189,42,239,191,189,22,58,239,191,189,24,239,191,189,16,239,191,189,239,191,189,90,239,191,189,117,18,239,191,189,68,239,191,189,239,191,189,73,33,105,44,24,239,191,189,239,191,189,40,82,239,191,189,47,79,78,239,191,189,239,191,189,27,62,6,239,191,189,11,62,208,186,239,191,189,239,191,189,239,191,189,17,34,86,239,191,189,21,239,191,189,56,239,191,189,239,191,189,239,191,189,239,191,189,83,111,61,115,239,191,189,239,191,189,82,10,239,191,189,239,191,189,99,239,191,189,6,239,191,189,70,62,239,191,189,113,239,191,189,58,239,191,189,239,191,189,6,239,191,189,239,191,189,25,239,191,189,22,85,239,191,189,100,28,239,191,189,77,239,191,189,127,42,103,239,191,189,16,44,239,191,189,52,239,191,189,239,191,189,32,71,239,191,189,239,191,189,39,40,122,24,239,191,189,115,108,194,167,56,73,239,191,189,59,117,239,191,189,116,27,94,239,191,189,239,191,189,99,111,10,239,191,189,42,239,191,189,28,239,191,189,54,26,239,191,189,121,28,239,191,189,239,191,189,59,239,191,189,239,191,189,239,191,189,239,191,189,43,239,191,189,239,191,189,47,63,239,191,189,239,191,189,56,239,191,189,80,239,191,189,239,191,189,78,84,72,239,191,189,30,239,191,189,239,191,189,239,191,189,86,239,191,189,239,191,189,239,191,189,62,239,191,189,105,239,191,189,239,191,189,77,239,191,189,73,99,31,122,239,191,189,239,191,189,218,186,239,191,189,239,191,189,239,191,189,37,239,191,189,82,55,42,239,191,189,96,13,29,33,239,191,189,2,239,191,189,239,191,189,49,239,191,189,239,191,189,111,32,94,239,191,189,94,126,127,94,47,217,163,239,191,189,67,239,191,189,78,67,114,117,239,191,189,57,7,239,191,189,239,191,189,49,239,191,189,47,239,191,189,101,97,239,191,189,239,191,189,116,239,191,189,239,191,189,74,127,85,91,239,191,189,103,239,191,189,239,191,189,239,191,189,239,191,189,64,239,191,189,90,239,191,189,239,191,189,16,27,239,191,189,239,191,189,239,191,189,239,191,189,127,45,239,191,189,46,239,191,189,26,239,191,189,239,191,189,239,191,189,46,239,191,189,89,123,239,191,189,239,191,189,22,239,191,189,63,102,45,239,191,189,239,191,189,116,98,86,86,207,163,239,191,189,239,191,189,239,191,189,57,0,239,191,189,0,40,118,239,191,189,239,191,189,239,191,189,239,191,189,104,239,191,189,239,191,189,105,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,109,75,85,239,191,189,31,204,184,239,191,189,239,191,189,118,74,88,8,34,68,239,191,189,88,239,191,189,239,191,189,198,160,21,239,191,189,239,191,189,80,65,239,191,189,239,191,189,239,191,189,239,191,189,118,8,211,144,96,239,191,189,239,191,189,69,98,51,111,239,191,189,35,110,239,191,189,96,239,191,189,73,239,191,189,39,239,191,189,239,191,189,9,90,87,239,191,189,239,191,189,107,239,191,189,24,210,138,2,239,191,189,66,239,191,189,119,239,191,189,239,191,189,239,191,189,19,239,191,189,239,191,189,86,239,191,189,85,239,191,189,63,239,191,189,239,191,189,216,155,44,239,191,189,239,191,189,15,239,191,189,53,8,239,191,189,58,217,132,27,239,191,189,104,239,191,189,35,43,0,239,191,189,25,239,191,189,17,20,77,93,239,191,189,239,191,189,2,37,105,239,191,189,239,191,189,63,54,93,84,110,50,239,191,189,65,239,191,189,239,191,189,127,57,18,127,239,191,189,68,239,191,189,93,19,239,191,189,239,191,189,239,191,189,239,191,189,27,239,191,189,68,239,191,189,23,239,191,189,6,239,191,189,239,191,189,57,239,191,189,239,191,189,102,10,104,239,191,189,239,191,189,69,239,191,189,96,239,191,189,239,191,189,239,191,189,58,239,191,189,239,191,189,104,105,239,191,189,85,239,191,189,4,239,191,189,62,66,239,191,189,42,239,191,189,239,191,189,239,191,189,239,191,189,220,174,239,191,189,239,191,189,239,191,189,82,57,48,239,191,189,27,239,191,189,81,94,3,239,191,189,239,191,189,9,239,191,189,29,31,239,191,189,8,123,101,239,191,189,91,40,200,173,239,191,189,120,239,191,189,239,191,189,24,239,191,189,218,176,57,239,191,189,46,57,33,58,78,239,191,189,34,59,239,191,189,239,191,189,32,239,191,189,239,191,189,239,191,189,21,239,191,189,50,239,191,189,5,72,42,113,239,191,189,28,239,191,189,239,191,189,98,239,191,189,239,191,189,239,191,189,89,239,191,189,117,239,191,189,99,239,191,189,64,23,239,191,189,57,239,191,189,14,239,191,189,106,239,191,189,29,84,239,191,189,67,239,191,189,63,239,191,189,239,191,189,125,239,191,189,239,191,189,5,239,191,189,107,80,114,80,20,21,239,191,189,13,15,239,191,189,239,191,189,239,191,189,239,191,189,52,14,60,99,208,177,239,191,189,239,191,189,14,24,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,52,239,191,189,226,169,171,239,191,189,199,157,239,191,189,239,191,189,239,191,189,239,191,189,13,239,191,189,239,191,189,87,239,191,189,239,191,189,118,239,191,189,64,89,239,191,189,84,194,165,66,90,239,191,189,31,111,24,98,23,116,4,10,72,215,178,70,239,191,189,104,51,13,20,239,191,189,97,50,79,53,239,191,189,56,200,183,239,191,189,200,142,239,191,189,6,63,109,239,191,189,239,191,189,45,239,191,189,93,239,191,189,56,239,191,189,76,118,239,191,189,195,155,239,191,189,239,191,189,70,239,191,189,239,191,189,239,191,189,39,89,239,191,189,223,154,95,239,191,189,59,124,98,239,191,189,115,217,171,239,191,189,6,239,191,189,239,191,189,239,191,189,40,80,2,239,191,189,3,117,44,23,239,191,189,23,72,56,24,94,69,239,191,189,239,191,189,195,150,239,191,189,239,191,189,239,191,189,20,20,79,239,191,189,239,191,189,99,239,191,189,239,191,189,239,191,189,42,239,191,189,239,191,189,86,43,239,191,189,106,109,72,239,191,189,36,52,42,239,191,189,20,239,191,189,16,239,191,189,96,239,191,189,239,191,189,44,239,191,189,239,191,189,50,239,191,189,239,191,189,37,105,34,239,191,189,108,239,191,189,65,239,191,189,110,68,239,191,189,33,64,85,78,238,130,156,239,191,189,92,59,46,239,191,189,239,191,189,73,239,191,189,2,239,191,189,46,45,35,239,191,189,239,191,189,68,3,37,42,239,191,189,239,191,189,239,191,189,239,191,189,110,37,239,191,189,239,191,189,63,239,191,189,239,191,189,221,154,39,239,191,189,239,191,189,239,191,189,239,191,189,59,62,239,191,189,35,239,191,189,63,239,191,189,119,64,33,69,239,191,189,239,191,189,81,40,239,191,189,239,191,189,239,191,189,1,239,191,189,239,191,189,8,24,239,191,189,10,82,99,33,239,191,189,6,239,191,189,239,191,189,3,89,239,191,189,239,191,189,106,239,191,189,20,239,191,189,239,191,189,239,191,189,229,170,146,239,191,189,239,191,189,77,239,191,189,239,191,189,92,239,191,189,239,191,189,0,30,50,38,239,191,189,24,71,239,191,189,239,191,189,239,191,189,58,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,65,89,54,239,191,189,89,239,191,189,239,191,189,35,109,92,86,239,191,189,22,108,239,191,189,239,191,189,239,191,189,239,191,189,2,59,239,191,189,239,191,189,239,191,189,123,239,191,189,239,191,189,13,19,239,191,189,22,12,42,239,191,189,239,191,189,114,124,38,239,191,189,102,74,71,14,239,191,189,116,194,143,239,191,189,97,37,239,191,189,239,191,189,239,191,189,239,191,189,103,243,129,191,186,12,239,191,189,239,191,189,239,191,189,120,87,80,43,239,191,189,82,239,191,189,65,239,191,189,19,239,191,189,239,191,189,239,191,189,8,37,239,191,189,60,5,239,191,189,239,191,189,26,102,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,107,239,191,189,216,161,239,191,189,239,191,189,97,35,239,191,189,239,191,189,116,104,239,191,189,13,239,191,189,239,191,189,239,191,189,116,107,120,239,191,189,1,208,136,239,191,189,239,191,189,94,239,191,189,202,135,48,239,191,189,7,239,191,189,23,79,239,191,189,21,110,239,191,189,2,35,108,239,191,189,66,10,12,202,152,239,191,189,27,101,120,35,105,239,191,189,80,239,191,189,239,191,189,56,112,88,14,239,191,189,239,191,189,96,95,239,191,189,76,44,239,191,189,6,122,210,151,239,191,189,99,239,191,189,239,191,189,239,191,189,81,38,50,239,191,189,21,28,239,191,189,96,239,191,189,92,111,113,239,191,189,239,191,189,53,239,191,189,20,205,158,239,191,189,22,125,107,28,20,234,166,140,239,191,189,239,191,189,89,239,191,189,239,191,189,239,191,189,74,38,92,239,191,189,239,191,189,239,191,189,239,191,189,71,239,191,189,71,71,239,191,189,239,191,189,239,191,189,202,150,88,239,191,189,32,58,239,191,189,199,149,0,49,239,191,189,239,191,189,35,239,191,189,21,239,191,189,239,191,189,239,191,189,235,131,183,67,239,191,189,15,239,191,189,207,140,239,191,189,239,191,189,239,191,189,41,9,239,191,189,239,191,189,239,191,189,1,16,196,171,239,191,189,94,198,137,239,191,189,239,191,189,41,36,36,239,191,189,239,191,189,110,239,191,189,106,18,82,239,191,189,239,191,189,116,107,28,25,239,191,189,51,8,239,191,189,54,98,239,191,189,20,119,21,38,73,36,239,191,189,34,37,239,191,189,239,191,189,104,5,20,94,57,88,52,239,191,189,239,191,189,112,70,80,64,239,191,189,69,5,85,239,191,189,11,239,191,189,239,191,189,81,239,191,189,71,89,239,191,189,103,69,34,239,191,189,110,239,191,189,239,191,189,239,191,189,239,191,189,19,239,191,189,239,191,189,206,133,2,239,191,189,43,239,191,189,49,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,101,239,191,189,26,239,191,189,239,191,189,23,114,239,191,189,5,112,239,191,189,239,191,189,15,1,239,191,189,94,127,239,191,189,49,88,239,191,189,206,133,239,191,189,12,38,239,191,189,22,239,191,189,239,191,189,102,55,50,239,191,189,98,215,156,239,191,189,239,191,189,239,191,189,93,239,191,189,20,41,27,239,191,189,239,191,189,102,102,239,191,189,228,183,148,239,191,189,239,191,189,239,191,189,113,239,191,189,78,239,191,189,84,239,191,189,25,26,239,191,189,239,191,189,53,239,191,189,120,239,191,189,112,239,191,189,239,191,189,239,191,189,10,76,239,191,189,45,125,239,191,189,239,191,189,239,191,189,77,48,239,191,189,239,191,189,239,191,189,239,191,189,30,40,93,239,191,189,70,239,191,189,239,191,189,62,239,191,189,115,106,239,191,189,239,191,189,28,25,51,71,239,191,189,239,191,189,239,191,189,239,191,189,54,46,67,16,239,191,189,206,175,239,191,189,239,191,189,37,54,239,191,189,239,191,189,114,79,83,239,191,189,239,191,189,80,14,239,191,189,239,191,189,20,195,191,239,191,189,239,191,189,239,191,189,26,239,191,189,82,5,1,239,191,189,239,191,189,239,191,189,26,239,191,189,239,191,189,239,191,189,37,239,191,189,239,191,189,78,52,15,49,239,191,189,239,191,189,223,167,239,191,189,111,239,191,189,27,113,25,239,191,189,80,239,191,189,49,36,116,239,191,189,239,191,189,48,239,191,189,198,138,85,57,239,191,189,2,239,191,189,239,191,189,27,37,198,142,239,191,189,239,191,189,239,191,189,239,191,189,59,66,91,239,191,189,23,239,191,189,118,239,191,189,112,1,239,191,189,0,59,239,191,189,123,3,99,106,32,116,239,191,189,239,191,189,239,191,189,239,191,189,1,0,76,83,239,191,189,239,191,189,64,100,57,239,191,189,119,239,191,189,239,191,189,30,19,115,239,191,189,110,0,6,239,191,189,239,191,189,74,239,191,189,76,89,239,191,189,75,239,191,189,121,102,239,191,189,21,239,191,189,41,239,191,189,239,191,189,239,191,189,29,75,239,191,189,1,239,191,189,3,105,239,191,189,75,12,1,6,89,239,191,189,239,191,189,25,32,239,191,189,8,102,84,239,191,189,111,24,239,191,189,67,17,239,191,189,126,119,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,75,222,164,70,33,125,13,239,191,189,74,239,191,189,32,114,239,191,189,239,191,189,239,191,189,98,239,191,189,66,123,239,191,189,220,132,92,239,191,189,239,191,189,79,239,191,189,34,28,15,239,191,189,16,27,239,191,189,65,34,239,191,189,68,239,191,189,124,239,191,189,239,191,189,22,35,239,191,189,239,191,189,239,191,189,239,191,189,94,239,191,189,35,80,239,191,189,198,130,6,83,239,191,189,45,57,239,191,189,45,126,102,98,239,191,189,45,69,64,239,191,189,239,191,189,239,191,189,23,49,239,191,189,70,122,83,239,191,189,239,191,189,228,154,189,90,239,191,189,239,191,189,61,8,239,191,189,27,110,239,191,189,239,191,189,66,8,239,191,189,239,191,189,239,191,189,60,51,85,239,191,189,70,239,191,189,239,191,189,126,57,239,191,189,15,59,239,191,189,0,11,96,84,7,111,35,209,162,239,191,189,37,239,191,189,36,85,81,239,191,189,239,191,189,41,21,239,191,189,239,191,189,23,89,119,58,83,34,239,191,189,22,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,110,239,191,189,72,239,191,189,0,49,116,235,153,169,47,35,34,70,101,239,191,189,100,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,26,239,191,189,77,239,191,189,239,191,189,27,239,191,189,45,2,239,191,189,231,177,180,239,191,189,40,239,191,189,57,239,191,189,125,239,191,189,72,22,49,239,191,189,62,239,191,189,34,16,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,95,239,191,189,77,239,191,189,239,191,189,48,126,239,191,189,2,33,239,191,189,94,239,191,189,239,191,189,126,89,21,83,239,191,189,106,2,239,191,189,3,239,191,189,112,65,38,239,191,189,239,191,189,46,12,239,191,189,97,239,191,189,84,19,239,191,189,0,69,239,191,189,239,191,189,239,191,189,69,239,191,189,239,191,189,125,239,191,189,197,163,239,191,189,239,191,189,239,191,189,27,239,191,189,239,191,189,239,191,189,115,239,191,189,10,239,191,189,239,191,189,239,191,189,20,239,191,189,239,191,189,239,191,189,121,107,125,20,13,89,107,5,91,14,239,191,189,239,191,189,96,85,49,69,106,12,69,216,150,67,16,239,191,189,239,191,189,239,191,189,121,51,113,239,191,189,239,191,189,127,239,191,189,76,56,57,213,148,109,239,191,189,239,191,189,99,239,191,189,239,191,189,239,191,189,239,191,189,48,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,23,239,191,189,39,109,239,191,189,122,239,191,189,239,191,189,239,191,189,239,191,189,45,239,191,189,115,29,19,28,239,191,189,112,214,159,239,191,189,239,191,189,50,239,191,189,35,13,239,191,189,239,191,189,72,239,191,189,239,191,189,54,59,199,130,105,16,239,191,189,78,26,239,191,189,239,191,189,20,121,239,191,189,239,191,189,12,221,150,20,239,191,189,29,239,191,189,14,34,37,239,191,189,239,191,189,73,121,239,191,189,213,168,54,6,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,12,43,34,239,191,189,239,191,189,239,191,189,222,184,239,191,189,44,0,239,191,189,86,52,239,191,189,239,191,189,98,44,239,191,189,93,239,191,189,106,239,191,189,239,191,189,57,239,191,189,21,239,191,189,115,239,191,189,61,96,66,239,191,189,8,116,239,191,189,23,26,75,71,239,191,189,239,191,189,29,120,37,126,116,59,65,239,191,189,239,191,189,6,61,239,191,189,77,239,191,189,29,239,191,189,239,191,189,69,80,239,191,189,121,106,44,239,191,189,239,191,189,75,17,89,21,239,191,189,239,191,189,101,92,20,87,239,191,189,239,191,189,50,10,239,191,189,90,4,239,191,189,102,203,173,239,191,189,239,191,189,239,191,189,71,239,191,189,104,46,216,172,19,71,239,191,189,118,72,123,239,191,189,39,50,239,191,189,67,239,191,189,110,239,191,189,31,92,19,69,62,69,116,114,198,186,28,239,191,189,20,239,191,189,239,191,189,13,73,55,239,191,189,104,67,90,239,191,189,239,191,189,53,239,191,189,239,191,189,239,191,189,119,239,191,189,239,191,189,37,55,107,239,191,189,34,239,191,189,55,239,191,189,239,191,189,239,191,189,90,239,191,189,102,239,191,189,89,36,239,191,189,11,109,6,239,191,189,239,191,189,111,87,239,191,189,9,239,191,189,239,191,189,239,191,189,78,49,95,239,191,189,239,191,189,99,239,191,189,109,39,71,239,191,189,48,239,191,189,239,191,189,239,191,189,96,47,239,191,189,206,131,239,191,189,239,191,189,124,78,31,239,191,189,239,191,189,122,71,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,50,239,191,189,239,191,189,1,239,191,189,123,116,239,191,189,125,239,191,189,125,239,191,189,239,191,189,239,191,189,124,239,191,189,84,58,239,191,189,19,10,124,239,191,189,16,113,38,239,191,189,105,38,239,191,189,96,239,191,189,239,191,189,239,191,189,239,191,189,41,102,45,68,83,15,239,191,189,84,239,191,189,239,191,189,72,214,187,239,191,189,80,73,239,191,189,49,239,191,189,239,191,189,19,239,191,189,98,239,191,189,10,239,191,189,239,191,189,100,239,191,189,70,51,68,82,239,191,189,39,239,191,189,117,4,31,40,239,191,189,63,40,80,0,106,239,191,189,64,239,191,189,239,191,189,2,239,191,189,239,191,189,22,124,239,191,189,239,191,189,4,89,96,83,73,2,239,191,189,118,239,191,189,239,191,189,33,239,191,189,239,191,189,239,191,189,204,141,22,239,191,189,104,18,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,67,114,84,60,20,239,191,189,19,239,191,189,239,191,189,239,191,189,199,169,239,191,189,38,239,191,189,239,191,189,239,191,189,21,30,239,191,189,9,121,239,191,189,98,239,191,189,239,191,189,52,239,191,189,239,191,189,100,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,48,34,112,239,191,189,239,191,189,239,191,189,217,137,6,239,191,189,108,239,191,189,66,102,53,225,166,149,239,191,189,239,191,189,239,191,189,126,239,191,189,60,66,86,68,12,239,191,189,39,27,6,110,104,123,102,78,105,239,191,189,91,48,239,191,189,237,156,146,29,239,191,189,104,239,191,189,239,191,189,239,191,189,22,239,191,189,239,191,189,239,191,189,49,52,104,64,93,239,191,189,239,191,189,222,170,102,70,239,191,189,239,191,189,206,147,60,14,87,239,191,189,217,144,84,239,191,189,37,100,239,191,189,108,23,47,5,22,239,191,189,115,239,191,189,53,25,1,70,239,191,189,99,1,15,239,191,189,44,239,191,189,24,125,239,191,189,239,191,189,7,239,191,189,69,27,33,220,138,66,219,129,96,215,174,239,191,189,80,239,191,189,102,34,239,191,189,121,59,239,191,189,90,37,215,129,97,125,79,76,94,239,191,189,38,116,239,191,189,125,91,88,239,191,189,89,239,191,189,239,191,189,107,123,2,41,96,78,239,191,189,48,239,191,189,91,56,118,127,63,61,31,67,239,191,189,122,13,239,191,189,35,197,177,57,239,191,189,239,191,189,74,13,123,63,239,191,189,124,92,239,191,189,35,239,191,189,32,19,239,191,189,30,239,191,189,3,98,239,191,189,239,191,189,239,191,189,63,59,20,6,222,129,239,191,189,239,191,189,88,60,120,38,239,191,189,10,239,191,189,239,191,189,239,191,189,239,191,189,3,239,191,189,95,239,191,189,239,191,189,127,102,108,239,191,189,239,191,189,31,99,1,68,239,191,189,14,239,191,189,117,97,104,239,191,189,239,191,189,239,191,189,239,191,189,53,239,191,189,107,239,191,189,56,239,191,189,35,105,34,239,191,189,239,191,189,239,191,189,64,127,239,191,189,119,20,239,191,189,239,191,189,56,239,191,189,119,239,191,189,239,191,189,119,215,170,107,239,191,189,36,83,97,239,191,189,20,96,239,191,189,239,191,189,214,156,239,191,189,239,191,189,239,191,189,239,191,189,82,10,239,191,189,239,191,189,121,239,191,189,239,191,189,83,239,191,189,239,191,189,77,14,239,191,189,23,239,191,189,30,97,75,239,191,189,239,191,189,239,191,189,239,191,189,122,7,43,31,0,124,62,91,239,191,189,60,222,153,239,191,189,239,191,189,239,191,189,8,49,124,239,191,189,209,153,200,139,5,239,191,189,110,80,239,191,189,58,239,191,189,68,40,224,180,143,239,191,189,239,191,189,90,239,191,189,109,20,94,239,191,189,17,47,36,239,191,189,239,191,189,89,88,26,59,35,44,4,239,191,189,123,37,124,239,191,189,43,239,191,189,32,55,239,191,189,239,191,189,239,191,189,239,191,189,38,27,102,214,141,64,239,191,189,59,24,122,239,191,189,125,239,191,189,92,93,239,191,189,9,4,239,191,189,239,191,189,239,191,189,46,124,239,191,189,92,65,239,191,189,61,119,26,121,107,239,191,189,239,191,189,62,239,191,189,68,239,191,189,239,191,189,112,200,153,1,79,239,191,189,239,191,189,239,191,189,41,61,239,191,189,239,191,189,5,43,72,239,191,189,239,191,189,239,191,189,48,239,191,189,46,239,191,189,239,191,189,96,92,18,57,239,191,189,31,239,191,189,82,91,33,66,239,191,189,67,45,45,222,177,115,100,239,191,189,239,191,189,44,239,191,189,101,239,191,189,239,191,189,81,9,75,125,239,191,189,65,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,113,63,9,77,78,239,191,189,239,191,189,239,191,189,68,5,239,191,189,239,191,189,25,126,239,191,189,239,191,189,239,191,189,239,191,189,51,239,191,189,239,191,189,239,191,189,9,239,191,189,239,191,189,6,239,191,189,61,1,28,75,239,191,189,58,239,191,189,63,51,91,239,191,189,239,191,189,239,191,189,55,239,191,189,60,127,239,191,189,77,50,239,191,189,88,119,239,191,189,45,109,93,64,239,191,189,54,59,102,71,239,191,189,82,239,191,189,40,239,191,189,51,239,191,189,39,63,88,111,75,66,239,191,189,94,8,123,239,191,189,59,239,191,189,239,191,189,239,191,189,239,191,189,79,30,30,221,177,239,191,189,239,191,189,31,75,64,239,191,189,239,191,189,239,191,189,19,239,191,189,94,239,191,189,10,239,191,189,239,191,189,8,239,191,189,239,191,189,239,191,189,239,191,189,55,62,239,191,189,239,191,189,239,191,189,114,239,191,189,108,56,217,154,21,239,191,189,118,239,191,189,91,79,0,1,239,191,189,121,39,103,239,191,189,239,191,189,239,191,189,239,191,189,31,239,191,189,239,191,189,51,74,239,191,189,121,71,81,31,127,239,191,189,14,120,239,191,189,58,43,72,39,239,191,189,5,239,191,189,239,191,189,239,191,189,239,191,189,29,239,191,189,16,239,191,189,239,191,189,33,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,10,103,239,191,189,239,191,189,239,191,189,113,9,47,239,191,189,51,239,191,189,0,126,45,239,191,189,239,191,189,239,191,189,53,25,64,239,191,189,78,75,44,88,104,113,105,239,191,189,239,191,189,37,88,239,191,189,239,191,189,47,239,191,189,124,96,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,119,239,191,189,239,191,189,239,191,189,79,239,191,189,86,114,239,191,189,69,239,191,189,27,239,191,189,110,239,191,189,0,239,191,189,50,0,14,78,15,239,191,189,239,191,189,239,191,189,24,70,239,191,189,239,191,189,239,191,189,63,79,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,25,113,42,239,191,189,239,191,189,239,191,189,3,115,239,191,189,239,191,189,239,191,189,2,239,191,189,239,191,189,86,239,191,189,239,191,189,41,117,6,239,191,189,123,115,15,239,191,189,22,239,191,189,239,191,189,109,239,191,189,233,155,189,56,239,191,189,239,191,189,239,191,189,92,239,191,189,99,239,191,189,239,191,189,43,59,84,239,191,189,239,191,189,239,191,189,80,239,191,189,93,239,191,189,30,239,191,189,239,191,189,26,222,166,11,83,6,35,239,191,189,87,68,91,116,239,191,189,41,73,239,191,189,17,125,31,80,56,239,191,189,55,35,239,191,189,239,191,189,28,239,191,189,93,61,239,191,189,25,239,191,189,239,191,189,239,191,189,126,239,191,189,88,53,239,191,189,8,70,239,191,189,88,239,191,189,53,81,38,239,191,189,239,191,189,75,82,239,191,189,77,239,191,189,94,239,191,189,239,191,189,21,239,191,189,233,142,150,25,86,65,239,191,189,239,191,189,111,203,173,239,191,189,72,239,191,189,71,239,191,189,223,139,239,191,189,118,239,191,189,239,191,189,105,239,191,189,27,239,191,189,239,191,189,91,239,191,189,103,67,239,191,189,239,191,189,122,239,191,189,239,191,189,1,86,239,191,189,124,239,191,189,239,191,189,71,239,191,189,10,99,6,212,159,239,191,189,239,191,189,85,21,239,191,189,45,39,239,191,189,37,239,191,189,239,191,189,19,239,191,189,69,117,239,191,189,239,191,189,239,191,189,65,239,191,189,239,191,189,53,21,239,191,189,63,18,34,95,239,191,189,239,191,189,239,191,189,38,239,191,189,15,112,238,148,168,218,130,239,191,189,69,48,239,191,189,239,191,189,239,191,189,239,191,189,1,29,108,99,56,239,191,189,239,191,189,239,191,189,239,191,189,63,27,239,191,189,239,191,189,11,239,191,189,42,109,92,239,191,189,87,239,191,189,213,134,9,87,239,191,189,33,239,191,189,5,92,85,239,191,189,42,32,65,36,84,92,239,191,189,239,191,189,37,239,191,189,239,191,189,120,239,191,189,76,118,239,191,189,27,239,191,189,92,239,191,189,76,4,44,239,191,189,98,12,69})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "xclientdev3",
                        container: "testcc7df4da71239455288caf55f02ba8ca4",
                        blob: "blob1",
                        body: body,
                        appendPosition: 0,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test000011 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\000011_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\000011_s.txt", Encoding.UTF8);

    public Test000011() : base(recordedRequest, recordedResponse, "xclientdev3")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{38,39,239,191,189,239,191,189,50,239,191,189,211,169,239,191,189,8,239,191,189,26,3,239,191,189,68,36,118,25,70,239,191,189,47,116,30,117,239,191,189,239,191,189,239,191,189,73,239,191,189,239,191,189,38,90,91,116,239,191,189,34,5,239,191,189,106,100,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,122,239,191,189,74,121,239,191,189,57,239,191,189,239,191,189,239,191,189,109,239,191,189,113,239,191,189,239,191,189,239,191,189,239,191,189,100,239,191,189,239,191,189,239,191,189,117,239,191,189,1,113,239,191,189,219,142,239,191,189,239,191,189,64,19,24,239,191,189,208,149,42,64,32,100,239,191,189,207,181,60,33,239,191,189,239,191,189,195,156,47,239,191,189,239,191,189,4,110,239,191,189,239,191,189,239,191,189,239,191,189,9,239,191,189,109,239,191,189,62,239,191,189,239,191,189,94,239,191,189,239,191,189,17,78,57,239,191,189,239,191,189,67,239,191,189,239,191,189,76,52,99,48,239,191,189,239,191,189,88,91,239,191,189,125,14,239,191,189,0,219,187,55,55,117,239,191,189,3,239,191,189,2,239,191,189,239,191,189,3,32,239,191,189,77,239,191,189,73,35,239,191,189,239,191,189,242,168,165,143,239,191,189,239,191,189,239,191,189,102,239,191,189,239,191,189,10,80,239,191,189,239,191,189,53,239,191,189,2,95,42,76,239,191,189,76,73,239,191,189,239,191,189,45,239,191,189,19,10,102,239,191,189,90,77,239,191,189,14,50,21,239,191,189,95,126,80,239,191,189,239,191,189,43,239,191,189,115,7,102,124,239,191,189,239,191,189,239,191,189,239,191,189,116,10,239,191,189,95,36,239,191,189,100,239,191,189,91,124,69,239,191,189,2,13,239,191,189,3,125,91,0,239,191,189,239,191,189,19,239,191,189,29,239,191,189,45,38,45,239,191,189,80,116,239,191,189,97,239,191,189,239,191,189,104,239,191,189,239,191,189,25,239,191,189,65,48,239,191,189,239,191,189,112,239,191,189,239,191,189,121,60,239,191,189,239,191,189,76,119,239,191,189,7,65,77,194,132,54,239,191,189,10,8,239,191,189,79,41,39,67,48,239,191,189,239,191,189,75,239,191,189,64,239,191,189,109,56,222,188,44,114,29,20,221,190,20,97,239,191,189,96,239,191,189,239,191,189,239,191,189,47,239,191,189,55,40,71,239,191,189,71,239,191,189,119,72,239,191,189,239,191,189,55,37,239,191,189,9,110,6,88,239,191,189,239,191,189,239,191,189,42,239,191,189,58,239,191,189,57,239,191,189,239,191,189,27,239,191,189,239,191,189,239,191,189,68,239,191,189,54,117,89,239,191,189,239,191,189,101,239,191,189,32,90,42,239,191,189,199,136,52,239,191,189,239,191,189,30,239,191,189,65,239,191,189,104,110,127,239,191,189,239,191,189,239,191,189,239,191,189,66,239,191,189,10,239,191,189,239,191,189,84,24,56,239,191,189,239,191,189,239,191,189,11,239,191,189,62,239,191,189,223,157,112,27,22,239,191,189,239,191,189,68,239,191,189,239,191,189,88,70,239,191,189,239,191,189,239,191,189,239,191,189,103,43,239,191,189,239,191,189,239,191,189,80,117,61,114,112,239,191,189,93,239,191,189,86,210,177,239,191,189,239,191,189,239,191,189,239,191,189,40,121,239,191,189,15,239,191,189,61,121,15,50,14,239,191,189,112,239,191,189,61,96,239,191,189,239,191,189,32,239,191,189,39,50,239,191,189,239,191,189,239,191,189,100,108,58,210,167,239,191,189,239,191,189,57,20,239,191,189,237,153,144,40,96,239,191,189,102,10,99,239,191,189,194,154,239,191,189,239,191,189,239,191,189,42,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,85,28,239,191,189,63,60,239,191,189,239,191,189,239,191,189,54,239,191,189,239,191,189,114,70,96,109,239,191,189,239,191,189,239,191,189,39,69,239,191,189,47,239,191,189,239,191,189,68,239,191,189,239,191,189,91,87,59,90,239,191,189,29,239,191,189,58,11,239,191,189,239,191,189,41,127,239,191,189,49,83,59,239,191,189,96,239,191,189,239,191,189,69,239,191,189,206,139,37,37,123,239,191,189,239,191,189,92,239,191,189,45,87,239,191,189,44,3,85,239,191,189,37,98,50,34,239,191,189,239,191,189,106,239,191,189,239,191,189,102,239,191,189,239,191,189,52,239,191,189,239,191,189,239,191,189,239,191,189,97,211,146,239,191,189,20,239,191,189,239,191,189,239,191,189,239,191,189,218,172,239,191,189,88,15,239,191,189,45,20,58,91,239,191,189,34,96,38,32,239,191,189,74,20,33,58,40,31,239,191,189,239,191,189,4,239,191,189,47,239,191,189,15,17,209,163,239,191,189,239,191,189,205,189,239,191,189,239,191,189,86,239,191,189,31,75,66,239,191,189,239,191,189,0,239,191,189,113,239,191,189,239,191,189,123,109,96,239,191,189,239,191,189,28,18,83,69,239,191,189,106,4,40,239,191,189,239,191,189,88,99,239,191,189,198,190,53,239,191,189,8,239,191,189,78,239,191,189,48,201,130,81,24,70,86,54,38,38,18,239,191,189,239,191,189,47,17,43,41,27,34,239,191,189,10,56,107,85,14,32,3,239,191,189,55,239,191,189,239,191,189,239,191,189,239,191,189,70,34,123,62,24,239,191,189,239,191,189,50,239,191,189,116,111,69,239,191,189,45,239,191,189,239,191,189,9,125,239,191,189,239,191,189,239,191,189,239,191,189,94,45,67,239,191,189,67,239,191,189,239,191,189,108,239,191,189,42,239,191,189,97,12,239,191,189,239,191,189,16,46,64,239,191,189,79,239,191,189,239,191,189,15,75,239,191,189,108,15,46,61,239,191,189,55,56,239,191,189,42,29,16,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,8,239,191,189,27,239,191,189,204,138,23,28,108,239,191,189,112,16,112,52,98,30,239,191,189,4,215,138,239,191,189,47,239,191,189,239,191,189,239,191,189,239,191,189,120,239,191,189,59,57,239,191,189,236,147,187,23,239,191,189,92,38,239,191,189,239,191,189,17,239,191,189,239,191,189,239,191,189,39,21,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,14,239,191,189,239,191,189,8,39,85,239,191,189,64,49,239,191,189,239,191,189,35,239,191,189,121,74,42,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,94,239,191,189,44,114,239,191,189,239,191,189,239,191,189,93,72,239,191,189,221,168,239,191,189,14,239,191,189,7,54,56,90,209,158,106,239,191,189,3,56,124,111,239,191,189,66,19,239,191,189,125,44,122,28,239,191,189,239,191,189,42,239,191,189,239,191,189,86,239,191,189,61,239,191,189,70,52,239,191,189,60,93,239,191,189,239,191,189,239,191,189,55,239,191,189,239,191,189,239,191,189,51,110,239,191,189,111,78,33,26,53,9,96,123,104,239,191,189,239,191,189,36,11,124,121,122,239,191,189,45,6,239,191,189,3,239,191,189,51,106,239,191,189,107,19,69,63,239,191,189,239,191,189,239,191,189,116,239,191,189,76,239,191,189,53,239,191,189,7,239,191,189,239,191,189,46,74,239,191,189,111,239,191,189,65,239,191,189,114,239,191,189,84,44,239,191,189,239,191,189,239,191,189,26,239,191,189,107,239,191,189,239,191,189,26,59,239,191,189,86,9,239,191,189,110,47,239,191,189,69,17,37,29,239,191,189,73,239,191,189,239,191,189,239,191,189,62,239,191,189,210,136,239,191,189,239,191,189,70,239,191,189,239,191,189,19,239,191,189,119,126,78,61,239,191,189,239,191,189,125,239,191,189,239,191,189,239,191,189,44,18,239,191,189,45,239,191,189,46,15,239,191,189,63,239,191,189,48,239,191,189,44,239,191,189,35,239,191,189,111,239,191,189,15,111,239,191,189,91,107,112,239,191,189,239,191,189,239,191,189,41,11,239,191,189,55,239,191,189,92,126,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,24,239,191,189,239,191,189,239,191,189,239,191,189,70,239,191,189,33,68,239,191,189,57,14,239,191,189,239,191,189,18,239,191,189,209,166,100,102,33,70,239,191,189,239,191,189,115,239,191,189,58,123,239,191,189,85,99,239,191,189,239,191,189,8,239,191,189,239,191,189,0,239,191,189,120,42,33,239,191,189,239,191,189,90,209,189,239,191,189,18,73,239,191,189,239,191,189,25,77,57,239,191,189,209,164,28,96,89,11,42,114,239,191,189,107,89,62,239,191,189,239,191,189,46,239,191,189,74,46,58,69,127,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,39,50,5,239,191,189,74,239,191,189,239,191,189,73,37,63,239,191,189,39,31,31,239,191,189,46,239,191,189,239,191,189,119,127,19,38,27,212,135,239,191,189,19,239,191,189,63,46,24,31,239,191,189,97,239,191,189,239,191,189,109,106,33,200,167,67,239,191,189,239,191,189,239,191,189,35,15,26,78,80,238,157,132,55,239,191,189,0,22,49,239,191,189,95,126,239,191,189,10,239,191,189,39,239,191,189,125,239,191,189,59,239,191,189,239,191,189,74,205,175,239,191,189,239,191,189,96,44,239,191,189,99,239,191,189,239,191,189,239,191,189,239,191,189,64,123,239,191,189,114,124,239,191,189,239,191,189,59,108,239,191,189,73,4,57,239,191,189,239,191,189,42,239,191,189,81,239,191,189,80,239,191,189,239,191,189,239,191,189,239,191,189,95,21,239,191,189,239,191,189,76,239,191,189,239,191,189,239,191,189,239,191,189,28,239,191,189,239,191,189,42,10,65,88,29,239,191,189,239,191,189,11,101,211,150,239,191,189,101,239,191,189,239,191,189,239,191,189,25,85,95,239,191,189,239,191,189,239,191,189,19,103,66,239,191,189,239,191,189,239,191,189,60,239,191,189,7,29,23,27,0,239,191,189,16,239,191,189,50,9,239,191,189,239,191,189,111,239,191,189,127,14,239,191,189,239,191,189,239,191,189,239,191,189,107,239,191,189,239,191,189,26,1,100,239,191,189,239,191,189,21,38,239,191,189,10,207,161,239,191,189,120,122,73,239,191,189,35,120,239,191,189,34,85,239,191,189,239,191,189,86,239,191,189,239,191,189,52,113,91,239,191,189,65,88,95,96,239,191,189,26,239,191,189,239,191,189,54,114,12,113,239,191,189,239,191,189,206,191,6,239,191,189,59,218,184,239,191,189,218,133,103,67,27,14,112,239,191,189,239,191,189,59,18,239,191,189,72,109,24,126,47,28,127,65,31,21,239,191,189,28,239,191,189,239,191,189,239,191,189,54,239,191,189,63,239,191,189,126,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,51,68,239,191,189,88,54,239,191,189,103,239,191,189,82,239,191,189,21,11,239,191,189,56,64,239,191,189,111,239,191,189,38,42,239,191,189,239,191,189,16,63,125,239,191,189,239,191,189,239,191,189,201,146,31,239,191,189,48,239,191,189,76,239,191,189,239,191,189,239,191,189,239,191,189,116,239,191,189,1,117,239,191,189,43,239,191,189,6,127,239,191,189,107,117,239,191,189,239,191,189,6,239,191,189,52,82,239,191,189,123,212,153,239,191,189,239,191,189,239,191,189,80,239,191,189,48,239,191,189,67,44,239,191,189,213,178,239,191,189,239,191,189,51,29,239,191,189,82,239,191,189,239,191,189,79,5,39,239,191,189,50,92,239,191,189,239,191,189,239,191,189,59,239,191,189,50,239,191,189,239,191,189,68,239,191,189,37,59,81,239,191,189,26,59,239,191,189,239,191,189,239,191,189,239,191,189,50,239,191,189,87,22,239,191,189,239,191,189,239,191,189,8,74,239,191,189,239,191,189,35,29,125,239,191,189,42,122,239,191,189,207,162,18,239,191,189,64,125,239,191,189,119,1,103,239,191,189,19,110,109,9,82,41,6,106,239,191,189,239,191,189,89,239,191,189,239,191,189,239,191,189,239,191,189,29,2,29,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,206,128,64,239,191,189,31,40,239,191,189,26,87,55,71,42,26,239,191,189,83,239,191,189,239,191,189,239,191,189,86,117,239,191,189,122,13,239,191,189,96,239,191,189,89,45,125,239,191,189,81,201,131,11,239,191,189,239,191,189,197,144,239,191,189,114,209,149,64,109,70,239,191,189,239,191,189,81,127,70,48,239,191,189,78,116,11,83,114,239,191,189,121,42,239,191,189,89,239,191,189,239,191,189,239,191,189,126,239,191,189,14,71,239,191,189,239,191,189,47,53,239,191,189,92,58,239,191,189,108,109,13,8,239,191,189,55,239,191,189,87,123,15,239,191,189,48,54,56,22,104,239,191,189,119,239,191,189,239,191,189,239,191,189,239,191,189,76,239,191,189,9,239,191,189,105,0,239,191,189,106,208,175,25,239,191,189,33,12,29,198,171,101,5,239,191,189,3,239,191,189,14,23,115,239,191,189,24,239,191,189,63,43,99,239,191,189,25,239,191,189,32,51,239,191,189,239,191,189,205,143,239,191,189,16,62,80,22,100,23,10,74,239,191,189,204,147,239,191,189,239,191,189,196,181,239,191,189,239,191,189,96,239,191,189,239,191,189,239,191,189,43,239,191,189,75,239,191,189,239,191,189,124,239,191,189,239,191,189,239,191,189,210,152,117,239,191,189,239,191,189,88,239,191,189,1,15,239,191,189,13,239,191,189,96,95,239,191,189,239,191,189,32,239,191,189,107,104,12,120,8,239,191,189,239,191,189,239,191,189,4,239,191,189,239,191,189,239,191,189,31,96,22,239,191,189,239,191,189,47,239,191,189,239,191,189,92,13,239,191,189,81,55,239,191,189,115,239,191,189,69,123,239,191,189,239,191,189,239,191,189,127,239,191,189,239,191,189,89,239,191,189,239,191,189,93,14,239,191,189,239,191,189,117,101,239,191,189,239,191,189,33,74,101,213,186,34,14,15,90,27,39,239,191,189,239,191,189,41,24,84,239,191,189,239,191,189,17,239,191,189,239,191,189,239,191,189,91,239,191,189,107,98,239,191,189,194,156,84,123,239,191,189,69,239,191,189,81,239,191,189,223,166,239,191,189,119,239,191,189,112,38,239,191,189,50,239,191,189,0,52,239,191,189,107,47,239,191,189,83,239,191,189,79,66,239,191,189,239,191,189,106,87,239,191,189,75,114,6,239,191,189,59,239,191,189,239,191,189,215,151,116,239,191,189,6,239,191,189,111,46,239,191,189,239,191,189,109,239,191,189,97,107,239,191,189,49,36,239,191,189,80,239,191,189,15,239,191,189,26,59,239,191,189,239,191,189,67,239,191,189,31,239,191,189,239,191,189,52,30,93,94,239,191,189,76,239,191,189,239,191,189,239,191,189,33,239,191,189,51,87,239,191,189,239,191,189,21,126,64,226,174,163,59,70,239,191,189,5,89,239,191,189,121,239,191,189,44,48,239,191,189,239,191,189,119,119,67,14,110,58,239,191,189,112,239,191,189,239,191,189,122,239,191,189,94,239,191,189,125,239,191,189,239,191,189,196,189,61,80,82,239,191,189,216,148,88,239,191,189,239,191,189,9,20,89,239,191,189,239,191,189,118,239,191,189,70,239,191,189,7,16,6,10,61,239,191,189,112,239,191,189,67,239,191,189,239,191,189,41,239,191,189,239,191,189,103,114,91,108,36,126,107,121,22,239,191,189,50,103,239,191,189,112,239,191,189,239,191,189,239,191,189,239,191,189,54,239,191,189,216,180,239,191,189,50,19,239,191,189,239,191,189,11,81,239,191,189,8,123,39,78,239,191,189,126,239,191,189,10,239,191,189,239,191,189,70,239,191,189,239,191,189,105,239,191,189,239,191,189,239,191,189,239,191,189,66,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,41,89,239,191,189,239,191,189,95,40,101,239,191,189,239,191,189,63,123,127,10,239,191,189,239,191,189,40,110,239,191,189,74,239,191,189,76,90,60,239,191,189,239,191,189,201,161,239,191,189,86,239,191,189,43,96,62,239,191,189,108,239,191,189,35,239,191,189,239,191,189,101,239,191,189,239,191,189,32,239,191,189,127,239,191,189,56,239,191,189,225,137,132,93,239,191,189,239,191,189,111,239,191,189,28,5,108,239,191,189,239,191,189,115,62,46,20,26,65,72,239,191,189,44,4,239,191,189,239,191,189,239,191,189,38,119,57,239,191,189,17,8,239,191,189,239,191,189,16,239,191,189,3,205,189,69,82,239,191,189,239,191,189,30,103,81,239,191,189,32,239,191,189,239,191,189,100,63,239,191,189,32,239,191,189,239,191,189,234,167,189,239,191,189,239,191,189,239,191,189,117,239,191,189,99,5,239,191,189,99,113,43,70,93,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,51,101,7,5,239,191,189,71,36,239,191,189,201,161,239,191,189,91,71,25,38,0,114,91,6,31,42,4,75,71,239,191,189,36,239,191,189,58,7,67,239,191,189,43,30,239,191,189,239,191,189,65,239,191,189,239,191,189,22,78,80,70,239,191,189,99,239,191,189,8,42,17,32,92,239,191,189,239,191,189,239,191,189,119,239,191,189,46,26,239,191,189,71,239,191,189,239,191,189,233,165,134,239,191,189,239,191,189,60,239,191,189,98,239,191,189,74,239,191,189,68,239,191,189,239,191,189,239,191,189,106,239,191,189,127,239,191,189,239,191,189,239,191,189,26,239,191,189,239,191,189,94,59,239,191,189,239,191,189,39,239,191,189,239,191,189,90,239,191,189,103,239,191,189,19,239,191,189,36,203,128,239,191,189,60,18,239,191,189,86,55,239,191,189,239,191,189,239,191,189,50,64,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,74,103,239,191,189,239,191,189,217,189,84,30,239,191,189,239,191,189,104,66,87,44,90,239,191,189,121,5,222,151,239,191,189,8,4,239,191,189,9,239,191,189,239,191,189,239,191,189,239,191,189,0,239,191,189,239,191,189,70,113,239,191,189,53,239,191,189,239,191,189,126,239,191,189,239,191,189,108,76,64,239,191,189,108,5,239,191,189,71,239,191,189,239,191,189,98,239,191,189,65,99,239,191,189,239,191,189,21,200,159,42,80,239,191,189,208,155,16,239,191,189,239,191,189,239,191,189,239,191,189,47,95,239,191,189,13,239,191,189,239,191,189,239,191,189,114,87,239,191,189,239,191,189,74,81,56,239,191,189,67,78,47,88,239,191,189,239,191,189,239,191,189,239,191,189,31,239,191,189,28,97,111,239,191,189,92,74,71,244,135,152,146,239,191,189,235,166,170,239,191,189,75,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,42,87,239,191,189,239,191,189,69,21,239,191,189,111,239,191,189,239,191,189,112,126,86,79,119,239,191,189,239,191,189,239,191,189,86,202,160,19,239,191,189,99,239,191,189,239,191,189,198,176,2,239,191,189,79,239,191,189,30,239,191,189,69,239,191,189,239,191,189,239,191,189,1,239,191,189,239,191,189,41,239,191,189,239,191,189,122,39,84,239,191,189,239,191,189,239,191,189,51,72,239,191,189,52,17,22,239,191,189,93,3,239,191,189,79,20,109,239,191,189,106,239,191,189,96,239,191,189,10,239,191,189,96,239,191,189,119,7,119,41,239,191,189,239,191,189,97,89,61,239,191,189,63,239,191,189,7,50,239,191,189,46,5,60,239,191,189,105,239,191,189,239,191,189,239,191,189,31,100,239,191,189,198,173,126,239,191,189,97,76,239,191,189,18,44,239,191,189,239,191,189,116,239,191,189,62,17,55,45,32,99,239,191,189,118,8,239,191,189,239,191,189,36,44,28,239,191,189,88,239,191,189,10,239,191,189,34,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,94,69,32,239,191,189,3,65,82,239,191,189,24,43,126,118,239,191,189,239,191,189,0,69,80,239,191,189,239,191,189,47,61,31,239,191,189,42,239,191,189,239,191,189,239,191,189,44,81,8,239,191,189,82,90,79,239,191,189,30,96,239,191,189,5,239,191,189,124,92,20,239,191,189,105,239,191,189,44,11,239,191,189,239,191,189,73,6,27,239,191,189,239,191,189,62,239,191,189,239,191,189,239,191,189,35,95,38,117,16,239,191,189,43,28,63,61,239,191,189,228,151,159,8,239,191,189,239,191,189,10,239,191,189,239,191,189,239,191,189,215,165,116,239,191,189,239,191,189,54,239,191,189,239,191,189,239,191,189,126,106,239,191,189,239,191,189,59,86,239,191,189,4,89,62,239,191,189,239,191,189,205,164,239,191,189,239,191,189,102,19,239,191,189,239,191,189,52,239,191,189,52,239,191,189,112,239,191,189,239,191,189,1,81,11,239,191,189,112,239,191,189,239,191,189,99,121,201,189,239,191,189,92,239,191,189,6,90,239,191,189,44,239,191,189,9,1,123,12,38,35,239,191,189,239,191,189,78,239,191,189,54,239,191,189,114,239,191,189,239,191,189,239,191,189,77,73,85,93,19,65,127,239,191,189,69,239,191,189,239,191,189,46,239,191,189,239,191,189,204,169,126,127,239,191,189,69,239,191,189,208,189,239,191,189,107,239,191,189,66,239,191,189,75,26,239,191,189,22,83,12,57,239,191,189,104,239,191,189,239,191,189,239,191,189,36,125,239,191,189,20,45,32,239,191,189,239,191,189,10,239,191,189,52,86,94,109,103,121,239,191,189,239,191,189,239,191,189,110,60,239,191,189,92,42,22,239,191,189,218,134,119,239,191,189,65,239,191,189,239,191,189,239,191,189,33,103,239,191,189,114,75,212,189,239,191,189,239,191,189,47,239,191,189,239,191,189,239,191,189,63,239,191,189,78,81,239,191,189,46,32,239,191,189,239,191,189,127,69,119,14,21,239,191,189,239,191,189,239,191,189,239,191,189,76,0,239,191,189,239,191,189,76,92,239,191,189,127,12,239,191,189,68,239,191,189,239,191,189,239,191,189,225,182,181,239,191,189,58,109,239,191,189,239,191,189,71,62,239,191,189,239,191,189,5,93,239,191,189,239,191,189,239,191,189,58,239,191,189,228,153,164,57,80,93,239,191,189,63,33,71,111,22,239,191,189,80,239,191,189,87,95,239,191,189,112,42,6,89,239,191,189,73,67,90,86,60,239,191,189,57,239,191,189,10,78,16,91,60,125,100,57,73,239,191,189,239,191,189,239,191,189,239,191,189,207,148,103,239,191,189,239,191,189,87,115,13,239,191,189,109,239,191,189,63,239,191,189,239,191,189,13,3,239,191,189,123,110,239,191,189,107,101,239,191,189,122,239,191,189,89,239,191,189,239,191,189,239,191,189,39,117,121,239,191,189,239,191,189,121,239,191,189,239,191,189,117,120,239,191,189,239,191,189,64,239,191,189,50,27,81,239,191,189,86,53,239,191,189,57,30,239,191,189,105,239,191,189,239,191,189,110,125,120,87,239,191,189,239,191,189,100,239,191,189,49,118,94,17,239,191,189,6,239,191,189,35,239,191,189,36,239,191,189,71,239,191,189,7,77,239,191,189,239,191,189,121,60,91,239,191,189,37,15,239,191,189,5,239,191,189,7,239,191,189,77,118,239,191,189,239,191,189,239,191,189,100,31,22,239,191,189,36,239,191,189,50,40,239,191,189,239,191,189,69,239,191,189,239,191,189,102,48,239,191,189,239,191,189,40,239,191,189,8,21,11,102,124,12,24,239,191,189,239,191,189,239,191,189,38,239,191,189,239,191,189,121,117,239,191,189,54,239,191,189,91,239,191,189,9,51,239,191,189,47,239,191,189,239,191,189,95,239,191,189,239,191,189,239,191,189,122,239,191,189,117,44,239,191,189,79,19,239,191,189,124,24,239,191,189,50,45,239,191,189,208,189,239,191,189,43,112,126,239,191,189,39,123,98,239,191,189,239,191,189,56,220,155,239,191,189,239,191,189,29,95,47,91,239,191,189,17,209,179,37,212,134,48,67,43,239,191,189,6,239,191,189,94,12,19,51,239,191,189,34,239,191,189,82,36,19,122,239,191,189,22,55,20,239,191,189,108,125,239,191,189,239,191,189,239,191,189,74,239,191,189,23,120,74,239,191,189,115,239,191,189,55,54,239,191,189,239,191,189,75,125,239,191,189,109,120,239,191,189,60,93,8,98,239,191,189,87,239,191,189,15,239,191,189,113,52,215,174,3,8,89,20,96,239,191,189,239,191,189,64,120,94,91,239,191,189,220,158,34,203,185,239,191,189,239,191,189,239,191,189,235,150,159,239,191,189,232,174,191,239,191,189,59,12,1,239,191,189,95,239,191,189,239,191,189,239,191,189,239,191,189,105,46,112,239,191,189,80,239,191,189,239,191,189,239,191,189,117,33,239,191,189,239,191,189,68,239,191,189,239,191,189,239,191,189,239,191,189,108,104,239,191,189,44,239,191,189,60,4,5,108,93,239,191,189,239,191,189,84,239,191,189,92,239,191,189,80,87,29,54,239,191,189,210,160,239,191,189,114,239,191,189,7,23,239,191,189,40,20,28,123,239,191,189,107,93,35,60,124,52,239,191,189,75,88,239,191,189,19,239,191,189,239,191,189,239,191,189,66,106,239,191,189,239,191,189,239,191,189,239,191,189,40,239,191,189,239,191,189,239,191,189,36,53,239,191,189,15,67,72,124,17,239,191,189,91,239,191,189,239,191,189,19,239,191,189,239,191,189,125,79,122,239,191,189,202,138,239,191,189,21,213,140,239,191,189,239,191,189,239,191,189,205,157,209,149,50,239,191,189,87,239,191,189,239,191,189,60,20,89,239,191,189,239,191,189,61,239,191,189,67,239,191,189,239,191,189,239,191,189,239,191,189,48,239,191,189,32,239,191,189,38,47,100,32,23,239,191,189,239,191,189,239,191,189,239,191,189,67,239,191,189,105,239,191,189,239,191,189,239,191,189,239,191,189,19,101,239,191,189,50,239,191,189,239,191,189,126,239,191,189,239,191,189,19,239,191,189,239,191,189,239,191,189,196,176,239,191,189,11,83,239,191,189,222,180,239,191,189,100,239,191,189,239,191,189,239,191,189,75,12,239,191,189,48,239,191,189,52,239,191,189,127,197,186,37,239,191,189,124,224,162,134,239,191,189,239,191,189,0,239,191,189,45,217,158,119,62,239,191,189,11,239,191,189,90,0,18,239,191,189,30,55,113,239,191,189,239,191,189,36,239,191,189,66,29,239,191,189,239,191,189,239,191,189,23,239,191,189,18,60,46,13,201,145,239,191,189,239,191,189,29,51,59,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,107,239,191,189,18,114,93,239,191,189,48,239,191,189,4,118,109,239,191,189,239,191,189,46,239,191,189,239,191,189,96,103,126,239,191,189,239,191,189,76,55,239,191,189,239,191,189,48,26,62,124,239,191,189,115,239,154,154,239,191,189,61,239,191,189,239,191,189,121,105,12,95,8,82,36,18,101,239,191,189,80,67,88,73,36,217,180,30,239,191,189,239,191,189,239,191,189,44,239,191,189,239,191,189,82,22,3,126,19,238,155,165,100,239,191,189,239,191,189,21,239,191,189,110,67,239,191,189,93,239,191,189,239,191,189,43,239,191,189,56,239,191,189,41,239,191,189,239,191,189,239,191,189,116,239,191,189,2,239,191,189,76,239,191,189,26,13,239,191,189,78,239,191,189,239,191,189,119,83,239,191,189,223,157,92,15,22,69,218,156,52,2,97,99,3,26,239,191,189,217,179,83,8,38,239,191,189,97,199,160,58,239,191,189,97,81,239,191,189,239,191,189,239,191,189,83,239,191,189,66,88,239,191,189,205,186,239,191,189,239,191,189,239,191,189,30,239,191,189,239,191,189,239,191,189,118,22,239,191,189,112,116,239,191,189,111,45,239,191,189,125,214,187,239,191,189,110,239,191,189,5,124,81,14,239,191,189,239,191,189,239,191,189,239,191,189,12,239,191,189,239,191,189,105,239,191,189,203,147,213,181,195,145,110,239,191,189,33,239,191,189,5,228,170,130,239,191,189,32,18,239,191,189,58,239,191,189,17,24,81,239,191,189,239,191,189,239,191,189,85,49,239,191,189,104,239,191,189,1,6,239,191,189,239,191,189,239,191,189,1,5,16,239,191,189,117,239,191,189,239,191,189,75,42,239,191,189,62,239,191,189,104,239,191,189,18,110,239,191,189,122,239,191,189,66,53,239,191,189,239,191,189,59,61,239,191,189,239,191,189,239,191,189,4,239,191,189,9,239,191,189,239,191,189,31,13,239,191,189,92,69,106,52,239,191,189,84,239,191,189,8,23,74,125,111,239,191,189,88,38,65,239,191,189,239,191,189,44,55,239,191,189,56,239,191,189,43,239,191,189,70,76,216,176,239,191,189,72,239,191,189,61,17,104,15,126,239,191,189,239,191,189,38,239,191,189,36,239,191,189,124,73,239,191,189,114,239,191,189,239,191,189,76,72,84,239,191,189,239,191,189,12,239,191,189,9,239,191,189,13,102,48,102,83,52,239,191,189,239,191,189,239,191,189,239,191,189,23,239,191,189,239,191,189,239,191,189,6,103,126,69,48,239,191,189,4,239,191,189,239,191,189,239,191,189,100,239,191,189,239,191,189,11,239,191,189,87,92,81,116,239,191,189,210,191,239,191,189,239,191,189,239,191,189,71,239,191,189,61,239,191,189,203,137,73,105,239,191,189,54,60,198,142,40,239,191,189,57,239,191,189,58,2,239,191,189,64,120,8,40,239,191,189,239,191,189,79,5,23,70,239,191,189,239,191,189,239,191,189,239,191,189,27,239,191,189,239,191,189,47,42,239,191,189,100,239,191,189,48,105,27,239,191,189,239,191,189,76,78,239,191,189,31,102,239,191,189,239,191,189,7,77,52,239,191,189,3,5,58,67,81,239,191,189,111,123,32,239,191,189,12,239,191,189,86,113,15,39,64,239,191,189,71,239,191,189,13,239,191,189,2,2,239,191,189,126,38,96,6,239,191,189,239,191,189,205,146,26,43,37,239,191,189,32,58,239,191,189,239,191,189,239,191,189,116,29,63,107,67,239,191,189,86,239,191,189,239,191,189,82,6,239,191,189,239,191,189,5,2,55,239,191,189,239,191,189,110,15,116,116,239,191,189,62,80,59,69,239,191,189,31,122,239,191,189,239,191,189,109,239,191,189,239,191,189,239,191,189,74,58,120,9,115,239,191,189,239,191,189,239,191,189,95,38,34,105,239,191,189,102,45,239,191,189,43,239,191,189,89,1,27,8,105,108,11,239,191,189,239,191,189,90,239,191,189,78,123,30,116,66,239,191,189,239,191,189,5,1,239,191,189,54,119,82,239,191,189,30,239,191,189,29,239,191,189,19,125,239,191,189,65,239,191,189,239,191,189,239,191,189,47,50,14,239,191,189,103,88,239,191,189,108,13,17,239,191,189,4,239,191,189,81,239,191,189,55,239,191,189,42,124,34,239,191,189,239,191,189,43,74,239,191,189,239,191,189,13,239,191,189,239,191,189,53,12,239,191,189,18,102,239,191,189,105,239,191,189,42,127,10,68,239,191,189,116,239,191,189,40,58,70,70,239,191,189,22,13,104,54,102,6,239,191,189,239,191,189,121,74,239,191,189,239,191,189,4,239,191,189,113,65,62,102,80,123,239,191,189,82,239,191,189,239,191,189,239,191,189,96,239,191,189,239,191,189,239,191,189,239,191,189,125,239,191,189,95,239,191,189,239,191,189,41,124,239,191,189,96,35,113,32,223,140,122,107,198,187,81,239,191,189,239,191,189,239,191,189,239,191,189,90,239,191,189,239,191,189,197,182,239,191,189,239,191,189,21,239,191,189,120,117,239,191,189,121,14,239,191,189,72,196,147,6,44,9,112,115,22,5,24,239,191,189,27,239,191,189,239,191,189,214,158,239,191,189,4,111,42,99,239,191,189,200,185,54,91,109,102,23,239,191,189,239,191,189,239,191,189,9,34,105,239,191,189,239,191,189,81,21,70,239,191,189,239,191,189,239,191,189,13,209,133})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "xclientdev3",
                        container: "testcc7df4da71239455288caf55f02ba8ca4",
                        blob: "blob1",
                        body: body,
                        appendPosition: 0,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test000009 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\000009_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\000009_s.txt", Encoding.UTF8);

    public Test000009() : base(recordedRequest, recordedResponse, "xclientdev3")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{38,39,239,191,189,239,191,189,50,239,191,189,211,169,239,191,189,8,239,191,189,26,3,239,191,189,68,36,118,25,70,239,191,189,47,116,30,117,239,191,189,239,191,189,239,191,189,73,239,191,189,239,191,189,38,90,91,116,239,191,189,34,5,239,191,189,106,100,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,122,239,191,189,74,121,239,191,189,57,239,191,189,239,191,189,239,191,189,109,239,191,189,113,239,191,189,239,191,189,239,191,189,239,191,189,100,239,191,189,239,191,189,239,191,189,117,239,191,189,1,113,239,191,189,219,142,239,191,189,239,191,189,64,19,24,239,191,189,208,149,42,64,32,100,239,191,189,207,181,60,33,239,191,189,239,191,189,195,156,47,239,191,189,239,191,189,4,110,239,191,189,239,191,189,239,191,189,239,191,189,9,239,191,189,109,239,191,189,62,239,191,189,239,191,189,94,239,191,189,239,191,189,17,78,57,239,191,189,239,191,189,67,239,191,189,239,191,189,76,52,99,48,239,191,189,239,191,189,88,91,239,191,189,125,14,239,191,189,0,219,187,55,55,117,239,191,189,3,239,191,189,2,239,191,189,239,191,189,3,32,239,191,189,77,239,191,189,73,35,239,191,189,239,191,189,242,168,165,143,239,191,189,239,191,189,239,191,189,102,239,191,189,239,191,189,10,80,239,191,189,239,191,189,53,239,191,189,2,95,42,76,239,191,189,76,73,239,191,189,239,191,189,45,239,191,189,19,10,102,239,191,189,90,77,239,191,189,14,50,21,239,191,189,95,126,80,239,191,189,239,191,189,43,239,191,189,115,7,102,124,239,191,189,239,191,189,239,191,189,239,191,189,116,10,239,191,189,95,36,239,191,189,100,239,191,189,91,124,69,239,191,189,2,13,239,191,189,3,125,91,0,239,191,189,239,191,189,19,239,191,189,29,239,191,189,45,38,45,239,191,189,80,116,239,191,189,97,239,191,189,239,191,189,104,239,191,189,239,191,189,25,239,191,189,65,48,239,191,189,239,191,189,112,239,191,189,239,191,189,121,60,239,191,189,239,191,189,76,119,239,191,189,7,65,77,194,132,54,239,191,189,10,8,239,191,189,79,41,39,67,48,239,191,189,239,191,189,75,239,191,189,64,239,191,189,109,56,222,188,44,114,29,20,221,190,20,97,239,191,189,96,239,191,189,239,191,189,239,191,189,47,239,191,189,55,40,71,239,191,189,71,239,191,189,119,72,239,191,189,239,191,189,55,37,239,191,189,9,110,6,88,239,191,189,239,191,189,239,191,189,42,239,191,189,58,239,191,189,57,239,191,189,239,191,189,27,239,191,189,239,191,189,239,191,189,68,239,191,189,54,117,89,239,191,189,239,191,189,101,239,191,189,32,90,42,239,191,189,199,136,52,239,191,189,239,191,189,30,239,191,189,65,239,191,189,104,110,127,239,191,189,239,191,189,239,191,189,239,191,189,66,239,191,189,10,239,191,189,239,191,189,84,24,56,239,191,189,239,191,189,239,191,189,11,239,191,189,62,239,191,189,223,157,112,27,22,239,191,189,239,191,189,68,239,191,189,239,191,189,88,70,239,191,189,239,191,189,239,191,189,239,191,189,103,43,239,191,189,239,191,189,239,191,189,80,117,61,114,112,239,191,189,93,239,191,189,86,210,177,239,191,189,239,191,189,239,191,189,239,191,189,40,121,239,191,189,15,239,191,189,61,121,15,50,14,239,191,189,112,239,191,189,61,96,239,191,189,239,191,189,32,239,191,189,39,50,239,191,189,239,191,189,239,191,189,100,108,58,210,167,239,191,189,239,191,189,57,20,239,191,189,237,153,144,40,96,239,191,189,102,10,99,239,191,189,194,154,239,191,189,239,191,189,239,191,189,42,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,85,28,239,191,189,63,60,239,191,189,239,191,189,239,191,189,54,239,191,189,239,191,189,114,70,96,109,239,191,189,239,191,189,239,191,189,39,69,239,191,189,47,239,191,189,239,191,189,68,239,191,189,239,191,189,91,87,59,90,239,191,189,29,239,191,189,58,11,239,191,189,239,191,189,41,127,239,191,189,49,83,59,239,191,189,96,239,191,189,239,191,189,69,239,191,189,206,139,37,37,123,239,191,189,239,191,189,92,239,191,189,45,87,239,191,189,44,3,85,239,191,189,37,98,50,34,239,191,189,239,191,189,106,239,191,189,239,191,189,102,239,191,189,239,191,189,52,239,191,189,239,191,189,239,191,189,239,191,189,97,211,146,239,191,189,20,239,191,189,239,191,189,239,191,189,239,191,189,218,172,239,191,189,88,15,239,191,189,45,20,58,91,239,191,189,34,96,38,32,239,191,189,74,20,33,58,40,31,239,191,189,239,191,189,4,239,191,189,47,239,191,189,15,17,209,163,239,191,189,239,191,189,205,189,239,191,189,239,191,189,86,239,191,189,31,75,66,239,191,189,239,191,189,0,239,191,189,113,239,191,189,239,191,189,123,109,96,239,191,189,239,191,189,28,18,83,69,239,191,189,106,4,40,239,191,189,239,191,189,88,99,239,191,189,198,190,53,239,191,189,8,239,191,189,78,239,191,189,48,201,130,81,24,70,86,54,38,38,18,239,191,189,239,191,189,47,17,43,41,27,34,239,191,189,10,56,107,85,14,32,3,239,191,189,55,239,191,189,239,191,189,239,191,189,239,191,189,70,34,123,62,24,239,191,189,239,191,189,50,239,191,189,116,111,69,239,191,189,45,239,191,189,239,191,189,9,125,239,191,189,239,191,189,239,191,189,239,191,189,94,45,67,239,191,189,67,239,191,189,239,191,189,108,239,191,189,42,239,191,189,97,12,239,191,189,239,191,189,16,46,64,239,191,189,79,239,191,189,239,191,189,15,75,239,191,189,108,15,46,61,239,191,189,55,56,239,191,189,42,29,16,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,8,239,191,189,27,239,191,189,204,138,23,28,108,239,191,189,112,16,112,52,98,30,239,191,189,4,215,138,239,191,189,47,239,191,189,239,191,189,239,191,189,239,191,189,120,239,191,189,59,57,239,191,189,236,147,187,23,239,191,189,92,38,239,191,189,239,191,189,17,239,191,189,239,191,189,239,191,189,39,21,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,14,239,191,189,239,191,189,8,39,85,239,191,189,64,49,239,191,189,239,191,189,35,239,191,189,121,74,42,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,94,239,191,189,44,114,239,191,189,239,191,189,239,191,189,93,72,239,191,189,221,168,239,191,189,14,239,191,189,7,54,56,90,209,158,106,239,191,189,3,56,124,111,239,191,189,66,19,239,191,189,125,44,122,28,239,191,189,239,191,189,42,239,191,189,239,191,189,86,239,191,189,61,239,191,189,70,52,239,191,189,60,93,239,191,189,239,191,189,239,191,189,55,239,191,189,239,191,189,239,191,189,51,110,239,191,189,111,78,33,26,53,9,96,123,104,239,191,189,239,191,189,36,11,124,121,122,239,191,189,45,6,239,191,189,3,239,191,189,51,106,239,191,189,107,19,69,63,239,191,189,239,191,189,239,191,189,116,239,191,189,76,239,191,189,53,239,191,189,7,239,191,189,239,191,189,46,74,239,191,189,111,239,191,189,65,239,191,189,114,239,191,189,84,44,239,191,189,239,191,189,239,191,189,26,239,191,189,107,239,191,189,239,191,189,26,59,239,191,189,86,9,239,191,189,110,47,239,191,189,69,17,37,29,239,191,189,73,239,191,189,239,191,189,239,191,189,62,239,191,189,210,136,239,191,189,239,191,189,70,239,191,189,239,191,189,19,239,191,189,119,126,78,61,239,191,189,239,191,189,125,239,191,189,239,191,189,239,191,189,44,18,239,191,189,45,239,191,189,46,15,239,191,189,63,239,191,189,48,239,191,189,44,239,191,189,35,239,191,189,111,239,191,189,15,111,239,191,189,91,107,112,239,191,189,239,191,189,239,191,189,41,11,239,191,189,55,239,191,189,92,126,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,24,239,191,189,239,191,189,239,191,189,239,191,189,70,239,191,189,33,68,239,191,189,57,14,239,191,189,239,191,189,18,239,191,189,209,166,100,102,33,70,239,191,189,239,191,189,115,239,191,189,58,123,239,191,189,85,99,239,191,189,239,191,189,8,239,191,189,239,191,189,0,239,191,189,120,42,33,239,191,189,239,191,189,90,209,189,239,191,189,18,73,239,191,189,239,191,189,25,77,57,239,191,189,209,164,28,96,89,11,42,114,239,191,189,107,89,62,239,191,189,239,191,189,46,239,191,189,74,46,58,69,127,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,39,50,5,239,191,189,74,239,191,189,239,191,189,73,37,63,239,191,189,39,31,31,239,191,189,46,239,191,189,239,191,189,119,127,19,38,27,212,135,239,191,189,19,239,191,189,63,46,24,31,239,191,189,97,239,191,189,239,191,189,109,106,33,200,167,67,239,191,189,239,191,189,239,191,189,35,15,26,78,80,238,157,132,55,239,191,189,0,22,49,239,191,189,95,126,239,191,189,10,239,191,189,39,239,191,189,125,239,191,189,59,239,191,189,239,191,189,74,205,175,239,191,189,239,191,189,96,44,239,191,189,99,239,191,189,239,191,189,239,191,189,239,191,189,64,123,239,191,189,114,124,239,191,189,239,191,189,59,108,239,191,189,73,4,57,239,191,189,239,191,189,42,239,191,189,81,239,191,189,80,239,191,189,239,191,189,239,191,189,239,191,189,95,21,239,191,189,239,191,189,76,239,191,189,239,191,189,239,191,189,239,191,189,28,239,191,189,239,191,189,42,10,65,88,29,239,191,189,239,191,189,11,101,211,150,239,191,189,101,239,191,189,239,191,189,239,191,189,25,85,95,239,191,189,239,191,189,239,191,189,19,103,66,239,191,189,239,191,189,239,191,189,60,239,191,189,7,29,23,27,0,239,191,189,16,239,191,189,50,9,239,191,189,239,191,189,111,239,191,189,127,14,239,191,189,239,191,189,239,191,189,239,191,189,107,239,191,189,239,191,189,26,1,100,239,191,189,239,191,189,21,38,239,191,189,10,207,161,239,191,189,120,122,73,239,191,189,35,120,239,191,189,34,85,239,191,189,239,191,189,86,239,191,189,239,191,189,52,113,91,239,191,189,65,88,95,96,239,191,189,26,239,191,189,239,191,189,54,114,12,113,239,191,189,239,191,189,206,191,6,239,191,189,59,218,184,239,191,189,218,133,103,67,27,14,112,239,191,189,239,191,189,59,18,239,191,189,72,109,24,126,47,28,127,65,31,21,239,191,189,28,239,191,189,239,191,189,239,191,189,54,239,191,189,63,239,191,189,126,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,51,68,239,191,189,88,54,239,191,189,103,239,191,189,82,239,191,189,21,11,239,191,189,56,64,239,191,189,111,239,191,189,38,42,239,191,189,239,191,189,16,63,125,239,191,189,239,191,189,239,191,189,201,146,31,239,191,189,48,239,191,189,76,239,191,189,239,191,189,239,191,189,239,191,189,116,239,191,189,1,117,239,191,189,43,239,191,189,6,127,239,191,189,107,117,239,191,189,239,191,189,6,239,191,189,52,82,239,191,189,123,212,153,239,191,189,239,191,189,239,191,189,80,239,191,189,48,239,191,189,67,44,239,191,189,213,178,239,191,189,239,191,189,51,29,239,191,189,82,239,191,189,239,191,189,79,5,39,239,191,189,50,92,239,191,189,239,191,189,239,191,189,59,239,191,189,50,239,191,189,239,191,189,68,239,191,189,37,59,81,239,191,189,26,59,239,191,189,239,191,189,239,191,189,239,191,189,50,239,191,189,87,22,239,191,189,239,191,189,239,191,189,8,74,239,191,189,239,191,189,35,29,125,239,191,189,42,122,239,191,189,207,162,18,239,191,189,64,125,239,191,189,119,1,103,239,191,189,19,110,109,9,82,41,6,106,239,191,189,239,191,189,89,239,191,189,239,191,189,239,191,189,239,191,189,29,2,29,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,206,128,64,239,191,189,31,40,239,191,189,26,87,55,71,42,26,239,191,189,83,239,191,189,239,191,189,239,191,189,86,117,239,191,189,122,13,239,191,189,96,239,191,189,89,45,125,239,191,189,81,201,131,11,239,191,189,239,191,189,197,144,239,191,189,114,209,149,64,109,70,239,191,189,239,191,189,81,127,70,48,239,191,189,78,116,11,83,114,239,191,189,121,42,239,191,189,89,239,191,189,239,191,189,239,191,189,126,239,191,189,14,71,239,191,189,239,191,189,47,53,239,191,189,92,58,239,191,189,108,109,13,8,239,191,189,55,239,191,189,87,123,15,239,191,189,48,54,56,22,104,239,191,189,119,239,191,189,239,191,189,239,191,189,239,191,189,76,239,191,189,9,239,191,189,105,0,239,191,189,106,208,175,25,239,191,189,33,12,29,198,171,101,5,239,191,189,3,239,191,189,14,23,115,239,191,189,24,239,191,189,63,43,99,239,191,189,25,239,191,189,32,51,239,191,189,239,191,189,205,143,239,191,189,16,62,80,22,100,23,10,74,239,191,189,204,147,239,191,189,239,191,189,196,181,239,191,189,239,191,189,96,239,191,189,239,191,189,239,191,189,43,239,191,189,75,239,191,189,239,191,189,124,239,191,189,239,191,189,239,191,189,210,152,117,239,191,189,239,191,189,88,239,191,189,1,15,239,191,189,13,239,191,189,96,95,239,191,189,239,191,189,32,239,191,189,107,104,12,120,8,239,191,189,239,191,189,239,191,189,4,239,191,189,239,191,189,239,191,189,31,96,22,239,191,189,239,191,189,47,239,191,189,239,191,189,92,13,239,191,189,81,55,239,191,189,115,239,191,189,69,123,239,191,189,239,191,189,239,191,189,127,239,191,189,239,191,189,89,239,191,189,239,191,189,93,14,239,191,189,239,191,189,117,101,239,191,189,239,191,189,33,74,101,213,186,34,14,15,90,27,39,239,191,189,239,191,189,41,24,84,239,191,189,239,191,189,17,239,191,189,239,191,189,239,191,189,91,239,191,189,107,98,239,191,189,194,156,84,123,239,191,189,69,239,191,189,81,239,191,189,223,166,239,191,189,119,239,191,189,112,38,239,191,189,50,239,191,189,0,52,239,191,189,107,47,239,191,189,83,239,191,189,79,66,239,191,189,239,191,189,106,87,239,191,189,75,114,6,239,191,189,59,239,191,189,239,191,189,215,151,116,239,191,189,6,239,191,189,111,46,239,191,189,239,191,189,109,239,191,189,97,107,239,191,189,49,36,239,191,189,80,239,191,189,15,239,191,189,26,59,239,191,189,239,191,189,67,239,191,189,31,239,191,189,239,191,189,52,30,93,94,239,191,189,76,239,191,189,239,191,189,239,191,189,33,239,191,189,51,87,239,191,189,239,191,189,21,126,64,226,174,163,59,70,239,191,189,5,89,239,191,189,121,239,191,189,44,48,239,191,189,239,191,189,119,119,67,14,110,58,239,191,189,112,239,191,189,239,191,189,122,239,191,189,94,239,191,189,125,239,191,189,239,191,189,196,189,61,80,82,239,191,189,216,148,88,239,191,189,239,191,189,9,20,89,239,191,189,239,191,189,118,239,191,189,70,239,191,189,7,16,6,10,61,239,191,189,112,239,191,189,67,239,191,189,239,191,189,41,239,191,189,239,191,189,103,114,91,108,36,126,107,121,22,239,191,189,50,103,239,191,189,112,239,191,189,239,191,189,239,191,189,239,191,189,54,239,191,189,216,180,239,191,189,50,19,239,191,189,239,191,189,11,81,239,191,189,8,123,39,78,239,191,189,126,239,191,189,10,239,191,189,239,191,189,70,239,191,189,239,191,189,105,239,191,189,239,191,189,239,191,189,239,191,189,66,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,41,89,239,191,189,239,191,189,95,40,101,239,191,189,239,191,189,63,123,127,10,239,191,189,239,191,189,40,110,239,191,189,74,239,191,189,76,90,60,239,191,189,239,191,189,201,161,239,191,189,86,239,191,189,43,96,62,239,191,189,108,239,191,189,35,239,191,189,239,191,189,101,239,191,189,239,191,189,32,239,191,189,127,239,191,189,56,239,191,189,225,137,132,93,239,191,189,239,191,189,111,239,191,189,28,5,108,239,191,189,239,191,189,115,62,46,20,26,65,72,239,191,189,44,4,239,191,189,239,191,189,239,191,189,38,119,57,239,191,189,17,8,239,191,189,239,191,189,16,239,191,189,3,205,189,69,82,239,191,189,239,191,189,30,103,81,239,191,189,32,239,191,189,239,191,189,100,63,239,191,189,32,239,191,189,239,191,189,234,167,189,239,191,189,239,191,189,239,191,189,117,239,191,189,99,5,239,191,189,99,113,43,70,93,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,51,101,7,5,239,191,189,71,36,239,191,189,201,161,239,191,189,91,71,25,38,0,114,91,6,31,42,4,75,71,239,191,189,36,239,191,189,58,7,67,239,191,189,43,30,239,191,189,239,191,189,65,239,191,189,239,191,189,22,78,80,70,239,191,189,99,239,191,189,8,42,17,32,92,239,191,189,239,191,189,239,191,189,119,239,191,189,46,26,239,191,189,71,239,191,189,239,191,189,233,165,134,239,191,189,239,191,189,60,239,191,189,98,239,191,189,74,239,191,189,68,239,191,189,239,191,189,239,191,189,106,239,191,189,127,239,191,189,239,191,189,239,191,189,26,239,191,189,239,191,189,94,59,239,191,189,239,191,189,39,239,191,189,239,191,189,90,239,191,189,103,239,191,189,19,239,191,189,36,203,128,239,191,189,60,18,239,191,189,86,55,239,191,189,239,191,189,239,191,189,50,64,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,74,103,239,191,189,239,191,189,217,189,84,30,239,191,189,239,191,189,104,66,87,44,90,239,191,189,121,5,222,151,239,191,189,8,4,239,191,189,9,239,191,189,239,191,189,239,191,189,239,191,189,0,239,191,189,239,191,189,70,113,239,191,189,53,239,191,189,239,191,189,126,239,191,189,239,191,189,108,76,64,239,191,189,108,5,239,191,189,71,239,191,189,239,191,189,98,239,191,189,65,99,239,191,189,239,191,189,21,200,159,42,80,239,191,189,208,155,16,239,191,189,239,191,189,239,191,189,239,191,189,47,95,239,191,189,13,239,191,189,239,191,189,239,191,189,114,87,239,191,189,239,191,189,74,81,56,239,191,189,67,78,47,88,239,191,189,239,191,189,239,191,189,239,191,189,31,239,191,189,28,97,111,239,191,189,92,74,71,244,135,152,146,239,191,189,235,166,170,239,191,189,75,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,42,87,239,191,189,239,191,189,69,21,239,191,189,111,239,191,189,239,191,189,112,126,86,79,119,239,191,189,239,191,189,239,191,189,86,202,160,19,239,191,189,99,239,191,189,239,191,189,198,176,2,239,191,189,79,239,191,189,30,239,191,189,69,239,191,189,239,191,189,239,191,189,1,239,191,189,239,191,189,41,239,191,189,239,191,189,122,39,84,239,191,189,239,191,189,239,191,189,51,72,239,191,189,52,17,22,239,191,189,93,3,239,191,189,79,20,109,239,191,189,106,239,191,189,96,239,191,189,10,239,191,189,96,239,191,189,119,7,119,41,239,191,189,239,191,189,97,89,61,239,191,189,63,239,191,189,7,50,239,191,189,46,5,60,239,191,189,105,239,191,189,239,191,189,239,191,189,31,100,239,191,189,198,173,126,239,191,189,97,76,239,191,189,18,44,239,191,189,239,191,189,116,239,191,189,62,17,55,45,32,99,239,191,189,118,8,239,191,189,239,191,189,36,44,28,239,191,189,88,239,191,189,10,239,191,189,34,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,94,69,32,239,191,189,3,65,82,239,191,189,24,43,126,118,239,191,189,239,191,189,0,69,80,239,191,189,239,191,189,47,61,31,239,191,189,42,239,191,189,239,191,189,239,191,189,44,81,8,239,191,189,82,90,79,239,191,189,30,96,239,191,189,5,239,191,189,124,92,20,239,191,189,105,239,191,189,44,11,239,191,189,239,191,189,73,6,27,239,191,189,239,191,189,62,239,191,189,239,191,189,239,191,189,35,95,38,117,16,239,191,189,43,28,63,61,239,191,189,228,151,159,8,239,191,189,239,191,189,10,239,191,189,239,191,189,239,191,189,215,165,116,239,191,189,239,191,189,54,239,191,189,239,191,189,239,191,189,126,106,239,191,189,239,191,189,59,86,239,191,189,4,89,62,239,191,189,239,191,189,205,164,239,191,189,239,191,189,102,19,239,191,189,239,191,189,52,239,191,189,52,239,191,189,112,239,191,189,239,191,189,1,81,11,239,191,189,112,239,191,189,239,191,189,99,121,201,189,239,191,189,92,239,191,189,6,90,239,191,189,44,239,191,189,9,1,123,12,38,35,239,191,189,239,191,189,78,239,191,189,54,239,191,189,114,239,191,189,239,191,189,239,191,189,77,73,85,93,19,65,127,239,191,189,69,239,191,189,239,191,189,46,239,191,189,239,191,189,204,169,126,127,239,191,189,69,239,191,189,208,189,239,191,189,107,239,191,189,66,239,191,189,75,26,239,191,189,22,83,12,57,239,191,189,104,239,191,189,239,191,189,239,191,189,36,125,239,191,189,20,45,32,239,191,189,239,191,189,10,239,191,189,52,86,94,109,103,121,239,191,189,239,191,189,239,191,189,110,60,239,191,189,92,42,22,239,191,189,218,134,119,239,191,189,65,239,191,189,239,191,189,239,191,189,33,103,239,191,189,114,75,212,189,239,191,189,239,191,189,47,239,191,189,239,191,189,239,191,189,63,239,191,189,78,81,239,191,189,46,32,239,191,189,239,191,189,127,69,119,14,21,239,191,189,239,191,189,239,191,189,239,191,189,76,0,239,191,189,239,191,189,76,92,239,191,189,127,12,239,191,189,68,239,191,189,239,191,189,239,191,189,225,182,181,239,191,189,58,109,239,191,189,239,191,189,71,62,239,191,189,239,191,189,5,93,239,191,189,239,191,189,239,191,189,58,239,191,189,228,153,164,57,80,93,239,191,189,63,33,71,111,22,239,191,189,80,239,191,189,87,95,239,191,189,112,42,6,89,239,191,189,73,67,90,86,60,239,191,189,57,239,191,189,10,78,16,91,60,125,100,57,73,239,191,189,239,191,189,239,191,189,239,191,189,207,148,103,239,191,189,239,191,189,87,115,13,239,191,189,109,239,191,189,63,239,191,189,239,191,189,13,3,239,191,189,123,110,239,191,189,107,101,239,191,189,122,239,191,189,89,239,191,189,239,191,189,239,191,189,39,117,121,239,191,189,239,191,189,121,239,191,189,239,191,189,117,120,239,191,189,239,191,189,64,239,191,189,50,27,81,239,191,189,86,53,239,191,189,57,30,239,191,189,105,239,191,189,239,191,189,110,125,120,87,239,191,189,239,191,189,100,239,191,189,49,118,94,17,239,191,189,6,239,191,189,35,239,191,189,36,239,191,189,71,239,191,189,7,77,239,191,189,239,191,189,121,60,91,239,191,189,37,15,239,191,189,5,239,191,189,7,239,191,189,77,118,239,191,189,239,191,189,239,191,189,100,31,22,239,191,189,36,239,191,189,50,40,239,191,189,239,191,189,69,239,191,189,239,191,189,102,48,239,191,189,239,191,189,40,239,191,189,8,21,11,102,124,12,24,239,191,189,239,191,189,239,191,189,38,239,191,189,239,191,189,121,117,239,191,189,54,239,191,189,91,239,191,189,9,51,239,191,189,47,239,191,189,239,191,189,95,239,191,189,239,191,189,239,191,189,122,239,191,189,117,44,239,191,189,79,19,239,191,189,124,24,239,191,189,50,45,239,191,189,208,189,239,191,189,43,112,126,239,191,189,39,123,98,239,191,189,239,191,189,56,220,155,239,191,189,239,191,189,29,95,47,91,239,191,189,17,209,179,37,212,134,48,67,43,239,191,189,6,239,191,189,94,12,19,51,239,191,189,34,239,191,189,82,36,19,122,239,191,189,22,55,20,239,191,189,108,125,239,191,189,239,191,189,239,191,189,74,239,191,189,23,120,74,239,191,189,115,239,191,189,55,54,239,191,189,239,191,189,75,125,239,191,189,109,120,239,191,189,60,93,8,98,239,191,189,87,239,191,189,15,239,191,189,113,52,215,174,3,8,89,20,96,239,191,189,239,191,189,64,120,94,91,239,191,189,220,158,34,203,185,239,191,189,239,191,189,239,191,189,235,150,159,239,191,189,232,174,191,239,191,189,59,12,1,239,191,189,95,239,191,189,239,191,189,239,191,189,239,191,189,105,46,112,239,191,189,80,239,191,189,239,191,189,239,191,189,117,33,239,191,189,239,191,189,68,239,191,189,239,191,189,239,191,189,239,191,189,108,104,239,191,189,44,239,191,189,60,4,5,108,93,239,191,189,239,191,189,84,239,191,189,92,239,191,189,80,87,29,54,239,191,189,210,160,239,191,189,114,239,191,189,7,23,239,191,189,40,20,28,123,239,191,189,107,93,35,60,124,52,239,191,189,75,88,239,191,189,19,239,191,189,239,191,189,239,191,189,66,106,239,191,189,239,191,189,239,191,189,239,191,189,40,239,191,189,239,191,189,239,191,189,36,53,239,191,189,15,67,72,124,17,239,191,189,91,239,191,189,239,191,189,19,239,191,189,239,191,189,125,79,122,239,191,189,202,138,239,191,189,21,213,140,239,191,189,239,191,189,239,191,189,205,157,209,149,50,239,191,189,87,239,191,189,239,191,189,60,20,89,239,191,189,239,191,189,61,239,191,189,67,239,191,189,239,191,189,239,191,189,239,191,189,48,239,191,189,32,239,191,189,38,47,100,32,23,239,191,189,239,191,189,239,191,189,239,191,189,67,239,191,189,105,239,191,189,239,191,189,239,191,189,239,191,189,19,101,239,191,189,50,239,191,189,239,191,189,126,239,191,189,239,191,189,19,239,191,189,239,191,189,239,191,189,196,176,239,191,189,11,83,239,191,189,222,180,239,191,189,100,239,191,189,239,191,189,239,191,189,75,12,239,191,189,48,239,191,189,52,239,191,189,127,197,186,37,239,191,189,124,224,162,134,239,191,189,239,191,189,0,239,191,189,45,217,158,119,62,239,191,189,11,239,191,189,90,0,18,239,191,189,30,55,113,239,191,189,239,191,189,36,239,191,189,66,29,239,191,189,239,191,189,239,191,189,23,239,191,189,18,60,46,13,201,145,239,191,189,239,191,189,29,51,59,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,107,239,191,189,18,114,93,239,191,189,48,239,191,189,4,118,109,239,191,189,239,191,189,46,239,191,189,239,191,189,96,103,126,239,191,189,239,191,189,76,55,239,191,189,239,191,189,48,26,62,124,239,191,189,115,239,154,154,239,191,189,61,239,191,189,239,191,189,121,105,12,95,8,82,36,18,101,239,191,189,80,67,88,73,36,217,180,30,239,191,189,239,191,189,239,191,189,44,239,191,189,239,191,189,82,22,3,126,19,238,155,165,100,239,191,189,239,191,189,21,239,191,189,110,67,239,191,189,93,239,191,189,239,191,189,43,239,191,189,56,239,191,189,41,239,191,189,239,191,189,239,191,189,116,239,191,189,2,239,191,189,76,239,191,189,26,13,239,191,189,78,239,191,189,239,191,189,119,83,239,191,189,223,157,92,15,22,69,218,156,52,2,97,99,3,26,239,191,189,217,179,83,8,38,239,191,189,97,199,160,58,239,191,189,97,81,239,191,189,239,191,189,239,191,189,83,239,191,189,66,88,239,191,189,205,186,239,191,189,239,191,189,239,191,189,30,239,191,189,239,191,189,239,191,189,118,22,239,191,189,112,116,239,191,189,111,45,239,191,189,125,214,187,239,191,189,110,239,191,189,5,124,81,14,239,191,189,239,191,189,239,191,189,239,191,189,12,239,191,189,239,191,189,105,239,191,189,203,147,213,181,195,145,110,239,191,189,33,239,191,189,5,228,170,130,239,191,189,32,18,239,191,189,58,239,191,189,17,24,81,239,191,189,239,191,189,239,191,189,85,49,239,191,189,104,239,191,189,1,6,239,191,189,239,191,189,239,191,189,1,5,16,239,191,189,117,239,191,189,239,191,189,75,42,239,191,189,62,239,191,189,104,239,191,189,18,110,239,191,189,122,239,191,189,66,53,239,191,189,239,191,189,59,61,239,191,189,239,191,189,239,191,189,4,239,191,189,9,239,191,189,239,191,189,31,13,239,191,189,92,69,106,52,239,191,189,84,239,191,189,8,23,74,125,111,239,191,189,88,38,65,239,191,189,239,191,189,44,55,239,191,189,56,239,191,189,43,239,191,189,70,76,216,176,239,191,189,72,239,191,189,61,17,104,15,126,239,191,189,239,191,189,38,239,191,189,36,239,191,189,124,73,239,191,189,114,239,191,189,239,191,189,76,72,84,239,191,189,239,191,189,12,239,191,189,9,239,191,189,13,102,48,102,83,52,239,191,189,239,191,189,239,191,189,239,191,189,23,239,191,189,239,191,189,239,191,189,6,103,126,69,48,239,191,189,4,239,191,189,239,191,189,239,191,189,100,239,191,189,239,191,189,11,239,191,189,87,92,81,116,239,191,189,210,191,239,191,189,239,191,189,239,191,189,71,239,191,189,61,239,191,189,203,137,73,105,239,191,189,54,60,198,142,40,239,191,189,57,239,191,189,58,2,239,191,189,64,120,8,40,239,191,189,239,191,189,79,5,23,70,239,191,189,239,191,189,239,191,189,239,191,189,27,239,191,189,239,191,189,47,42,239,191,189,100,239,191,189,48,105,27,239,191,189,239,191,189,76,78,239,191,189,31,102,239,191,189,239,191,189,7,77,52,239,191,189,3,5,58,67,81,239,191,189,111,123,32,239,191,189,12,239,191,189,86,113,15,39,64,239,191,189,71,239,191,189,13,239,191,189,2,2,239,191,189,126,38,96,6,239,191,189,239,191,189,205,146,26,43,37,239,191,189,32,58,239,191,189,239,191,189,239,191,189,116,29,63,107,67,239,191,189,86,239,191,189,239,191,189,82,6,239,191,189,239,191,189,5,2,55,239,191,189,239,191,189,110,15,116,116,239,191,189,62,80,59,69,239,191,189,31,122,239,191,189,239,191,189,109,239,191,189,239,191,189,239,191,189,74,58,120,9,115,239,191,189,239,191,189,239,191,189,95,38,34,105,239,191,189,102,45,239,191,189,43,239,191,189,89,1,27,8,105,108,11,239,191,189,239,191,189,90,239,191,189,78,123,30,116,66,239,191,189,239,191,189,5,1,239,191,189,54,119,82,239,191,189,30,239,191,189,29,239,191,189,19,125,239,191,189,65,239,191,189,239,191,189,239,191,189,47,50,14,239,191,189,103,88,239,191,189,108,13,17,239,191,189,4,239,191,189,81,239,191,189,55,239,191,189,42,124,34,239,191,189,239,191,189,43,74,239,191,189,239,191,189,13,239,191,189,239,191,189,53,12,239,191,189,18,102,239,191,189,105,239,191,189,42,127,10,68,239,191,189,116,239,191,189,40,58,70,70,239,191,189,22,13,104,54,102,6,239,191,189,239,191,189,121,74,239,191,189,239,191,189,4,239,191,189,113,65,62,102,80,123,239,191,189,82,239,191,189,239,191,189,239,191,189,96,239,191,189,239,191,189,239,191,189,239,191,189,125,239,191,189,95,239,191,189,239,191,189,41,124,239,191,189,96,35,113,32,223,140,122,107,198,187,81,239,191,189,239,191,189,239,191,189,239,191,189,90,239,191,189,239,191,189,197,182,239,191,189,239,191,189,21,239,191,189,120,117,239,191,189,121,14,239,191,189,72,196,147,6,44,9,112,115,22,5,24,239,191,189,27,239,191,189,239,191,189,214,158,239,191,189,4,111,42,99,239,191,189,200,185,54,91,109,102,23,239,191,189,239,191,189,239,191,189,9,34,105,239,191,189,239,191,189,81,21,70,239,191,189,239,191,189,239,191,189,13,209,133})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "xclientdev3",
                        container: "testcc7df4da71239455288caf55f02ba8ca4",
                        blob: "blob1",
                        body: body,
                        appendPosition: 0,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test000015 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\000015_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\000015_s.txt", Encoding.UTF8);

    public Test000015() : base(recordedRequest, recordedResponse, "xclientdev3")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{100,22,57,96,239,191,189,126,26,239,191,189,53,239,191,189,21,6,239,191,189,70,68,49,67,90,239,191,189,239,191,189,40,0,239,191,189,239,191,189,4,239,191,189,239,191,189,62,239,191,189,239,191,189,222,134,239,191,189,239,191,189,15,33,239,191,189,30,221,131,239,191,189,29,239,191,189,13,91,239,191,189,75,124,239,191,189,239,191,189,239,191,189,121,239,191,189,99,123,71,239,191,189,239,191,189,230,144,153,239,191,189,239,191,189,55,239,191,189,27,121,52,16,85,239,191,189,239,191,189,239,191,189,68,125,10,239,191,189,239,191,189,239,191,189,62,239,191,189,15,239,191,189,239,191,189,12,239,191,189,105,239,191,189,239,191,189,68,34,55,76,239,191,189,25,82,239,191,189,239,191,189,63,45,22,108,45,95,74,239,191,189,60,31,239,191,189,60,1,239,191,189,239,191,189,81,215,147,239,191,189,84,115,31,16,239,191,189,54,17,123,120,239,191,189,239,191,189,43,42,92,27,105,239,191,189,39,85,226,150,152,127,239,191,189,74,239,191,189,239,191,189,66,50,67,239,191,189,17,239,191,189,126,90,25,32,28,118,53,28,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,48,41,239,191,189,239,191,189,62,239,191,189,239,191,189,95,239,191,189,11,239,191,189,239,191,189,72,53,239,191,189,239,191,189,239,191,189,239,191,189,2,2,72,239,191,189,239,191,189,31,198,178,198,145,62,85,194,188,92,239,191,189,18,209,143,239,191,189,63,239,191,189,37,239,191,189,86,106,239,191,189,77,239,191,189,239,191,189,73,239,191,189,79,38,239,191,189,239,191,189,62,239,191,189,120,98,239,191,189,239,191,189,98,33,112,72,239,191,189,114,239,191,189,35,239,191,189,26,239,191,189,108,100,220,135,80,70,239,191,189,120,22,41,71,103,6,239,191,189,239,191,189,119,109,239,191,189,89,44,234,180,166,195,159,239,191,189,34,239,191,189,239,191,189,239,191,189,121,119,239,191,189,127,239,191,189,121,7,239,191,189,57,49,239,191,189,113,117,239,191,189,26,239,191,189,106,239,191,189,239,191,189,239,191,189,47,239,191,189,121,239,191,189,228,184,189,24,239,191,189,107,36,196,158,23,239,191,189,208,172,239,191,189,239,191,189,99,111,239,191,189,78,40,78,120,62,217,168,239,191,189,123,118,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,205,154,0,239,191,189,239,191,189,239,191,189,239,191,189,12,26,239,191,189,93,28,74,13,239,191,189,201,155,239,191,189,120,76,81,239,191,189,107,122,239,191,189,111,1,239,191,189,5,239,191,189,72,239,191,189,239,191,189,239,191,189,239,191,189,226,167,128,239,191,189,27,51,239,191,189,239,191,189,94,217,152,239,191,189,35,84,86,239,191,189,239,191,189,45,46,239,191,189,239,191,189,127,239,191,189,239,191,189,95,20,20,20,74,119,46,239,191,189,239,191,189,239,191,189,10,239,191,189,239,191,189,54,108,198,152,38,17,40,87,0,239,191,189,105,239,191,189,65,39,239,191,189,239,191,189,91,239,191,189,1,29,239,191,189,239,191,189,31,239,191,189,239,191,189,115,231,170,162,239,191,189,47,74,239,191,189,239,191,189,117,239,191,189,104,239,191,189,110,239,191,189,239,191,189,94,50,239,191,189,34,8,80,125,56,239,191,189,36,8,113,41,122,76,54,203,179,42,125,239,191,189,57,239,191,189,31,41,124,239,191,189,239,191,189,85,109,29,239,191,189,121,27,93,239,191,189,239,191,189,106,239,191,189,45,105,59,10,65,86,239,191,189,239,191,189,116,50,34,239,191,189,67,38,239,191,189,37,127,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,28,7,117,239,191,189,14,28,95,80,32,72,239,191,189,80,75,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,122,35,75,30,79,82,72,56,109,89,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,31,2,239,191,189,93,239,191,189,239,191,189,21,239,191,189,1,239,191,189,239,191,189,214,134,39,215,173,37,239,191,189,239,191,189,19,239,191,189,239,191,189,239,191,189,38,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,111,104,239,191,189,239,191,189,239,191,189,222,165,18,118,84,239,191,189,101,65,73,103,239,191,189,124,239,191,189,16,239,191,189,239,191,189,239,191,189,52,17,239,191,189,239,191,189,77,25,239,191,189,239,191,189,239,191,189,239,191,189,35,239,191,189,77,22,37,239,191,189,73,49,239,191,189,239,191,189,86,14,239,191,189,126,239,191,189,239,191,189,239,191,189,41,3,239,191,189,91,74,239,191,189,52,239,191,189,36,239,191,189,239,191,189,239,191,189,108,239,191,189,239,191,189,239,191,189,66,86,239,191,189,25,239,191,189,86,1,239,191,189,101,17,239,191,189,239,191,189,3,239,191,189,72,196,151,29,239,191,189,239,191,189,36,200,160,239,191,189,25,239,191,189,1,194,184,239,191,189,46,239,191,189,239,191,189,47,107,39,239,191,189,104,0,239,191,189,2,13,239,191,189,57,6,85,239,191,189,69,239,191,189,239,191,189,239,191,189,79,50,199,186,121,239,191,189,8,239,191,189,239,191,189,84,62,14,239,191,189,239,191,189,239,191,189,20,239,191,189,115,33,239,191,189,47,29,239,191,189,239,191,189,23,239,191,189,103,239,191,189,239,191,189,10,239,191,189,11,239,191,189,222,189,2,116,239,191,189,112,239,191,189,104,6,127,239,191,189,239,191,189,54,86,25,65,239,191,189,209,149,239,191,189,239,191,189,49,120,5,239,191,189,239,191,189,79,95,60,239,191,189,51,35,14,3,47,18,96,239,191,189,239,191,189,42,239,191,189,22,58,239,191,189,24,239,191,189,16,239,191,189,239,191,189,90,239,191,189,117,18,239,191,189,68,239,191,189,239,191,189,73,33,105,44,24,239,191,189,239,191,189,40,82,239,191,189,47,79,78,239,191,189,239,191,189,27,62,6,239,191,189,11,62,208,186,239,191,189,239,191,189,239,191,189,17,34,86,239,191,189,21,239,191,189,56,239,191,189,239,191,189,239,191,189,239,191,189,83,111,61,115,239,191,189,239,191,189,82,10,239,191,189,239,191,189,99,239,191,189,6,239,191,189,70,62,239,191,189,113,239,191,189,58,239,191,189,239,191,189,6,239,191,189,239,191,189,25,239,191,189,22,85,239,191,189,100,28,239,191,189,77,239,191,189,127,42,103,239,191,189,16,44,239,191,189,52,239,191,189,239,191,189,32,71,239,191,189,239,191,189,39,40,122,24,239,191,189,115,108,194,167,56,73,239,191,189,59,117,239,191,189,116,27,94,239,191,189,239,191,189,99,111,10,239,191,189,42,239,191,189,28,239,191,189,54,26,239,191,189,121,28,239,191,189,239,191,189,59,239,191,189,239,191,189,239,191,189,239,191,189,43,239,191,189,239,191,189,47,63,239,191,189,239,191,189,56,239,191,189,80,239,191,189,239,191,189,78,84,72,239,191,189,30,239,191,189,239,191,189,239,191,189,86,239,191,189,239,191,189,239,191,189,62,239,191,189,105,239,191,189,239,191,189,77,239,191,189,73,99,31,122,239,191,189,239,191,189,218,186,239,191,189,239,191,189,239,191,189,37,239,191,189,82,55,42,239,191,189,96,13,29,33,239,191,189,2,239,191,189,239,191,189,49,239,191,189,239,191,189,111,32,94,239,191,189,94,126,127,94,47,217,163,239,191,189,67,239,191,189,78,67,114,117,239,191,189,57,7,239,191,189,239,191,189,49,239,191,189,47,239,191,189,101,97,239,191,189,239,191,189,116,239,191,189,239,191,189,74,127,85,91,239,191,189,103,239,191,189,239,191,189,239,191,189,239,191,189,64,239,191,189,90,239,191,189,239,191,189,16,27,239,191,189,239,191,189,239,191,189,239,191,189,127,45,239,191,189,46,239,191,189,26,239,191,189,239,191,189,239,191,189,46,239,191,189,89,123,239,191,189,239,191,189,22,239,191,189,63,102,45,239,191,189,239,191,189,116,98,86,86,207,163,239,191,189,239,191,189,239,191,189,57,0,239,191,189,0,40,118,239,191,189,239,191,189,239,191,189,239,191,189,104,239,191,189,239,191,189,105,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,109,75,85,239,191,189,31,204,184,239,191,189,239,191,189,118,74,88,8,34,68,239,191,189,88,239,191,189,239,191,189,198,160,21,239,191,189,239,191,189,80,65,239,191,189,239,191,189,239,191,189,239,191,189,118,8,211,144,96,239,191,189,239,191,189,69,98,51,111,239,191,189,35,110,239,191,189,96,239,191,189,73,239,191,189,39,239,191,189,239,191,189,9,90,87,239,191,189,239,191,189,107,239,191,189,24,210,138,2,239,191,189,66,239,191,189,119,239,191,189,239,191,189,239,191,189,19,239,191,189,239,191,189,86,239,191,189,85,239,191,189,63,239,191,189,239,191,189,216,155,44,239,191,189,239,191,189,15,239,191,189,53,8,239,191,189,58,217,132,27,239,191,189,104,239,191,189,35,43,0,239,191,189,25,239,191,189,17,20,77,93,239,191,189,239,191,189,2,37,105,239,191,189,239,191,189,63,54,93,84,110,50,239,191,189,65,239,191,189,239,191,189,127,57,18,127,239,191,189,68,239,191,189,93,19,239,191,189,239,191,189,239,191,189,239,191,189,27,239,191,189,68,239,191,189,23,239,191,189,6,239,191,189,239,191,189,57,239,191,189,239,191,189,102,10,104,239,191,189,239,191,189,69,239,191,189,96,239,191,189,239,191,189,239,191,189,58,239,191,189,239,191,189,104,105,239,191,189,85,239,191,189,4,239,191,189,62,66,239,191,189,42,239,191,189,239,191,189,239,191,189,239,191,189,220,174,239,191,189,239,191,189,239,191,189,82,57,48,239,191,189,27,239,191,189,81,94,3,239,191,189,239,191,189,9,239,191,189,29,31,239,191,189,8,123,101,239,191,189,91,40,200,173,239,191,189,120,239,191,189,239,191,189,24,239,191,189,218,176,57,239,191,189,46,57,33,58,78,239,191,189,34,59,239,191,189,239,191,189,32,239,191,189,239,191,189,239,191,189,21,239,191,189,50,239,191,189,5,72,42,113,239,191,189,28,239,191,189,239,191,189,98,239,191,189,239,191,189,239,191,189,89,239,191,189,117,239,191,189,99,239,191,189,64,23,239,191,189,57,239,191,189,14,239,191,189,106,239,191,189,29,84,239,191,189,67,239,191,189,63,239,191,189,239,191,189,125,239,191,189,239,191,189,5,239,191,189,107,80,114,80,20,21,239,191,189,13,15,239,191,189,239,191,189,239,191,189,239,191,189,52,14,60,99,208,177,239,191,189,239,191,189,14,24,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,52,239,191,189,226,169,171,239,191,189,199,157,239,191,189,239,191,189,239,191,189,239,191,189,13,239,191,189,239,191,189,87,239,191,189,239,191,189,118,239,191,189,64,89,239,191,189,84,194,165,66,90,239,191,189,31,111,24,98,23,116,4,10,72,215,178,70,239,191,189,104,51,13,20,239,191,189,97,50,79,53,239,191,189,56,200,183,239,191,189,200,142,239,191,189,6,63,109,239,191,189,239,191,189,45,239,191,189,93,239,191,189,56,239,191,189,76,118,239,191,189,195,155,239,191,189,239,191,189,70,239,191,189,239,191,189,239,191,189,39,89,239,191,189,223,154,95,239,191,189,59,124,98,239,191,189,115,217,171,239,191,189,6,239,191,189,239,191,189,239,191,189,40,80,2,239,191,189,3,117,44,23,239,191,189,23,72,56,24,94,69,239,191,189,239,191,189,195,150,239,191,189,239,191,189,239,191,189,20,20,79,239,191,189,239,191,189,99,239,191,189,239,191,189,239,191,189,42,239,191,189,239,191,189,86,43,239,191,189,106,109,72,239,191,189,36,52,42,239,191,189,20,239,191,189,16,239,191,189,96,239,191,189,239,191,189,44,239,191,189,239,191,189,50,239,191,189,239,191,189,37,105,34,239,191,189,108,239,191,189,65,239,191,189,110,68,239,191,189,33,64,85,78,238,130,156,239,191,189,92,59,46,239,191,189,239,191,189,73,239,191,189,2,239,191,189,46,45,35,239,191,189,239,191,189,68,3,37,42,239,191,189,239,191,189,239,191,189,239,191,189,110,37,239,191,189,239,191,189,63,239,191,189,239,191,189,221,154,39,239,191,189,239,191,189,239,191,189,239,191,189,59,62,239,191,189,35,239,191,189,63,239,191,189,119,64,33,69,239,191,189,239,191,189,81,40,239,191,189,239,191,189,239,191,189,1,239,191,189,239,191,189,8,24,239,191,189,10,82,99,33,239,191,189,6,239,191,189,239,191,189,3,89,239,191,189,239,191,189,106,239,191,189,20,239,191,189,239,191,189,239,191,189,229,170,146,239,191,189,239,191,189,77,239,191,189,239,191,189,92,239,191,189,239,191,189,0,30,50,38,239,191,189,24,71,239,191,189,239,191,189,239,191,189,58,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,65,89,54,239,191,189,89,239,191,189,239,191,189,35,109,92,86,239,191,189,22,108,239,191,189,239,191,189,239,191,189,239,191,189,2,59,239,191,189,239,191,189,239,191,189,123,239,191,189,239,191,189,13,19,239,191,189,22,12,42,239,191,189,239,191,189,114,124,38,239,191,189,102,74,71,14,239,191,189,116,194,143,239,191,189,97,37,239,191,189,239,191,189,239,191,189,239,191,189,103,243,129,191,186,12,239,191,189,239,191,189,239,191,189,120,87,80,43,239,191,189,82,239,191,189,65,239,191,189,19,239,191,189,239,191,189,239,191,189,8,37,239,191,189,60,5,239,191,189,239,191,189,26,102,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,107,239,191,189,216,161,239,191,189,239,191,189,97,35,239,191,189,239,191,189,116,104,239,191,189,13,239,191,189,239,191,189,239,191,189,116,107,120,239,191,189,1,208,136,239,191,189,239,191,189,94,239,191,189,202,135,48,239,191,189,7,239,191,189,23,79,239,191,189,21,110,239,191,189,2,35,108,239,191,189,66,10,12,202,152,239,191,189,27,101,120,35,105,239,191,189,80,239,191,189,239,191,189,56,112,88,14,239,191,189,239,191,189,96,95,239,191,189,76,44,239,191,189,6,122,210,151,239,191,189,99,239,191,189,239,191,189,239,191,189,81,38,50,239,191,189,21,28,239,191,189,96,239,191,189,92,111,113,239,191,189,239,191,189,53,239,191,189,20,205,158,239,191,189,22,125,107,28,20,234,166,140,239,191,189,239,191,189,89,239,191,189,239,191,189,239,191,189,74,38,92,239,191,189,239,191,189,239,191,189,239,191,189,71,239,191,189,71,71,239,191,189,239,191,189,239,191,189,202,150,88,239,191,189,32,58,239,191,189,199,149,0,49,239,191,189,239,191,189,35,239,191,189,21,239,191,189,239,191,189,239,191,189,235,131,183,67,239,191,189,15,239,191,189,207,140,239,191,189,239,191,189,239,191,189,41,9,239,191,189,239,191,189,239,191,189,1,16,196,171,239,191,189,94,198,137,239,191,189,239,191,189,41,36,36,239,191,189,239,191,189,110,239,191,189,106,18,82,239,191,189,239,191,189,116,107,28,25,239,191,189,51,8,239,191,189,54,98,239,191,189,20,119,21,38,73,36,239,191,189,34,37,239,191,189,239,191,189,104,5,20,94,57,88,52,239,191,189,239,191,189,112,70,80,64,239,191,189,69,5,85,239,191,189,11,239,191,189,239,191,189,81,239,191,189,71,89,239,191,189,103,69,34,239,191,189,110,239,191,189,239,191,189,239,191,189,239,191,189,19,239,191,189,239,191,189,206,133,2,239,191,189,43,239,191,189,49,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,101,239,191,189,26,239,191,189,239,191,189,23,114,239,191,189,5,112,239,191,189,239,191,189,15,1,239,191,189,94,127,239,191,189,49,88,239,191,189,206,133,239,191,189,12,38,239,191,189,22,239,191,189,239,191,189,102,55,50,239,191,189,98,215,156,239,191,189,239,191,189,239,191,189,93,239,191,189,20,41,27,239,191,189,239,191,189,102,102,239,191,189,228,183,148,239,191,189,239,191,189,239,191,189,113,239,191,189,78,239,191,189,84,239,191,189,25,26,239,191,189,239,191,189,53,239,191,189,120,239,191,189,112,239,191,189,239,191,189,239,191,189,10,76,239,191,189,45,125,239,191,189,239,191,189,239,191,189,77,48,239,191,189,239,191,189,239,191,189,239,191,189,30,40,93,239,191,189,70,239,191,189,239,191,189,62,239,191,189,115,106,239,191,189,239,191,189,28,25,51,71,239,191,189,239,191,189,239,191,189,239,191,189,54,46,67,16,239,191,189,206,175,239,191,189,239,191,189,37,54,239,191,189,239,191,189,114,79,83,239,191,189,239,191,189,80,14,239,191,189,239,191,189,20,195,191,239,191,189,239,191,189,239,191,189,26,239,191,189,82,5,1,239,191,189,239,191,189,239,191,189,26,239,191,189,239,191,189,239,191,189,37,239,191,189,239,191,189,78,52,15,49,239,191,189,239,191,189,223,167,239,191,189,111,239,191,189,27,113,25,239,191,189,80,239,191,189,49,36,116,239,191,189,239,191,189,48,239,191,189,198,138,85,57,239,191,189,2,239,191,189,239,191,189,27,37,198,142,239,191,189,239,191,189,239,191,189,239,191,189,59,66,91,239,191,189,23,239,191,189,118,239,191,189,112,1,239,191,189,0,59,239,191,189,123,3,99,106,32,116,239,191,189,239,191,189,239,191,189,239,191,189,1,0,76,83,239,191,189,239,191,189,64,100,57,239,191,189,119,239,191,189,239,191,189,30,19,115,239,191,189,110,0,6,239,191,189,239,191,189,74,239,191,189,76,89,239,191,189,75,239,191,189,121,102,239,191,189,21,239,191,189,41,239,191,189,239,191,189,239,191,189,29,75,239,191,189,1,239,191,189,3,105,239,191,189,75,12,1,6,89,239,191,189,239,191,189,25,32,239,191,189,8,102,84,239,191,189,111,24,239,191,189,67,17,239,191,189,126,119,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,75,222,164,70,33,125,13,239,191,189,74,239,191,189,32,114,239,191,189,239,191,189,239,191,189,98,239,191,189,66,123,239,191,189,220,132,92,239,191,189,239,191,189,79,239,191,189,34,28,15,239,191,189,16,27,239,191,189,65,34,239,191,189,68,239,191,189,124,239,191,189,239,191,189,22,35,239,191,189,239,191,189,239,191,189,239,191,189,94,239,191,189,35,80,239,191,189,198,130,6,83,239,191,189,45,57,239,191,189,45,126,102,98,239,191,189,45,69,64,239,191,189,239,191,189,239,191,189,23,49,239,191,189,70,122,83,239,191,189,239,191,189,228,154,189,90,239,191,189,239,191,189,61,8,239,191,189,27,110,239,191,189,239,191,189,66,8,239,191,189,239,191,189,239,191,189,60,51,85,239,191,189,70,239,191,189,239,191,189,126,57,239,191,189,15,59,239,191,189,0,11,96,84,7,111,35,209,162,239,191,189,37,239,191,189,36,85,81,239,191,189,239,191,189,41,21,239,191,189,239,191,189,23,89,119,58,83,34,239,191,189,22,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,110,239,191,189,72,239,191,189,0,49,116,235,153,169,47,35,34,70,101,239,191,189,100,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,26,239,191,189,77,239,191,189,239,191,189,27,239,191,189,45,2,239,191,189,231,177,180,239,191,189,40,239,191,189,57,239,191,189,125,239,191,189,72,22,49,239,191,189,62,239,191,189,34,16,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,95,239,191,189,77,239,191,189,239,191,189,48,126,239,191,189,2,33,239,191,189,94,239,191,189,239,191,189,126,89,21,83,239,191,189,106,2,239,191,189,3,239,191,189,112,65,38,239,191,189,239,191,189,46,12,239,191,189,97,239,191,189,84,19,239,191,189,0,69,239,191,189,239,191,189,239,191,189,69,239,191,189,239,191,189,125,239,191,189,197,163,239,191,189,239,191,189,239,191,189,27,239,191,189,239,191,189,239,191,189,115,239,191,189,10,239,191,189,239,191,189,239,191,189,20,239,191,189,239,191,189,239,191,189,121,107,125,20,13,89,107,5,91,14,239,191,189,239,191,189,96,85,49,69,106,12,69,216,150,67,16,239,191,189,239,191,189,239,191,189,121,51,113,239,191,189,239,191,189,127,239,191,189,76,56,57,213,148,109,239,191,189,239,191,189,99,239,191,189,239,191,189,239,191,189,239,191,189,48,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,23,239,191,189,39,109,239,191,189,122,239,191,189,239,191,189,239,191,189,239,191,189,45,239,191,189,115,29,19,28,239,191,189,112,214,159,239,191,189,239,191,189,50,239,191,189,35,13,239,191,189,239,191,189,72,239,191,189,239,191,189,54,59,199,130,105,16,239,191,189,78,26,239,191,189,239,191,189,20,121,239,191,189,239,191,189,12,221,150,20,239,191,189,29,239,191,189,14,34,37,239,191,189,239,191,189,73,121,239,191,189,213,168,54,6,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,12,43,34,239,191,189,239,191,189,239,191,189,222,184,239,191,189,44,0,239,191,189,86,52,239,191,189,239,191,189,98,44,239,191,189,93,239,191,189,106,239,191,189,239,191,189,57,239,191,189,21,239,191,189,115,239,191,189,61,96,66,239,191,189,8,116,239,191,189,23,26,75,71,239,191,189,239,191,189,29,120,37,126,116,59,65,239,191,189,239,191,189,6,61,239,191,189,77,239,191,189,29,239,191,189,239,191,189,69,80,239,191,189,121,106,44,239,191,189,239,191,189,75,17,89,21,239,191,189,239,191,189,101,92,20,87,239,191,189,239,191,189,50,10,239,191,189,90,4,239,191,189,102,203,173,239,191,189,239,191,189,239,191,189,71,239,191,189,104,46,216,172,19,71,239,191,189,118,72,123,239,191,189,39,50,239,191,189,67,239,191,189,110,239,191,189,31,92,19,69,62,69,116,114,198,186,28,239,191,189,20,239,191,189,239,191,189,13,73,55,239,191,189,104,67,90,239,191,189,239,191,189,53,239,191,189,239,191,189,239,191,189,119,239,191,189,239,191,189,37,55,107,239,191,189,34,239,191,189,55,239,191,189,239,191,189,239,191,189,90,239,191,189,102,239,191,189,89,36,239,191,189,11,109,6,239,191,189,239,191,189,111,87,239,191,189,9,239,191,189,239,191,189,239,191,189,78,49,95,239,191,189,239,191,189,99,239,191,189,109,39,71,239,191,189,48,239,191,189,239,191,189,239,191,189,96,47,239,191,189,206,131,239,191,189,239,191,189,124,78,31,239,191,189,239,191,189,122,71,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,50,239,191,189,239,191,189,1,239,191,189,123,116,239,191,189,125,239,191,189,125,239,191,189,239,191,189,239,191,189,124,239,191,189,84,58,239,191,189,19,10,124,239,191,189,16,113,38,239,191,189,105,38,239,191,189,96,239,191,189,239,191,189,239,191,189,239,191,189,41,102,45,68,83,15,239,191,189,84,239,191,189,239,191,189,72,214,187,239,191,189,80,73,239,191,189,49,239,191,189,239,191,189,19,239,191,189,98,239,191,189,10,239,191,189,239,191,189,100,239,191,189,70,51,68,82,239,191,189,39,239,191,189,117,4,31,40,239,191,189,63,40,80,0,106,239,191,189,64,239,191,189,239,191,189,2,239,191,189,239,191,189,22,124,239,191,189,239,191,189,4,89,96,83,73,2,239,191,189,118,239,191,189,239,191,189,33,239,191,189,239,191,189,239,191,189,204,141,22,239,191,189,104,18,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,67,114,84,60,20,239,191,189,19,239,191,189,239,191,189,239,191,189,199,169,239,191,189,38,239,191,189,239,191,189,239,191,189,21,30,239,191,189,9,121,239,191,189,98,239,191,189,239,191,189,52,239,191,189,239,191,189,100,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,48,34,112,239,191,189,239,191,189,239,191,189,217,137,6,239,191,189,108,239,191,189,66,102,53,225,166,149,239,191,189,239,191,189,239,191,189,126,239,191,189,60,66,86,68,12,239,191,189,39,27,6,110,104,123,102,78,105,239,191,189,91,48,239,191,189,237,156,146,29,239,191,189,104,239,191,189,239,191,189,239,191,189,22,239,191,189,239,191,189,239,191,189,49,52,104,64,93,239,191,189,239,191,189,222,170,102,70,239,191,189,239,191,189,206,147,60,14,87,239,191,189,217,144,84,239,191,189,37,100,239,191,189,108,23,47,5,22,239,191,189,115,239,191,189,53,25,1,70,239,191,189,99,1,15,239,191,189,44,239,191,189,24,125,239,191,189,239,191,189,7,239,191,189,69,27,33,220,138,66,219,129,96,215,174,239,191,189,80,239,191,189,102,34,239,191,189,121,59,239,191,189,90,37,215,129,97,125,79,76,94,239,191,189,38,116,239,191,189,125,91,88,239,191,189,89,239,191,189,239,191,189,107,123,2,41,96,78,239,191,189,48,239,191,189,91,56,118,127,63,61,31,67,239,191,189,122,13,239,191,189,35,197,177,57,239,191,189,239,191,189,74,13,123,63,239,191,189,124,92,239,191,189,35,239,191,189,32,19,239,191,189,30,239,191,189,3,98,239,191,189,239,191,189,239,191,189,63,59,20,6,222,129,239,191,189,239,191,189,88,60,120,38,239,191,189,10,239,191,189,239,191,189,239,191,189,239,191,189,3,239,191,189,95,239,191,189,239,191,189,127,102,108,239,191,189,239,191,189,31,99,1,68,239,191,189,14,239,191,189,117,97,104,239,191,189,239,191,189,239,191,189,239,191,189,53,239,191,189,107,239,191,189,56,239,191,189,35,105,34,239,191,189,239,191,189,239,191,189,64,127,239,191,189,119,20,239,191,189,239,191,189,56,239,191,189,119,239,191,189,239,191,189,119,215,170,107,239,191,189,36,83,97,239,191,189,20,96,239,191,189,239,191,189,214,156,239,191,189,239,191,189,239,191,189,239,191,189,82,10,239,191,189,239,191,189,121,239,191,189,239,191,189,83,239,191,189,239,191,189,77,14,239,191,189,23,239,191,189,30,97,75,239,191,189,239,191,189,239,191,189,239,191,189,122,7,43,31,0,124,62,91,239,191,189,60,222,153,239,191,189,239,191,189,239,191,189,8,49,124,239,191,189,209,153,200,139,5,239,191,189,110,80,239,191,189,58,239,191,189,68,40,224,180,143,239,191,189,239,191,189,90,239,191,189,109,20,94,239,191,189,17,47,36,239,191,189,239,191,189,89,88,26,59,35,44,4,239,191,189,123,37,124,239,191,189,43,239,191,189,32,55,239,191,189,239,191,189,239,191,189,239,191,189,38,27,102,214,141,64,239,191,189,59,24,122,239,191,189,125,239,191,189,92,93,239,191,189,9,4,239,191,189,239,191,189,239,191,189,46,124,239,191,189,92,65,239,191,189,61,119,26,121,107,239,191,189,239,191,189,62,239,191,189,68,239,191,189,239,191,189,112,200,153,1,79,239,191,189,239,191,189,239,191,189,41,61,239,191,189,239,191,189,5,43,72,239,191,189,239,191,189,239,191,189,48,239,191,189,46,239,191,189,239,191,189,96,92,18,57,239,191,189,31,239,191,189,82,91,33,66,239,191,189,67,45,45,222,177,115,100,239,191,189,239,191,189,44,239,191,189,101,239,191,189,239,191,189,81,9,75,125,239,191,189,65,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,113,63,9,77,78,239,191,189,239,191,189,239,191,189,68,5,239,191,189,239,191,189,25,126,239,191,189,239,191,189,239,191,189,239,191,189,51,239,191,189,239,191,189,239,191,189,9,239,191,189,239,191,189,6,239,191,189,61,1,28,75,239,191,189,58,239,191,189,63,51,91,239,191,189,239,191,189,239,191,189,55,239,191,189,60,127,239,191,189,77,50,239,191,189,88,119,239,191,189,45,109,93,64,239,191,189,54,59,102,71,239,191,189,82,239,191,189,40,239,191,189,51,239,191,189,39,63,88,111,75,66,239,191,189,94,8,123,239,191,189,59,239,191,189,239,191,189,239,191,189,239,191,189,79,30,30,221,177,239,191,189,239,191,189,31,75,64,239,191,189,239,191,189,239,191,189,19,239,191,189,94,239,191,189,10,239,191,189,239,191,189,8,239,191,189,239,191,189,239,191,189,239,191,189,55,62,239,191,189,239,191,189,239,191,189,114,239,191,189,108,56,217,154,21,239,191,189,118,239,191,189,91,79,0,1,239,191,189,121,39,103,239,191,189,239,191,189,239,191,189,239,191,189,31,239,191,189,239,191,189,51,74,239,191,189,121,71,81,31,127,239,191,189,14,120,239,191,189,58,43,72,39,239,191,189,5,239,191,189,239,191,189,239,191,189,239,191,189,29,239,191,189,16,239,191,189,239,191,189,33,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,10,103,239,191,189,239,191,189,239,191,189,113,9,47,239,191,189,51,239,191,189,0,126,45,239,191,189,239,191,189,239,191,189,53,25,64,239,191,189,78,75,44,88,104,113,105,239,191,189,239,191,189,37,88,239,191,189,239,191,189,47,239,191,189,124,96,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,119,239,191,189,239,191,189,239,191,189,79,239,191,189,86,114,239,191,189,69,239,191,189,27,239,191,189,110,239,191,189,0,239,191,189,50,0,14,78,15,239,191,189,239,191,189,239,191,189,24,70,239,191,189,239,191,189,239,191,189,63,79,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,25,113,42,239,191,189,239,191,189,239,191,189,3,115,239,191,189,239,191,189,239,191,189,2,239,191,189,239,191,189,86,239,191,189,239,191,189,41,117,6,239,191,189,123,115,15,239,191,189,22,239,191,189,239,191,189,109,239,191,189,233,155,189,56,239,191,189,239,191,189,239,191,189,92,239,191,189,99,239,191,189,239,191,189,43,59,84,239,191,189,239,191,189,239,191,189,80,239,191,189,93,239,191,189,30,239,191,189,239,191,189,26,222,166,11,83,6,35,239,191,189,87,68,91,116,239,191,189,41,73,239,191,189,17,125,31,80,56,239,191,189,55,35,239,191,189,239,191,189,28,239,191,189,93,61,239,191,189,25,239,191,189,239,191,189,239,191,189,126,239,191,189,88,53,239,191,189,8,70,239,191,189,88,239,191,189,53,81,38,239,191,189,239,191,189,75,82,239,191,189,77,239,191,189,94,239,191,189,239,191,189,21,239,191,189,233,142,150,25,86,65,239,191,189,239,191,189,111,203,173,239,191,189,72,239,191,189,71,239,191,189,223,139,239,191,189,118,239,191,189,239,191,189,105,239,191,189,27,239,191,189,239,191,189,91,239,191,189,103,67,239,191,189,239,191,189,122,239,191,189,239,191,189,1,86,239,191,189,124,239,191,189,239,191,189,71,239,191,189,10,99,6,212,159,239,191,189,239,191,189,85,21,239,191,189,45,39,239,191,189,37,239,191,189,239,191,189,19,239,191,189,69,117,239,191,189,239,191,189,239,191,189,65,239,191,189,239,191,189,53,21,239,191,189,63,18,34,95,239,191,189,239,191,189,239,191,189,38,239,191,189,15,112,238,148,168,218,130,239,191,189,69,48,239,191,189,239,191,189,239,191,189,239,191,189,1,29,108,99,56,239,191,189,239,191,189,239,191,189,239,191,189,63,27,239,191,189,239,191,189,11,239,191,189,42,109,92,239,191,189,87,239,191,189,213,134,9,87,239,191,189,33,239,191,189,5,92,85,239,191,189,42,32,65,36,84,92,239,191,189,239,191,189,37,239,191,189,239,191,189,120,239,191,189,76,118,239,191,189,27,239,191,189,92,239,191,189,76,4,44,239,191,189,98,12,69})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "xclientdev3",
                        container: "testcc7df4da71239455288caf55f02ba8ca4",
                        blob: "blob1",
                        body: body,
                        appendPosition: 0,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test000135 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\000135_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\000135_s.txt", Encoding.UTF8);

    public Test000135() : base(recordedRequest, recordedResponse, "xclientdev3")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,109,80,45,38,239,191,189,14,64,239,191,189,239,191,189,106,239,191,189,92,239,191,189,239,191,189,239,191,189,210,136,119,239,191,189,68,92,15,239,191,189,112,127,239,191,189,124,115,36,110,23,127,239,191,189,226,173,177,105,97,119,239,191,189,107,96,101,58,239,191,189,239,191,189,239,191,189,14,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,16,65,239,191,189,239,191,189,65,239,191,189,239,191,189,30,239,191,189,239,191,189,123,239,191,189,43,239,191,189,17,33,30,21,114,21,239,191,189,239,191,189,239,191,189,78,239,191,189,206,166,239,191,189,101,118,239,191,189,67,239,191,189,239,191,189,239,191,189,108,13,239,191,189,31,239,191,189,239,191,189,76,239,191,189,106,239,191,189,206,133,47,113,237,142,151,96,239,191,189,20,239,191,189,85,239,191,189,114,239,191,189,203,185,79,58,55,91,43,239,191,189,20,107,239,191,189,239,191,189,54,239,191,189,98,63,239,191,189,239,191,189,73,118,239,191,189,119,239,191,189,41,239,191,189,85,239,191,189,212,183,239,191,189,239,191,189,17,20,239,191,189,74,48,239,191,189,114,89,79,239,191,189,239,191,189,35,239,191,189,223,178,28,239,191,189,87,239,191,189,239,191,189,40,105,67,66,103,16,84,239,191,189,239,191,189,35,239,191,189,92,239,191,189,73,112,33,239,191,189,24,15,9,239,191,189,239,191,189,39,239,191,189,239,191,189,196,135,3,239,191,189,56,10,124,239,191,189,199,132,239,191,189,239,191,189,81,239,191,189,31,49,239,191,189,239,191,189,43,239,191,189,124,121,88,111,239,191,189,34,239,191,189,72,239,191,189,118,56,65,239,191,189,239,191,189,239,191,189,239,191,189,81,223,156,25,83,107,239,191,189,239,191,189,239,191,189,81,239,191,189,53,239,191,189,239,191,189,239,191,189,108,239,191,189,239,191,189,32,74,47,239,191,189,83,22,112,52,53,81,75,102,71,239,191,189,63,239,191,189,239,191,189,239,191,189,239,191,189,18,239,191,189,17,239,191,189,239,191,189,239,191,189,64,121,100,88,239,191,189,239,191,189,69,202,131,88,89,239,191,189,239,191,189,239,191,189,239,191,189,31,53,239,191,189,121,96,9,239,191,189,239,191,189,89,239,191,189,6,239,191,189,239,191,189,22,15,239,191,189,239,191,189,239,191,189,19,239,191,189,11,239,191,189,80,239,191,189,126,32,124,41,239,191,189,60,35,68,96,106,239,191,189,239,191,189,6,25,70,54,125,111,239,191,189,239,191,189,71,92,239,191,189,116,239,191,189,239,191,189,239,191,189,119,239,191,189,67,239,191,189,239,191,189,239,191,189,64,239,191,189,239,191,189,14,29,239,191,189,239,191,189,37,127,239,191,189,51,239,191,189,239,191,189,239,191,189,239,191,189,30,239,191,189,239,191,189,98,22,55,239,191,189,200,181,65,126,83,239,191,189,117,239,191,189,68,239,191,189,39,29,6,239,191,189,239,191,189,96,239,191,189,26,239,191,189,33,239,191,189,37,64,239,191,189,59,41,239,191,189,239,191,189,239,191,189,102,239,191,189,239,191,189,239,191,189,123,239,191,189,28,204,159,127,239,191,189,239,191,189,239,191,189,73,60,239,191,189,100,239,191,189,52,115,60,239,191,189,72,62,22,239,191,189,116,72,66,42,51,239,191,189,239,191,189,239,191,189,116,94,90,239,191,189,228,142,147,65,239,191,189,239,191,189,113,43,239,191,189,4,115,214,137,101,87,239,191,189,105,58,239,191,189,239,191,189,239,191,189,34,239,191,189,239,191,189,92,85,239,191,189,5,239,191,189,107,239,191,189,38,10,21,80,229,168,186,239,191,189,91,239,191,189,239,191,189,239,191,189,111,239,191,189,108,239,191,189,239,191,189,82,10,116,58,212,172,239,191,189,239,191,189,239,191,189,15,239,191,189,69,33,108,71,112,60,77,239,191,189,116,20,114,26,239,191,189,239,191,189,45,9,239,191,189,91,56,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,81,94,31,239,191,189,239,191,189,239,191,189,239,191,189,104,58,56,115,86,51,239,191,189,239,191,189,43,239,191,189,239,191,189,239,191,189,196,173,239,191,189,239,191,189,28,102,239,191,189,96,239,191,189,239,191,189,45,239,191,189,109,120,239,191,189,239,191,189,110,84,239,191,189,115,239,191,189,239,191,189,36,239,191,189,239,191,189,101,5,5,39,80,239,191,189,58,239,191,189,239,191,189,50,223,171,239,191,189,3,40,81,56,239,191,189,239,191,189,12,127,6,221,131,239,191,189,49,239,191,189,50,108,111,234,137,179,209,182,96,239,191,189,56,239,191,189,7,239,191,189,239,191,189,69,239,191,189,80,239,191,189,81,94,33,72,239,191,189,76,239,191,189,81,95,39,239,191,189,239,191,189,31,239,191,189,7,103,122,72,86,239,191,189,239,191,189,77,199,169,0,57,239,191,189,25,239,191,189,239,191,189,239,191,189,239,191,189,59,125,239,191,189,239,191,189,74,38,239,191,189,60,239,191,189,127,87,56,39,239,191,189,239,191,189,85,239,191,189,125,10,239,191,189,121,88,239,191,189,3,239,191,189,120,72,239,191,189,124,204,183,221,143,239,191,189,95,239,191,189,43,50,28,83,90,25,42,105,239,191,189,239,191,189,239,191,189,98,239,191,189,122,45,29,119,239,191,189,59,227,179,130,62,239,191,189,239,191,189,44,239,191,189,0,239,191,189,121,239,191,189,90,61,239,191,189,41,239,191,189,96,239,191,189,239,191,189,95,46,96,13,6,239,191,189,239,191,189,14,2,239,191,189,239,191,189,102,239,191,189,124,239,191,189,239,191,189,74,117,46,90,42,239,191,189,125,239,191,189,40,37,239,191,189,81,116,239,191,189,239,191,189,239,191,189,219,181,83,116,55,239,191,189,239,191,189,29,239,191,189,97,45,18,239,191,189,239,191,189,239,191,189,239,191,189,127,239,191,189,22,65,116,4,3,239,191,189,239,191,189,32,205,191,64,239,191,189,42,221,165,239,191,189,239,191,189,199,154,53,239,191,189,109,123,16,239,191,189,239,191,189,115,106,48,95,101,239,191,189,209,176,239,191,189,127,239,191,189,215,177,239,191,189,239,191,189,22,14,57,239,191,189,12,55,79,109,239,191,189,18,239,191,189,92,73,6,239,191,189,239,191,189,99,103,59,74,38,239,191,189,110,90,104,239,191,189,121,55,37,117,239,191,189,22,5,82,239,191,189,95,66,51,239,191,189,239,191,189,35,239,191,189,117,77,108,122,239,191,189,239,191,189,239,191,189,239,191,189,32,111,118,73,239,191,189,37,239,191,189,239,191,189,116,45,239,191,189,24,71,69,52,239,191,189,87,239,191,189,95,72,239,191,189,48,215,169,38,41,123,33,239,191,189,239,191,189,87,239,191,189,56,107,84,110,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,99,239,191,189,99,239,191,189,11,239,191,189,48,24,239,191,189,35,239,191,189,73,239,191,189,54,239,191,189,239,191,189,35,239,191,189,239,191,189,127,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,65,239,191,189,98,222,138,32,113,115,239,191,189,27,116,74,8,98,239,191,189,199,134,239,191,189,53,100,239,191,189,211,152,1,239,191,189,63,113,55,239,191,189,239,191,189,43,239,191,189,64,83,73,239,191,189,45,107,43,22,127,37,239,191,189,7,31,96,119,239,191,189,239,191,189,13,103,92,239,191,189,239,191,189,239,191,189,109,3,96,8,74,239,191,189,57,239,191,189,239,191,189,239,191,189,10,239,191,189,25,66,239,191,189,26,87,30,239,191,189,219,145,239,191,189,118,239,191,189,239,191,189,122,239,191,189,127,239,191,189,50,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "xclientdev3",
                        container: "testc60628ce5af02432b9660b3c019be6194",
                        blob: "blob1",
                        body: body,
                        appendPosition: 0,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test000132 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\000132_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\000132_s.txt", Encoding.UTF8);

    public Test000132() : base(recordedRequest, recordedResponse, "xclientdev3")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,239,191,189,11,239,191,189,239,191,189,239,191,189,239,191,189,31,239,191,189,239,191,189,69,111,239,191,189,102,29,36,91,239,191,189,109,239,191,189,18,31,92,28,239,191,189,97,125,120,239,191,189,239,191,189,78,21,239,191,189,76,66,239,191,189,35,21,60,239,191,189,22,121,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,25,125,42,212,172,239,191,189,209,175,239,191,189,239,191,189,114,63,52,27,239,191,189,47,239,191,189,72,35,91,1,70,107,239,191,189,239,191,189,239,191,189,239,191,189,93,34,239,191,189,98,239,191,189,239,191,189,239,191,189,99,36,65,59,239,191,189,113,18,239,191,189,35,239,191,189,77,239,191,189,69,111,78,239,191,189,64,239,191,189,239,191,189,117,24,55,239,191,189,39,3,239,191,189,60,81,99,35,34,239,191,189,98,239,191,189,239,191,189,239,191,189,77,127,239,191,189,73,99,34,239,191,189,95,239,191,189,84,36,15,87,239,191,189,239,191,189,239,191,189,50,239,191,189,44,102,26,55,239,191,189,52,239,191,189,58,239,191,189,239,191,189,107,63,239,191,189,239,191,189,239,191,189,239,191,189,55,23,44,239,191,189,20,9,239,191,189,50,239,191,189,23,66,11,239,191,189,118,27,101,239,191,189,239,191,189,37,239,191,189,21,239,191,189,125,239,191,189,41,34,31,239,191,189,113,108,76,124,239,191,189,116,239,191,189,6,5,24,93,82,5,73,29,125,47,106,30,80,239,191,189,57,45,239,191,189,7,222,150,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,211,159,36,239,191,189,239,191,189,239,191,189,239,191,189,1,107,95,239,191,189,114,199,129,15,86,96,10,239,191,189,239,191,189,1,239,191,189,239,191,189,55,63,239,191,189,117,239,191,189,239,191,189,22,98,122,38,115,126,101,37,114,239,191,189,239,191,189,112,28,239,191,189,122,239,191,189,239,191,189,213,133,239,191,189,64,56,239,191,189,239,191,189,57,239,191,189,48,239,191,189,239,191,189,107,71,26,61,36,85,239,191,189,41,75,83,2,239,191,189,49,239,191,189,90,71,239,191,189,62,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,78,126,56,6,64,239,191,189,50,239,191,189,239,191,189,125,108,111,239,191,189,239,191,189,36,15,74,20,54,239,191,189,3,114,239,191,189,75,239,191,189,109,42,79,239,191,189,119,50,64,94,200,180,43,239,191,189,239,191,189,67,239,191,189,20,239,191,189,45,239,191,189,52,20,87,109,202,142,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,30,239,191,189,91,239,191,189,113,24,75,44,16,239,191,189,239,191,189,239,191,189,22,98,239,191,189,98,239,191,189,22,69,239,191,189,22,239,191,189,21,239,191,189,239,191,189,239,191,189,239,191,189,125,239,191,189,99,63,239,191,189,86,11,239,191,189,112,120,49,122,21,117,8,4,239,191,189,239,191,189,239,191,189,119,48,239,191,189,79,29,113,239,191,189,239,191,189,239,191,189,76,239,191,189,239,191,189,94,121,51,205,157,239,191,189,121,239,191,189,11,239,191,189,96,234,172,155,47,115,13,239,191,189,119,28,239,191,189,239,191,189,239,191,189,239,191,189,63,70,239,191,189,67,106,52,124,239,191,189,239,191,189,239,191,189,1,239,191,189,107,87,36,239,191,189,47,108,239,191,189,239,191,189,100,113,239,191,189,102,120,239,191,189,125,69,239,191,189,239,191,189,239,191,189,127,52,94,102,239,191,189,239,191,189,55,239,191,189,28,239,191,189,17,217,154,77,204,162,118,83,112,239,191,189,19,28,21,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,106,239,191,189,110,85})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "xclientdev3",
                        container: "testc60628ce5af02432b9660b3c019be6194",
                        blob: "blob1",
                        body: body,
                        appendPosition: 0,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test000141 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\000141_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\000141_s.txt", Encoding.UTF8);

    public Test000141() : base(recordedRequest, recordedResponse, "xclientdev3")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{14,239,191,189,106,8,239,191,189,3,239,191,189,92,239,191,189,104,76,239,191,189,84,123,61,239,191,189,104,239,191,189,239,191,189,60,84,12,239,191,189,239,191,189,118,239,191,189,19,60,115,68,239,191,189,239,191,189,2,239,191,189,239,191,189,239,191,189,18,88,74,4,239,191,189,67,239,191,189,239,191,189,77,16,21,239,191,189,118,239,191,189,98,239,191,189,123,17,76,1,239,191,189,106,239,191,189,233,180,190,104,126,239,191,189,239,191,189,61,239,191,189,16,118,212,156,16,100,239,191,189,239,191,189,102,111,112,239,191,189,239,191,189,239,191,189,239,191,189,104,239,191,189,70,239,191,189,11,239,191,189,239,191,189,239,191,189,20,239,191,189,90,239,191,189,62,239,191,189,84,239,191,189,57,239,191,189,82,98,239,191,189,117,59,239,191,189,99,239,191,189,43,239,191,189,127,239,191,189,16,239,191,189,239,191,189,0,239,191,189,122,116,50,28,73,239,191,189,239,191,189,239,191,189,239,191,189,113,82,239,191,189,239,191,189,26,195,140,239,191,189,108,239,191,189,124,11,230,168,166,239,191,189,239,191,189,11,74,32,78,239,191,189,3,239,191,189,56,6,239,191,189,8,239,191,189,239,191,189,203,132,42,16,51,86,239,191,189,90,38,66,239,191,189,63,17,111,239,191,189,239,191,189,118,239,191,189,239,191,189,43,239,191,189,108,81,4,239,191,189,239,191,189,64,239,191,189,239,191,189,24,239,191,189,239,191,189,218,176,239,191,189,239,191,189,239,191,189,115,68,3,216,176,35,239,191,189,203,165,239,191,189,106,239,191,189,124,91,89,25,239,191,189,45,24,239,191,189,12,97,239,191,189,239,191,189,49,239,191,189,13,239,191,189,239,191,189,100,96,239,191,189,239,191,189,239,191,189,2,106,239,191,189,83,239,191,189,72,114,56,44,239,191,189,239,191,189,239,191,189,8,239,191,189,46,239,191,189,30,239,191,189,110,239,191,189,17,239,191,189,99,239,191,189,239,191,189,22,35,239,191,189,64,239,191,189,239,191,189,216,139,88,239,191,189,105,104,63,239,191,189,102,239,191,189,53,239,191,189,239,191,189,81,239,191,189,79,239,191,189,90,69,239,191,189,122,239,191,189,101,239,191,189,75,239,191,189,18,49,79,79,239,191,189,77,84,7,125,100,63,29,239,191,189,68,239,191,189,123,239,191,189,239,191,189,24,239,191,189,85,15,199,151,239,191,189,239,191,189,239,191,189,7,239,191,189,37,103,67,30,239,191,189,44,239,191,189,23,239,191,189,74,88,117,73,78,239,191,189,76,60,239,191,189,239,191,189,239,191,189,117,239,191,189,21,239,191,189,239,191,189,87,2,106,239,191,189,239,191,189,239,191,189,76,31,88,239,191,189,239,191,189,239,191,189,239,191,189,23,239,191,189,99,52,239,191,189,239,191,189,36,11,239,191,189,239,191,189,74,81,107,28,43,114,120,82,239,191,189,108,100,41,51,95,239,191,189,89,239,191,189,41,41,239,191,189,239,191,189,80,61,239,191,189,239,191,189,239,191,189,17,120,239,191,189,211,140,75,65,239,191,189,109,111,239,191,189,124,32,239,191,189,239,191,189,75,239,191,189,239,191,189,239,191,189,239,191,189,3,112,55,0,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,20,215,155,78,96,239,191,189,239,191,189,239,191,189,239,191,189,24,239,191,189,239,191,189,84,239,191,189,66,8,125,21,67,4,239,191,189,239,191,189,239,191,189,17,13,8,76,210,144,106,118,239,191,189,115,90,239,191,189,239,191,189,239,191,189,75,239,191,189,239,191,189,110,239,191,189,125,5,38,18,28,100,239,191,189,239,191,189,100,239,191,189,239,191,189,239,191,189,106,239,191,189,9,61,83,239,191,189,239,191,189,10,80,239,191,189,113,4,126,239,191,189,37,97,54,49,52,101,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,21,239,191,189,5,239,191,189,239,191,189,126,239,191,189,239,191,189,215,148,239,191,189,239,191,189,92,100,98,207,148,33,239,191,189,34,62,91,239,191,189,51,239,191,189,69,94,114,89,124,81,87,11,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,14,239,191,189,9,79,239,191,189,239,191,189,56,74,9,49,239,191,189,239,191,189,239,191,189,239,191,189,103,200,169,239,191,189,239,191,189,239,191,189,61,239,191,189,32,126,124,91,66,239,191,189,239,191,189,239,191,189,111,239,191,189,39,239,191,189,18,239,191,189,25,239,191,189,239,191,189,26,239,191,189,55,59,44,220,168,239,191,189,239,191,189,239,191,189,66,239,191,189,59,239,191,189,239,191,189,115,94,222,139,239,191,189,47,95,239,191,189,108,70,239,191,189,239,191,189,22,239,191,189,211,175,239,191,189,239,191,189,239,191,189,239,191,189,6,117,239,191,189,239,191,189,215,186,239,191,189,239,191,189,239,191,189,51,239,191,189,82,110,239,191,189,239,191,189,239,191,189,28,239,191,189,239,191,189,99,239,191,189,239,191,189,106,239,191,189,31,108,239,191,189,28,239,191,189,53,83,12,239,191,189,109,239,191,189,239,191,189,239,191,189,239,191,189,87,239,191,189,239,191,189,239,191,189,114,239,191,189,9,54,239,191,189,2,29,33,239,191,189,69,9,116,58,239,191,189,239,191,189,239,191,189,239,191,189,106,239,191,189,7,239,191,189,239,191,189,239,191,189,85,0,239,191,189,202,164,28,74,23,126,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,114,239,191,189,13,3,239,191,189,50,103,97,61,74,239,191,189,79,239,191,189,211,175,57,239,191,189,54,82,124,239,191,189,239,191,189,239,191,189,239,191,189,64,239,191,189,239,191,189,239,191,189,203,166,26,239,191,189,239,191,189,7,239,191,189,239,191,189,239,191,189,239,191,189,100,104,103,239,191,189,93,91,47,48,239,191,189,43,239,191,189,7,29,239,191,189,239,191,189,239,191,189,22,18,16,239,191,189,239,191,189,105,239,191,189,126,127,70,239,191,189,239,191,189,52,239,191,189,239,191,189,108,20,239,191,189,239,191,189,239,191,189,21,239,191,189,239,191,189,239,191,189,239,191,189,16,78,239,191,189,11,196,136,239,191,189,239,191,189,239,191,189,59,239,191,189,239,191,189,239,191,189,239,191,189,82,23,239,191,189,119,239,191,189,239,191,189,79,71,239,191,189,67,239,191,189,239,191,189,239,191,189,102,117,122,239,191,189,239,191,189,26,49,114,239,191,189,239,191,189,31,205,150,239,191,189,28,239,191,189,239,191,189,239,191,189,239,191,189,51,45,92,239,191,189,239,191,189,79,20,107,51,239,191,189,239,191,189,69,239,191,189,39,239,191,189,239,191,189,74,65,112,239,191,189,223,132,117,239,191,189,89,239,191,189,239,191,189,101,9,50,239,191,189,25,69,239,143,179,10,239,191,189,123,205,175,239,191,189,239,191,189,239,191,189,120,100,239,191,189,239,191,189,78,239,191,189,110,105,4,239,191,189,239,191,189,239,191,189,239,191,189,44,64,239,191,189,239,191,189,97,0,45,239,191,189,239,191,189,203,152,10,239,191,189,91,239,191,189,239,191,189,44,47,239,191,189,198,175,239,191,189,54,3,239,191,189,239,191,189,96,40,239,191,189,65,239,191,189,239,191,189,239,191,189,69,239,191,189,94,239,191,189,30,77,239,191,189,239,191,189,47,120,239,191,189,14,239,191,189,239,191,189,118,239,191,189,116,239,191,189,239,191,189,41,239,191,189,21,75,9,239,191,189,33,239,191,189,239,191,189,5,8,239,191,189,212,184,14,58,239,191,189,68,30,13,239,191,189,69,127,104,239,191,189,239,191,189,239,191,189,239,191,189,92,59,105,46,239,191,189,11,48,118,84,51,239,191,189,239,191,189,93,123,38,239,191,189,239,191,189,85,239,191,189,239,191,189,220,134,86,239,191,189,230,159,170,239,191,189,239,191,189,108,239,191,189,98,239,191,189,239,191,189,239,191,189,239,191,189,84,239,191,189,2,2,9,35,239,191,189,239,191,189,16,59,44,239,191,189,88,239,191,189,216,159,239,191,189,87,14,239,191,189,239,191,189,72,22,96,239,191,189,239,191,189,232,134,154,239,191,189,239,191,189,89,101,30,83,239,191,189,239,191,189,239,191,189,239,191,189,107,239,191,189,239,191,189,115,239,191,189,61,53,239,191,189,14,98,99,239,191,189,239,191,189,239,191,189,93,239,191,189,111,239,191,189,7,100,117,79,239,191,189,239,191,189,239,191,189,72,239,191,189,75,67,239,191,189,84,62,121,229,157,163,127,93,93,84,120,56,239,191,189,0,0,112,239,191,189,239,191,189,103,26,26,40,239,191,189,6,68,90,239,191,189,239,191,189,61,239,191,189,239,191,189,239,191,189,31,239,191,189,82,239,191,189,110,239,191,189,239,191,189,71,35,18,51,239,191,189,239,191,189,60,199,132,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,40,239,191,189,44,239,191,189,115,239,191,189,66,239,191,189,239,191,189,31,111,122,239,191,189,25,239,191,189,108,1,239,191,189,0,32,239,191,189,8,239,191,189,239,191,189,25,7,239,191,189,105,239,191,189,86,239,191,189,239,191,189,239,191,189,239,191,189,38,239,191,189,239,191,189,45,125,239,191,189,239,191,189,239,191,189,239,191,189,56,54,35,239,191,189,215,137,239,191,189,239,191,189,239,191,189,239,191,189,49,239,191,189,55,239,191,189,89,239,191,189,239,191,189,75,239,191,189,112,25,239,191,189,239,191,189,35,15,239,191,189,239,191,189,6,239,191,189,239,191,189,239,191,189,105,21,48,239,191,189,239,191,189,227,190,146,107,33,239,191,189,239,191,189,26,239,191,189,56,239,191,189,21,239,191,189,239,191,189,239,191,189,71,236,130,170,239,191,189,95,0,239,191,189,79,1,239,191,189,0,116,54,200,149,6,43,118,239,191,189,239,191,189,54,79,120,239,191,189,239,191,189,94,215,153,114,100,34,239,191,189,69,124,239,191,189,239,191,189,4,239,191,189,239,191,189,239,191,189,66,105,239,191,189,239,191,189,118,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,44,239,191,189,220,142,239,191,189,50,49,239,191,189,239,191,189,239,191,189,34,222,191,239,191,189,75,2,239,191,189,38,239,191,189,239,191,189,239,191,189,118,204,180,239,191,189,54,239,191,189,98,53,239,191,189,239,191,189,55,70,216,183,239,191,189,96,84,16,239,191,189,65,12,239,191,189,239,191,189,119,239,191,189,239,191,189,239,191,189,103,239,191,189,58,7,239,191,189,24,239,191,189,125,89,239,191,189,239,191,189,63,239,191,189,5,7,239,191,189,239,191,189,57,239,191,189,239,191,189,44,21,15,239,191,189,239,191,189,239,191,189,239,191,189,60,23,127,231,177,148,73,239,191,189,239,191,189,63,239,191,189,239,191,189,239,191,189,239,191,189,83,27,2,84,239,191,189,209,141,41,207,184,43,239,191,189,59,239,191,189,43,118,239,191,189,46,239,191,189,65,66,61,239,191,189,35,239,191,189,67,239,191,189,88,239,191,189,239,191,189,239,191,189,49,239,191,189,239,191,189,99,33,239,191,189,239,191,189,46,239,191,189,239,191,189,14,21,239,191,189,239,191,189,239,191,189,112,229,161,184,22,59,115,48,203,142,239,191,189,239,191,189,239,191,189,29,239,191,189,63,10,239,191,189,55,239,191,189,97,239,191,189,213,145,84,239,191,189,239,191,189,8,239,191,189,239,191,189,45,26,239,191,189,239,191,189,42,239,191,189,29,120,239,191,189,239,191,189,27,103,239,191,189,239,191,189,15,28,239,191,189,17,3,85,4,41,239,191,189,226,152,165,16,16,100,239,191,189,239,191,189,106,239,191,189,30,96,239,191,189,65,239,191,189,239,191,189,34,239,191,189,65,126,239,191,189,239,191,189,51,66,239,191,189,56,239,191,189,239,191,189,5,56,239,191,189,4,127,239,191,189,97,239,191,189,239,191,189,13,19,35,47,239,191,189,239,191,189,120,50,239,191,189,239,191,189,239,191,189,30,68,51,113,239,191,189,28,23,239,191,189,113,206,142,43,239,191,189,239,191,189,101,106,118,92,5,239,191,189,239,191,189,109,12,21,126,30,79,25,53,239,191,189,16,239,191,189,94,196,129,239,191,189,5,54,28,99,239,191,189,239,191,189,20,239,191,189,126,239,191,189,82,69,75,89,2,213,133,69,115,239,191,189,55,29,239,191,189,239,191,189,239,191,189,239,191,189,104,239,191,189,239,191,189,239,191,189,239,191,189,12,104,239,191,189,101,63,63,239,191,189,239,191,189,239,191,189,88,40,239,191,189,239,191,189,239,191,189,9,239,191,189,220,184,58,113,25,80,207,137,239,191,189,67,82,239,191,189,239,191,189,89,93,38,239,191,189,26,70,221,168,239,191,189,194,150,239,191,189,70,239,191,189,88,15,239,191,189,92,239,191,189,239,191,189,47,239,191,189,239,191,189,239,191,189,37,239,191,189,239,191,189,239,191,189,25,126,239,191,189,239,191,189,12,103,100,239,191,189,1,239,191,189,123,239,191,189,44,37,239,191,189,239,191,189,239,191,189,239,191,189,211,153,118,122,95,239,191,189,84,239,191,189,104,239,191,189,96,239,191,189,239,191,189,102,239,191,189,68,239,191,189,118,198,169,239,191,189,239,191,189,82,93,13,239,191,189,239,191,189,121,239,191,189,10,239,191,189,7,223,150,239,191,189,34,33,239,191,189,30,21,239,191,189,58,239,191,189,239,191,189,239,191,189,95,239,191,189,20,239,191,189,239,191,189,113,47,239,191,189,239,191,189,239,191,189,71,25,108,239,191,189,5,239,191,189,58,93,40,89,239,191,189,43,239,191,189,103,35,239,191,189,87,239,191,189,17,239,191,189,223,187,194,173,239,191,189,239,191,189,125,239,191,189,114,51,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,8,50,239,191,189,15,239,191,189,239,191,189,239,191,189,110,65,239,191,189,239,191,189,239,191,189,239,191,189,196,168,25,126,239,191,189,27,21,239,191,189,86,239,191,189,239,191,189,57,93,239,191,189,239,191,189,239,191,189,239,191,189,76,239,191,189,239,191,189,26,239,191,189,239,191,189,239,191,189,84,239,191,189,61,76,239,191,189,17,45,61,239,191,189,239,191,189,239,191,189,25,88,239,191,189,239,191,189,239,191,189,77,239,191,189,115,239,191,189,239,191,189,95,115,239,191,189,122,239,191,189,239,191,189,115,239,191,189,6,239,191,189,239,191,189,90,221,149,126,239,191,189,64,212,173,107,239,191,189,115,239,191,189,32,239,191,189,42,239,191,189,239,191,189,63,104,72,239,191,189,239,191,189,239,191,189,41,239,191,189,239,191,189,239,191,189,81,239,191,189,73,239,191,189,64,222,190,122,102,69,239,191,189,12,239,191,189,198,148,239,191,189,239,191,189,210,149,239,191,189,239,191,189,239,191,189,239,191,189,47,239,191,189,64,239,191,189,239,191,189,17,239,191,189,85,80,110,18,92,239,191,189,239,191,189,239,191,189,96,66,28,239,191,189,122,68,239,191,189,50,239,191,189,239,191,189,43,239,191,189,8,86,239,191,189,50,44,115,239,191,189,26,29,239,191,189,58,35,105,239,191,189,239,191,189,239,191,189,105,239,191,189,39,92,114,83,239,191,189,239,191,189,99,239,191,189,106,239,191,189,239,191,189,33,112,31,239,191,189,239,191,189,94,60,239,191,189,239,191,189,239,191,189,113,96,7,239,191,189,69,239,191,189,84,22,239,191,189,239,191,189,24,72,202,171,227,158,175,70,16,42,239,191,189,239,191,189,75,25,239,191,189,74,45,239,191,189,79,97,239,191,189,1,239,191,189,239,191,189,18,76,239,191,189,239,191,189,239,191,189,81,83,239,191,189,239,191,189,8,39,84,239,191,189,27,239,191,189,239,191,189,239,191,189,216,182,239,191,189,239,191,189,21,239,191,189,70,239,191,189,239,191,189,98,239,191,189,51,221,151,70,58,239,191,189,239,191,189,82,38,239,191,189,98,239,191,189,92,239,191,189,88,16,239,191,189,239,191,189,65,214,142,239,191,189,68,239,191,189,75,239,191,189,4,239,191,189,93,66,239,191,189,38,239,191,189,239,191,189,21,112,239,191,189,25,43,73,110,102,239,191,189,118,220,139,91,239,191,189,221,188,5,70,239,191,189,56,94,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,1,60,239,191,189,239,191,189,239,191,189,66,239,191,189,239,191,189,239,191,189,21,239,191,189,32,110,75,49,110,27,239,191,189,63,239,191,189,239,191,189,239,191,189,239,191,189,98,84,108,123,239,191,189,239,191,189,111,116,122,239,191,189,239,191,189,58,239,191,189,122,61,18,40,49,239,191,189,24,239,191,189,77,239,191,189,239,191,189,119,18,239,191,189,115,93,98,92,239,191,189,123,83,239,191,189,30,239,191,189,86,239,191,189,23,239,191,189,239,191,189,84,239,191,189,124,95,14,239,191,189,66,116,118,239,191,189,98,60,124,45,239,191,189,89,15,92,239,191,189,6,37,239,191,189,239,191,189,105,64,70,239,191,189,31,78,210,139,239,191,189,114,4,239,191,189,239,191,189,15,23,4,239,191,189,48,239,191,189,239,191,189,38,63,215,153,92,106,70,72,55,239,191,189,198,190,24,19,31,239,191,189,18,35,37,239,191,189,34,122,239,191,189,119,51,239,191,189,74,239,191,189,88,17,239,191,189,60,239,191,189,48,67,0,111,25,239,191,189,239,191,189,66,239,191,189,239,191,189,62,59,239,191,189,239,191,189,239,191,189,60,239,191,189,13,239,191,189,71,239,191,189,239,191,189,118,95,101,96,32,78,239,191,189,38,200,137,21,239,191,189,239,191,189,30,88,239,191,189,96,66,24,239,191,189,239,191,189,239,191,189,57,239,191,189,76,77,0,28,85,239,191,189,121,98,239,191,189,239,191,189,239,191,189,16,239,191,189,98,239,191,189,60,82,239,191,189,11,239,191,189,37,239,191,189,44,239,191,189,239,191,189,194,172,239,191,189,47,239,191,189,239,191,189,38,108,20,239,191,189,78,239,191,189,239,191,189,239,191,189,16,239,191,189,68,55,239,191,189,72,69,239,191,189,127,219,140,63,239,191,189,210,134,32,38,57,239,191,189,28,239,191,189,51,239,191,189,239,191,189,9,239,191,189,70,77,239,191,189,239,191,189,127,239,191,189,11,239,191,189,114,239,191,189,239,191,189,69,239,191,189,125,239,191,189,1,83,30,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,40,239,191,189,62,239,191,189,23,239,191,189,75,239,191,189,239,191,189,94,239,191,189,239,191,189,239,191,189,239,191,189,13,239,191,189,239,191,189,239,191,189,96,4,43,239,191,189,20,110,239,191,189,239,191,189,239,191,189,19,115,71,239,191,189,239,191,189,62,239,191,189,239,191,189,122,39,239,191,189,239,191,189,54,116,239,191,189,60,127,239,191,189,115,102,17,28,239,191,189,239,191,189,57,239,191,189,239,191,189,71,239,191,189,41,117,33,239,191,189,113,109,22,23,81,239,191,189,80,39,39,11,239,191,189,82,109,205,183,36,97,239,191,189,113,239,191,189,121,239,191,189,239,191,189,239,191,189,239,191,189,114,53,239,191,189,126,239,191,189,80,239,191,189,108,81,239,191,189,7,239,191,189,37,45,10,34,62,239,191,189,17,2,113,204,188,239,191,189,34,239,191,189,239,191,189,4,239,191,189,39,239,191,189,117,92,239,191,189,222,189,239,191,189,239,191,189,62,239,191,189,4,239,191,189,27,8,239,191,189,127,59,104,102,96,58,239,191,189,239,191,189,18,239,191,189,120,239,191,189,91,78,239,191,189,239,191,189,239,191,189,42,27,239,191,189,73,239,191,189,78,77,239,191,189,239,191,189,239,191,189,87,239,191,189,239,191,189,239,191,189,239,191,189,31,239,191,189,95,44,239,191,189,60,239,191,189,203,143,239,191,189,239,191,189,56,68,239,191,189,77,239,191,189,239,191,189,86,23,239,191,189,239,191,189,30,54,239,191,189,25,25,214,164,51,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,201,184,239,191,189,16,239,191,189,60,80,2,239,191,189,18,22,9,239,191,189,72,239,191,189,89,239,191,189,115,239,191,189,239,191,189,0,108,239,191,189,18,239,191,189,101,73,239,191,189,239,191,189,239,191,189,239,191,189,66,126,239,191,189,1,109,69,239,191,189,239,191,189,239,191,189,28,239,191,189,239,191,189,3,16,239,191,189,91,120,53,18,19,55,239,191,189,239,191,189,75,56,125,239,191,189,44,239,191,189,2,239,191,189,26,211,138,239,191,189,239,191,189,98,239,191,189,9,41,239,191,189,239,191,189,32,14,116,105,239,191,189,30,239,191,189,239,191,189,239,191,189,10,127,30,73,239,191,189,239,191,189,89,239,191,189,239,191,189,25,239,191,189,123,47,239,191,189,9,239,191,189,239,191,189,73,239,191,189,37,46,239,191,189,239,191,189,111,24,110,23,239,191,189,6,239,191,189,55,239,191,189,53,239,191,189,11,239,191,189,106,239,191,189,239,191,189,239,191,189,239,191,189,71,70,239,191,189,8,239,191,189,239,191,189,239,191,189,96,68,94,239,191,189,37,239,191,189,220,169,57,217,176,239,191,189,239,191,189,239,191,189,239,191,189,73,239,191,189,239,191,189,70,102,121,52,61,239,191,189,76,8,239,191,189,239,191,189,25,102,116,239,191,189,41,98,239,191,189,59,239,191,189,239,191,189,117,239,191,189,98,239,191,189,239,191,189,63,123,6,239,191,189,239,191,189,239,191,189,239,191,189,28,93,120,116,43,6,239,191,189,52,28,47,239,191,189,26,32,114,59,239,191,189,120,52,239,191,189,13,43,42,239,191,189,121,23,239,191,189,239,191,189,239,191,189,239,191,189,1,239,191,189,91,239,191,189,49,74,22,23,239,191,189,55,239,191,189,239,191,189,239,191,189,239,191,189,70,239,191,189,72,122,29,3,239,191,189,239,191,189,201,144,239,191,189,239,191,189,239,191,189,92,239,191,189,89,239,191,189,100,26,239,191,189,239,191,189,239,191,189,239,191,189,40,37,239,191,189,239,191,189,239,191,189,63,96,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,30,239,191,189,239,191,189,70,115,239,191,189,203,162,116,87,239,191,189,25,88,239,191,189,96,239,191,189,29,239,191,189,239,191,189,94,239,191,189,239,191,189,239,191,189,222,176,239,191,189,239,191,189,80,239,191,189,19,110,3,124,239,191,189,115,239,191,189,112,29,239,191,189,239,191,189,239,191,189,239,191,189,122,209,156,239,191,189,106,87,222,176,239,191,189,239,191,189,239,191,189,35,15,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,122,18,97,233,133,157,239,191,189,49,239,191,189,62,239,191,189,239,191,189,212,145,239,191,189,18,35,66,239,191,189,96,117,113,223,134,116,35,88,126,239,191,189,48,194,135,239,191,189,239,191,189,83,239,191,189,25,239,191,189,22,35,239,191,189,37,72,113,239,191,189,22,11,239,191,189,52,239,191,189,118,108,239,191,189,71,239,191,189,8,51,239,191,189,116,97,68,76,81,101,124,120,239,191,189,239,191,189,61,7,239,191,189,59,43,239,191,189,239,191,189,79,41,109,239,191,189,93,23,239,191,189,73,96,239,191,189,85,239,191,189,83,74,239,191,189,62,114,239,191,189,239,191,189,83,239,191,189,239,191,189,239,191,189,20,51,17,84,44,239,191,189,58,65,218,135,55,239,191,189,239,191,189,239,191,189,23,74,125,2,239,191,189,38,239,191,189,43,239,191,189,239,191,189,104,239,191,189,239,191,189,118,239,191,189,108,122,70,120,239,191,189,42,6,113,28,217,128,20,6,48,28,107,239,191,189,94,91,106,98,81,239,191,189,55,239,191,189,124,7,106,98,239,191,189,239,191,189,113,239,191,189,239,191,189,27,239,191,189,239,191,189,77,239,191,189,239,191,189,67,11,239,191,189,23,43,18,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,91,109,11,239,191,189,26,239,191,189,15,239,191,189,105,34,239,191,189,15,88,11,15,74,23,20,96,211,139,100,110,39,86,108,239,191,189,11,239,191,189,239,191,189,12,239,191,189,239,191,189,54,113,3,239,191,189,99,1,38,239,191,189,239,191,189,239,191,189,202,167,239,191,189,239,191,189,12,28,239,191,189,121,239,191,189,41,239,191,189,3,239,191,189,239,191,189,239,191,189,51,239,191,189,239,191,189,3,239,191,189,125,21,239,191,189,52,34,239,191,189,11,239,191,189,239,191,189,19,58,75,239,191,189,211,164,127,90,239,191,189,239,191,189,239,191,189,239,191,189,113,39,239,191,189,40,50,122,5,239,191,189,48,82,91,239,191,189,239,191,189,19,239,191,189,239,191,189,239,191,189,107,114,16,60,239,191,189,239,191,189,239,191,189,103,27,35,89,100,239,191,189,239,191,189,10,19,239,191,189,11,239,191,189,4,12,239,191,189,31,5,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,50,239,191,189,239,191,189,115,78,223,183,239,191,189,85,239,191,189,239,191,189,22,86,239,191,189,117,87,239,191,189,81,112,239,191,189,7,239,191,189,239,191,189,123,83,11,239,191,189,65,17,17,239,191,189,239,191,189,100,105,239,191,189,69,91,239,191,189,52,67,95,239,191,189,61,74,239,191,189,239,191,189,89,59,44,61,239,191,189,86,119,239,191,189,42,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,43,106,67,239,191,189,33,44,239,191,189,66,239,191,189,17,39,239,191,189,59,118,239,191,189,44,239,191,189,111,239,191,189,239,191,189,239,191,189,79,21,211,133,73,113,239,191,189,63,36,108,99,239,191,189,96,24,239,191,189,85,239,191,189,41,239,191,189,239,191,189,22,239,191,189,27,21,239,191,189,26,0,15,239,191,189,3,104,85,111,34,239,191,189,85,112,48,216,187,69,3,127,239,191,189,239,191,189,239,191,189,239,191,189,94,239,191,189,239,191,189,32,70,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,46,112,239,191,189,65,33,3,14,81,62,60,239,191,189,239,191,189,87,81,239,191,189,19,23,117,81,33,63,239,191,189,91,38,239,191,189,34,95,239,191,189,239,191,189,36,91,239,191,189,239,191,189,239,191,189,74,239,191,189,239,191,189,94,239,191,189,239,191,189,239,191,189,239,191,189,34,19,239,191,189,239,191,189,239,191,189,5,37,239,191,189,239,191,189,239,191,189,108,108,239,191,189,239,191,189,65,27,62,224,175,150,239,191,189,23,68,50,239,191,189,239,191,189,239,191,189,239,191,189,81,239,191,189,211,156,239,191,189,239,191,189,127,72,52,25,44,90,239,191,189,239,191,189,239,191,189,239,191,189,69,53,239,191,189,123,102,239,191,189,31,239,191,189,5,239,191,189,239,191,189,10,206,191,19,78,94,62,54,239,191,189,239,191,189,239,191,189,75,79,239,191,189,239,191,189,37,239,191,189,85,2,239,191,189,239,191,189,110,239,191,189,239,191,189,42,239,191,189,239,191,189,239,191,189,18,239,191,189,239,191,189,239,191,189,116,121,117,5,239,191,189,239,191,189,86,200,157,38,117,103,111,44,108,239,191,189,239,191,189,12,239,191,189,239,191,189,44,118,96,210,147,98,51,239,191,189,239,191,189,77,239,191,189,58,28,239,191,189,239,191,189,127,113,32,239,191,189,89,239,191,189,239,191,189,239,191,189,71,119,24,123,239,191,189,20,239,191,189,6,239,191,189,199,145,239,191,189,24,239,191,189,114,123,200,153,61,80,239,191,189,58,74,239,191,189,81,239,191,189,78,239,191,189,55,86,62,60,239,191,189,24,90,122,239,191,189,52,239,191,189,239,191,189,239,191,189,239,191,189,84,84,239,191,189,239,191,189,103,206,173,89,239,191,189,18,239,191,189,239,191,189,239,191,189,61,205,153,239,191,189,39,239,191,189,239,191,189,206,142,239,191,189,85,125,0,73,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,116,239,191,189,239,191,189,44,239,191,189,239,191,189,44,239,191,189,239,191,189,89,29,239,191,189,77,239,191,189,239,191,189,4,239,191,189,239,191,189,239,191,189,203,165,95,102,239,191,189,239,191,189,239,191,189,239,191,189,33,22,4,239,191,189,87,215,177,55,239,191,189,28,239,191,189,239,191,189,239,191,189,93,203,164,239,191,189,43,75,71,11,111,239,191,189,239,191,189,39,31,42,65,21,30,239,191,189,117,25,239,191,189,10,115,212,138,239,191,189,212,156,80,239,191,189,239,191,189,78,239,191,189,239,191,189,110,218,186,239,191,189,89,107,125,239,191,189,125,73,239,191,189,55,239,191,189,111,34,239,191,189,32,35,239,191,189,0,82,87,239,191,189,28,101,118,239,191,189,239,191,189,239,191,189,239,191,189,108,79,34,239,191,189,103,90,94,239,191,189,10,239,191,189,239,191,189,87,239,191,189,239,191,189,239,191,189,39,44,45,93,239,191,189,42,2,239,191,189,28,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,55,35,239,191,189,239,191,189,87,21,239,191,189,8,239,191,189,35,126,24,58,42,239,191,189,97,68,55,239,191,189,78,126,239,191,189,48,239,191,189,66,76,37,239,191,189,239,191,189,110,239,191,189,239,191,189,21,202,159,51,40,239,191,189,239,191,189,121,54,36,101,58,72,17,239,191,189,239,191,189,33,33,239,191,189,107,28,239,191,189,84,239,191,189,239,191,189,239,191,189,10,239,191,189,81,35,89,104,239,191,189,2,111,239,191,189,239,191,189,57,239,191,189,239,191,189,94,24,89,39,239,191,189,239,191,189,48,239,191,189,82,126,239,191,189,239,191,189,79,239,191,189,111,118,239,191,189,64,67,18,239,191,189,239,191,189,239,191,189,0,12,239,191,189,120,14,88,71,90,239,191,189,16,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,69,106,239,191,189,239,191,189,239,191,189,97,239,191,189,25,61,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,41,239,191,189,51,89,26,36,38,34,44,10,36,218,183,239,191,189,239,191,189,239,191,189,123,114,67,239,191,189,239,191,189,239,191,189,239,191,189,18,239,191,189,123,239,191,189,59,122,94,239,191,189,239,191,189,239,191,189,239,191,189,91,239,191,189,104,239,191,189,30,71,89,239,191,189,239,191,189,239,191,189,217,138,104,239,191,189,125,34,66,239,191,189,239,191,189,45,239,191,189,32,239,191,189,239,191,189,107,239,191,189,239,191,189,88,80,239,191,189,43,239,191,189,239,191,189,239,191,189,10,107,239,191,189,96,239,191,189,89,99,24,239,191,189,46,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,104,0,58,239,191,189,239,191,189,108,51,239,191,189,239,191,189,57,93,239,191,189,239,191,189,239,191,189,125,44,239,191,189,24,239,191,189,25,122,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,61,23,239,191,189,239,191,189,201,190,239,191,189,122,239,191,189,239,191,189,75,239,191,189,64,239,191,189,239,191,189,239,191,189,21,32,6,121,239,191,189,85,239,191,189,61,118,239,191,189,239,191,189,54,239,191,189,114,125,70,239,191,189,47,27,239,191,189,239,191,189,112,239,191,189,239,191,189,52,3,239,191,189,239,191,189,239,191,189,239,191,189,109,239,191,189,118,110,239,191,189,39,9,239,191,189,239,191,189,67,239,191,189,82,4,12,67,239,191,189,120,206,172,115,206,143,0,117,239,191,189,103,199,190,239,191,189,195,186,239,191,189,239,191,189,239,191,189,115,124,101,3,239,191,189,30,195,142,89,125,239,191,189,29,239,191,189,239,191,189,239,191,189,81,26,19,4,100,9,222,185,1,239,191,189,79,96,74,9,239,191,189,239,191,189,34,239,191,189,33,239,191,189,239,191,189,76,116,7,239,191,189,239,191,189,64,54,239,191,189,239,191,189,239,191,189,239,191,189,34,239,191,189,70,239,191,189,239,191,189,239,191,189,58,217,148,239,191,189,100,70,118,239,191,189,121,239,191,189,90,239,191,189,239,191,189,105,121,11,41,5,239,191,189,11,118,239,191,189,200,168,53,125,42,239,191,189,61,124,239,191,189,85,239,191,189,121,72,4,4,239,191,189,46,239,191,189,239,191,189,55,239,191,189,219,143,239,191,189,41,83,22,239,191,189,64,3,239,191,189,17,239,191,189,16,239,191,189,239,191,189,27,239,191,189,239,191,189,239,191,189,4,18,52,239,191,189,48,6,37,29,119,122,239,191,189,124,13,204,166,239,191,189,0,46,39,215,130,82,69,239,191,189,239,191,189,56,24,118,0,18,239,191,189,78,58,239,191,189,239,191,189,124,239,191,189,58,35,15,127,35,239,191,189,33,106,10,2,31,239,191,189,31,26,239,191,189,89,37,63,239,191,189,204,173,239,191,189,239,191,189,239,191,189,28,100,239,191,189,89,65,19,239,191,189,41,70,239,191,189,11,23,87,94,239,191,189,36,29,239,191,189,53,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,20,239,191,189,36,239,191,189,239,191,189,61,42,32,239,191,189,6,39,66,16,239,191,189,239,191,189,40,239,191,189,239,191,189,84,239,191,189,66,239,191,189,239,191,189,235,168,143,20,239,191,189,239,191,189,29,58,108,6,100,45,89,239,191,189,121,115,239,191,189,239,191,189,239,191,189,239,191,189,87,239,191,189,239,191,189,12,31,69,239,191,189,239,191,189,8,239,191,189,29,239,191,189,69,239,191,189,56,7,68,41,103,42,239,191,189,204,186,60,239,191,189,239,191,189,239,191,189,86,66,101,239,191,189,239,191,189,75,72,239,191,189,75,198,130,239,191,189,125,39,74,50,239,191,189,239,191,189,239,191,189,127,239,191,189,114,47,95,121,239,191,189,209,139,239,191,189,96,239,191,189,239,191,189,121,239,191,189,239,191,189,239,191,189,69,101,239,191,189,80,239,191,189,64,239,191,189,53,239,191,189,3,105,239,191,189,239,191,189,83,239,191,189,239,191,189,22,239,191,189,239,191,189,54,107,94,127,118,239,191,189,102,33,34,111,205,173,239,191,189,239,191,189,239,191,189,77,239,191,189,47,239,191,189,49,110,42,239,191,189,239,191,189,104,239,191,189,239,191,189,82,103,208,152,239,191,189,239,191,189,108,109,239,191,189,239,191,189,83,239,191,189,31,239,191,189,239,191,189,28,85,239,191,189,11,3,239,191,189,239,191,189,239,191,189,239,191,189,16,239,191,189,239,191,189,65,207,183,14,11,115,207,186,239,191,189,52,239,191,189,239,191,189,33,239,191,189,239,191,189,103,99,239,191,189,36,18,239,191,189,100,115,115,239,191,189,239,191,189,239,162,188,7,239,191,189,239,191,189,34,239,191,189,43,23,46,119,71,20,80,239,191,189,37,239,191,189,100,239,191,189,239,191,189,239,191,189,68,101,11,239,191,189,239,191,189,239,191,189,92,67,86,37,239,191,189,44,239,191,189,239,191,189,239,191,189,69,239,191,189,124,86,239,191,189,56,239,191,189,16,239,191,189,239,191,189,62,239,191,189,15,239,191,189,239,191,189,110,239,191,189,119,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,78,239,191,189,239,191,189,32,34,239,191,189,35,239,191,189,99,30,239,191,189,108,43,76,12,121,120,239,191,189,239,191,189,14,239,191,189,239,191,189,52,87,40,21,124,239,191,189,239,191,189,222,133,64,239,191,189,7,239,191,189,76,239,191,189,112,127,239,191,189,4,239,191,189,40,239,191,189,29,239,191,189,66,99,106,40,45,239,191,189,203,157,239,191,189,239,191,189,239,191,189,239,191,189,122,239,191,189,95,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,35,97,239,191,189,239,191,189,7,92,44,9,239,191,189,67,58,239,191,189,239,191,189,25,27,206,177,239,191,189,117,52,86,239,191,189,239,191,189,2,118,4,239,191,189,239,191,189,26,239,191,189,88,124,239,191,189,31,1,239,191,189,122,37,239,191,189,239,191,189,239,191,189,239,191,189,67,115,239,191,189,98,239,191,189,239,191,189,67,239,191,189,239,191,189,239,191,189,43,103,239,191,189,97,41,239,191,189,239,191,189,88,53,101,239,191,189,3,235,190,163,239,191,189,23,112,84,239,191,189,26,214,160,239,191,189,239,191,189,35,115,20,92,105,96,81,239,191,189,97,80,239,191,189,82,239,191,189,239,191,189,206,149,46,105,46,239,191,189,64,239,191,189,208,190,239,191,189,118,239,191,189,116,72,239,191,189,84,239,191,189,59,239,191,189,6,56,124,239,191,189,239,191,189,4,239,191,189,52,239,191,189,109,22,96,119,239,191,189,239,191,189,239,191,189,109,114,239,191,189,123,239,191,189,239,191,189,86,103,239,191,189,221,134,239,191,189,239,191,189,239,191,189,23,239,191,189,122,239,191,189,24,50,239,191,189,42,113,11,239,191,189,98,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,82,239,191,189,239,191,189,83,239,191,189,41,106,239,191,189,38,239,191,189,239,191,189,117,239,191,189,239,191,189,4,113,79,73,124,117,239,191,189,221,185,239,191,189,72,45,112,239,191,189,64,239,191,189,239,191,189,239,191,189,239,191,189,52,239,191,189,20,115,123,239,191,189,15,1,239,191,189,196,180,239,191,189,94,239,191,189,239,191,189,88,74,239,191,189,110,239,191,189,116,54,24,11,109,239,191,189,239,191,189,84,120,239,191,189,239,191,189,202,179,121,109,93,239,191,189,205,171,101,239,191,189,239,191,189,27,10,239,191,189,95,17,239,191,189,80,85,239,191,189,111,61,239,191,189,96,239,191,189,103,14,23,67,239,191,189,122,239,191,189,239,191,189,239,191,189,27,229,139,147,124,125,239,191,189,8,16,239,191,189,27,14,119,14,239,191,189,39,3,34,57,118,239,191,189,239,191,189,239,191,189,13,97,116,239,191,189,239,191,189,33,64,113,62,43,239,191,189,67,44,26,239,191,189,239,191,189,11,239,191,189,52,239,191,189,54,68,239,191,189,239,191,189,239,191,189,111,28,239,191,189,87,239,191,189,104,91,89,43,125,49,8,239,191,189,68,239,191,189,239,191,189,23,239,191,189,239,191,189,239,191,189,239,191,189,123,13,70,73,46,239,191,189,89,239,191,189,239,191,189,115,239,191,189,239,191,189,36,5,239,191,189,25,239,191,189,239,191,189,79,239,191,189,0,239,191,189,239,191,189,239,191,189,77,83,77,17,30,104,10,36,52,239,191,189,15,98,14,116,239,191,189,2,120,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,32,239,191,189,55,239,191,189,64,32,124,239,191,189,123,112,239,191,189,121,239,191,189,11,239,191,189,101,96,104,95,239,191,189,48,239,191,189,52,11,39,56,77,112,88,239,191,189,239,191,189,75,78,51,108,239,191,189,31,40,239,191,189,83,120,239,191,189,239,191,189,239,191,189,239,191,189,0,239,191,189,239,191,189,66,84,85,37,116,239,191,189,239,191,189,3,239,191,189,25,239,191,189,47,112,34,239,191,189,239,191,189,46,239,191,189,86,239,191,189,239,191,189,69,56,126,239,191,189,55,239,191,189,87,239,191,189,118,239,191,189,56,87,239,191,189,21,239,191,189,118,37,239,191,189,67,239,191,189,239,191,189,44,14,2,120,239,191,189,86,23,239,191,189,102,2,239,191,189,87,239,191,189,239,191,189,27,239,191,189,110,60,56,239,191,189,117,124,239,191,189,239,191,189,216,169,13,239,191,189,119,9,239,191,189,18,28,30,24,41,124,63,84,97,64,239,191,189,15,239,191,189,239,191,189,239,191,189,19,24,120,239,191,189,239,191,189,239,191,189,11,239,191,189,96,239,191,189,239,191,189,81,239,191,189,57,73,35,65,93,75,239,191,189,58,239,191,189,239,191,189,239,191,189,91,46,239,191,189,239,191,189,81,239,191,189,109,239,191,189,33,216,150,239,191,189,122,239,191,189,82,25,7,44,239,191,189,105,239,191,189,42,239,191,189,27,23,29,239,191,189,239,191,189,69,239,191,189,239,191,189,126,51,239,191,189,67,239,191,189,239,191,189,51,239,191,189,239,191,189,66,239,191,189,48,199,163,84,239,191,189,104,11,50,239,191,189,13,239,191,189,123,80,49,239,191,189,205,191,52,14,239,191,189,239,191,189,42,19,23,239,191,189,239,191,189,239,191,189,99,211,142,239,191,189,38,14,239,191,189,239,191,189,120,239,191,189,116,42,239,191,189,19,103,239,191,189,239,191,189,239,191,189,53,17,239,191,189,239,191,189,115,105,239,191,189,239,191,189,239,191,189,5,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,64,206,187,127,239,191,189,85,66,55,239,191,189,85,239,191,189,239,191,189,239,191,189,19,239,191,189,239,191,189,91,113,9,239,191,189,239,191,189,239,191,189,122,96,37,77,239,191,189,43,239,191,189,36,239,191,189,48,239,191,189,88,102,69,239,191,189,56,239,191,189,98,239,191,189,239,191,189,67,239,191,189,119,239,191,189,239,191,189,115,70,67,87,25,239,191,189,239,191,189,79,112,83,91,90,239,191,189,239,191,189,22,67,239,191,189,104,239,191,189,0,239,191,189,239,191,189,87,22,35,239,191,189,239,191,189,202,169,239,191,189,239,191,189,239,191,189,124,127,42,239,191,189,239,191,189,210,167,239,191,189,8,239,191,189,239,191,189,81,239,191,189,66,239,191,189,221,151,239,191,189,43,239,191,189,239,191,189,67,239,191,189,239,191,189,44,52,118,239,191,189,44,239,191,189,239,191,189,108,114,239,191,189,12,239,191,189,48,239,191,189,196,149,35,56,239,191,189,239,191,189,101,239,191,189,69,96,239,191,189,239,191,189,18,219,188,60,239,191,189,60,100,239,191,189,239,191,189,239,191,189,92,197,156,98,19,239,191,189,239,191,189,0,53,33,239,191,189,5,237,149,136,112,239,191,189,15,239,191,189,103,239,191,189,21,239,191,189,64,239,191,189,7,239,191,189,53,9,239,191,189,38,58,13,43,57,94,239,191,189,31,239,191,189,239,191,189,239,191,189,69,43,239,191,189,63,12,239,191,189,38,239,191,189,100,123,85,108,28,239,191,189,70,239,191,189,92,239,191,189,11,213,169,239,191,189,101,239,191,189,114,239,191,189,239,191,189,92,42,212,161,107,239,191,189,239,191,189,239,191,189,239,191,189,16,0,239,191,189,25,239,191,189,239,191,189,239,191,189,84,239,191,189,239,191,189,239,191,189,239,191,189,63,80,239,191,189,11,60,79,239,191,189,239,191,189,239,191,189,20,43,201,138,239,191,189,239,191,189,239,191,189,195,154,1,91,239,191,189,91,72,239,191,189,75,40,80,16,40,239,191,189,7,64,105,239,191,189,239,191,189,80,211,157,69,89,37,50,51,114,239,191,189,239,191,189,239,191,189,22,122,239,191,189,10,86,127,239,191,189,239,191,189,239,191,189,8,239,191,189,239,191,189,19,239,191,189,239,191,189,239,191,189,40,13,239,191,189,95,239,191,189,239,191,189,239,191,189,22,38,85,239,191,189,54,239,191,189,39,239,191,189,4,239,191,189,50,58,239,191,189,64,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,72,45,239,191,189,49,90,112,125,10,100,2,96,20,27,239,191,189,239,191,189,239,191,189,0,239,191,189,96,27,239,191,189,50,239,191,189,52,239,191,189,239,191,189,30,116,239,191,189,92,41,239,191,189,239,191,189,74,65,239,191,189,73,35,77,239,191,189,29,28,113,1,42,29,31,239,191,189,111,239,191,189,239,191,189,239,191,189,113,239,191,189,239,191,189,22,239,191,189,239,191,189,79,239,191,189,81,8,123,7,239,191,189,239,191,189,36,208,176,239,191,189,220,137,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,10,195,164,122,4,216,172,62,27,23,87,43,93,239,191,189,212,182,116,20,239,191,189,106,39,86,239,191,189,79,239,191,189,28,239,191,189,96,239,191,189,239,191,189,83,85,236,157,140,239,191,189,239,191,189,4,239,191,189,90,239,191,189,239,191,189,13,120,239,191,189,239,191,189,239,191,189,8,239,191,189,39,239,191,189,239,191,189,86,119,239,191,189,239,191,189,85,239,191,189,124,239,191,189,239,191,189,239,191,189,68,61,4,239,191,189,112,2,72,197,156,16,239,191,189,15,239,191,189,239,191,189,239,191,189,239,191,189,111,239,191,189,34,202,142,239,191,189,239,191,189,84,239,191,189,116,239,191,189,239,191,189,239,191,189,82,239,191,189,231,129,188,116,239,191,189,116,239,191,189,25,239,191,189,239,191,189,13,239,191,189,239,191,189,1,71,239,191,189,22,239,191,189,127,21,125,239,191,189,15,80,239,191,189,77,239,191,189,239,191,189,239,191,189,25,239,191,189,41,73,239,191,189,21,239,191,189,239,191,189,41,27,97,239,191,189,239,191,189,43,9,239,191,189,36,23,82,239,191,189,239,191,189,239,191,189,239,191,189,27,61,10,77,113,108,223,130,239,191,189,239,191,189,29,239,191,189,58,239,191,189,65,80,239,191,189,26,239,191,189,239,191,189,30,85,239,191,189,110,5,239,191,189,111,53,93,30,113,69,239,191,189,14,12,126,239,191,189,28,99,73,239,191,189,239,191,189,239,191,189,239,191,189,77,207,157,239,191,189,239,191,189,101,239,191,189,111,239,191,189,31,239,191,189,239,191,189,113,239,191,189,108,239,191,189,112,77,103,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,52,239,191,189,36,239,191,189,239,191,189,239,191,189,41,239,191,189,109,239,191,189,32,53,49,239,191,189,109,239,191,189,31,2,95,239,191,189,16,36,12,239,191,189,239,191,189,239,191,189,76,53,45,29,239,191,189,58,200,175,239,191,189,65,98,239,191,189,65,239,191,189,123,122,239,191,189,239,191,189,54,107,239,191,189,239,191,189,111,239,191,189,239,191,189,55,16,239,191,189,15,239,191,189,61,239,191,189,239,191,189,239,191,189,239,191,189,76,64,239,191,189,106,239,191,189,105,239,191,189,119,239,191,189,239,191,189,74,30,239,191,189,239,191,189,239,191,189,106,39,121,89,239,191,189,108,197,146,116,126,41,3,239,191,189,49,4,118,239,191,189,118,23,47,58,239,191,189,85,58,2,8,103,239,191,189,239,191,189,93,25,239,191,189,47,102,90,21,114,239,191,189,239,191,189,113,239,191,189,239,191,189,61,239,191,189,239,191,189,102,60,70,239,191,189,69,239,191,189,239,191,189,120,101,111,123,239,191,189,63,87,239,191,189,4,12,239,191,189,22,100,239,191,189,239,191,189,57,239,191,189,239,191,189,4,46,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,106,104,239,191,189,239,191,189,33,7,239,191,189,239,191,189,114,7,239,191,189,239,191,189,239,191,189,67,51,64,239,191,189,108,122,239,191,189,38,239,191,189,40,239,191,189,2,111,239,191,189,65,86,8,209,188,239,191,189,239,191,189,103,214,188,30,239,191,189,4,27,61,239,191,189,8,67,239,191,189,239,191,189,239,191,189,239,191,189,58,46,239,191,189,239,191,189,239,191,189,63,9,201,177,68,87,239,191,189,106,54,14,18,21,239,191,189,92,239,191,189,205,137,117,239,191,189,233,148,134,239,191,189,239,191,189,119,22,112,104,85,239,191,189,239,191,189,81,62,239,191,189,239,191,189,239,191,189,84,49,239,191,189,196,185,239,191,189,107,239,191,189,48,239,191,189,239,191,189,117,106,229,177,185,239,191,189,239,191,189,77,239,191,189,127,10,57,45,239,191,189,27,21,239,191,189,239,191,189,239,191,189,239,191,189,86,239,191,189,239,191,189,120,88,239,191,189,25,47,13,27,239,191,189,239,191,189,239,191,189,69,239,191,189,239,191,189,111,239,191,189,213,156,239,191,189,55,239,191,189,51,74,239,191,189,239,191,189,221,158,114,239,191,189,122,110,10,122,239,191,189,239,191,189,108,88,4,239,191,189,113,64,239,191,189,239,191,189,123,239,191,189,239,191,189,239,191,189,29,239,191,189,239,191,189,239,191,189,37,57,30,239,191,189,46,97,34,59,239,191,189,239,191,189,79,20,31,239,191,189,239,191,189,75,100,3,239,191,189,239,191,189,1,44,239,191,189,64,67,239,191,189,83,239,191,189,239,191,189,239,191,189,18,239,191,189,73,239,191,189,91,239,191,189,239,191,189,62,239,191,189,239,191,189,95,239,191,189,77,239,191,189,91,24,29,239,191,189,239,191,189,239,191,189,44,239,191,189,35,13,40,239,191,189,90,95,13,119,74,15,239,191,189,61,68,213,186,110,239,191,189,104,196,149,239,191,189,76,79,239,191,189,103,115,59,239,191,189,80,239,191,189,42,239,191,189,239,191,189,38,239,191,189,51,32,239,191,189,239,191,189,239,191,189,106,20,239,191,189,239,191,189,16,239,191,189,239,191,189,93,239,191,189,29,79,222,150,239,191,189,239,191,189,217,180,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,70,239,191,189,87,78,239,191,189,239,191,189,59,98,239,191,189,228,171,132,239,191,189,123,118,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,51,121,76,79,10,239,191,189,2,90,107,239,191,189,239,191,189,23,239,191,189,26,239,191,189,55,239,191,189,73,239,191,189,103,114,239,191,189,239,191,189,239,191,189,239,191,189,101,239,191,189,69,99,239,191,189,35,239,191,189,239,191,189,11,239,191,189,239,191,189,85,8,67,10,239,191,189,239,191,189,239,191,189,24,239,191,189,4,114,239,191,189,62,41,239,191,189,23,118,108,120,239,191,189,83,99,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,34,117,84,239,191,189,239,191,189,5,239,191,189,114,239,191,189,239,191,189,112,7,88,97,239,191,189,84,36,239,191,189,239,191,189,239,191,189,127,239,191,189,77,239,191,189,1,239,191,189,239,191,189,89,55,239,191,189,92,239,191,189,239,191,189,113,239,191,189,30,53,92,121,239,191,189,75,3,219,180,127,76,11,67,49,105,239,191,189,239,191,189,239,191,189,13,239,191,189,239,191,189,6,239,191,189,239,191,189,11,102,114,59,239,191,189,102,239,191,189,10,239,191,189,239,191,189,98,30,239,191,189,46,30,239,191,189,123,195,152,93,239,191,189,239,191,189,90,40,239,191,189,23,107,239,191,189,239,191,189,206,185,23,85,123,109,25,239,191,189,239,191,189,52,77,239,191,189,65,36,114,239,191,189,74,10,239,191,189,239,191,189,113,38,19,109,239,191,189,43,114,12,74,109,239,191,189,239,191,189,67,27,24,23,74,239,191,189,77,239,191,189,4,194,180,239,191,189,74,239,191,189,115,116,239,191,189,89,239,191,189,13,239,191,189,239,191,189,126,239,191,189,239,191,189,239,191,189,239,191,189,79,239,191,189,13,239,191,189,89,239,191,189,82,87,38,12,90,239,191,189,239,191,189,239,191,189,1,202,174,114,239,191,189,34,239,191,189,239,191,189,239,191,189,35,239,191,189,239,191,189,83,114,239,191,189,112,113,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,51,91,239,191,189,239,191,189,106,77,104,239,191,189,239,191,189,2,80,239,191,189,7,239,191,189,53,34,239,191,189,20,239,191,189,239,191,189,239,191,189,111,36,239,191,189,229,137,155,239,191,189,228,140,191,58,239,191,189,122,23,239,191,189,41,85,106,239,191,189,239,191,189,29,239,191,189,48,239,191,189,107,239,191,189,59,79,24,239,191,189,103,239,191,189,14,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,205,163,239,191,189,118,239,191,189,108,52,85,29,239,191,189,93,239,191,189,44,103,82,239,191,189,239,191,189,239,191,189,82,121,239,191,189,95,239,191,189,204,172,87,112,239,191,189,239,191,189,43,239,191,189,47,208,167,239,191,189,239,191,189,45,112,239,191,189,64,54,118,30,199,186,32,58,98,239,191,189,21,99,208,167,11,5,109,8,34,239,191,189,57,239,191,189,112,113,239,191,189,45,239,133,159,95,82,23,84,17,66,71,65,239,191,189,18,239,191,189,29,14,8,239,191,189,239,191,189,5,239,191,189,196,161,90,239,191,189,11,239,191,189,101,69,239,191,189,5,44,22,239,191,189,49,239,191,189,239,191,189,92,239,191,189,75,123,239,191,189,201,190,44,53,16,63,28,239,191,189,104,239,191,189,40,239,191,189,239,191,189,42,239,191,189,69,116,70,113,239,191,189,239,191,189,124,65,20,239,191,189,239,191,189,90,103,75,239,191,189,11,125,239,191,189,239,191,189,239,191,189,239,191,189,45,239,191,189,239,191,189,102,73,88,93,99,3,107,239,191,189,6,239,191,189,126,239,191,189,124,217,141,239,191,189,77,124,23,121,239,191,189,228,181,161,239,191,189,239,191,189,239,191,189,32,239,191,189,47,0,23,239,191,189,75,11,239,191,189,116,30,239,191,189,17,80,239,191,189,83,239,191,189,239,191,189,195,142,239,191,189,239,191,189,41,239,191,189,102,21,58,111,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,87,74,53,239,191,189,239,191,189,102,40,48,239,191,189,239,191,189,84,46,239,191,189,6,41,239,191,189,32,239,191,189,239,191,189,8,7,36,239,191,189,239,191,189,239,191,189,1,239,191,189,220,137,17,239,191,189,126,18,239,191,189,5,104,124,239,191,189,102,239,191,189,93,239,191,189,20,239,191,189,127,239,191,189,15,16,239,191,189,239,191,189,115,239,191,189,239,191,189,80,38,239,191,189,85,56,100,239,191,189,84,69,214,150,239,191,189,239,191,189,77,36,239,191,189,20,93,109,95,239,191,189,49,15,239,191,189,1,239,191,189,239,191,189,116,90,239,191,189,239,191,189,239,191,189,239,191,189,79,104,222,187,39,239,191,189,2,239,191,189,9,239,191,189,62,62,239,191,189,61,239,191,189,239,191,189,239,191,189,239,191,189,22,116,70,24,31,23,239,191,189,83,103,114,46,239,191,189,239,191,189,57,239,191,189,239,191,189,59,239,191,189,70,239,191,189,239,191,189,239,191,189,107,103,239,191,189,239,191,189,239,191,189,117,50,239,191,189,48,239,191,189,94,239,191,189,239,191,189,103,239,191,189,55,72,239,191,189,239,191,189,239,191,189,34,239,191,189,239,191,189,14,239,191,189,4,239,191,189,239,191,189,1,221,165,49,239,191,189,66,8,239,191,189,119,127,69,239,191,189,33,239,191,189,66,239,191,189,239,191,189,239,191,189,84,70,4,239,191,189,127,7,25,239,191,189,219,157,239,191,189,239,191,189,239,191,189,239,191,189,58,239,191,189,82,239,191,189,44,239,191,189,67,94,239,191,189,239,191,189,201,129,63,239,191,189,78,77,35,114,239,191,189,81,46,239,191,189,239,191,189,66,38,42,213,146,44,65,239,191,189,239,191,189,121,239,191,189,239,191,189,66,239,191,189,239,191,189,111,35,110,239,191,189,239,191,189,68,239,191,189,239,191,189,239,191,189,102,97,239,191,189,121,31,239,191,189,123,195,137,239,191,189,15,239,191,189,1,239,191,189,239,191,189,50,112,239,191,189,5,8,239,191,189,239,191,189,12,93,96,3,239,191,189,239,191,189,57,29,239,191,189,111,40,99,110,49,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,92,239,191,189,239,191,189,7,110,44,239,191,189,239,191,189,34,105,239,191,189,239,191,189,24,239,191,189,84,48,25,28,239,191,189,239,191,189,239,191,189,107,219,160,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,22,9,10,239,191,189,111,94,125,88,239,191,189,239,191,189,38,118,239,191,189,79,239,191,189,50,74,239,191,189,239,191,189,109,239,191,189,239,191,189,4,102,66,239,191,189,239,191,189,64,116,207,163,61,47,121,82,239,191,189,239,191,189,54,43,239,191,189,239,191,189,239,191,189,239,191,189,83,113,20,112,239,191,189,239,191,189,97,84,239,191,189,239,191,189,38,239,191,189,109,5,239,191,189,239,191,189,127,239,191,189,61,239,191,189,239,191,189,1,239,191,189,70,239,191,189,239,191,189,239,191,189,70,19,239,191,189,239,191,189,239,191,189,33,239,191,189,239,191,189,46,127,70,66,18,123,239,191,189,8,126,239,191,189,72,239,191,189,239,191,189,106,118,239,191,189,239,191,189,82,239,191,189,239,191,189,239,191,189,30,27,64,11,239,191,189,109,13,76,84,239,191,189,112,239,191,189,69,239,191,189,239,191,189,74,18,79,61,3,23,32,239,191,189,123,239,191,189,123,67,16,95,94,107,96,239,191,189,239,191,189,35,239,191,189,58,239,191,189,219,155,112,239,191,189,105,239,191,189,38,239,191,189,37,123,11,119,63,57,239,191,189,239,191,189,119,239,191,189,29,239,191,189,15,65,42,239,191,189,239,191,189,239,191,189,68,16,110,239,191,189,239,191,189,239,191,189,16,47,116,239,191,189,239,191,189,127,239,191,189,101,84,80,86,239,191,189,4,239,191,189,30,50,209,165,64,37,239,191,189,116,211,153,113,115,239,191,189,114,84,22,62,239,191,189,239,191,189,48,103,15,239,191,189,239,191,189,89,239,191,189,70,239,191,189,112,239,191,189,239,191,189,98,239,191,189,5,239,191,189,17,62,239,191,189,77,239,191,189,0,239,191,189,92,239,191,189,48,31,239,191,189,68,17,61,17,239,191,189,34,211,128,14,109,239,191,189,75,72,239,191,189,33,4,20,239,191,189,14,122,239,191,189,239,191,189,66,239,191,189,117,74,239,191,189,47,204,179,239,191,189,58,35,2,239,191,189,51,239,191,189,44,64,36,239,191,189,201,163,91,125,5,239,191,189,223,151,71,43,33,239,191,189,48,239,191,189,239,191,189,101,239,191,189,116,46,239,191,189,239,191,189,91,239,191,189,38,17,36,239,191,189,123,239,191,189,103,239,191,189,239,191,189,85,31,209,158,124,239,191,189,69,34,80,52,107,239,191,189,239,191,189,239,191,189,239,191,189,88,239,191,189,239,191,189,17,239,191,189,18,239,191,189,239,191,189,110,33,52,107,239,191,189,239,191,189,99,239,191,189,239,191,189,83,79,17,239,191,189,48,239,191,189,46,12,83,127,239,191,189,195,139,123,50,239,191,189,239,191,189,3,85,201,187,239,191,189,77,99,125,72,239,191,189,101,45,239,191,189,110,239,191,189,21,71,70,225,128,167,239,191,189,109,239,191,189,6,45,81,126,93,239,191,189,239,191,189,112,239,191,189,194,139,239,191,189,122,239,191,189,116,239,191,189,239,191,189,23,239,191,189,239,191,189,102,16,100,239,191,189,68,53,80,3,239,191,189,32,239,191,189,63,239,191,189,239,191,189,239,191,189,239,191,189,32,239,191,189,239,191,189,239,191,189,239,191,189,44,239,191,189,239,191,189,53,239,191,189,239,191,189,29,11,239,191,189,67,85,239,191,189,39,239,191,189,65,26,239,191,189,99,239,191,189,93,109,196,162,239,191,189,239,191,189,239,191,189,239,191,189,199,144,239,191,189,0,123,18,34,58,99,100,120,239,191,189,105,50,239,191,189,6,220,146,127,239,191,189,223,186,239,191,189,112,60,239,191,189,89,79,103,10,92,239,191,189,239,191,189,239,191,189,85,123,98,66,217,173,4,239,191,189,221,181,54,239,191,189,81,42,117,239,191,189,239,191,189,16,33,86,239,191,189,13,239,191,189,33,195,155,239,191,189,239,191,189,239,191,189,89,8,239,191,189,239,191,189,114,239,191,189,124,239,191,189,239,191,189,239,191,189,209,136,82,239,191,189,21,57,110,239,191,189,46,217,170,69,76,115,117,2,72,239,191,189,65,127,62,239,191,189,49,239,191,189,239,191,189,239,191,189,83,3,239,191,189,78,239,191,189,25,43,87,79,206,161,49,239,191,189,239,191,189,85,11,239,191,189,239,191,189,40,20,239,191,189,112,85,112,239,191,189,239,191,189,98,26,122,239,191,189,87,239,191,189,88,104,239,191,189,106,239,191,189,239,191,189,239,191,189,25,239,191,189,35,239,191,189,96,23,3,89,41,50,104,55,239,191,189,112,239,191,189,239,191,189,110,239,191,189,48,239,191,189,16,239,191,189,113,118,9,239,191,189,72,1,239,191,189,90,239,191,189,24,239,191,189,239,191,189,239,191,189,76,239,191,189,15,125,239,191,189,8,239,191,189,71,117,31,6,239,191,189,119,3,239,191,189,67,38,239,191,189,239,191,189,9,23,239,191,189,47,87,62,239,191,189,88,63,216,189,30,239,191,189,118,41,239,191,189,0,94,60,107,239,191,189,31,239,191,189,239,191,189,87,2,239,191,189,239,191,189,239,191,189,45,23,239,191,189,103,239,191,189,239,191,189,126,239,191,189,63,9,239,191,189,239,191,189,111,239,191,189,1,13,113,77,108,239,191,189,239,191,189,239,191,189,69,41,233,130,181,239,191,189,85,77,239,191,189,91,17,239,191,189,57,239,191,189,57,239,191,189,122,239,191,189,239,191,189,239,191,189,239,191,189,97,239,191,189,110,38,68,86,239,191,189,127,239,191,189,239,191,189,113,51,239,191,189,33,239,191,189,7,45,239,191,189,98,239,191,189,32,84,239,191,189,239,191,189,126,73,239,191,189,239,191,189,239,191,189,111,58,61,239,191,189,239,191,189,42,122,92,113,239,191,189,96,239,191,189,100,201,160,239,191,189,239,191,189,239,191,189,239,191,189,125,77,24,239,191,189,68,11,65,239,191,189,239,191,189,120,239,191,189,12,33,239,191,189,239,191,189,34,54,239,191,189,239,191,189,61,107,239,191,189,239,191,189,115,34,1,35,239,191,189,239,191,189,239,191,189,32,223,178,48,111,239,191,189,86,94,239,191,189,239,191,189,127,239,191,189,239,191,189,118,63,59,239,191,189,239,191,189,105,239,191,189,239,191,189,89,55,239,191,189,124,239,191,189,239,191,189,67,239,191,189,30,239,191,189,88,239,191,189,89,239,191,189,35,43,239,191,189,239,191,189,239,191,189,202,154,239,191,189,239,191,189,239,191,189,199,172,239,191,189,239,191,189,8,228,150,135,239,191,189,89,239,191,189,127,9,239,191,189,239,191,189,239,191,189,239,191,189,29,97,220,139,239,191,189,28,79,24,239,191,189,218,145,239,191,189,40,239,191,189,75,15,239,191,189,239,191,189,12,239,191,189,239,191,189,125,58,57,239,191,189,239,191,189,0,239,191,189,239,191,189,34,27,51,72,239,191,189,124,239,191,189,4,97,3,239,191,189,114,208,128,9,5,239,191,189,195,154,239,191,189,111,122,211,152,50,239,191,189,239,191,189,38,239,191,189,239,191,189,239,191,189,27,87,116,101,239,191,189,93,81,89,66,239,191,189,11,45,239,191,189,124,15,46,239,191,189,48,52,239,191,189,55,101,73,52,239,191,189,71,239,191,189,22,239,191,189,239,191,189,100,96,239,191,189,56,116,26,91,26,74,239,191,189,239,191,189,105,88,239,191,189,100,76,239,191,189,27,34,205,163,239,191,189,110,216,147,239,191,189,14,64,239,191,189,119,239,191,189,59,239,191,189,101,91,239,191,189,239,191,189,239,191,189,7,239,191,189,239,191,189,239,191,189,239,191,189,71,239,191,189,12,92,239,191,189,91,78,127,239,191,189,6,56,110,239,191,189,204,165,239,191,189,12,27,93,239,191,189,239,191,189,96,239,191,189,239,191,189,239,191,189,87,20,45,239,191,189,239,191,189,15,239,191,189,197,169,239,191,189,112,97,41,66,71,127,45,239,191,189,239,191,189,239,191,189,73,232,182,132,20,239,191,189,239,191,189,239,191,189,26,239,191,189,21,239,191,189,239,191,189,107,239,191,189,11,118,95,16,59,239,191,189,20,90,239,191,189,239,191,189,239,191,189,239,191,189,25,99,197,164,2,8,90,239,191,189,68,67,62,239,191,189,58,239,191,189,220,143,239,191,189,91,239,191,189,49,215,129,115,239,191,189,239,191,189,239,191,189,239,191,189,29,52,239,191,189,11,239,191,189,107,5,205,133,84,38,18,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,55,101,213,143,3,239,191,189,114,79,50,118,202,151,239,191,189,14,22,90,239,191,189,61,239,191,189,239,191,189,55,239,191,189,239,191,189,52,239,191,189,86,58,239,191,189,73,58,239,191,189,55,0,239,191,189,127,40,239,191,189,239,191,189,26,239,191,189,27,239,191,189,85,239,191,189,59,54,239,191,189,70,16,239,191,189,6,95,10,202,144,239,191,189,214,161,239,191,189,239,191,189,75,239,191,189,6,239,191,189,225,147,150,67,239,191,189,238,136,151,35,239,191,189,123,96,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,51,53,44,54,27,239,191,189,81,48,62,109,99,105,239,191,189,94,19,239,191,189,239,191,189,81,239,191,189,33,48,111,60,34,47,20,33,61,239,191,189,10,239,191,189,87,1,117,196,171,102,95,40,239,191,189,239,191,189,87,89,239,191,189,239,191,189,49,239,191,189,1,239,191,189,81,7,110,60,239,191,189,96,239,191,189,239,191,189,9,7,6,239,191,189,20,239,191,189,51,239,191,189,12,103,64,239,191,189,103,65,64,41,39,239,191,189,239,191,189,21,239,191,189,239,191,189,239,191,189,79,31,239,191,189,87,2,126,27,114,21,239,191,189,239,191,189,92,88,33,239,191,189,239,191,189,239,191,189,37,53,119,202,132,103,31,15,239,191,189,68,20,9,239,191,189,239,191,189,115,107,9,239,191,189,239,191,189,94,48,49,1,239,191,189,239,191,189,43,239,191,189,239,191,189,239,191,189,239,191,189,8,114,239,191,189,9,239,191,189,80,39,51,203,183,239,191,189,72,58,57,6,104,239,191,189,80,62,239,191,189,78,106,239,191,189,42,239,191,189,239,191,189,51,239,191,189,239,191,189,89,239,191,189,106,42,239,191,189,59,239,191,189,12,126,239,191,189,35,67,239,191,189,239,191,189,4,239,191,189,239,191,189,239,191,189,239,191,189,234,140,157,74,118,239,191,189,123,239,191,189,106,239,191,189,28,239,191,189,94,114,239,191,189,44,30,90,239,191,189,100,91,15,239,191,189,26,239,191,189,120,126,239,191,189,99,239,191,189,239,191,189,108,239,191,189,73,239,191,189,239,191,189,239,191,189,54,71,239,191,189,38,58,19,239,191,189,7,239,191,189,119,121,25,239,191,189,202,155,201,134,48,239,191,189,239,191,189,91,70,31,31,239,191,189,111,239,191,189,239,191,189,239,191,189,5,21,239,191,189,104,56,239,191,189,19,96,61,33,239,191,189,239,191,189,19,11,1,5,239,191,189,239,191,189,239,191,189,99,239,191,189,20,24,47,199,152,239,191,189,39,125,239,191,189,239,191,189,96,239,191,189,87,239,191,189,98,195,176,97,239,191,189,105,73,14,239,191,189,239,191,189,72,59,30,26,239,191,189,239,191,189,199,152,13,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,86,239,191,189,2,239,191,189,110,239,191,189,65,40,103,9,239,191,189,56,239,191,189,10,239,191,189,239,191,189,80,239,191,189,8,98,239,191,189,36,239,191,189,48,73,239,191,189,101,60,15,239,191,189,235,156,134,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,127,217,135,62,239,191,189,239,191,189,239,191,189,37,239,191,189,239,191,189,239,191,189,79,66,226,128,177,49,2,239,191,189,113,239,191,189,57,4,24,239,191,189,30,62,239,191,189,34,82,239,191,189,239,191,189,239,191,189,232,137,137,102,239,191,189,239,191,189,114,116,239,191,189,115,83,71,113,239,191,189,239,191,189,6,239,191,189,239,191,189,239,191,189,27,26,10,70,239,191,189,111,239,191,189,239,191,189,127,34,2,239,191,189,65,220,140,90,89,239,191,189,74,75,39,94,239,191,189,59,197,177,239,191,189,53,117,239,191,189,239,191,189,42,204,180,208,169,239,191,189,66,239,191,189,239,191,189,79,59,239,191,189,81,239,191,189,239,191,189,18,106,239,191,189,78,96,16,239,191,189,58,204,188,29,207,129,34,239,191,189,97,41,239,191,189,118,239,191,189,210,140,12,239,191,189,124,22,64,83,239,191,189,239,191,189,107,239,191,189,239,191,189,239,191,189,102,80,38,35,239,191,189,124,239,191,189,239,191,189,19,239,191,189,13,239,191,189,239,191,189,89,239,191,189,17,239,191,189,219,170,1,239,191,189,94,1,239,191,189,73,239,191,189,90,62,239,191,189,80,113,24,239,191,189,239,191,189,55,16,2,239,191,189,239,191,189,92,64,239,191,189,239,191,189,87,111,85,239,191,189,239,191,189,14,239,191,189,116,239,191,189,12,239,191,189,25,7,79,85,239,191,189,239,191,189,33,84,7,239,191,189,26,239,191,189,48,14,33,239,191,189,15,32,0,78,239,191,189,239,191,189,102,239,191,189,98,239,191,189,34,96,47,6,220,161,11,239,191,189,107,47,239,191,189,239,191,189,239,191,189,14,58,239,191,189,53,61,122,36,239,191,189,239,191,189,50,239,191,189,83,207,190,47,55,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,36,1,239,191,189,120,233,143,163,239,191,189,26,97,34,239,191,189,20,239,191,189,68,48,108,239,191,189,207,131,239,191,189,239,191,189,60,239,191,189,239,191,189,77,113,51,239,191,189,28,239,191,189,24,101,121,200,155,78,197,144,239,191,189,239,191,189,239,191,189,23,104,49,221,169,91,239,191,189,113,56,10,21,38,56,39,239,191,189,93,239,191,189,239,191,189,30,111,99,239,191,189,239,191,189,9,239,191,189,239,191,189,11,239,191,189,239,191,189,87,58,239,191,189,239,191,189,239,191,189,239,191,189,87,239,191,189,239,191,189,22,64,29,239,191,189,2,62,64,239,191,189,239,191,189,239,191,189,31,239,191,189,118,239,191,189,239,191,189,25,239,191,189,40,80,15,79,73,239,191,189,239,191,189,239,191,189,219,158,239,191,189,65,239,191,189,6,239,191,189,239,191,189,7,47,70,25,239,191,189,6,78,90,107,239,191,189,239,191,189,98,239,191,189,239,191,189,29,239,191,189,17,46,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,83,239,191,189,39,239,191,189,239,191,189,95,239,191,189,239,191,189,112,239,191,189,111,92,61,0,239,191,189,33,2,239,191,189,239,191,189,119,239,191,189,9,80,23,239,191,189,122,117,239,191,189,239,191,189,10,99,64,56,239,191,189,239,191,189,239,191,189,223,173,239,191,189,11,239,191,189,8,23,102,84,239,191,189,239,191,189,239,191,189,71,13,239,191,189,239,191,189,239,191,189,127,239,191,189,74,239,191,189,15,239,191,189,46,239,191,189,5,17,102,239,191,189,46,35,239,191,189,58,239,191,189,65,84,3,216,138,239,191,189,239,191,189,239,191,189,239,191,189,3,239,191,189,239,191,189,239,191,189,239,191,189,102,239,191,189,93,239,191,189,239,191,189,123,80,207,176,239,191,189,34,239,191,189,239,191,189,239,191,189,239,191,189,38,124,90,239,191,189,120,239,191,189,79,239,191,189,10,239,191,189,92,88,239,191,189,76,239,191,189,239,191,189,65,109,71,239,191,189,21,239,191,189,106,239,191,189,239,191,189,126,113,239,191,189,127,239,191,189,239,191,189,239,191,189,64,29,239,191,189,239,191,189,63,22,31,239,191,189,23,239,191,189,82,239,191,189,105,34,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,121,239,191,189,239,191,189,239,191,189,84,17,239,191,189,239,191,189,239,191,189,90,239,191,189,92,84,82,239,191,189,23,239,191,189,239,191,189,115,84,42,77,73,239,191,189,109,127,239,191,189,85,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,41,239,191,189,101,72,117,239,191,189,68,37,239,191,189,108,74,239,191,189,113,239,191,189,11,239,191,189,239,191,189,66,239,191,189,239,191,189,44,101,239,191,189,74,239,191,189,107,69,54,12,108,239,191,189,239,191,189,127,41,207,136,60,103,239,191,189,239,191,189,239,191,189,40,239,191,189,122,35,239,191,189,52,239,191,189,239,191,189,239,191,189,27,239,191,189,239,191,189,30,239,191,189,239,191,189,239,191,189,27,115,9,95,13,25,54,239,191,189,126,125,71,219,130,239,191,189,106,68,239,191,189,239,191,189,4,239,191,189,79,39,82,54,239,191,189,239,191,189,12,80,17,239,191,189,97,44,69,239,191,189,32,239,191,189,239,191,189,80,239,191,189,15,111,202,164,4,239,191,189,239,191,189,14,78,239,191,189,102,11,77,239,191,189,239,191,189,116,239,191,189,33,239,191,189,239,191,189,104,12,230,158,169,28,27,239,191,189,239,191,189,239,191,189,118,80,239,191,189,239,191,189,239,191,189,79,239,191,189,239,191,189,77,73,204,150,239,191,189,239,191,189,239,191,189,239,191,189,19,51,122,79,44,239,191,189,34,239,191,189,112,2,239,191,189,44,239,191,189,239,191,189,239,191,189,56,80,239,191,189,58,22,111,84,3,123,239,191,189,113,211,136,239,191,189,239,191,189,78,71,239,191,189,239,191,189,8,239,191,189,28,110,100,239,191,189,46,15,239,191,189,239,191,189,239,191,189,88,239,191,189,101,119,239,191,189,70,0,100,239,191,189,90,239,191,189,47,239,191,189,95,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,66,57,28,239,191,189,239,191,189,27,239,191,189,89,239,191,189,239,191,189,96,239,191,189,17,239,191,189,239,191,189,239,191,189,109,17,99,239,191,189,78,239,191,189,94,239,191,189,73,239,191,189,29,15,239,191,189,239,191,189,239,191,189,123,239,191,189,62,239,191,189,31,106,239,191,189,239,191,189,120,101,239,191,189,206,172,239,191,189,239,191,189,30,72,239,191,189,208,145,239,191,189,47,20,102,95,218,152,239,191,189,50,239,191,189,209,176,239,191,189,83,239,191,189,239,191,189,239,191,189,49,120,126,239,191,189,239,191,189,37,239,191,189,20,239,191,189,239,191,189,87,239,191,189,239,191,189,72,239,191,189,18,12,75,239,191,189,239,191,189,36,68,239,191,189,239,191,189,91,122,239,191,189,239,191,189,239,191,189,89,21,14,74,23,78,81,239,191,189,4,68,239,191,189,75,40,15,61,239,191,189,40,239,191,189,239,191,189,239,191,189,70,239,191,189,15,239,191,189,13,52,239,191,189,239,191,189,40,112,239,191,189,239,191,189,56,89,116,72,79,239,191,189,239,191,189,239,191,189,103,8,6,239,191,189,25,239,191,189,28,194,180,239,191,189,81,10,30,239,191,189,18,123,239,191,189,79,10,26,239,191,189,239,191,189,239,191,189,239,191,189,94,13,19,207,154,239,191,189,73,107,239,191,189,81,120,62,239,191,189,42,239,191,189,52,23,239,191,189,64,101,30,239,191,189,239,191,189,61,70,239,191,189,73,0,239,191,189,239,191,189,239,191,189,43,50,239,191,189,12,239,191,189,77,40,239,191,189,121,239,191,189,122,204,130,239,191,189,239,191,189,239,191,189,109,239,191,189,2,239,191,189,118,118,239,191,189,239,191,189,122,213,136,239,191,189,239,191,189,73,239,191,189,239,191,189,112,239,191,189,18,96,239,191,189,239,191,189,110,239,191,189,239,191,189,127,239,191,189,55,13,198,186,114,15,115,239,191,189,239,191,189,239,191,189,38,57,239,191,189,124,239,191,189,239,191,189,239,191,189,196,134,20,48,45,239,191,189,92,239,191,189,239,191,189,239,191,189,49,239,191,189,103,55,239,191,189,239,191,189,239,191,189,126,201,179,27,22,239,191,189,55,239,191,189,239,191,189,239,191,189,73,239,191,189,93,239,191,189,239,191,189,67,127,6,59,106,239,191,189,10,67,105,0,239,191,189,239,191,189,66,239,191,189,117,239,191,189,45,67,42,239,191,189,239,191,189,239,191,189,212,173,239,191,189,239,191,189,122,82,239,191,189,18,43,100,239,191,189,61,84,239,191,189,49,239,191,189,239,191,189,239,191,189,116,239,191,189,73,26,102,11,239,191,189,239,191,189,102,48,28,75,50,239,191,189,14,101,239,191,189,88,69,239,191,189,65,239,191,189,79,87,239,191,189,75,239,191,189,4,239,191,189,239,191,189,115,111,239,191,189,91,239,191,189,95,239,191,189,239,191,189,71,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,50,239,191,189,46,239,191,189,61,239,191,189,119,239,191,189,239,191,189,239,191,189,54,239,191,189,69,26,41,239,191,189,21,216,189,239,191,189,239,191,189,239,191,189,92,239,191,189,239,191,189,239,191,189,17,91,239,191,189,239,191,189,204,139,96,239,191,189,25,34,214,182,80,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,41,239,191,189,116,44,239,191,189,239,191,189,239,191,189,18,7,74,75,91,99,127,30,76,239,191,189,28,89,11,239,171,146,80,1,7,25,95,239,191,189,34,239,191,189,239,191,189,9,239,191,189,239,191,189,47,124,229,155,172,217,185,239,191,189,22,239,191,189,239,191,189,239,191,189,86,239,191,189,3,239,191,189,239,191,189,94,239,191,189,239,191,189,125,15,35,43,239,191,189,239,191,189,73,239,191,189,239,191,189,111,81,239,191,189,239,191,189,239,191,189,239,191,189,225,128,172,49,54,39,124,239,191,189,66,72,239,191,189,199,133,78,239,191,189,125,71,239,191,189,8,32,89,239,191,189,239,191,189,206,143,47,239,191,189,239,191,189,58,109,239,191,189,93,239,191,189,52,239,191,189,91,239,191,189,239,191,189,239,191,189,86,239,191,189,125,239,191,189,112,26,239,191,189,4,239,191,189,239,191,189,239,191,189,10,36,239,191,189,239,191,189,118,39,239,191,189,221,161,7,239,191,189,239,191,189,108,239,191,189,94,101,32,80,91,125,203,182,9,239,191,189,239,191,189,239,191,189,239,191,189,113,239,191,189,14,42,8,239,191,189,72,98,239,191,189,107,216,190,203,188,239,191,189,239,191,189,206,151,16,19,17,239,191,189,97,239,191,189,59,63,39,83,27,63,66,239,191,189,86,44,41,239,191,189,239,191,189,127,56,36,114,239,191,189,239,191,189,71,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,104,239,191,189,239,191,189,202,189,96,239,191,189,239,191,189,117,205,131,33,15,239,191,189,44,239,191,189,36,116,239,191,189,239,191,189,90,239,191,189,79,94,239,191,189,120,239,191,189,26,34,239,191,189,126,48,239,191,189,239,191,189,92,76,207,152,239,191,189,42,239,191,189,102,239,191,189,239,191,189,2,99,239,191,189,206,177,109,27,49,75,109,239,191,189,239,191,189,239,191,189,239,191,189,29,239,191,189,68,239,191,189,83,34,5,239,191,189,239,191,189,239,191,189,73,85,239,191,189,195,128,115,92,239,191,189,239,191,189,239,191,189,61,239,191,189,239,191,189,104,239,191,189,239,191,189,77,239,191,189,29,13,201,180,239,191,189,123,239,191,189,239,191,189,85,19,239,191,189,239,191,189,18,239,191,189,239,191,189,239,191,189,103,24,63,109,239,191,189,239,191,189,72,239,191,189,239,191,189,239,191,189,239,191,189,93,87,41,239,191,189,239,191,189,239,191,189,12,102,239,191,189,5,239,191,189,100,96,221,153,30,73,15,239,191,189,239,191,189,94,239,191,189,239,191,189,0,239,191,189,79,239,191,189,24,36,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,43,116,239,191,189,239,191,189,6,119,13,239,191,189,211,180,223,143,49,239,191,189,239,191,189,239,191,189,239,191,189,28,239,191,189,239,191,189,105,41,2,68,239,191,189,239,191,189,66,37,48,239,191,189,103,239,191,189,86,11,239,191,189,239,191,189,19,2,239,191,189,239,191,189,239,191,189,45,239,191,189,111,79,239,191,189,73,239,191,189,239,191,189,239,191,189,239,191,189,26,239,191,189,36,1,113,239,191,189,31,18,52,239,191,189,239,191,189,5,77,26,57,38,239,191,189,42,239,191,189,239,191,189,74,239,191,189,70,118,239,191,189,26,212,137,12,239,191,189,96,66,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,99,92,227,190,178,239,191,189,42,39,239,191,189,85,21,239,191,189,97,239,191,189,27,227,150,129,117,239,191,189,5,86,239,191,189,6,59,239,191,189,239,191,189,12,239,191,189,112,239,191,189,63,239,191,189,239,191,189,118,12,239,191,189,239,191,189,75,212,128,127,115,75,239,191,189,239,191,189,38,21,239,191,189,41,36,56,239,191,189,13,121,77,239,191,189,119,20,239,191,189,26,239,191,189,239,191,189,117,239,191,189,107,212,165,239,191,189,11,239,191,189,239,191,189,99,49,239,191,189,99,34,239,191,189,239,191,189,239,191,189,96,239,191,189,239,191,189,71,123,7,10,239,191,189,239,191,189,239,191,189,239,191,189,111,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,44,239,191,189,62,239,191,189,89,212,186,54,22,42,239,191,189,239,191,189,81,66,34,239,191,189,239,191,189,239,191,189,121,97,27,239,191,189,23,56,42,52,239,191,189,119,42,239,191,189,37,239,191,189,119,239,191,189,239,191,189,239,191,189,33,50,79,239,191,189,239,191,189,214,156,68,101,239,191,189,239,191,189,239,191,189,2,80,239,191,189,239,191,189,239,191,189,38,239,191,189,101,37,25,66,12,77,5,12,92,126,98,105,9,239,191,189,239,191,189,70,17,239,191,189,239,191,189,239,191,189,98,239,191,189,239,191,189,86,239,191,189,122,239,191,189,34,239,191,189,239,191,189,239,191,189,7,239,191,189,70,83,239,191,189,25,12,117,239,191,189,239,191,189,239,191,189,64,239,191,189,2,45,239,191,189,24,41,10,239,191,189,60,24,239,191,189,74,239,191,189,54,239,191,189,98,239,191,189,239,191,189,239,191,189,107,239,191,189,239,191,189,91,239,191,189,194,146,239,191,189,44,4,35,39,239,191,189,77,41,83,239,191,189,212,178,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,123,239,191,189,86,239,191,189,239,191,189,23,239,191,189,94,239,191,189,68,239,191,189,87,239,191,189,75,221,179,24,241,175,178,137,12,111,239,191,189,239,191,189,239,191,189,239,191,189,213,187,239,191,189,108,239,191,189,239,191,189,22,24,239,191,189,90,63,15,72,57,239,191,189,239,191,189,91,239,191,189,44,239,191,189,239,191,189,63,239,191,189,239,191,189,64,74,239,191,189,239,191,189,239,191,189,38,71,239,191,189,239,191,189,212,131,58,112,30,111,51,7,89,239,191,189,239,191,189,102,120,239,191,189,39,239,191,189,84,205,162,61,28,123,23,111,239,191,189,122,36,95,239,191,189,96,25,200,134,239,191,189,239,191,189,97,114,239,191,189,210,189,121,239,191,189,239,191,189,239,191,189,28,239,191,189,239,191,189,37,239,191,189,36,239,191,189,88,239,191,189,239,191,189,108,88,107,239,191,189,202,163,75,239,191,189,24,239,191,189,239,191,189,25,239,191,189,239,191,189,239,191,189,239,191,189,80,105,239,191,189,239,191,189,239,191,189,106,239,191,189,71,83,204,168,239,191,189,239,191,189,201,186,239,191,189,35,2,67,239,191,189,239,191,189,239,191,189,32,47,113,239,191,189,239,191,189,239,191,189,17,2,239,191,189,10,66,239,191,189,239,191,189,60,94,239,191,189,239,191,189,2,239,191,189,35,120,239,191,189,239,191,189,77,6,78,62,239,191,189,239,191,189,221,131,83,207,169,72,239,191,189,116,31,208,167,54,80,211,157,239,191,189,2,239,191,189,126,98,99,65,65,239,191,189,239,191,189,46,35,52,35,239,191,189,74,239,191,189,19,12,27,239,191,189,239,191,189,239,191,189,42,239,191,189,75,239,191,189,50,28,239,191,189,39,41,93,239,191,189,3,89,239,191,189,239,191,189,239,191,189,239,191,189,66,239,191,189,239,191,189,123,37,239,191,189,80,239,191,189,239,191,189,239,191,189,34,68,239,191,189,22,239,191,189,7,203,138,239,191,189,24,239,191,189,15,239,191,189,239,191,189,6,239,191,189,215,145,239,191,189,239,191,189,239,191,189,120,121,127,68,103,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,32,239,191,189,36,239,191,189,239,191,189,113,70,239,191,189,239,191,189,239,191,189,53,239,191,189,121,239,191,189,51,239,191,189,24,116,44,239,191,189,239,191,189,239,191,189,9,239,191,189,239,191,189,56,239,191,189,101,10,28,239,191,189,239,191,189,30,239,191,189,98,239,191,189,26,35,239,191,189,239,191,189,205,159,99,239,191,189,239,191,189,239,191,189,239,191,189,17,239,191,189,239,191,189,58,239,191,189,61,60,58,24,27,31,25,57,116,94,239,191,189,113,120,239,191,189,91,122,239,191,189,77,239,191,189,81,239,191,189,46,239,191,189,70,48,80,239,191,189,202,180,239,191,189,239,191,189,37,239,191,189,27,239,191,189,239,191,189,69,74,111,239,191,189,10,78,28,110,239,191,189,239,191,189,63,239,191,189,239,191,189,8,64,65,239,191,189,239,191,189,239,191,189,15,74,239,191,189,239,191,189,239,191,189,32,78,239,191,189,239,191,189,239,191,189,204,144,93,100,122,53,239,191,189,239,191,189,2,71,86,18,239,191,189,239,191,189,62,17,75,39,239,191,189,127,239,191,189,61,239,191,189,30,239,191,189,239,191,189,81,99,239,191,189,218,187,239,191,189,103,239,191,189,239,191,189,97,239,191,189,78,41,211,186,100,228,162,166,239,191,189,239,191,189,92,239,191,189,239,191,189,239,191,189,39,239,191,189,52,239,191,189,63,239,191,189,239,191,189,239,191,189,34,55,39,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,47,239,191,189,239,191,189,239,191,189,239,191,189,49,89,85,119,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,5,239,191,189,239,191,189,51,239,191,189,83,201,162,111,70,239,191,189,44,239,191,189,23,26,82,42,239,191,189,203,137,239,191,189,42,0,111,239,191,189,53,66,239,191,189,85,18,239,191,189,104,74,34,239,191,189,239,191,189,118,239,191,189,99,20,239,191,189,239,191,189,239,191,189,239,191,189,44,4,239,191,189,62,93,54,239,191,189,79,239,191,189,98,46,106,239,191,189,239,191,189,51,29,239,191,189,239,191,189,26,51,1,48,239,191,189,31,127,219,130,66,239,191,189,239,191,189,72,115,24,66,239,191,189,239,191,189,4,107,30,110,239,191,189,120,239,191,189,243,141,170,178,116,69,239,191,189,239,191,189,115,239,191,189,239,191,189,239,191,189,34,1,30,239,191,189,91,34,12,56,101,239,191,189,239,191,189,216,129,118,239,191,189,239,191,189,111,239,191,189,239,191,189,98,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,40,13,239,191,189,40,74,239,191,189,239,191,189,49,69,239,191,189,239,191,189,239,191,189,239,191,189,75,239,191,189,64,239,191,189,14,239,191,189,239,191,189,49,239,191,189,239,191,189,12,67,120,239,191,189,239,191,189,69,40,90,239,191,189,8,50,20,15,15,27,16,5,239,191,189,59,239,191,189,239,191,189,239,191,189,56,122,239,191,189,119,120,239,191,189,239,191,189,3,239,191,189,15,59,28,7,92,52,239,191,189,0,113,61,90,239,191,189,239,191,189,54,239,191,189,48,103,239,191,189,239,191,189,41,239,191,189,32,239,191,189,112,97,63,66,239,191,189,206,176,194,143,4,58,4,239,191,189,239,191,189,19,239,191,189,239,191,189,239,191,189,59,107,239,191,189,66,93,239,191,189,67,77,71,17,239,191,189,107,239,191,189,2,239,191,189,103,239,191,189,239,191,189,29,239,191,189,239,191,189,50,239,191,189,123,239,191,189,127,86,50,239,191,189,60,83,74,239,191,189,47,239,191,189,239,191,189,37,46,4,239,191,189,239,191,189,103,239,191,189,239,191,189,39,36,42,56,22,108,70,109,239,191,189,239,191,189,2,9,239,191,189,51,119,239,191,189,81,17,239,191,189,10,239,191,189,79,239,191,189,239,191,189,71,57,66,126,239,191,189,239,191,189,239,191,189,33,83,239,191,189,84,29,28,66,239,191,189,239,191,189,239,191,189,44,239,191,189,10,239,191,189,39,71,239,191,189,239,191,189,125,239,191,189,239,191,189,120,239,191,189,239,191,189,239,191,189,42,239,191,189,239,191,189,17,239,191,189,114,94,239,191,189,239,191,189,209,136,51,239,191,189,92,20,214,155,239,191,189,125,239,191,189,47,80,239,191,189,123,61,3,239,191,189,45,63,123,46,239,191,189,44,63,23,45,27,239,191,189,239,191,189,82,239,191,189,16,239,191,189,19,239,191,189,108,104,11,60,239,191,189,2,89,239,191,189,239,191,189,0,80,239,191,189,239,191,189,48,73,101,239,191,189,239,191,189,6,239,191,189,68,239,191,189,239,191,189,239,191,189,239,191,189,67,239,191,189,64,239,191,189,239,191,189,42,10,91,239,191,189,52,62,239,191,189,239,191,189,210,147,62,45,239,191,189,239,191,189,7,16,34,54,239,191,189,66,239,191,189,12,67,39,239,191,189,79,67,239,191,189,63,22,239,191,189,239,191,189,29,115,239,191,189,239,191,189,78,107,21,38,32,239,191,189,51,33,6,239,191,189,239,191,189,42,211,178,33,120,239,191,189,239,191,189,239,191,189,30,239,191,189,52,66,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,16,87,37,40,239,191,189,239,191,189,32,239,191,189,34,8,239,191,189,34,33,239,191,189,95,25,239,191,189,239,191,189,239,191,189,239,191,189,3,125,239,191,189,239,191,189,24,26,41,49,43,110,80,119,239,191,189,96,239,191,189,239,191,189,4,239,191,189,239,191,189,105,87,17,125,239,191,189,69,239,191,189,19,120,239,191,189,239,191,189,4,239,191,189,18,239,191,189,239,191,189,213,154,16,239,191,189,239,191,189,239,191,189,89,239,191,189,239,191,189,97,239,191,189,239,191,189,33,239,191,189,20,83,239,191,189,239,191,189,44,239,191,189,0,239,191,189,69,115,7,239,191,189,239,191,189,72,239,191,189,76,239,191,189,120,239,191,189,22,239,191,189,105,239,191,189,72,239,191,189,103,239,191,189,239,191,189,48,239,191,189,12,82,86,239,191,189,239,191,189,97,102,60,229,175,145,59,85,239,191,189,239,191,189,239,191,189,67,16,239,191,189,108,239,191,189,31,2,11,4,239,191,189,239,191,189,84,239,191,189,239,191,189,58,55,105,97,103,239,191,189,89,239,191,189,122,88,239,191,189,115,239,191,189,14,239,191,189,239,191,189,20,239,191,189,239,191,189,239,191,189,36,239,191,189,239,191,189,239,191,189,50,239,191,189,79,75,239,191,189,35,239,191,189,18,239,191,189,32,117,90,239,191,189,239,191,189,53,239,191,189,84,239,191,189,239,191,189,239,191,189,61,239,191,189,239,191,189,126,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,106,239,191,189,46,121,100,14,55,87,239,191,189,239,191,189,239,191,189,113,239,191,189,42,239,191,189,32,200,188,122,239,191,189,16,43,61,239,191,189,96,92,239,191,189,58,239,191,189,239,191,189,102,218,128,239,191,189,239,191,189,44,197,187,239,191,189,117,28,63,239,191,189,85,26,89,92,239,191,189,118,239,191,189,239,191,189,55,208,130,62,104,57,25,8,73,239,191,189,239,191,189,239,191,189,108,13,239,191,189,58,239,191,189,90,13,53,4,239,191,189,239,191,189,56,239,191,189,239,191,189,69,2,104,112,22,239,191,189,118,239,191,189,239,191,189,95,239,191,189,196,140,239,191,189,126,44,31,116,47,71,72,40,239,191,189,34,65,27,239,191,189,50,28,239,191,189,6,223,154,239,191,189,6,239,191,189,239,191,189,239,191,189,239,191,189,106,66,88,239,191,189,239,191,189,239,191,189,107,239,191,189,216,147,93,8,65,86,28,96,69,47,239,191,189,21,239,191,189,111,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,120,75,239,191,189,239,191,189,103,81,239,191,189,239,191,189,73,239,191,189,125,76,121,3,90,239,191,189,82,239,191,189,239,191,189,67,239,191,189,239,191,189,239,191,189,93,239,191,189,239,191,189,57,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,220,158,62,239,191,189,0,239,191,189,239,191,189,239,191,189,121,53,23,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,20,10,91,239,191,189,71,239,191,189,21,210,176,54,7,239,191,189,24,239,191,189,55,239,191,189,239,191,189,239,191,189,112,239,191,189,239,191,189,206,135,239,191,189,91,239,191,189,202,129,239,191,189,239,191,189,9,23,239,191,189,239,191,189,78,48,239,191,189,45,239,191,189,107,239,191,189,202,150,239,191,189,215,150,239,191,189,120,239,191,189,18,62,239,191,189,239,191,189,70,239,191,189,239,191,189,81,239,191,189,239,191,189,68,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,80,239,191,189,7,66,83,89,239,191,189,30,111,239,191,189,51,239,191,189,22,239,191,189,239,191,189,239,191,189,87,239,191,189,239,191,189,34,239,191,189,239,191,189,239,191,189,72,239,191,189,39,26,64,239,191,189,78,64,239,191,189,106,39,100,10,239,191,189,108,239,191,189,83,197,135,239,191,189,194,177,16,46,239,191,189,239,191,189,50,70,9,91,112,239,191,189,239,191,189,9,239,191,189,94,49,239,191,189,124,239,191,189,32,239,191,189,239,191,189,24,238,154,142,239,191,189,239,191,189,239,191,189,76,92,32,239,191,189,60,239,191,189,239,191,189,239,191,189,88,78,102,8,55,63,239,191,189,127,239,191,189,1,2,13,104,123,72,2,239,191,189,43,24,239,191,189,64,39,99,99,92,21,15,20,239,191,189,239,191,189,239,191,189,98,123,56,127,46,31,24,95,89,30,111,239,191,189,239,191,189,220,139,239,191,189,20,30,57,16,127,239,191,189,49,239,191,189,2,239,191,189,33,48,239,191,189,239,191,189,4,52,239,191,189,239,191,189,47,239,191,189,26,239,191,189,204,190,239,191,189,239,191,189,66,214,151,127,239,191,189,62,0,105,120,239,191,189,239,191,189,127,77,66,28,107,61,41,57,120,239,191,189,88,44,73,92,239,191,189,239,191,189,59,239,191,189,67,239,191,189,19,239,191,189,239,191,189,21,107,44,239,191,189,239,191,189,229,141,139,120,239,191,189,3,239,191,189,239,191,189,239,191,189,239,191,189,61,239,191,189,239,191,189,239,191,189,88,98,126,106,54,45,106,6,46,239,191,189,120,34,123,239,191,189,94,44,239,191,189,63,239,191,189,55,83,239,191,189,84,239,191,189,111,69,239,191,189,36,33,117,82,239,191,189,42,115,239,191,189,239,191,189,239,191,189,0,239,191,189,105,239,191,189,239,191,189,94,239,191,189,239,191,189,239,191,189,239,191,189,24,80,239,191,189,20,239,191,189,239,191,189,94,76,109,14,239,191,189,239,191,189,239,191,189,69,229,185,150,239,191,189,239,191,189,7,8,210,149,239,191,189,73,60,239,191,189,116,239,191,189,239,191,189,239,191,189,213,189,239,191,189,239,191,189,118,96,83,239,191,189,239,191,189,39,33,124,239,191,189,5,5,239,191,189,65,239,191,189,239,191,189,12,59,239,191,189,239,191,189,16,126,21,99,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,94,239,191,189,37,51,239,191,189,114,110,88,66,239,191,189,42,239,191,189,239,191,189,85,239,191,189,239,191,189,68,83,109,122,231,164,165,50,60,239,191,189,85,96,239,191,189,239,191,189,30,30,79,64,30,58,239,191,189,239,191,189,239,191,189,207,139,76,239,191,189,65,119,239,191,189,41,40,120,239,191,189,112,90,64,93,239,191,189,239,191,189,25,239,191,189,239,191,189,104,28,14,91,239,191,189,239,191,189,12,239,191,189,239,191,189,55,98,239,191,189,114,86,239,191,189,239,191,189,239,191,189,99,239,191,189,239,191,189,90,45,239,191,189,70,46,239,191,189,239,191,189,239,191,189,70,100,33,239,191,189,218,147,239,191,189,125,239,191,189,38,102,107,15,239,191,189,239,191,189,21,239,191,189,239,191,189,3,239,191,189,110,94,223,182,55,92,13,239,191,189,37,20,117,23,46,239,191,189,96,239,191,189,65,222,151,239,191,189,239,191,189,113,239,191,189,239,191,189,239,191,189,79,239,191,189,239,191,189,59,239,191,189,91,47,239,191,189,59,239,191,189,239,191,189,107,239,191,189,126,239,191,189,239,191,189,87,220,177,79,60,112,35,31,239,191,189,12,103,64,239,191,189,239,191,189,239,191,189,43,239,191,189,239,191,189,239,191,189,54,239,191,189,83,239,191,189,69,86,239,191,189,28,120,77,239,191,189,40,25,60,39,26,239,191,189,3,239,191,189,19,27,239,191,189,28,239,191,189,79,200,128,239,191,189,239,191,189,50,89,239,191,189,206,173,79,15,3,35,107,239,191,189,72,83,239,191,189,239,191,189,239,191,189,239,191,189,77,3,239,191,189,239,191,189,239,191,189,40,13,212,180,239,191,189,239,191,189,86,106,124,239,191,189,111,239,191,189,70,239,191,189,36,90,107,239,191,189,24,22,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,9,74,239,191,189,107,123,125,239,191,189,74,48,239,191,189,239,191,189,239,191,189,239,191,189,119,239,191,189,239,191,189,239,191,189,35,217,188,100,239,191,189,219,136,239,191,189,22,118,239,191,189,62,239,191,189,90,10,239,191,189,120,76,87,239,191,189,1,88,123,239,191,189,239,191,189,239,191,189,127,96,114,31,239,191,189,105,239,191,189,239,191,189,12,239,191,189,108,35,239,191,189,102,125,239,191,189,12,239,191,189,74,239,191,189,12,85,42,85,239,191,189,239,191,189,239,191,189,93,239,191,189,104,26,91,40,111,239,191,189,239,191,189,97,76,239,191,189,239,191,189,25,239,191,189,239,191,189,239,191,189,52,27,104,239,191,189,239,191,189,26,239,191,189,35,53,113,101,239,191,189,118,19,54,239,191,189,197,147,67,60,82,199,186,41,112,239,191,189,118,239,191,189,239,191,189,239,191,189,239,191,189,44,239,191,189,74,32,239,191,189,239,191,189,239,191,189,94,239,191,189,121,239,191,189,38,239,191,189,9,44,95,77,22,45,5,239,191,189,239,191,189,239,191,189,239,191,189,109,96,63,239,191,189,86,239,191,189,48,108,239,191,189,239,191,189,57,72,43,239,191,189,55,239,191,189,52,239,191,189,239,191,189,90,239,191,189,3,31,67,72,41,239,191,189,239,191,189,122,80,239,191,189,235,188,179,62,68,86,8,11,72,239,191,189,113,27,239,191,189,239,191,189,52,90,127,239,191,189,24,80,8,239,191,189,51,239,191,189,92,32,61,14,122,239,191,189,239,191,189,58,74,239,191,189,92,110,63,88,239,191,189,44,239,191,189,122,239,191,189,48,239,191,189,78,95,19,239,191,189,41,239,191,189,98,239,191,189,239,191,189,23,239,191,189,239,191,189,239,191,189,35,24,239,191,189,239,191,189,239,191,189,239,191,189,55,239,191,189,38,239,191,189,239,191,189,27,38,2,239,191,189,36,127,89,98,239,191,189,117,239,191,189,239,191,189,239,191,189,239,191,189,93,78,239,191,189,74,35,69,239,191,189,87,118,239,191,189,124,51,239,191,189,239,191,189,41,239,191,189,22,39,239,191,189,78,239,191,189,2,239,191,189,239,191,189,239,191,189,7,239,191,189,39,76,108,81,58,239,191,189,239,191,189,99,88,94,239,191,189,3,65,239,191,189,196,175,51,6,239,191,189,239,191,189,56,239,191,189,94,239,191,189,5,239,191,189,239,191,189,90,239,191,189,239,191,189,111,27,239,191,189,239,191,189,10,10,126,66,52,20,85,209,154,239,191,189,35,239,191,189,109,239,191,189,83,93,239,191,189,239,191,189,28,239,191,189,14,239,191,189,53,82,239,191,189,8,239,191,189,101,22,239,191,189,35,239,191,189,239,191,189,239,191,189,195,188,114,75,102,8,206,135,110,63,11,7,95,31,239,191,189,239,191,189,107,239,191,189,96,239,191,189,239,191,189,13,239,191,189,41,77,54,52,121,59,239,191,189,73,52,239,191,189,239,191,189,21,46,14,209,136,239,191,189,63,31,239,191,189,18,239,191,189,0,59,70,239,191,189,77,78,85,89,239,191,189,221,182,239,191,189,73,239,191,189,47,239,191,189,85,75,239,191,189,239,191,189,239,191,189,90,239,191,189,10,86,239,191,189,239,191,189,69,239,191,189,239,191,189,239,191,189,70,239,191,189,73,76,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,3,239,191,189,94,84,239,191,189,239,191,189,88,239,191,189,239,191,189,239,191,189,53,29,9,239,191,189,239,191,189,59,59,239,191,189,239,191,189,16,239,191,189,239,191,189,37,112,9,0,239,191,189,51,239,191,189,110,93,1,1,239,191,189,87,239,191,189,2,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,17,239,191,189,64,239,191,189,119,239,191,189,239,191,189,45,239,191,189,239,191,189,65,21,239,191,189,239,191,189,74,239,191,189,35,37,239,191,189,124,117,51,27,13,77,239,191,189,239,191,189,56,239,191,189,239,191,189,36,239,191,189,27,63,94,87,239,191,189,9,239,191,189,50,239,191,189,48,38,30,239,191,189,66,70,239,191,189,239,191,189,3,239,191,189,239,191,189,9,85,111,221,150,50,89,239,191,189,36,114,52,235,190,152,239,191,189,102,239,191,189,239,191,189,4,25,105,239,191,189,239,191,189,69,13,239,191,189,84,11,81,208,129,239,191,189,77,93,239,191,189,239,191,189,208,129,239,191,189,239,191,189,239,191,189,239,191,189,14,79,239,191,189,59,96,33,72,239,191,189,46,239,191,189,239,191,189,239,191,189,93,83,239,191,189,42,207,153,239,191,189,77,239,191,189,84,239,191,189,63,239,191,189,96,239,191,189,52,239,191,189,13,49,118,104,239,191,189,239,191,189,106,73,210,156,50,239,191,189,113,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,75,41,239,191,189,239,191,189,40,239,191,189,99,78,239,191,189,93,239,191,189,239,191,189,239,191,189,40,19,73,33,239,191,189,239,191,189,32,209,173,49,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,27,239,191,189,54,74,239,191,189,97,239,191,189,11,239,191,189,92,9,239,191,189,4,62,239,191,189,13,239,191,189,53,239,191,189,9,239,191,189,40,239,191,189,39,107,239,191,189,46,239,191,189,239,191,189,195,179,43,3,239,191,189,50,7,39,113,195,158,124,8,89,196,138,239,191,189,27,239,191,189,239,191,189,35,84,239,191,189,95,239,191,189,239,191,189,239,191,189,50,14,239,191,189,54,50,13,19,44,239,191,189,239,191,189,239,191,189,43,11,239,191,189,239,191,189,26,114,239,191,189,239,191,189,239,191,189,206,187,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,110,239,191,189,239,191,189,97,0,62,239,191,189,24,239,191,189,239,191,189,107,110,239,191,189,44,27,239,191,189,0,239,191,189,239,191,189,61,58,86,97,20,49,36,118,113,55,239,191,189,239,191,189,47,62,239,191,189,239,191,189,18,96,43,239,191,189,16,205,136,239,191,189,31,239,191,189,239,191,189,239,191,189,239,191,189,20,3,239,191,189,52,239,191,189,106,77,239,191,189,26,93,239,191,189,90,239,191,189,239,191,189,63,239,191,189,110,94,239,191,189,239,191,189,196,186,239,191,189,111,239,191,189,113,239,191,189,239,191,189,125,239,191,189,214,128,239,191,189,22,239,191,189,43,239,191,189,239,191,189,40,239,191,189,19,92,239,191,189,239,191,189,37,46,6,239,191,189,239,191,189,239,191,189,52,65,86,8,239,191,189,89,57,39,239,191,189,35,239,191,189,88,81,239,191,189,239,191,189,39,239,191,189,239,191,189,80,19,15,239,191,189,53,239,191,189,104,8,23,74,239,191,189,107,15,20,239,191,189,78,239,191,189,42,239,191,189,67,42,239,191,189,127,5,4,12,239,191,189,11,26,43,239,191,189,99,61,110,239,191,189,239,191,189,78,11,99,123,106,81,34,239,191,189,0,239,191,189,239,191,189,68,239,191,189,73,239,191,189,239,191,189,67,239,191,189,38,33,239,191,189,239,191,189,49,239,191,189,239,191,189,93,239,191,189,239,191,189,75,31,45,239,191,189,71,239,191,189,239,191,189,239,191,189,239,191,189,12,239,191,189,239,191,189,207,162,5,75,127,118,59,239,191,189,58,1,32,239,191,189,71,239,191,189,93,110,239,191,189,125,239,191,189,12,99,55,239,191,189,239,191,189,239,191,189,239,191,189,59,73,104,54,54,239,191,189,77,82,239,191,189,239,191,189,239,191,189,102,91,34,27,239,191,189,74,239,191,189,117,89,239,191,189,54,239,191,189,239,191,189,72,98,239,191,189,117,239,191,189,16,36,239,191,189,239,191,189,121,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,11,239,191,189,88,111,239,191,189,239,191,189,23,77,239,191,189,71,239,191,189,71,239,191,189,21,239,191,189,95,5,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,216,186,221,182,37,239,191,189,239,191,189,34,239,191,189,239,191,189,126,22,106,94,67,239,191,189,239,191,189,239,191,189,49,21,239,191,189,45,18,239,191,189,67,239,191,189,1,26,239,191,189,239,191,189,23,239,191,189,21,43,34,239,191,189,239,191,189,239,191,189,239,191,189,68,107,200,179,239,191,189,239,191,189,202,170,51,27,61,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,20,114,122,239,191,189,239,191,189,40,239,191,189,200,161,0,62,60,239,191,189,54,31,239,191,189,239,191,189,25,121,107,0,121,0,239,191,189,239,191,189,239,191,189,18,24,33,87,45,119,239,191,189,124,107,84,114,239,191,189,239,191,189,239,191,189,239,191,189,39,239,191,189,107,239,191,189,119,7,239,191,189,19,239,191,189,20,239,191,189,48,60,20,239,191,189,121,4,239,191,189,107,239,191,189,239,191,189,127,239,191,189,17,197,173,239,191,189,239,191,189,239,191,189,122,6,121,239,191,189,239,191,189,217,176,239,191,189,214,135,239,191,189,117,5,82,66,72,70,239,191,189,104,114,239,191,189,109,239,191,189,52,58,45,239,191,189,31,90,49,239,191,189,77,239,191,189,123,83,13,107,239,191,189,239,191,189,59,72,239,191,189,45,65,239,191,189,62,239,191,189,44,102,239,191,189,126,239,191,189,80,64,239,191,189,12,43,68,82,96,49,239,191,189,58,239,191,189,239,191,189,103,239,191,189,239,191,189,239,191,189,53,220,162,12,45,42,239,191,189,64,239,191,189,127,239,191,189,239,191,189,123,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,71,239,191,189,39,81,77,9,239,191,189,239,191,189,239,191,189,239,191,189,77,239,191,189,33,45,49,239,191,189,239,191,189,239,191,189,35,22,239,191,189,204,146,239,191,189,86,221,182,215,170,239,191,189,239,191,189,107,239,191,189,201,183,82,239,191,189,80,239,191,189,35,114,77,239,191,189,20,50,73,97,77,239,191,189,239,191,189,239,191,189,239,191,189,217,145,239,191,189,122,79,98,239,191,189,112,83,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,87,118,239,191,189,56,239,191,189,39,0,239,191,189,119,22,126,239,191,189,12,123,105,81,6,26,239,191,189,239,191,189,82,239,191,189,61,3,81,84,78,207,146,77,30,120,79,123,10,214,167,107,75,239,191,189,239,191,189,239,191,189,100,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,126,239,191,189,80,123,239,191,189,56,239,191,189,239,191,189,54,239,191,189,48,17,42,239,191,189,6,66,239,191,189,112,239,191,189,239,191,189,239,191,189,239,191,189,47,239,191,189,100,76,239,191,189,50,239,191,189,101,88,239,191,189,3,84,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,204,133,20,239,191,189,239,191,189,88,108,202,141,94,239,191,189,88,239,191,189,94,239,191,189,117,239,191,189,23,59,95,239,191,189,100,208,129,75,13,239,191,189,87,51,67,239,191,189,239,191,189,239,191,189,239,191,189,21,239,191,189,64,15,239,191,189,239,191,189,108,104,239,191,189,7,211,140,30,239,191,189,239,191,189,94,103,239,191,189,70,63,35,32,67,109,93,206,130,21,239,191,189,73,205,150,100,7,72,239,191,189,52,239,191,189,239,191,189,71,239,191,189,64,112,201,174,239,191,189,239,191,189,239,191,189,102,239,191,189,220,168,239,191,189,239,191,189,239,191,189,239,191,189,118,211,178,239,191,189,113,87,209,170,58,60,40,22,239,191,189,239,191,189,41,239,191,189,90,239,191,189,77,239,191,189,122,239,191,189,239,191,189,223,162,239,191,189,239,191,189,109,37,239,191,189,78,83,126,96,239,191,189,239,191,189,213,154,111,197,143,113,239,191,189,239,191,189,50,106,239,191,189,239,191,189,77,239,191,189,103,239,191,189,69,239,191,189,20,19,239,191,189,206,167,14,61,20,78,121,239,191,189,90,124,239,191,189,9,239,191,189,42,239,191,189,116,239,191,189,239,191,189,78,8,6,112,69,23,112,239,191,189,70,71,119,14,239,191,189,76,239,191,189,239,191,189,6,239,191,189,96,239,191,189,122,34,28,16,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,126,239,191,189,98,90,16,239,191,189,10,239,191,189,93,98,239,191,189,239,191,189,60,8,49,80,76,239,191,189,125,71,239,191,189,35,239,191,189,19,99,112,43,239,191,189,239,191,189,239,191,189,87,53,125,15,200,146,21,239,191,189,114,239,191,189,239,191,189,36,239,191,189,239,191,189,104,239,191,189,61,26,235,191,139,239,191,189,100,239,191,189,59,90,239,191,189,78,239,191,189,239,191,189,239,191,189,30,239,191,189,239,191,189,11,239,191,189,80,45,63,239,191,189,59,239,191,189,239,191,189,239,191,189,239,191,189,103,123,47,239,191,189,239,191,189,50,16,0,55,14,99,239,191,189,239,191,189,239,191,189,109,239,191,189,198,189,239,191,189,239,191,189,71,227,132,165,106,16,239,191,189,76,239,191,189,239,191,189,107,108,27,239,191,189,239,191,189,197,163,77,109,239,191,189,29,239,191,189,239,191,189,239,191,189,239,191,189,126,89,239,191,189,1,117,218,181,13,239,191,189,32,239,191,189,239,191,189,5,62,34,53,239,191,189,239,191,189,27,239,191,189,99,239,191,189,0,239,191,189,239,191,189,35,111,100,95,123,239,191,189,45,221,179,239,191,189,8,75,14,23,239,191,189,95,35,239,191,189,71,26,239,191,189,15,74,86,106,241,154,175,141,239,191,189,88,67,42,82,107,80,239,191,189,123,127,106,239,191,189,82,82,107,44,104,239,191,189,3,66,4,239,191,189,77,71,239,191,189,239,191,189,95,26,8,17,239,191,189,239,191,189,46,37,35,94,239,191,189,32,239,191,189,239,191,189,100,239,191,189,239,191,189,51,239,191,189,77,75,239,191,189,239,191,189,41,1,76,239,191,189,108,239,191,189,54,10,239,191,189,110,239,191,189,11,54,239,191,189,106,239,191,189,215,159,44,47,12,102,71,239,191,189,87,239,191,189,83,239,191,189,26,106,110,58,239,191,189,58,239,191,189,15,98,239,191,189,239,191,189,239,191,189,239,191,189,83,202,178,239,191,189,45,11,61,98,5,239,191,189,30,239,191,189,239,191,189,195,185,98,64,239,191,189,54,75,239,191,189,239,191,189,239,191,189,104,239,191,189,239,191,189,91,109,239,191,189,221,144,66,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,71,239,191,189,239,191,189,101,239,191,189,27,22,103,27,85,0,239,191,189,49,101,239,191,189,99,58,239,191,189,93,56,49,69,239,191,189,239,191,189,41,208,142,74,26,39,36,104,239,191,189,239,191,189,239,191,189,56,43,63,118,82,239,191,189,239,191,189,5,109,32,239,191,189,42,239,191,189,85,97,239,191,189,126,125,1,239,191,189,239,191,189,59,239,191,189,239,191,189,77,239,191,189,49,239,191,189,49,81,118,2,43,14,115,239,191,189,229,156,155,221,136,8,36,100,239,191,189,239,191,189,239,191,189,66,239,191,189,11,98,239,191,189,239,191,189,118,239,191,189,80,239,191,189,71,239,191,189,239,191,189,239,191,189,239,191,189,90,239,191,189,239,191,189,41,83,110,239,191,189,239,191,189,239,191,189,102,239,191,189,57,50,239,191,189,39,34,239,191,189,47,239,191,189,239,191,189,38,239,191,189,47,239,191,189,30,35,239,191,189,95,84,239,191,189,9,239,191,189,25,202,177,10,239,191,189,114,239,191,189,20,114,239,191,189,239,191,189,239,191,189,60,239,191,189,239,191,189,239,191,189,99,239,191,189,239,191,189,239,191,189,8,239,191,189,106,41,111,116,52,75,239,191,189,56,239,191,189,239,191,189,239,191,189,25,0,118,24,239,191,189,26,239,191,189,239,191,189,110,2,73,120,97,239,191,189,57,239,191,189,239,191,189,95,35,239,191,189,80,95,239,191,189,239,191,189,38,61,239,191,189,90,57,239,191,189,6,1,239,191,189,239,191,189,239,191,189,76,75,239,191,189,239,191,189,239,191,189,81,20,239,191,189,39,38,239,191,189,210,173,239,191,189,60,239,191,189,33,239,191,189,239,191,189,200,160,239,191,189,124,239,191,189,127,239,191,189,93,122,122,239,191,189,72,194,189,24,239,191,189,239,191,189,239,191,189,88,89,60,99,96,116,42,107,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,63,239,191,189,239,191,189,239,191,189,93,239,191,189,13,73,56,239,191,189,239,191,189,43,239,191,189,57,20,239,191,189,239,191,189,239,191,189,55,239,191,189,104,239,191,189,239,191,189,60,239,191,189,7,239,191,189,20,239,191,189,239,191,189,125,239,191,189,22,8,239,191,189,239,191,189,52,239,191,189,239,191,189,76,31,100,239,191,189,239,191,189,53,239,191,189,239,191,189,86,70,69,112,239,191,189,90,239,191,189,87,78,239,191,189,239,191,189,239,191,189,113,53,239,191,189,112,28,1,20,239,191,189,82,50,96,3,239,191,189,239,191,189,62,72,29,239,191,189,90,88,113,239,191,189,239,191,189,112,61,13,239,191,189,239,191,189,49,239,191,189,239,191,189,239,191,189,239,191,189,26,65,22,239,191,189,239,191,189,239,191,189,32,239,191,189,239,191,189,36,239,191,189,66,239,191,189,63,28,239,191,189,57,99,77,119,85,239,191,189,119,17,50,15,68,89,239,191,189,194,157,239,191,189,67,239,191,189,65,39,239,191,189,41,100,121,55,239,191,189,12,239,191,189,239,191,189,239,191,189,71,125,239,191,189,239,191,189,86,48,63,72,239,191,189,122,239,191,189,239,191,189,239,191,189,118,239,191,189,239,191,189,27,220,134,18,239,191,189,53,239,191,189,239,191,189,239,191,189,16,239,191,189,239,191,189,64,239,191,189,239,191,189,222,135,55,239,191,189,199,186,1,107,109,239,191,189,239,191,189,239,191,189,198,136,29,104,239,191,189,239,191,189,112,239,191,189,47,18,119,239,191,189,17,127,239,191,189,239,191,189,69,49,107,8,32,239,191,189,239,191,189,5,239,191,189,239,191,189,239,191,189,13,25,112,24,125,4,107,54,108,197,167,16,239,191,189,239,191,189,14,239,191,189,239,191,189,15,59,239,191,189,72,16,65,38,59,41,239,191,189,6,239,191,189,24,239,191,189,63,7,98,123,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,72,60,239,191,189,239,191,189,33,115,56,17,52,239,191,189,239,191,189,78,239,191,189,239,191,189,239,191,189,239,191,189,74,239,191,189,83,18,239,191,189,47,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,108,239,191,189,239,191,189,239,191,189,21,67,16,239,191,189,239,191,189,71,239,191,189,26,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,34,239,191,189,71,122,101,239,191,189,115,28,239,191,189,239,191,189,239,191,189,24,239,191,189,76,239,191,189,80,239,191,189,239,191,189,126,103,35,239,191,189,10,239,191,189,41,239,191,189,239,191,189,194,157,88,42,93,210,139,57,239,191,189,117,7,239,191,189,88,239,191,189,110,94,43,239,191,189,59,239,191,189,239,191,189,239,191,189,49,239,191,189,25,106,239,191,189,65,239,191,189,95,239,191,189,60,18,239,191,189,90,10,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,15,196,142,15,110,114,239,191,189,239,191,189,239,191,189,239,191,189,14,239,191,189,107,105,16,239,191,189,35,73,239,191,189,41,239,191,189,239,191,189,221,167,89,100,239,191,189,113,43,118,57,25,2,34,42,239,191,189,91,64,239,191,189,216,162,69,77,125,239,191,189,98,239,191,189,35,239,191,189,200,161,120,229,157,135,239,191,189,239,191,189,103,21,14,239,191,189,74,124,119,91,239,191,189,239,191,189,72,63,239,191,189,239,191,189,239,191,189,121,220,135,66,125,95,5,239,191,189,197,173,239,191,189,98,239,191,189,239,191,189,51,101,239,191,189,48,239,191,189,239,191,189,43,239,191,189,239,191,189,88,239,191,189,239,191,189,34,239,191,189,109,86,239,191,189,35,48,239,191,189,239,191,189,9,22,69,124,81,98,30,72,45,239,191,189,25,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,15,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,46,120,239,191,189,60,88,239,191,189,111,201,164,50,22,239,191,189,42,78,86,239,191,189,239,191,189,239,191,189,13,121,239,191,189,214,176,51,239,191,189,239,191,189,220,169,239,191,189,120,239,191,189,5,70,43,239,191,189,239,191,189,239,191,189,20,10,239,191,189,239,191,189,100,239,191,189,239,191,189,214,151,65,86,91,34,19,239,191,189,62,14,88,239,191,189,115,239,191,189,109,239,191,189,239,191,189,239,191,189,44,239,191,189,16,124,239,191,189,103,239,191,189,239,191,189,115,239,191,189,120,239,191,189,107,239,191,189,201,166,239,191,189,83,239,191,189,82,121,85,120,90,8,28,239,191,189,5,97,97,239,191,189,239,191,189,19,111,239,191,189,65,123,89,239,191,189,239,191,189,239,191,189,124,239,191,189,239,191,189,50,239,191,189,239,191,189,95,239,191,189,239,191,189,0,25,17,116,123,239,191,189,45,239,191,189,116,239,191,189,215,131,124,18,233,145,140,239,191,189,72,239,191,189,43,89,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,40,105,120,47,7,239,191,189,97,239,191,189,213,158,239,191,189,239,191,189,20,239,191,189,239,191,189,2,74,239,191,189,239,191,189,239,191,189,239,191,189,18,239,191,189,22,118,239,191,189,239,191,189,95,80,239,191,189,126,49,65,239,191,189,10,105,239,191,189,124,239,191,189,102,239,191,189,239,191,189,7,111,115,101,115,4,239,191,189,57,239,191,189,9,72,239,191,189,87,239,191,189,24,239,191,189,239,191,189,35,239,191,189,239,191,189,118,239,191,189,239,191,189,55,239,191,189,76,90,239,191,189,23,239,191,189,60,239,191,189,36,239,191,189,239,191,189,3,59,51,90,239,191,189,239,191,189,239,191,189,40,239,191,189,6,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,66,54,62,239,191,189,200,159,46,239,191,189,239,191,189,99,108,239,191,189,28,11,239,191,189,50,49,113,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,127,239,191,189,48,39,239,191,189,239,191,189,239,191,189,33,239,191,189,239,191,189,239,191,189,239,191,189,14,239,191,189,99,13,239,191,189,239,191,189,47,73,239,191,189,11,239,191,189,100,239,191,189,103,29,94,63,110,121,67,69,239,191,189,72,239,191,189,239,191,189,112,5,239,191,189,239,191,189,239,191,189,38,17,239,191,189,76,34,239,191,189,41,239,191,189,239,191,189,40,195,175,88,116,239,191,189,204,166,76,239,191,189,239,191,189,226,135,128,107,239,191,189,114,239,191,189,239,191,189,15,42,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,114,52,69,239,191,189,53,239,191,189,239,191,189,81,239,191,189,239,191,189,68,239,191,189,239,191,189,49,202,184,239,191,189,7,225,159,144,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,43,239,128,143,20,89,113,7,35,77,76,4,47,239,191,189,10,45,239,191,189,239,191,189,239,191,189,96,227,174,184,239,191,189,69,73,234,136,149,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,85,239,191,189,239,191,189,68,239,191,189,239,191,189,88,239,191,189,197,185,239,191,189,239,191,189,96,239,191,189,239,191,189,239,191,189,58,239,191,189,239,191,189,95,239,191,189,124,55,239,191,189,74,239,191,189,110,239,191,189,114,239,191,189,239,191,189,80,65,106,239,191,189,100,106,124,7,6,8,50,239,191,189,239,191,189,96,239,191,189,239,191,189,78,239,191,189,18,83,239,191,189,64,98,29,239,191,189,110,56,239,191,189,239,191,189,104,111,62,47,21,68,89,239,191,189,8,61,23,239,191,189,239,191,189,239,191,189,87,117,239,191,189,56,42,239,191,189,239,191,189,32,1,95,65,239,191,189,16,239,191,189,77,239,191,189,239,191,189,49,239,191,189,16,239,191,189,239,191,189,239,191,189,239,191,189,27,80,239,191,189,69,239,191,189,239,191,189,239,191,189,46,239,191,189,11,239,191,189,71,54,13,90,21,72,109,239,191,189,239,191,189,91,51,122,239,191,189,77,71,239,191,189,59,239,191,189,23,239,191,189,239,191,189,239,191,189,79,14,79,239,191,189,239,191,189,87,100,239,191,189,239,191,189,239,191,189,212,165,115,239,191,189,35,39,239,191,189,85,43,20,204,142,239,191,189,239,191,189,73,239,191,189,98,20,91,239,191,189,115,76,38,111,239,191,189,239,191,189,11,37,109,21,122,66,206,174,239,191,189,3,217,137,239,191,189,19,239,191,189,194,146,108,11,239,191,189,38,121,239,191,189,239,191,189,239,191,189,79,79,7,18,239,191,189,126,3,239,191,189,36,28,239,191,189,239,191,189,21,239,191,189,239,191,189,239,191,189,58,48,69,31,239,191,189,82,71,214,176,239,191,189,239,191,189,99,38,216,145,127,239,191,189,32,43,239,191,189,199,155,30,239,191,189,213,177,239,191,189,239,191,189,239,191,189,239,191,189,124,210,130,1,239,191,189,72,97,239,191,189,28,239,191,189,8,49,97,239,191,189,196,159,239,191,189,76,239,191,189,86,92,239,191,189,110,239,191,189,239,191,189,239,191,189,17,239,191,189,73,39,239,191,189,80,239,191,189,239,191,189,61,239,191,189,239,191,189,36,239,191,189,72,30,239,191,189,3,46,239,191,189,57,82,239,191,189,53,239,191,189,81,108,239,191,189,125,239,191,189,100,239,191,189,10,77,55,239,191,189,121,239,191,189,71,239,191,189,52,239,191,189,239,191,189,221,190,239,191,189,95,65,56,239,191,189,239,191,189,64,239,191,189,98,101,239,191,189,239,191,189,19,40,100,239,191,189,123,88,239,191,189,239,191,189,239,191,189,25,239,191,189,17,125,79,14,239,191,189,51,97,239,191,189,239,191,189,239,191,189,119,113,239,191,189,43,73,239,191,189,35,65,239,191,189,239,191,189,120,239,191,189,101,239,191,189,239,191,189,212,184,51,239,191,189,90,239,191,189,115,239,191,189,48,239,191,189,69,239,191,189,88,119,0,239,191,189,239,191,189,28,239,191,189,239,191,189,114,239,191,189,50,111,32,94,239,191,189,113,239,191,189,239,191,189,239,191,189,239,191,189,66,4,95,239,191,189,122,235,136,174,239,191,189,48,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,202,167,49,124,239,191,189,239,191,189,21,112,27,239,191,189,195,183,239,191,189,20,1,10,239,191,189,239,191,189,91,239,191,189,84,24,87,60,15,239,191,189,239,191,189,66,239,191,189,239,191,189,239,191,189,109,239,191,189,239,191,189,202,133,28,86,32,45,239,191,189,68,34,239,191,189,52,239,191,189,239,191,189,239,191,189,38,99,239,191,189,72,19,118,239,191,189,80,239,191,189,108,239,191,189,239,191,189,92,45,93,239,191,189,239,191,189,73,104,43,55,239,191,189,123,239,191,189,59,114,239,191,189,239,191,189,52,239,191,189,239,191,189,8,84,239,191,189,28,90,239,191,189,239,191,189,90,28,55,121,239,191,189,239,191,189,102,68,239,191,189,102,239,191,189,64,239,191,189,239,191,189,36,110,196,160,239,191,189,36,12,239,191,189,239,191,189,239,191,189,27,111,239,191,189,232,135,159,17,2,239,191,189,116,239,191,189,75,239,191,189,239,191,189,239,191,189,35,239,191,189,239,191,189,89,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,123,114,239,191,189,119,239,191,189,101,89,94,32,29,125,239,191,189,49,84,239,191,189,84,74,239,191,189,239,191,189,123,6,239,191,189,28,1,21,239,191,189,93,239,191,189,39,239,191,189,239,191,189,3,239,191,189,239,191,189,239,191,189,239,191,189,25,239,191,189,52,239,191,189,95,212,173,239,191,189,57,112,4,9,239,191,189,123,239,191,189,11,106,239,191,189,239,191,189,85,239,191,189,97,239,191,189,7,105,54,118,124,122,27,239,191,189,239,191,189,82,58,76,239,191,189,239,191,189,239,191,189,239,191,189,110,91,219,141,88,239,191,189,45,239,191,189,239,191,189,55,239,191,189,239,191,189,59,73,239,191,189,120,239,191,189,48,41,94,48,43,29,239,191,189,71,239,191,189,100,47,43,25,239,191,189,74,239,191,189,239,191,189,117,239,191,189,46,239,191,189,239,191,189,239,191,189,72,207,129,239,191,189,239,191,189,239,191,189,23,239,191,189,80,20,239,191,189,126,120,61,48,239,191,189,239,191,189,17,48,36,239,191,189,239,191,189,222,175,106,239,191,189,84,239,191,189,22,74,47,239,191,189,123,21,97,239,191,189,57,14,80,239,191,189,114,127,239,191,189,4,239,191,189,204,128,239,191,189,68,199,133,239,191,189,81,239,191,189,74,77,239,191,189,52,108,40,239,191,189,29,239,191,189,6,239,191,189,4,2,98,220,134,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,126,239,191,189,239,191,189,218,157,77,239,191,189,239,191,189,79,196,145})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "xclientdev3",
                        container: "testc6bcad2100bd245a4b2c75feee0584c63",
                        blob: "blob1",
                        body: body,
                        maxSize: 34816,
                        appendPosition: 0,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test000129 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\000129_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\000129_s.txt", Encoding.UTF8);

    public Test000129() : base(recordedRequest, recordedResponse, "xclientdev3")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,55,5,41,239,191,189,45,239,191,189,239,191,189,239,191,189,118,46,104,239,191,189,239,191,189,239,191,189,119,235,128,181,239,191,189,67,239,191,189,76,50,228,132,187,239,191,189,74,239,191,189,239,191,189,102,239,191,189,69,115,4,239,191,189,98,239,191,189,239,191,189,39,239,191,189,239,191,189,78,90,51,40,78,239,191,189,239,191,189,9,239,191,189,77,239,191,189,239,191,189,239,191,189,239,191,189,19,239,191,189,72,125,108,2,5,81,239,191,189,4,239,191,189,43,239,191,189,239,191,189,92,239,191,189,239,191,189,66,239,191,189,41,239,191,189,239,191,189,239,191,189,61,22,92,112,97,239,191,189,239,191,189,13,239,191,189,239,191,189,78,212,158,239,191,189,28,239,191,189,73,9,239,191,189,36,102,32,127,239,191,189,239,191,189,239,191,189,8,239,191,189,239,191,189,86,127,239,191,189,34,76,64,85,239,191,189,239,191,189,239,191,189,239,191,189,74,217,163,74,57,239,191,189,239,191,189,218,167,83,76,32,223,178,239,191,189,28,239,191,189,239,191,189,239,191,189,113,239,191,189,239,191,189,89,239,191,189,97,195,177,81,104,239,191,189,73,239,191,189,26,239,191,189,218,141,124,52,72,239,191,189,50,46,78,97,9,95,239,191,189,112,239,191,189,35,239,191,189,239,191,189,239,191,189,126,35,239,191,189,239,191,189,2,239,191,189,118,78,108,113,239,191,189,10,239,191,189,5,10,239,191,189,7,239,191,189,99,239,191,189,21,62,239,191,189,117,239,191,189,239,191,189,1,23,64,239,191,189,69,8,126,226,156,178,84,13,122,74,239,191,189,95,197,189,110,86,113,89,239,191,189,239,191,189,239,191,189,239,191,189,91,56,239,191,189,63,239,191,189,16,239,191,189,106,239,191,189,94,13,239,191,189,44,215,140,239,191,189,105,88,239,191,189,239,191,189,37,24,239,191,189,239,191,189,120,239,191,189,7,239,191,189,38,239,191,189,118,239,191,189,239,191,189,239,191,189,239,191,189,69,37,92,15,68,239,191,189,16,98,115,81,239,191,189,202,187,239,191,189,72,21,239,191,189,93,66,120,7,239,191,189,239,191,189,8,239,191,189,67,63,239,191,189,102,239,191,189,106,41,70,239,191,189,12,72,62,117,21,239,191,189,77,100,239,191,189,51,112,239,191,189,106,239,191,189,45,239,191,189,50,99,107,239,191,189,30,239,191,189,49,59,239,191,189,239,191,189,34,239,191,189,239,191,189,7,37,108,239,191,189,43,239,191,189,0,239,191,189,64,72,239,191,189,42,239,191,189,65,239,191,189,239,191,189,15,217,136,239,191,189,212,184,7,239,191,189,120,114,119,22,2,239,191,189,73,239,191,189,239,191,189,121,126,13,3,82,63,239,191,189,45,239,191,189,239,191,189,27,222,162,123,84,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,22,79,30,239,191,189,11,239,191,189,108,239,191,189,239,191,189,104,239,191,189,239,191,189,104,41,194,157,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,26,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,35,239,191,189,95,72,86,239,191,189,239,191,189,99,47,239,191,189,85,71,239,191,189,103,67,239,191,189,28,239,191,189,58,81,239,191,189,239,191,189,14,239,191,189,89,239,191,189,65,239,191,189,239,191,189,50,239,191,189,53,239,191,189,73,89,117,31,239,191,189,0,116,198,147,239,191,189,63,116,18,77,74,53,59,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,80,118,239,191,189,19,239,191,189,103,239,191,189,239,191,189,239,191,189,18,239,191,189,30,239,191,189,111,106,115,239,191,189,197,139,239,191,189,59,239,191,189,93,71,239,191,189,239,191,189,239,191,189,78,98,211,153,27,239,191,189,239,191,189,37,239,191,189,239,191,189,239,191,189,239,191,189,94,239,191,189,239,191,189,98})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "xclientdev3",
                        container: "testc60628ce5af02432b9660b3c019be6194",
                        blob: "blob1",
                        body: body,
                        appendPosition: 0,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test000142 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\000142_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\000142_s.txt", Encoding.UTF8);

    public Test000142() : base(recordedRequest, recordedResponse, "xclientdev3")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{14,239,191,189,106,8,239,191,189,3,239,191,189,92,239,191,189,104,76,239,191,189,84,123,61,239,191,189,104,239,191,189,239,191,189,60,84,12,239,191,189,239,191,189,118,239,191,189,19,60,115,68,239,191,189,239,191,189,2,239,191,189,239,191,189,239,191,189,18,88,74,4,239,191,189,67,239,191,189,239,191,189,77,16,21,239,191,189,118,239,191,189,98,239,191,189,123,17,76,1,239,191,189,106,239,191,189,233,180,190,104,126,239,191,189,239,191,189,61,239,191,189,16,118,212,156,16,100,239,191,189,239,191,189,102,111,112,239,191,189,239,191,189,239,191,189,239,191,189,104,239,191,189,70,239,191,189,11,239,191,189,239,191,189,239,191,189,20,239,191,189,90,239,191,189,62,239,191,189,84,239,191,189,57,239,191,189,82,98,239,191,189,117,59,239,191,189,99,239,191,189,43,239,191,189,127,239,191,189,16,239,191,189,239,191,189,0,239,191,189,122,116,50,28,73,239,191,189,239,191,189,239,191,189,239,191,189,113,82,239,191,189,239,191,189,26,195,140,239,191,189,108,239,191,189,124,11,230,168,166,239,191,189,239,191,189,11,74,32,78,239,191,189,3,239,191,189,56,6,239,191,189,8,239,191,189,239,191,189,203,132,42,16,51,86,239,191,189,90,38,66,239,191,189,63,17,111,239,191,189,239,191,189,118,239,191,189,239,191,189,43,239,191,189,108,81,4,239,191,189,239,191,189,64,239,191,189,239,191,189,24,239,191,189,239,191,189,218,176,239,191,189,239,191,189,239,191,189,115,68,3,216,176,35,239,191,189,203,165,239,191,189,106,239,191,189,124,91,89,25,239,191,189,45,24,239,191,189,12,97,239,191,189,239,191,189,49,239,191,189,13,239,191,189,239,191,189,100,96,239,191,189,239,191,189,239,191,189,2,106,239,191,189,83,239,191,189,72,114,56,44,239,191,189,239,191,189,239,191,189,8,239,191,189,46,239,191,189,30,239,191,189,110,239,191,189,17,239,191,189,99,239,191,189,239,191,189,22,35,239,191,189,64,239,191,189,239,191,189,216,139,88,239,191,189,105,104,63,239,191,189,102,239,191,189,53,239,191,189,239,191,189,81,239,191,189,79,239,191,189,90,69,239,191,189,122,239,191,189,101,239,191,189,75,239,191,189,18,49,79,79,239,191,189,77,84,7,125,100,63,29,239,191,189,68,239,191,189,123,239,191,189,239,191,189,24,239,191,189,85,15,199,151,239,191,189,239,191,189,239,191,189,7,239,191,189,37,103,67,30,239,191,189,44,239,191,189,23,239,191,189,74,88,117,73,78,239,191,189,76,60,239,191,189,239,191,189,239,191,189,117,239,191,189,21,239,191,189,239,191,189,87,2,106,239,191,189,239,191,189,239,191,189,76,31,88,239,191,189,239,191,189,239,191,189,239,191,189,23,239,191,189,99,52,239,191,189,239,191,189,36,11,239,191,189,239,191,189,74,81,107,28,43,114,120,82,239,191,189,108,100,41,51,95,239,191,189,89,239,191,189,41,41,239,191,189,239,191,189,80,61,239,191,189,239,191,189,239,191,189,17,120,239,191,189,211,140,75,65,239,191,189,109,111,239,191,189,124,32,239,191,189,239,191,189,75,239,191,189,239,191,189,239,191,189,239,191,189,3,112,55,0,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,20,215,155,78,96,239,191,189,239,191,189,239,191,189,239,191,189,24,239,191,189,239,191,189,84,239,191,189,66,8,125,21,67,4,239,191,189,239,191,189,239,191,189,17,13,8,76,210,144,106,118,239,191,189,115,90,239,191,189,239,191,189,239,191,189,75,239,191,189,239,191,189,110,239,191,189,125,5,38,18,28,100,239,191,189,239,191,189,100,239,191,189,239,191,189,239,191,189,106,239,191,189,9,61,83,239,191,189,239,191,189,10,80,239,191,189,113,4,126,239,191,189,37,97,54,49,52,101,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,21,239,191,189,5,239,191,189,239,191,189,126,239,191,189,239,191,189,215,148,239,191,189,239,191,189,92,100,98,207,148,33,239,191,189,34,62,91,239,191,189,51,239,191,189,69,94,114,89,124,81,87,11,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,14,239,191,189,9,79,239,191,189,239,191,189,56,74,9,49,239,191,189,239,191,189,239,191,189,239,191,189,103,200,169,239,191,189,239,191,189,239,191,189,61,239,191,189,32,126,124,91,66,239,191,189,239,191,189,239,191,189,111,239,191,189,39,239,191,189,18,239,191,189,25,239,191,189,239,191,189,26,239,191,189,55,59,44,220,168,239,191,189,239,191,189,239,191,189,66,239,191,189,59,239,191,189,239,191,189,115,94,222,139,239,191,189,47,95,239,191,189,108,70,239,191,189,239,191,189,22,239,191,189,211,175,239,191,189,239,191,189,239,191,189,239,191,189,6,117,239,191,189,239,191,189,215,186,239,191,189,239,191,189,239,191,189,51,239,191,189,82,110,239,191,189,239,191,189,239,191,189,28,239,191,189,239,191,189,99,239,191,189,239,191,189,106,239,191,189,31,108,239,191,189,28,239,191,189,53,83,12,239,191,189,109,239,191,189,239,191,189,239,191,189,239,191,189,87,239,191,189,239,191,189,239,191,189,114,239,191,189,9,54,239,191,189,2,29,33,239,191,189,69,9,116,58,239,191,189,239,191,189,239,191,189,239,191,189,106,239,191,189,7,239,191,189,239,191,189,239,191,189,85,0,239,191,189,202,164,28,74,23,126,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,114,239,191,189,13,3,239,191,189,50,103,97,61,74,239,191,189,79,239,191,189,211,175,57,239,191,189,54,82,124,239,191,189,239,191,189,239,191,189,239,191,189,64,239,191,189,239,191,189,239,191,189,203,166,26,239,191,189,239,191,189,7,239,191,189,239,191,189,239,191,189,239,191,189,100,104,103,239,191,189,93,91,47,48,239,191,189,43,239,191,189,7,29,239,191,189,239,191,189,239,191,189,22,18,16,239,191,189,239,191,189,105,239,191,189,126,127,70,239,191,189,239,191,189,52,239,191,189,239,191,189,108,20,239,191,189,239,191,189,239,191,189,21,239,191,189,239,191,189,239,191,189,239,191,189,16,78,239,191,189,11,196,136,239,191,189,239,191,189,239,191,189,59,239,191,189,239,191,189,239,191,189,239,191,189,82,23,239,191,189,119,239,191,189,239,191,189,79,71,239,191,189,67,239,191,189,239,191,189,239,191,189,102,117,122,239,191,189,239,191,189,26,49,114,239,191,189,239,191,189,31,205,150,239,191,189,28,239,191,189,239,191,189,239,191,189,239,191,189,51,45,92,239,191,189,239,191,189,79,20,107,51,239,191,189,239,191,189,69,239,191,189,39,239,191,189,239,191,189,74,65,112,239,191,189,223,132,117,239,191,189,89,239,191,189,239,191,189,101,9,50,239,191,189,25,69,239,143,179,10,239,191,189,123,205,175,239,191,189,239,191,189,239,191,189,120,100,239,191,189,239,191,189,78,239,191,189,110,105,4,239,191,189,239,191,189,239,191,189,239,191,189,44,64,239,191,189,239,191,189,97,0,45,239,191,189,239,191,189,203,152,10,239,191,189,91,239,191,189,239,191,189,44,47,239,191,189,198,175,239,191,189,54,3,239,191,189,239,191,189,96,40,239,191,189,65,239,191,189,239,191,189,239,191,189,69,239,191,189,94,239,191,189,30,77,239,191,189,239,191,189,47,120,239,191,189,14,239,191,189,239,191,189,118,239,191,189,116,239,191,189,239,191,189,41,239,191,189,21,75,9,239,191,189,33,239,191,189,239,191,189,5,8,239,191,189,212,184,14,58,239,191,189,68,30,13,239,191,189,69,127,104,239,191,189,239,191,189,239,191,189,239,191,189,92,59,105,46,239,191,189,11,48,118,84,51,239,191,189,239,191,189,93,123,38,239,191,189,239,191,189,85,239,191,189,239,191,189,220,134,86,239,191,189,230,159,170,239,191,189,239,191,189,108,239,191,189,98,239,191,189,239,191,189,239,191,189,239,191,189,84,239,191,189,2,2,9,35,239,191,189,239,191,189,16,59,44,239,191,189,88,239,191,189,216,159,239,191,189,87,14,239,191,189,239,191,189,72,22,96,239,191,189,239,191,189,232,134,154,239,191,189,239,191,189,89,101,30,83,239,191,189,239,191,189,239,191,189,239,191,189,107,239,191,189,239,191,189,115,239,191,189,61,53,239,191,189,14,98,99,239,191,189,239,191,189,239,191,189,93,239,191,189,111,239,191,189,7,100,117,79,239,191,189,239,191,189,239,191,189,72,239,191,189,75,67,239,191,189,84,62,121,229,157,163,127,93,93,84,120,56,239,191,189,0,0,112,239,191,189,239,191,189,103,26,26,40,239,191,189,6,68,90,239,191,189,239,191,189,61,239,191,189,239,191,189,239,191,189,31,239,191,189,82,239,191,189,110,239,191,189,239,191,189,71,35,18,51,239,191,189,239,191,189,60,199,132,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,40,239,191,189,44,239,191,189,115,239,191,189,66,239,191,189,239,191,189,31,111,122,239,191,189,25,239,191,189,108,1,239,191,189,0,32,239,191,189,8,239,191,189,239,191,189,25,7,239,191,189,105,239,191,189,86,239,191,189,239,191,189,239,191,189,239,191,189,38,239,191,189,239,191,189,45,125,239,191,189,239,191,189,239,191,189,239,191,189,56,54,35,239,191,189,215,137,239,191,189,239,191,189,239,191,189,239,191,189,49,239,191,189,55,239,191,189,89,239,191,189,239,191,189,75,239,191,189,112,25,239,191,189,239,191,189,35,15,239,191,189,239,191,189,6,239,191,189,239,191,189,239,191,189,105,21,48,239,191,189,239,191,189,227,190,146,107,33,239,191,189,239,191,189,26,239,191,189,56,239,191,189,21,239,191,189,239,191,189,239,191,189,71,236,130,170,239,191,189,95,0,239,191,189,79,1,239,191,189,0,116,54,200,149,6,43,118,239,191,189,239,191,189,54,79,120,239,191,189,239,191,189,94,215,153,114,100,34,239,191,189,69,124,239,191,189,239,191,189,4,239,191,189,239,191,189,239,191,189,66,105,239,191,189,239,191,189,118,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,44,239,191,189,220,142,239,191,189,50,49,239,191,189,239,191,189,239,191,189,34,222,191,239,191,189,75,2,239,191,189,38,239,191,189,239,191,189,239,191,189,118,204,180,239,191,189,54,239,191,189,98,53,239,191,189,239,191,189,55,70,216,183,239,191,189,96,84,16,239,191,189,65,12,239,191,189,239,191,189,119,239,191,189,239,191,189,239,191,189,103,239,191,189,58,7,239,191,189,24,239,191,189,125,89,239,191,189,239,191,189,63,239,191,189,5,7,239,191,189,239,191,189,57,239,191,189,239,191,189,44,21,15,239,191,189,239,191,189,239,191,189,239,191,189,60,23,127,231,177,148,73,239,191,189,239,191,189,63,239,191,189,239,191,189,239,191,189,239,191,189,83,27,2,84,239,191,189,209,141,41,207,184,43,239,191,189,59,239,191,189,43,118,239,191,189,46,239,191,189,65,66,61,239,191,189,35,239,191,189,67,239,191,189,88,239,191,189,239,191,189,239,191,189,49,239,191,189,239,191,189,99,33,239,191,189,239,191,189,46,239,191,189,239,191,189,14,21,239,191,189,239,191,189,239,191,189,112,229,161,184,22,59,115,48,203,142,239,191,189,239,191,189,239,191,189,29,239,191,189,63,10,239,191,189,55,239,191,189,97,239,191,189,213,145,84,239,191,189,239,191,189,8,239,191,189,239,191,189,45,26,239,191,189,239,191,189,42,239,191,189,29,120,239,191,189,239,191,189,27,103,239,191,189,239,191,189,15,28,239,191,189,17,3,85,4,41,239,191,189,226,152,165,16,16,100,239,191,189,239,191,189,106,239,191,189,30,96,239,191,189,65,239,191,189,239,191,189,34,239,191,189,65,126,239,191,189,239,191,189,51,66,239,191,189,56,239,191,189,239,191,189,5,56,239,191,189,4,127,239,191,189,97,239,191,189,239,191,189,13,19,35,47,239,191,189,239,191,189,120,50,239,191,189,239,191,189,239,191,189,30,68,51,113,239,191,189,28,23,239,191,189,113,206,142,43,239,191,189,239,191,189,101,106,118,92,5,239,191,189,239,191,189,109,12,21,126,30,79,25,53,239,191,189,16,239,191,189,94,196,129,239,191,189,5,54,28,99,239,191,189,239,191,189,20,239,191,189,126,239,191,189,82,69,75,89,2,213,133,69,115,239,191,189,55,29,239,191,189,239,191,189,239,191,189,239,191,189,104,239,191,189,239,191,189,239,191,189,239,191,189,12,104,239,191,189,101,63,63,239,191,189,239,191,189,239,191,189,88,40,239,191,189,239,191,189,239,191,189,9,239,191,189,220,184,58,113,25,80,207,137,239,191,189,67,82,239,191,189,239,191,189,89,93,38,239,191,189,26,70,221,168,239,191,189,194,150,239,191,189,70,239,191,189,88,15,239,191,189,92,239,191,189,239,191,189,47,239,191,189,239,191,189,239,191,189,37,239,191,189,239,191,189,239,191,189,25,126,239,191,189,239,191,189,12,103,100,239,191,189,1,239,191,189,123,239,191,189,44,37,239,191,189,239,191,189,239,191,189,239,191,189,211,153,118,122,95,239,191,189,84,239,191,189,104,239,191,189,96,239,191,189,239,191,189,102,239,191,189,68,239,191,189,118,198,169,239,191,189,239,191,189,82,93,13,239,191,189,239,191,189,121,239,191,189,10,239,191,189,7,223,150,239,191,189,34,33,239,191,189,30,21,239,191,189,58,239,191,189,239,191,189,239,191,189,95,239,191,189,20,239,191,189,239,191,189,113,47,239,191,189,239,191,189,239,191,189,71,25,108,239,191,189,5,239,191,189,58,93,40,89,239,191,189,43,239,191,189,103,35,239,191,189,87,239,191,189,17,239,191,189,223,187,194,173,239,191,189,239,191,189,125,239,191,189,114,51,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,8,50,239,191,189,15,239,191,189,239,191,189,239,191,189,110,65,239,191,189,239,191,189,239,191,189,239,191,189,196,168,25,126,239,191,189,27,21,239,191,189,86,239,191,189,239,191,189,57,93,239,191,189,239,191,189,239,191,189,239,191,189,76,239,191,189,239,191,189,26,239,191,189,239,191,189,239,191,189,84,239,191,189,61,76,239,191,189,17,45,61,239,191,189,239,191,189,239,191,189,25,88,239,191,189,239,191,189,239,191,189,77,239,191,189,115,239,191,189,239,191,189,95,115,239,191,189,122,239,191,189,239,191,189,115,239,191,189,6,239,191,189,239,191,189,90,221,149,126,239,191,189,64,212,173,107,239,191,189,115,239,191,189,32,239,191,189,42,239,191,189,239,191,189,63,104,72,239,191,189,239,191,189,239,191,189,41,239,191,189,239,191,189,239,191,189,81,239,191,189,73,239,191,189,64,222,190,122,102,69,239,191,189,12,239,191,189,198,148,239,191,189,239,191,189,210,149,239,191,189,239,191,189,239,191,189,239,191,189,47,239,191,189,64,239,191,189,239,191,189,17,239,191,189,85,80,110,18,92,239,191,189,239,191,189,239,191,189,96,66,28,239,191,189,122,68,239,191,189,50,239,191,189,239,191,189,43,239,191,189,8,86,239,191,189,50,44,115,239,191,189,26,29,239,191,189,58,35,105,239,191,189,239,191,189,239,191,189,105,239,191,189,39,92,114,83,239,191,189,239,191,189,99,239,191,189,106,239,191,189,239,191,189,33,112,31,239,191,189,239,191,189,94,60,239,191,189,239,191,189,239,191,189,113,96,7,239,191,189,69,239,191,189,84,22,239,191,189,239,191,189,24,72,202,171,227,158,175,70,16,42,239,191,189,239,191,189,75,25,239,191,189,74,45,239,191,189,79,97,239,191,189,1,239,191,189,239,191,189,18,76,239,191,189,239,191,189,239,191,189,81,83,239,191,189,239,191,189,8,39,84,239,191,189,27,239,191,189,239,191,189,239,191,189,216,182,239,191,189,239,191,189,21,239,191,189,70,239,191,189,239,191,189,98,239,191,189,51,221,151,70,58,239,191,189,239,191,189,82,38,239,191,189,98,239,191,189,92,239,191,189,88,16,239,191,189,239,191,189,65,214,142,239,191,189,68,239,191,189,75,239,191,189,4,239,191,189,93,66,239,191,189,38,239,191,189,239,191,189,21,112,239,191,189,25,43,73,110,102,239,191,189,118,220,139,91,239,191,189,221,188,5,70,239,191,189,56,94,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,1,60,239,191,189,239,191,189,239,191,189,66,239,191,189,239,191,189,239,191,189,21,239,191,189,32,110,75,49,110,27,239,191,189,63,239,191,189,239,191,189,239,191,189,239,191,189,98,84,108,123,239,191,189,239,191,189,111,116,122,239,191,189,239,191,189,58,239,191,189,122,61,18,40,49,239,191,189,24,239,191,189,77,239,191,189,239,191,189,119,18,239,191,189,115,93,98,92,239,191,189,123,83,239,191,189,30,239,191,189,86,239,191,189,23,239,191,189,239,191,189,84,239,191,189,124,95,14,239,191,189,66,116,118,239,191,189,98,60,124,45,239,191,189,89,15,92,239,191,189,6,37,239,191,189,239,191,189,105,64,70,239,191,189,31,78,210,139,239,191,189,114,4,239,191,189,239,191,189,15,23,4,239,191,189,48,239,191,189,239,191,189,38,63,215,153,92,106,70,72,55,239,191,189,198,190,24,19,31,239,191,189,18,35,37,239,191,189,34,122,239,191,189,119,51,239,191,189,74,239,191,189,88,17,239,191,189,60,239,191,189,48,67,0,111,25,239,191,189,239,191,189,66,239,191,189,239,191,189,62,59,239,191,189,239,191,189,239,191,189,60,239,191,189,13,239,191,189,71,239,191,189,239,191,189,118,95,101,96,32,78,239,191,189,38,200,137,21,239,191,189,239,191,189,30,88,239,191,189,96,66,24,239,191,189,239,191,189,239,191,189,57,239,191,189,76,77,0,28,85,239,191,189,121,98,239,191,189,239,191,189,239,191,189,16,239,191,189,98,239,191,189,60,82,239,191,189,11,239,191,189,37,239,191,189,44,239,191,189,239,191,189,194,172,239,191,189,47,239,191,189,239,191,189,38,108,20,239,191,189,78,239,191,189,239,191,189,239,191,189,16,239,191,189,68,55,239,191,189,72,69,239,191,189,127,219,140,63,239,191,189,210,134,32,38,57,239,191,189,28,239,191,189,51,239,191,189,239,191,189,9,239,191,189,70,77,239,191,189,239,191,189,127,239,191,189,11,239,191,189,114,239,191,189,239,191,189,69,239,191,189,125,239,191,189,1,83,30,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,40,239,191,189,62,239,191,189,23,239,191,189,75,239,191,189,239,191,189,94,239,191,189,239,191,189,239,191,189,239,191,189,13,239,191,189,239,191,189,239,191,189,96,4,43,239,191,189,20,110,239,191,189,239,191,189,239,191,189,19,115,71,239,191,189,239,191,189,62,239,191,189,239,191,189,122,39,239,191,189,239,191,189,54,116,239,191,189,60,127,239,191,189,115,102,17,28,239,191,189,239,191,189,57,239,191,189,239,191,189,71,239,191,189,41,117,33,239,191,189,113,109,22,23,81,239,191,189,80,39,39,11,239,191,189,82,109,205,183,36,97,239,191,189,113,239,191,189,121,239,191,189,239,191,189,239,191,189,239,191,189,114,53,239,191,189,126,239,191,189,80,239,191,189,108,81,239,191,189,7,239,191,189,37,45,10,34,62,239,191,189,17,2,113,204,188,239,191,189,34,239,191,189,239,191,189,4,239,191,189,39,239,191,189,117,92,239,191,189,222,189,239,191,189,239,191,189,62,239,191,189,4,239,191,189,27,8,239,191,189,127,59,104,102,96,58,239,191,189,239,191,189,18,239,191,189,120,239,191,189,91,78,239,191,189,239,191,189,239,191,189,42,27,239,191,189,73,239,191,189,78,77,239,191,189,239,191,189,239,191,189,87,239,191,189,239,191,189,239,191,189,239,191,189,31,239,191,189,95,44,239,191,189,60,239,191,189,203,143,239,191,189,239,191,189,56,68,239,191,189,77,239,191,189,239,191,189,86,23,239,191,189,239,191,189,30,54,239,191,189,25,25,214,164,51,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,201,184,239,191,189,16,239,191,189,60,80,2,239,191,189,18,22,9,239,191,189,72,239,191,189,89,239,191,189,115,239,191,189,239,191,189,0,108,239,191,189,18,239,191,189,101,73,239,191,189,239,191,189,239,191,189,239,191,189,66,126,239,191,189,1,109,69,239,191,189,239,191,189,239,191,189,28,239,191,189,239,191,189,3,16,239,191,189,91,120,53,18,19,55,239,191,189,239,191,189,75,56,125,239,191,189,44,239,191,189,2,239,191,189,26,211,138,239,191,189,239,191,189,98,239,191,189,9,41,239,191,189,239,191,189,32,14,116,105,239,191,189,30,239,191,189,239,191,189,239,191,189,10,127,30,73,239,191,189,239,191,189,89,239,191,189,239,191,189,25,239,191,189,123,47,239,191,189,9,239,191,189,239,191,189,73,239,191,189,37,46,239,191,189,239,191,189,111,24,110,23,239,191,189,6,239,191,189,55,239,191,189,53,239,191,189,11,239,191,189,106,239,191,189,239,191,189,239,191,189,239,191,189,71,70,239,191,189,8,239,191,189,239,191,189,239,191,189,96,68,94,239,191,189,37,239,191,189,220,169,57,217,176,239,191,189,239,191,189,239,191,189,239,191,189,73,239,191,189,239,191,189,70,102,121,52,61,239,191,189,76,8,239,191,189,239,191,189,25,102,116,239,191,189,41,98,239,191,189,59,239,191,189,239,191,189,117,239,191,189,98,239,191,189,239,191,189,63,123,6,239,191,189,239,191,189,239,191,189,239,191,189,28,93,120,116,43,6,239,191,189,52,28,47,239,191,189,26,32,114,59,239,191,189,120,52,239,191,189,13,43,42,239,191,189,121,23,239,191,189,239,191,189,239,191,189,239,191,189,1,239,191,189,91,239,191,189,49,74,22,23,239,191,189,55,239,191,189,239,191,189,239,191,189,239,191,189,70,239,191,189,72,122,29,3,239,191,189,239,191,189,201,144,239,191,189,239,191,189,239,191,189,92,239,191,189,89,239,191,189,100,26,239,191,189,239,191,189,239,191,189,239,191,189,40,37,239,191,189,239,191,189,239,191,189,63,96,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,30,239,191,189,239,191,189,70,115,239,191,189,203,162,116,87,239,191,189,25,88,239,191,189,96,239,191,189,29,239,191,189,239,191,189,94,239,191,189,239,191,189,239,191,189,222,176,239,191,189,239,191,189,80,239,191,189,19,110,3,124,239,191,189,115,239,191,189,112,29,239,191,189,239,191,189,239,191,189,239,191,189,122,209,156,239,191,189,106,87,222,176,239,191,189,239,191,189,239,191,189,35,15,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,122,18,97,233,133,157,239,191,189,49,239,191,189,62,239,191,189,239,191,189,212,145,239,191,189,18,35,66,239,191,189,96,117,113,223,134,116,35,88,126,239,191,189,48,194,135,239,191,189,239,191,189,83,239,191,189,25,239,191,189,22,35,239,191,189,37,72,113,239,191,189,22,11,239,191,189,52,239,191,189,118,108,239,191,189,71,239,191,189,8,51,239,191,189,116,97,68,76,81,101,124,120,239,191,189,239,191,189,61,7,239,191,189,59,43,239,191,189,239,191,189,79,41,109,239,191,189,93,23,239,191,189,73,96,239,191,189,85,239,191,189,83,74,239,191,189,62,114,239,191,189,239,191,189,83,239,191,189,239,191,189,239,191,189,20,51,17,84,44,239,191,189,58,65,218,135,55,239,191,189,239,191,189,239,191,189,23,74,125,2,239,191,189,38,239,191,189,43,239,191,189,239,191,189,104,239,191,189,239,191,189,118,239,191,189,108,122,70,120,239,191,189,42,6,113,28,217,128,20,6,48,28,107,239,191,189,94,91,106,98,81,239,191,189,55,239,191,189,124,7,106,98,239,191,189,239,191,189,113,239,191,189,239,191,189,27,239,191,189,239,191,189,77,239,191,189,239,191,189,67,11,239,191,189,23,43,18,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,91,109,11,239,191,189,26,239,191,189,15,239,191,189,105,34,239,191,189,15,88,11,15,74,23,20,96,211,139,100,110,39,86,108,239,191,189,11,239,191,189,239,191,189,12,239,191,189,239,191,189,54,113,3,239,191,189,99,1,38,239,191,189,239,191,189,239,191,189,202,167,239,191,189,239,191,189,12,28,239,191,189,121,239,191,189,41,239,191,189,3,239,191,189,239,191,189,239,191,189,51,239,191,189,239,191,189,3,239,191,189,125,21,239,191,189,52,34,239,191,189,11,239,191,189,239,191,189,19,58,75,239,191,189,211,164,127,90,239,191,189,239,191,189,239,191,189,239,191,189,113,39,239,191,189,40,50,122,5,239,191,189,48,82,91,239,191,189,239,191,189,19,239,191,189,239,191,189,239,191,189,107,114,16,60,239,191,189,239,191,189,239,191,189,103,27,35,89,100,239,191,189,239,191,189,10,19,239,191,189,11,239,191,189,4,12,239,191,189,31,5,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,50,239,191,189,239,191,189,115,78,223,183,239,191,189,85,239,191,189,239,191,189,22,86,239,191,189,117,87,239,191,189,81,112,239,191,189,7,239,191,189,239,191,189,123,83,11,239,191,189,65,17,17,239,191,189,239,191,189,100,105,239,191,189,69,91,239,191,189,52,67,95,239,191,189,61,74,239,191,189,239,191,189,89,59,44,61,239,191,189,86,119,239,191,189,42,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,43,106,67,239,191,189,33,44,239,191,189,66,239,191,189,17,39,239,191,189,59,118,239,191,189,44,239,191,189,111,239,191,189,239,191,189,239,191,189,79,21,211,133,73,113,239,191,189,63,36,108,99,239,191,189,96,24,239,191,189,85,239,191,189,41,239,191,189,239,191,189,22,239,191,189,27,21,239,191,189,26,0,15,239,191,189,3,104,85,111,34,239,191,189,85,112,48,216,187,69,3,127,239,191,189,239,191,189,239,191,189,239,191,189,94,239,191,189,239,191,189,32,70,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,46,112,239,191,189,65,33,3,14,81,62,60,239,191,189,239,191,189,87,81,239,191,189,19,23,117,81,33,63,239,191,189,91,38,239,191,189,34,95,239,191,189,239,191,189,36,91,239,191,189,239,191,189,239,191,189,74,239,191,189,239,191,189,94,239,191,189,239,191,189,239,191,189,239,191,189,34,19,239,191,189,239,191,189,239,191,189,5,37,239,191,189,239,191,189,239,191,189,108,108,239,191,189,239,191,189,65,27,62,224,175,150,239,191,189,23,68,50,239,191,189,239,191,189,239,191,189,239,191,189,81,239,191,189,211,156,239,191,189,239,191,189,127,72,52,25,44,90,239,191,189,239,191,189,239,191,189,239,191,189,69,53,239,191,189,123,102,239,191,189,31,239,191,189,5,239,191,189,239,191,189,10,206,191,19,78,94,62,54,239,191,189,239,191,189,239,191,189,75,79,239,191,189,239,191,189,37,239,191,189,85,2,239,191,189,239,191,189,110,239,191,189,239,191,189,42,239,191,189,239,191,189,239,191,189,18,239,191,189,239,191,189,239,191,189,116,121,117,5,239,191,189,239,191,189,86,200,157,38,117,103,111,44,108,239,191,189,239,191,189,12,239,191,189,239,191,189,44,118,96,210,147,98,51,239,191,189,239,191,189,77,239,191,189,58,28,239,191,189,239,191,189,127,113,32,239,191,189,89,239,191,189,239,191,189,239,191,189,71,119,24,123,239,191,189,20,239,191,189,6,239,191,189,199,145,239,191,189,24,239,191,189,114,123,200,153,61,80,239,191,189,58,74,239,191,189,81,239,191,189,78,239,191,189,55,86,62,60,239,191,189,24,90,122,239,191,189,52,239,191,189,239,191,189,239,191,189,239,191,189,84,84,239,191,189,239,191,189,103,206,173,89,239,191,189,18,239,191,189,239,191,189,239,191,189,61,205,153,239,191,189,39,239,191,189,239,191,189,206,142,239,191,189,85,125,0,73,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,116,239,191,189,239,191,189,44,239,191,189,239,191,189,44,239,191,189,239,191,189,89,29,239,191,189,77,239,191,189,239,191,189,4,239,191,189,239,191,189,239,191,189,203,165,95,102,239,191,189,239,191,189,239,191,189,239,191,189,33,22,4,239,191,189,87,215,177,55,239,191,189,28,239,191,189,239,191,189,239,191,189,93,203,164,239,191,189,43,75,71,11,111,239,191,189,239,191,189,39,31,42,65,21,30,239,191,189,117,25,239,191,189,10,115,212,138,239,191,189,212,156,80,239,191,189,239,191,189,78,239,191,189,239,191,189,110,218,186,239,191,189,89,107,125,239,191,189,125,73,239,191,189,55,239,191,189,111,34,239,191,189,32,35,239,191,189,0,82,87,239,191,189,28,101,118,239,191,189,239,191,189,239,191,189,239,191,189,108,79,34,239,191,189,103,90,94,239,191,189,10,239,191,189,239,191,189,87,239,191,189,239,191,189,239,191,189,39,44,45,93,239,191,189,42,2,239,191,189,28,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,55,35,239,191,189,239,191,189,87,21,239,191,189,8,239,191,189,35,126,24,58,42,239,191,189,97,68,55,239,191,189,78,126,239,191,189,48,239,191,189,66,76,37,239,191,189,239,191,189,110,239,191,189,239,191,189,21,202,159,51,40,239,191,189,239,191,189,121,54,36,101,58,72,17,239,191,189,239,191,189,33,33,239,191,189,107,28,239,191,189,84,239,191,189,239,191,189,239,191,189,10,239,191,189,81,35,89,104,239,191,189,2,111,239,191,189,239,191,189,57,239,191,189,239,191,189,94,24,89,39,239,191,189,239,191,189,48,239,191,189,82,126,239,191,189,239,191,189,79,239,191,189,111,118,239,191,189,64,67,18,239,191,189,239,191,189,239,191,189,0,12,239,191,189,120,14,88,71,90,239,191,189,16,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,69,106,239,191,189,239,191,189,239,191,189,97,239,191,189,25,61,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,41,239,191,189,51,89,26,36,38,34,44,10,36,218,183,239,191,189,239,191,189,239,191,189,123,114,67,239,191,189,239,191,189,239,191,189,239,191,189,18,239,191,189,123,239,191,189,59,122,94,239,191,189,239,191,189,239,191,189,239,191,189,91,239,191,189,104,239,191,189,30,71,89,239,191,189,239,191,189,239,191,189,217,138,104,239,191,189,125,34,66,239,191,189,239,191,189,45,239,191,189,32,239,191,189,239,191,189,107,239,191,189,239,191,189,88,80,239,191,189,43,239,191,189,239,191,189,239,191,189,10,107,239,191,189,96,239,191,189,89,99,24,239,191,189,46,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,104,0,58,239,191,189,239,191,189,108,51,239,191,189,239,191,189,57,93,239,191,189,239,191,189,239,191,189,125,44,239,191,189,24,239,191,189,25,122,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,61,23,239,191,189,239,191,189,201,190,239,191,189,122,239,191,189,239,191,189,75,239,191,189,64,239,191,189,239,191,189,239,191,189,21,32,6,121,239,191,189,85,239,191,189,61,118,239,191,189,239,191,189,54,239,191,189,114,125,70,239,191,189,47,27,239,191,189,239,191,189,112,239,191,189,239,191,189,52,3,239,191,189,239,191,189,239,191,189,239,191,189,109,239,191,189,118,110,239,191,189,39,9,239,191,189,239,191,189,67,239,191,189,82,4,12,67,239,191,189,120,206,172,115,206,143,0,117,239,191,189,103,199,190,239,191,189,195,186,239,191,189,239,191,189,239,191,189,115,124,101,3,239,191,189,30,195,142,89,125,239,191,189,29,239,191,189,239,191,189,239,191,189,81,26,19,4,100,9,222,185,1,239,191,189,79,96,74,9,239,191,189,239,191,189,34,239,191,189,33,239,191,189,239,191,189,76,116,7,239,191,189,239,191,189,64,54,239,191,189,239,191,189,239,191,189,239,191,189,34,239,191,189,70,239,191,189,239,191,189,239,191,189,58,217,148,239,191,189,100,70,118,239,191,189,121,239,191,189,90,239,191,189,239,191,189,105,121,11,41,5,239,191,189,11,118,239,191,189,200,168,53,125,42,239,191,189,61,124,239,191,189,85,239,191,189,121,72,4,4,239,191,189,46,239,191,189,239,191,189,55,239,191,189,219,143,239,191,189,41,83,22,239,191,189,64,3,239,191,189,17,239,191,189,16,239,191,189,239,191,189,27,239,191,189,239,191,189,239,191,189,4,18,52,239,191,189,48,6,37,29,119,122,239,191,189,124,13,204,166,239,191,189,0,46,39,215,130,82,69,239,191,189,239,191,189,56,24,118,0,18,239,191,189,78,58,239,191,189,239,191,189,124,239,191,189,58,35,15,127,35,239,191,189,33,106,10,2,31,239,191,189,31,26,239,191,189,89,37,63,239,191,189,204,173,239,191,189,239,191,189,239,191,189,28,100,239,191,189,89,65,19,239,191,189,41,70,239,191,189,11,23,87,94,239,191,189,36,29,239,191,189,53,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,20,239,191,189,36,239,191,189,239,191,189,61,42,32,239,191,189,6,39,66,16,239,191,189,239,191,189,40,239,191,189,239,191,189,84,239,191,189,66,239,191,189,239,191,189,235,168,143,20,239,191,189,239,191,189,29,58,108,6,100,45,89,239,191,189,121,115,239,191,189,239,191,189,239,191,189,239,191,189,87,239,191,189,239,191,189,12,31,69,239,191,189,239,191,189,8,239,191,189,29,239,191,189,69,239,191,189,56,7,68,41,103,42,239,191,189,204,186,60,239,191,189,239,191,189,239,191,189,86,66,101,239,191,189,239,191,189,75,72,239,191,189,75,198,130,239,191,189,125,39,74,50,239,191,189,239,191,189,239,191,189,127,239,191,189,114,47,95,121,239,191,189,209,139,239,191,189,96,239,191,189,239,191,189,121,239,191,189,239,191,189,239,191,189,69,101,239,191,189,80,239,191,189,64,239,191,189,53,239,191,189,3,105,239,191,189,239,191,189,83,239,191,189,239,191,189,22,239,191,189,239,191,189,54,107,94,127,118,239,191,189,102,33,34,111,205,173,239,191,189,239,191,189,239,191,189,77,239,191,189,47,239,191,189,49,110,42,239,191,189,239,191,189,104,239,191,189,239,191,189,82,103,208,152,239,191,189,239,191,189,108,109,239,191,189,239,191,189,83,239,191,189,31,239,191,189,239,191,189,28,85,239,191,189,11,3,239,191,189,239,191,189,239,191,189,239,191,189,16,239,191,189,239,191,189,65,207,183,14,11,115,207,186,239,191,189,52,239,191,189,239,191,189,33,239,191,189,239,191,189,103,99,239,191,189,36,18,239,191,189,100,115,115,239,191,189,239,191,189,239,162,188,7,239,191,189,239,191,189,34,239,191,189,43,23,46,119,71,20,80,239,191,189,37,239,191,189,100,239,191,189,239,191,189,239,191,189,68,101,11,239,191,189,239,191,189,239,191,189,92,67,86,37,239,191,189,44,239,191,189,239,191,189,239,191,189,69,239,191,189,124,86,239,191,189,56,239,191,189,16,239,191,189,239,191,189,62,239,191,189,15,239,191,189,239,191,189,110,239,191,189,119,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,78,239,191,189,239,191,189,32,34,239,191,189,35,239,191,189,99,30,239,191,189,108,43,76,12,121,120,239,191,189,239,191,189,14,239,191,189,239,191,189,52,87,40,21,124,239,191,189,239,191,189,222,133,64,239,191,189,7,239,191,189,76,239,191,189,112,127,239,191,189,4,239,191,189,40,239,191,189,29,239,191,189,66,99,106,40,45,239,191,189,203,157,239,191,189,239,191,189,239,191,189,239,191,189,122,239,191,189,95,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,35,97,239,191,189,239,191,189,7,92,44,9,239,191,189,67,58,239,191,189,239,191,189,25,27,206,177,239,191,189,117,52,86,239,191,189,239,191,189,2,118,4,239,191,189,239,191,189,26,239,191,189,88,124,239,191,189,31,1,239,191,189,122,37,239,191,189,239,191,189,239,191,189,239,191,189,67,115,239,191,189,98,239,191,189,239,191,189,67,239,191,189,239,191,189,239,191,189,43,103,239,191,189,97,41,239,191,189,239,191,189,88,53,101,239,191,189,3,235,190,163,239,191,189,23,112,84,239,191,189,26,214,160,239,191,189,239,191,189,35,115,20,92,105,96,81,239,191,189,97,80,239,191,189,82,239,191,189,239,191,189,206,149,46,105,46,239,191,189,64,239,191,189,208,190,239,191,189,118,239,191,189,116,72,239,191,189,84,239,191,189,59,239,191,189,6,56,124,239,191,189,239,191,189,4,239,191,189,52,239,191,189,109,22,96,119,239,191,189,239,191,189,239,191,189,109,114,239,191,189,123,239,191,189,239,191,189,86,103,239,191,189,221,134,239,191,189,239,191,189,239,191,189,23,239,191,189,122,239,191,189,24,50,239,191,189,42,113,11,239,191,189,98,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,82,239,191,189,239,191,189,83,239,191,189,41,106,239,191,189,38,239,191,189,239,191,189,117,239,191,189,239,191,189,4,113,79,73,124,117,239,191,189,221,185,239,191,189,72,45,112,239,191,189,64,239,191,189,239,191,189,239,191,189,239,191,189,52,239,191,189,20,115,123,239,191,189,15,1,239,191,189,196,180,239,191,189,94,239,191,189,239,191,189,88,74,239,191,189,110,239,191,189,116,54,24,11,109,239,191,189,239,191,189,84,120,239,191,189,239,191,189,202,179,121,109,93,239,191,189,205,171,101,239,191,189,239,191,189,27,10,239,191,189,95,17,239,191,189,80,85,239,191,189,111,61,239,191,189,96,239,191,189,103,14,23,67,239,191,189,122,239,191,189,239,191,189,239,191,189,27,229,139,147,124,125,239,191,189,8,16,239,191,189,27,14,119,14,239,191,189,39,3,34,57,118,239,191,189,239,191,189,239,191,189,13,97,116,239,191,189,239,191,189,33,64,113,62,43,239,191,189,67,44,26,239,191,189,239,191,189,11,239,191,189,52,239,191,189,54,68,239,191,189,239,191,189,239,191,189,111,28,239,191,189,87,239,191,189,104,91,89,43,125,49,8,239,191,189,68,239,191,189,239,191,189,23,239,191,189,239,191,189,239,191,189,239,191,189,123,13,70,73,46,239,191,189,89,239,191,189,239,191,189,115,239,191,189,239,191,189,36,5,239,191,189,25,239,191,189,239,191,189,79,239,191,189,0,239,191,189,239,191,189,239,191,189,77,83,77,17,30,104,10,36,52,239,191,189,15,98,14,116,239,191,189,2,120,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,32,239,191,189,55,239,191,189,64,32,124,239,191,189,123,112,239,191,189,121,239,191,189,11,239,191,189,101,96,104,95,239,191,189,48,239,191,189,52,11,39,56,77,112,88,239,191,189,239,191,189,75,78,51,108,239,191,189,31,40,239,191,189,83,120,239,191,189,239,191,189,239,191,189,239,191,189,0,239,191,189,239,191,189,66,84,85,37,116,239,191,189,239,191,189,3,239,191,189,25,239,191,189,47,112,34,239,191,189,239,191,189,46,239,191,189,86,239,191,189,239,191,189,69,56,126,239,191,189,55,239,191,189,87,239,191,189,118,239,191,189,56,87,239,191,189,21,239,191,189,118,37,239,191,189,67,239,191,189,239,191,189,44,14,2,120,239,191,189,86,23,239,191,189,102,2,239,191,189,87,239,191,189,239,191,189,27,239,191,189,110,60,56,239,191,189,117,124,239,191,189,239,191,189,216,169,13,239,191,189,119,9,239,191,189,18,28,30,24,41,124,63,84,97,64,239,191,189,15,239,191,189,239,191,189,239,191,189,19,24,120,239,191,189,239,191,189,239,191,189,11,239,191,189,96,239,191,189,239,191,189,81,239,191,189,57,73,35,65,93,75,239,191,189,58,239,191,189,239,191,189,239,191,189,91,46,239,191,189,239,191,189,81,239,191,189,109,239,191,189,33,216,150,239,191,189,122,239,191,189,82,25,7,44,239,191,189,105,239,191,189,42,239,191,189,27,23,29,239,191,189,239,191,189,69,239,191,189,239,191,189,126,51,239,191,189,67,239,191,189,239,191,189,51,239,191,189,239,191,189,66,239,191,189,48,199,163,84,239,191,189,104,11,50,239,191,189,13,239,191,189,123,80,49,239,191,189,205,191,52,14,239,191,189,239,191,189,42,19,23,239,191,189,239,191,189,239,191,189,99,211,142,239,191,189,38,14,239,191,189,239,191,189,120,239,191,189,116,42,239,191,189,19,103,239,191,189,239,191,189,239,191,189,53,17,239,191,189,239,191,189,115,105,239,191,189,239,191,189,239,191,189,5,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,64,206,187,127,239,191,189,85,66,55,239,191,189,85,239,191,189,239,191,189,239,191,189,19,239,191,189,239,191,189,91,113,9,239,191,189,239,191,189,239,191,189,122,96,37,77,239,191,189,43,239,191,189,36,239,191,189,48,239,191,189,88,102,69,239,191,189,56,239,191,189,98,239,191,189,239,191,189,67,239,191,189,119,239,191,189,239,191,189,115,70,67,87,25,239,191,189,239,191,189,79,112,83,91,90,239,191,189,239,191,189,22,67,239,191,189,104,239,191,189,0,239,191,189,239,191,189,87,22,35,239,191,189,239,191,189,202,169,239,191,189,239,191,189,239,191,189,124,127,42,239,191,189,239,191,189,210,167,239,191,189,8,239,191,189,239,191,189,81,239,191,189,66,239,191,189,221,151,239,191,189,43,239,191,189,239,191,189,67,239,191,189,239,191,189,44,52,118,239,191,189,44,239,191,189,239,191,189,108,114,239,191,189,12,239,191,189,48,239,191,189,196,149,35,56,239,191,189,239,191,189,101,239,191,189,69,96,239,191,189,239,191,189,18,219,188,60,239,191,189,60,100,239,191,189,239,191,189,239,191,189,92,197,156,98,19,239,191,189,239,191,189,0,53,33,239,191,189,5,237,149,136,112,239,191,189,15,239,191,189,103,239,191,189,21,239,191,189,64,239,191,189,7,239,191,189,53,9,239,191,189,38,58,13,43,57,94,239,191,189,31,239,191,189,239,191,189,239,191,189,69,43,239,191,189,63,12,239,191,189,38,239,191,189,100,123,85,108,28,239,191,189,70,239,191,189,92,239,191,189,11,213,169,239,191,189,101,239,191,189,114,239,191,189,239,191,189,92,42,212,161,107,239,191,189,239,191,189,239,191,189,239,191,189,16,0,239,191,189,25,239,191,189,239,191,189,239,191,189,84,239,191,189,239,191,189,239,191,189,239,191,189,63,80,239,191,189,11,60,79,239,191,189,239,191,189,239,191,189,20,43,201,138,239,191,189,239,191,189,239,191,189,195,154,1,91,239,191,189,91,72,239,191,189,75,40,80,16,40,239,191,189,7,64,105,239,191,189,239,191,189,80,211,157,69,89,37,50,51,114,239,191,189,239,191,189,239,191,189,22,122,239,191,189,10,86,127,239,191,189,239,191,189,239,191,189,8,239,191,189,239,191,189,19,239,191,189,239,191,189,239,191,189,40,13,239,191,189,95,239,191,189,239,191,189,239,191,189,22,38,85,239,191,189,54,239,191,189,39,239,191,189,4,239,191,189,50,58,239,191,189,64,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,72,45,239,191,189,49,90,112,125,10,100,2,96,20,27,239,191,189,239,191,189,239,191,189,0,239,191,189,96,27,239,191,189,50,239,191,189,52,239,191,189,239,191,189,30,116,239,191,189,92,41,239,191,189,239,191,189,74,65,239,191,189,73,35,77,239,191,189,29,28,113,1,42,29,31,239,191,189,111,239,191,189,239,191,189,239,191,189,113,239,191,189,239,191,189,22,239,191,189,239,191,189,79,239,191,189,81,8,123,7,239,191,189,239,191,189,36,208,176,239,191,189,220,137,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,10,195,164,122,4,216,172,62,27,23,87,43,93,239,191,189,212,182,116,20,239,191,189,106,39,86,239,191,189,79,239,191,189,28,239,191,189,96,239,191,189,239,191,189,83,85,236,157,140,239,191,189,239,191,189,4,239,191,189,90,239,191,189,239,191,189,13,120,239,191,189,239,191,189,239,191,189,8,239,191,189,39,239,191,189,239,191,189,86,119,239,191,189,239,191,189,85,239,191,189,124,239,191,189,239,191,189,239,191,189,68,61,4,239,191,189,112,2,72,197,156,16,239,191,189,15,239,191,189,239,191,189,239,191,189,239,191,189,111,239,191,189,34,202,142,239,191,189,239,191,189,84,239,191,189,116,239,191,189,239,191,189,239,191,189,82,239,191,189,231,129,188,116,239,191,189,116,239,191,189,25,239,191,189,239,191,189,13,239,191,189,239,191,189,1,71,239,191,189,22,239,191,189,127,21,125,239,191,189,15,80,239,191,189,77,239,191,189,239,191,189,239,191,189,25,239,191,189,41,73,239,191,189,21,239,191,189,239,191,189,41,27,97,239,191,189,239,191,189,43,9,239,191,189,36,23,82,239,191,189,239,191,189,239,191,189,239,191,189,27,61,10,77,113,108,223,130,239,191,189,239,191,189,29,239,191,189,58,239,191,189,65,80,239,191,189,26,239,191,189,239,191,189,30,85,239,191,189,110,5,239,191,189,111,53,93,30,113,69,239,191,189,14,12,126,239,191,189,28,99,73,239,191,189,239,191,189,239,191,189,239,191,189,77,207,157,239,191,189,239,191,189,101,239,191,189,111,239,191,189,31,239,191,189,239,191,189,113,239,191,189,108,239,191,189,112,77,103,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,52,239,191,189,36,239,191,189,239,191,189,239,191,189,41,239,191,189,109,239,191,189,32,53,49,239,191,189,109,239,191,189,31,2,95,239,191,189,16,36,12,239,191,189,239,191,189,239,191,189,76,53,45,29,239,191,189,58,200,175,239,191,189,65,98,239,191,189,65,239,191,189,123,122,239,191,189,239,191,189,54,107,239,191,189,239,191,189,111,239,191,189,239,191,189,55,16,239,191,189,15,239,191,189,61,239,191,189,239,191,189,239,191,189,239,191,189,76,64,239,191,189,106,239,191,189,105,239,191,189,119,239,191,189,239,191,189,74,30,239,191,189,239,191,189,239,191,189,106,39,121,89,239,191,189,108,197,146,116,126,41,3,239,191,189,49,4,118,239,191,189,118,23,47,58,239,191,189,85,58,2,8,103,239,191,189,239,191,189,93,25,239,191,189,47,102,90,21,114,239,191,189,239,191,189,113,239,191,189,239,191,189,61,239,191,189,239,191,189,102,60,70,239,191,189,69,239,191,189,239,191,189,120,101,111,123,239,191,189,63,87,239,191,189,4,12,239,191,189,22,100,239,191,189,239,191,189,57,239,191,189,239,191,189,4,46,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,106,104,239,191,189,239,191,189,33,7,239,191,189,239,191,189,114,7,239,191,189,239,191,189,239,191,189,67,51,64,239,191,189,108,122,239,191,189,38,239,191,189,40,239,191,189,2,111,239,191,189,65,86,8,209,188,239,191,189,239,191,189,103,214,188,30,239,191,189,4,27,61,239,191,189,8,67,239,191,189,239,191,189,239,191,189,239,191,189,58,46,239,191,189,239,191,189,239,191,189,63,9,201,177,68,87,239,191,189,106,54,14,18,21,239,191,189,92,239,191,189,205,137,117,239,191,189,233,148,134,239,191,189,239,191,189,119,22,112,104,85,239,191,189,239,191,189,81,62,239,191,189,239,191,189,239,191,189,84,49,239,191,189,196,185,239,191,189,107,239,191,189,48,239,191,189,239,191,189,117,106,229,177,185,239,191,189,239,191,189,77,239,191,189,127,10,57,45,239,191,189,27,21,239,191,189,239,191,189,239,191,189,239,191,189,86,239,191,189,239,191,189,120,88,239,191,189,25,47,13,27,239,191,189,239,191,189,239,191,189,69,239,191,189,239,191,189,111,239,191,189,213,156,239,191,189,55,239,191,189,51,74,239,191,189,239,191,189,221,158,114,239,191,189,122,110,10,122,239,191,189,239,191,189,108,88,4,239,191,189,113,64,239,191,189,239,191,189,123,239,191,189,239,191,189,239,191,189,29,239,191,189,239,191,189,239,191,189,37,57,30,239,191,189,46,97,34,59,239,191,189,239,191,189,79,20,31,239,191,189,239,191,189,75,100,3,239,191,189,239,191,189,1,44,239,191,189,64,67,239,191,189,83,239,191,189,239,191,189,239,191,189,18,239,191,189,73,239,191,189,91,239,191,189,239,191,189,62,239,191,189,239,191,189,95,239,191,189,77,239,191,189,91,24,29,239,191,189,239,191,189,239,191,189,44,239,191,189,35,13,40,239,191,189,90,95,13,119,74,15,239,191,189,61,68,213,186,110,239,191,189,104,196,149,239,191,189,76,79,239,191,189,103,115,59,239,191,189,80,239,191,189,42,239,191,189,239,191,189,38,239,191,189,51,32,239,191,189,239,191,189,239,191,189,106,20,239,191,189,239,191,189,16,239,191,189,239,191,189,93,239,191,189,29,79,222,150,239,191,189,239,191,189,217,180,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,70,239,191,189,87,78,239,191,189,239,191,189,59,98,239,191,189,228,171,132,239,191,189,123,118,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,51,121,76,79,10,239,191,189,2,90,107,239,191,189,239,191,189,23,239,191,189,26,239,191,189,55,239,191,189,73,239,191,189,103,114,239,191,189,239,191,189,239,191,189,239,191,189,101,239,191,189,69,99,239,191,189,35,239,191,189,239,191,189,11,239,191,189,239,191,189,85,8,67,10,239,191,189,239,191,189,239,191,189,24,239,191,189,4,114,239,191,189,62,41,239,191,189,23,118,108,120,239,191,189,83,99,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,34,117,84,239,191,189,239,191,189,5,239,191,189,114,239,191,189,239,191,189,112,7,88,97,239,191,189,84,36,239,191,189,239,191,189,239,191,189,127,239,191,189,77,239,191,189,1,239,191,189,239,191,189,89,55,239,191,189,92,239,191,189,239,191,189,113,239,191,189,30,53,92,121,239,191,189,75,3,219,180,127,76,11,67,49,105,239,191,189,239,191,189,239,191,189,13,239,191,189,239,191,189,6,239,191,189,239,191,189,11,102,114,59,239,191,189,102,239,191,189,10,239,191,189,239,191,189,98,30,239,191,189,46,30,239,191,189,123,195,152,93,239,191,189,239,191,189,90,40,239,191,189,23,107,239,191,189,239,191,189,206,185,23,85,123,109,25,239,191,189,239,191,189,52,77,239,191,189,65,36,114,239,191,189,74,10,239,191,189,239,191,189,113,38,19,109,239,191,189,43,114,12,74,109,239,191,189,239,191,189,67,27,24,23,74,239,191,189,77,239,191,189,4,194,180,239,191,189,74,239,191,189,115,116,239,191,189,89,239,191,189,13,239,191,189,239,191,189,126,239,191,189,239,191,189,239,191,189,239,191,189,79,239,191,189,13,239,191,189,89,239,191,189,82,87,38,12,90,239,191,189,239,191,189,239,191,189,1,202,174,114,239,191,189,34,239,191,189,239,191,189,239,191,189,35,239,191,189,239,191,189,83,114,239,191,189,112,113,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,51,91,239,191,189,239,191,189,106,77,104,239,191,189,239,191,189,2,80,239,191,189,7,239,191,189,53,34,239,191,189,20,239,191,189,239,191,189,239,191,189,111,36,239,191,189,229,137,155,239,191,189,228,140,191,58,239,191,189,122,23,239,191,189,41,85,106,239,191,189,239,191,189,29,239,191,189,48,239,191,189,107,239,191,189,59,79,24,239,191,189,103,239,191,189,14,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,205,163,239,191,189,118,239,191,189,108,52,85,29,239,191,189,93,239,191,189,44,103,82,239,191,189,239,191,189,239,191,189,82,121,239,191,189,95,239,191,189,204,172,87,112,239,191,189,239,191,189,43,239,191,189,47,208,167,239,191,189,239,191,189,45,112,239,191,189,64,54,118,30,199,186,32,58,98,239,191,189,21,99,208,167,11,5,109,8,34,239,191,189,57,239,191,189,112,113,239,191,189,45,239,133,159,95,82,23,84,17,66,71,65,239,191,189,18,239,191,189,29,14,8,239,191,189,239,191,189,5,239,191,189,196,161,90,239,191,189,11,239,191,189,101,69,239,191,189,5,44,22,239,191,189,49,239,191,189,239,191,189,92,239,191,189,75,123,239,191,189,201,190,44,53,16,63,28,239,191,189,104,239,191,189,40,239,191,189,239,191,189,42,239,191,189,69,116,70,113,239,191,189,239,191,189,124,65,20,239,191,189,239,191,189,90,103,75,239,191,189,11,125,239,191,189,239,191,189,239,191,189,239,191,189,45,239,191,189,239,191,189,102,73,88,93,99,3,107,239,191,189,6,239,191,189,126,239,191,189,124,217,141,239,191,189,77,124,23,121,239,191,189,228,181,161,239,191,189,239,191,189,239,191,189,32,239,191,189,47,0,23,239,191,189,75,11,239,191,189,116,30,239,191,189,17,80,239,191,189,83,239,191,189,239,191,189,195,142,239,191,189,239,191,189,41,239,191,189,102,21,58,111,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,87,74,53,239,191,189,239,191,189,102,40,48,239,191,189,239,191,189,84,46,239,191,189,6,41,239,191,189,32,239,191,189,239,191,189,8,7,36,239,191,189,239,191,189,239,191,189,1,239,191,189,220,137,17,239,191,189,126,18,239,191,189,5,104,124,239,191,189,102,239,191,189,93,239,191,189,20,239,191,189,127,239,191,189,15,16,239,191,189,239,191,189,115,239,191,189,239,191,189,80,38,239,191,189,85,56,100,239,191,189,84,69,214,150,239,191,189,239,191,189,77,36,239,191,189,20,93,109,95,239,191,189,49,15,239,191,189,1,239,191,189,239,191,189,116,90,239,191,189,239,191,189,239,191,189,239,191,189,79,104,222,187,39,239,191,189,2,239,191,189,9,239,191,189,62,62,239,191,189,61,239,191,189,239,191,189,239,191,189,239,191,189,22,116,70,24,31,23,239,191,189,83,103,114,46,239,191,189,239,191,189,57,239,191,189,239,191,189,59,239,191,189,70,239,191,189,239,191,189,239,191,189,107,103,239,191,189,239,191,189,239,191,189,117,50,239,191,189,48,239,191,189,94,239,191,189,239,191,189,103,239,191,189,55,72,239,191,189,239,191,189,239,191,189,34,239,191,189,239,191,189,14,239,191,189,4,239,191,189,239,191,189,1,221,165,49,239,191,189,66,8,239,191,189,119,127,69,239,191,189,33,239,191,189,66,239,191,189,239,191,189,239,191,189,84,70,4,239,191,189,127,7,25,239,191,189,219,157,239,191,189,239,191,189,239,191,189,239,191,189,58,239,191,189,82,239,191,189,44,239,191,189,67,94,239,191,189,239,191,189,201,129,63,239,191,189,78,77,35,114,239,191,189,81,46,239,191,189,239,191,189,66,38,42,213,146,44,65,239,191,189,239,191,189,121,239,191,189,239,191,189,66,239,191,189,239,191,189,111,35,110,239,191,189,239,191,189,68,239,191,189,239,191,189,239,191,189,102,97,239,191,189,121,31,239,191,189,123,195,137,239,191,189,15,239,191,189,1,239,191,189,239,191,189,50,112,239,191,189,5,8,239,191,189,239,191,189,12,93,96,3,239,191,189,239,191,189,57,29,239,191,189,111,40,99,110,49,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,92,239,191,189,239,191,189,7,110,44,239,191,189,239,191,189,34,105,239,191,189,239,191,189,24,239,191,189,84,48,25,28,239,191,189,239,191,189,239,191,189,107,219,160,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,22,9,10,239,191,189,111,94,125,88,239,191,189,239,191,189,38,118,239,191,189,79,239,191,189,50,74,239,191,189,239,191,189,109,239,191,189,239,191,189,4,102,66,239,191,189,239,191,189,64,116,207,163,61,47,121,82,239,191,189,239,191,189,54,43,239,191,189,239,191,189,239,191,189,239,191,189,83,113,20,112,239,191,189,239,191,189,97,84,239,191,189,239,191,189,38,239,191,189,109,5,239,191,189,239,191,189,127,239,191,189,61,239,191,189,239,191,189,1,239,191,189,70,239,191,189,239,191,189,239,191,189,70,19,239,191,189,239,191,189,239,191,189,33,239,191,189,239,191,189,46,127,70,66,18,123,239,191,189,8,126,239,191,189,72,239,191,189,239,191,189,106,118,239,191,189,239,191,189,82,239,191,189,239,191,189,239,191,189,30,27,64,11,239,191,189,109,13,76,84,239,191,189,112,239,191,189,69,239,191,189,239,191,189,74,18,79,61,3,23,32,239,191,189,123,239,191,189,123,67,16,95,94,107,96,239,191,189,239,191,189,35,239,191,189,58,239,191,189,219,155,112,239,191,189,105,239,191,189,38,239,191,189,37,123,11,119,63,57,239,191,189,239,191,189,119,239,191,189,29,239,191,189,15,65,42,239,191,189,239,191,189,239,191,189,68,16,110,239,191,189,239,191,189,239,191,189,16,47,116,239,191,189,239,191,189,127,239,191,189,101,84,80,86,239,191,189,4,239,191,189,30,50,209,165,64,37,239,191,189,116,211,153,113,115,239,191,189,114,84,22,62,239,191,189,239,191,189,48,103,15,239,191,189,239,191,189,89,239,191,189,70,239,191,189,112,239,191,189,239,191,189,98,239,191,189,5,239,191,189,17,62,239,191,189,77,239,191,189,0,239,191,189,92,239,191,189,48,31,239,191,189,68,17,61,17,239,191,189,34,211,128,14,109,239,191,189,75,72,239,191,189,33,4,20,239,191,189,14,122,239,191,189,239,191,189,66,239,191,189,117,74,239,191,189,47,204,179,239,191,189,58,35,2,239,191,189,51,239,191,189,44,64,36,239,191,189,201,163,91,125,5,239,191,189,223,151,71,43,33,239,191,189,48,239,191,189,239,191,189,101,239,191,189,116,46,239,191,189,239,191,189,91,239,191,189,38,17,36,239,191,189,123,239,191,189,103,239,191,189,239,191,189,85,31,209,158,124,239,191,189,69,34,80,52,107,239,191,189,239,191,189,239,191,189,239,191,189,88,239,191,189,239,191,189,17,239,191,189,18,239,191,189,239,191,189,110,33,52,107,239,191,189,239,191,189,99,239,191,189,239,191,189,83,79,17,239,191,189,48,239,191,189,46,12,83,127,239,191,189,195,139,123,50,239,191,189,239,191,189,3,85,201,187,239,191,189,77,99,125,72,239,191,189,101,45,239,191,189,110,239,191,189,21,71,70,225,128,167,239,191,189,109,239,191,189,6,45,81,126,93,239,191,189,239,191,189,112,239,191,189,194,139,239,191,189,122,239,191,189,116,239,191,189,239,191,189,23,239,191,189,239,191,189,102,16,100,239,191,189,68,53,80,3,239,191,189,32,239,191,189,63,239,191,189,239,191,189,239,191,189,239,191,189,32,239,191,189,239,191,189,239,191,189,239,191,189,44,239,191,189,239,191,189,53,239,191,189,239,191,189,29,11,239,191,189,67,85,239,191,189,39,239,191,189,65,26,239,191,189,99,239,191,189,93,109,196,162,239,191,189,239,191,189,239,191,189,239,191,189,199,144,239,191,189,0,123,18,34,58,99,100,120,239,191,189,105,50,239,191,189,6,220,146,127,239,191,189,223,186,239,191,189,112,60,239,191,189,89,79,103,10,92,239,191,189,239,191,189,239,191,189,85,123,98,66,217,173,4,239,191,189,221,181,54,239,191,189,81,42,117,239,191,189,239,191,189,16,33,86,239,191,189,13,239,191,189,33,195,155,239,191,189,239,191,189,239,191,189,89,8,239,191,189,239,191,189,114,239,191,189,124,239,191,189,239,191,189,239,191,189,209,136,82,239,191,189,21,57,110,239,191,189,46,217,170,69,76,115,117,2,72,239,191,189,65,127,62,239,191,189,49,239,191,189,239,191,189,239,191,189,83,3,239,191,189,78,239,191,189,25,43,87,79,206,161,49,239,191,189,239,191,189,85,11,239,191,189,239,191,189,40,20,239,191,189,112,85,112,239,191,189,239,191,189,98,26,122,239,191,189,87,239,191,189,88,104,239,191,189,106,239,191,189,239,191,189,239,191,189,25,239,191,189,35,239,191,189,96,23,3,89,41,50,104,55,239,191,189,112,239,191,189,239,191,189,110,239,191,189,48,239,191,189,16,239,191,189,113,118,9,239,191,189,72,1,239,191,189,90,239,191,189,24,239,191,189,239,191,189,239,191,189,76,239,191,189,15,125,239,191,189,8,239,191,189,71,117,31,6,239,191,189,119,3,239,191,189,67,38,239,191,189,239,191,189,9,23,239,191,189,47,87,62,239,191,189,88,63,216,189,30,239,191,189,118,41,239,191,189,0,94,60,107,239,191,189,31,239,191,189,239,191,189,87,2,239,191,189,239,191,189,239,191,189,45,23,239,191,189,103,239,191,189,239,191,189,126,239,191,189,63,9,239,191,189,239,191,189,111,239,191,189,1,13,113,77,108,239,191,189,239,191,189,239,191,189,69,41,233,130,181,239,191,189,85,77,239,191,189,91,17,239,191,189,57,239,191,189,57,239,191,189,122,239,191,189,239,191,189,239,191,189,239,191,189,97,239,191,189,110,38,68,86,239,191,189,127,239,191,189,239,191,189,113,51,239,191,189,33,239,191,189,7,45,239,191,189,98,239,191,189,32,84,239,191,189,239,191,189,126,73,239,191,189,239,191,189,239,191,189,111,58,61,239,191,189,239,191,189,42,122,92,113,239,191,189,96,239,191,189,100,201,160,239,191,189,239,191,189,239,191,189,239,191,189,125,77,24,239,191,189,68,11,65,239,191,189,239,191,189,120,239,191,189,12,33,239,191,189,239,191,189,34,54,239,191,189,239,191,189,61,107,239,191,189,239,191,189,115,34,1,35,239,191,189,239,191,189,239,191,189,32,223,178,48,111,239,191,189,86,94,239,191,189,239,191,189,127,239,191,189,239,191,189,118,63,59,239,191,189,239,191,189,105,239,191,189,239,191,189,89,55,239,191,189,124,239,191,189,239,191,189,67,239,191,189,30,239,191,189,88,239,191,189,89,239,191,189,35,43,239,191,189,239,191,189,239,191,189,202,154,239,191,189,239,191,189,239,191,189,199,172,239,191,189,239,191,189,8,228,150,135,239,191,189,89,239,191,189,127,9,239,191,189,239,191,189,239,191,189,239,191,189,29,97,220,139,239,191,189,28,79,24,239,191,189,218,145,239,191,189,40,239,191,189,75,15,239,191,189,239,191,189,12,239,191,189,239,191,189,125,58,57,239,191,189,239,191,189,0,239,191,189,239,191,189,34,27,51,72,239,191,189,124,239,191,189,4,97,3,239,191,189,114,208,128,9,5,239,191,189,195,154,239,191,189,111,122,211,152,50,239,191,189,239,191,189,38,239,191,189,239,191,189,239,191,189,27,87,116,101,239,191,189,93,81,89,66,239,191,189,11,45,239,191,189,124,15,46,239,191,189,48,52,239,191,189,55,101,73,52,239,191,189,71,239,191,189,22,239,191,189,239,191,189,100,96,239,191,189,56,116,26,91,26,74,239,191,189,239,191,189,105,88,239,191,189,100,76,239,191,189,27,34,205,163,239,191,189,110,216,147,239,191,189,14,64,239,191,189,119,239,191,189,59,239,191,189,101,91,239,191,189,239,191,189,239,191,189,7,239,191,189,239,191,189,239,191,189,239,191,189,71,239,191,189,12,92,239,191,189,91,78,127,239,191,189,6,56,110,239,191,189,204,165,239,191,189,12,27,93,239,191,189,239,191,189,96,239,191,189,239,191,189,239,191,189,87,20,45,239,191,189,239,191,189,15,239,191,189,197,169,239,191,189,112,97,41,66,71,127,45,239,191,189,239,191,189,239,191,189,73,232,182,132,20,239,191,189,239,191,189,239,191,189,26,239,191,189,21,239,191,189,239,191,189,107,239,191,189,11,118,95,16,59,239,191,189,20,90,239,191,189,239,191,189,239,191,189,239,191,189,25,99,197,164,2,8,90,239,191,189,68,67,62,239,191,189,58,239,191,189,220,143,239,191,189,91,239,191,189,49,215,129,115,239,191,189,239,191,189,239,191,189,239,191,189,29,52,239,191,189,11,239,191,189,107,5,205,133,84,38,18,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,55,101,213,143,3,239,191,189,114,79,50,118,202,151,239,191,189,14,22,90,239,191,189,61,239,191,189,239,191,189,55,239,191,189,239,191,189,52,239,191,189,86,58,239,191,189,73,58,239,191,189,55,0,239,191,189,127,40,239,191,189,239,191,189,26,239,191,189,27,239,191,189,85,239,191,189,59,54,239,191,189,70,16,239,191,189,6,95,10,202,144,239,191,189,214,161,239,191,189,239,191,189,75,239,191,189,6,239,191,189,225,147,150,67,239,191,189,238,136,151,35,239,191,189,123,96,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,51,53,44,54,27,239,191,189,81,48,62,109,99,105,239,191,189,94,19,239,191,189,239,191,189,81,239,191,189,33,48,111,60,34,47,20,33,61,239,191,189,10,239,191,189,87,1,117,196,171,102,95,40,239,191,189,239,191,189,87,89,239,191,189,239,191,189,49,239,191,189,1,239,191,189,81,7,110,60,239,191,189,96,239,191,189,239,191,189,9,7,6,239,191,189,20,239,191,189,51,239,191,189,12,103,64,239,191,189,103,65,64,41,39,239,191,189,239,191,189,21,239,191,189,239,191,189,239,191,189,79,31,239,191,189,87,2,126,27,114,21,239,191,189,239,191,189,92,88,33,239,191,189,239,191,189,239,191,189,37,53,119,202,132,103,31,15,239,191,189,68,20,9,239,191,189,239,191,189,115,107,9,239,191,189,239,191,189,94,48,49,1,239,191,189,239,191,189,43,239,191,189,239,191,189,239,191,189,239,191,189,8,114,239,191,189,9,239,191,189,80,39,51,203,183,239,191,189,72,58,57,6,104,239,191,189,80,62,239,191,189,78,106,239,191,189,42,239,191,189,239,191,189,51,239,191,189,239,191,189,89,239,191,189,106,42,239,191,189,59,239,191,189,12,126,239,191,189,35,67,239,191,189,239,191,189,4,239,191,189,239,191,189,239,191,189,239,191,189,234,140,157,74,118,239,191,189,123,239,191,189,106,239,191,189,28,239,191,189,94,114,239,191,189,44,30,90,239,191,189,100,91,15,239,191,189,26,239,191,189,120,126,239,191,189,99,239,191,189,239,191,189,108,239,191,189,73,239,191,189,239,191,189,239,191,189,54,71,239,191,189,38,58,19,239,191,189,7,239,191,189,119,121,25,239,191,189,202,155,201,134,48,239,191,189,239,191,189,91,70,31,31,239,191,189,111,239,191,189,239,191,189,239,191,189,5,21,239,191,189,104,56,239,191,189,19,96,61,33,239,191,189,239,191,189,19,11,1,5,239,191,189,239,191,189,239,191,189,99,239,191,189,20,24,47,199,152,239,191,189,39,125,239,191,189,239,191,189,96,239,191,189,87,239,191,189,98,195,176,97,239,191,189,105,73,14,239,191,189,239,191,189,72,59,30,26,239,191,189,239,191,189,199,152,13,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,86,239,191,189,2,239,191,189,110,239,191,189,65,40,103,9,239,191,189,56,239,191,189,10,239,191,189,239,191,189,80,239,191,189,8,98,239,191,189,36,239,191,189,48,73,239,191,189,101,60,15,239,191,189,235,156,134,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,127,217,135,62,239,191,189,239,191,189,239,191,189,37,239,191,189,239,191,189,239,191,189,79,66,226,128,177,49,2,239,191,189,113,239,191,189,57,4,24,239,191,189,30,62,239,191,189,34,82,239,191,189,239,191,189,239,191,189,232,137,137,102,239,191,189,239,191,189,114,116,239,191,189,115,83,71,113,239,191,189,239,191,189,6,239,191,189,239,191,189,239,191,189,27,26,10,70,239,191,189,111,239,191,189,239,191,189,127,34,2,239,191,189,65,220,140,90,89,239,191,189,74,75,39,94,239,191,189,59,197,177,239,191,189,53,117,239,191,189,239,191,189,42,204,180,208,169,239,191,189,66,239,191,189,239,191,189,79,59,239,191,189,81,239,191,189,239,191,189,18,106,239,191,189,78,96,16,239,191,189,58,204,188,29,207,129,34,239,191,189,97,41,239,191,189,118,239,191,189,210,140,12,239,191,189,124,22,64,83,239,191,189,239,191,189,107,239,191,189,239,191,189,239,191,189,102,80,38,35,239,191,189,124,239,191,189,239,191,189,19,239,191,189,13,239,191,189,239,191,189,89,239,191,189,17,239,191,189,219,170,1,239,191,189,94,1,239,191,189,73,239,191,189,90,62,239,191,189,80,113,24,239,191,189,239,191,189,55,16,2,239,191,189,239,191,189,92,64,239,191,189,239,191,189,87,111,85,239,191,189,239,191,189,14,239,191,189,116,239,191,189,12,239,191,189,25,7,79,85,239,191,189,239,191,189,33,84,7,239,191,189,26,239,191,189,48,14,33,239,191,189,15,32,0,78,239,191,189,239,191,189,102,239,191,189,98,239,191,189,34,96,47,6,220,161,11,239,191,189,107,47,239,191,189,239,191,189,239,191,189,14,58,239,191,189,53,61,122,36,239,191,189,239,191,189,50,239,191,189,83,207,190,47,55,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,36,1,239,191,189,120,233,143,163,239,191,189,26,97,34,239,191,189,20,239,191,189,68,48,108,239,191,189,207,131,239,191,189,239,191,189,60,239,191,189,239,191,189,77,113,51,239,191,189,28,239,191,189,24,101,121,200,155,78,197,144,239,191,189,239,191,189,239,191,189,23,104,49,221,169,91,239,191,189,113,56,10,21,38,56,39,239,191,189,93,239,191,189,239,191,189,30,111,99,239,191,189,239,191,189,9,239,191,189,239,191,189,11,239,191,189,239,191,189,87,58,239,191,189,239,191,189,239,191,189,239,191,189,87,239,191,189,239,191,189,22,64,29,239,191,189,2,62,64,239,191,189,239,191,189,239,191,189,31,239,191,189,118,239,191,189,239,191,189,25,239,191,189,40,80,15,79,73,239,191,189,239,191,189,239,191,189,219,158,239,191,189,65,239,191,189,6,239,191,189,239,191,189,7,47,70,25,239,191,189,6,78,90,107,239,191,189,239,191,189,98,239,191,189,239,191,189,29,239,191,189,17,46,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,83,239,191,189,39,239,191,189,239,191,189,95,239,191,189,239,191,189,112,239,191,189,111,92,61,0,239,191,189,33,2,239,191,189,239,191,189,119,239,191,189,9,80,23,239,191,189,122,117,239,191,189,239,191,189,10,99,64,56,239,191,189,239,191,189,239,191,189,223,173,239,191,189,11,239,191,189,8,23,102,84,239,191,189,239,191,189,239,191,189,71,13,239,191,189,239,191,189,239,191,189,127,239,191,189,74,239,191,189,15,239,191,189,46,239,191,189,5,17,102,239,191,189,46,35,239,191,189,58,239,191,189,65,84,3,216,138,239,191,189,239,191,189,239,191,189,239,191,189,3,239,191,189,239,191,189,239,191,189,239,191,189,102,239,191,189,93,239,191,189,239,191,189,123,80,207,176,239,191,189,34,239,191,189,239,191,189,239,191,189,239,191,189,38,124,90,239,191,189,120,239,191,189,79,239,191,189,10,239,191,189,92,88,239,191,189,76,239,191,189,239,191,189,65,109,71,239,191,189,21,239,191,189,106,239,191,189,239,191,189,126,113,239,191,189,127,239,191,189,239,191,189,239,191,189,64,29,239,191,189,239,191,189,63,22,31,239,191,189,23,239,191,189,82,239,191,189,105,34,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,121,239,191,189,239,191,189,239,191,189,84,17,239,191,189,239,191,189,239,191,189,90,239,191,189,92,84,82,239,191,189,23,239,191,189,239,191,189,115,84,42,77,73,239,191,189,109,127,239,191,189,85,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,41,239,191,189,101,72,117,239,191,189,68,37,239,191,189,108,74,239,191,189,113,239,191,189,11,239,191,189,239,191,189,66,239,191,189,239,191,189,44,101,239,191,189,74,239,191,189,107,69,54,12,108,239,191,189,239,191,189,127,41,207,136,60,103,239,191,189,239,191,189,239,191,189,40,239,191,189,122,35,239,191,189,52,239,191,189,239,191,189,239,191,189,27,239,191,189,239,191,189,30,239,191,189,239,191,189,239,191,189,27,115,9,95,13,25,54,239,191,189,126,125,71,219,130,239,191,189,106,68,239,191,189,239,191,189,4,239,191,189,79,39,82,54,239,191,189,239,191,189,12,80,17,239,191,189,97,44,69,239,191,189,32,239,191,189,239,191,189,80,239,191,189,15,111,202,164,4,239,191,189,239,191,189,14,78,239,191,189,102,11,77,239,191,189,239,191,189,116,239,191,189,33,239,191,189,239,191,189,104,12,230,158,169,28,27,239,191,189,239,191,189,239,191,189,118,80,239,191,189,239,191,189,239,191,189,79,239,191,189,239,191,189,77,73,204,150,239,191,189,239,191,189,239,191,189,239,191,189,19,51,122,79,44,239,191,189,34,239,191,189,112,2,239,191,189,44,239,191,189,239,191,189,239,191,189,56,80,239,191,189,58,22,111,84,3,123,239,191,189,113,211,136,239,191,189,239,191,189,78,71,239,191,189,239,191,189,8,239,191,189,28,110,100,239,191,189,46,15,239,191,189,239,191,189,239,191,189,88,239,191,189,101,119,239,191,189,70,0,100,239,191,189,90,239,191,189,47,239,191,189,95,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,66,57,28,239,191,189,239,191,189,27,239,191,189,89,239,191,189,239,191,189,96,239,191,189,17,239,191,189,239,191,189,239,191,189,109,17,99,239,191,189,78,239,191,189,94,239,191,189,73,239,191,189,29,15,239,191,189,239,191,189,239,191,189,123,239,191,189,62,239,191,189,31,106,239,191,189,239,191,189,120,101,239,191,189,206,172,239,191,189,239,191,189,30,72,239,191,189,208,145,239,191,189,47,20,102,95,218,152,239,191,189,50,239,191,189,209,176,239,191,189,83,239,191,189,239,191,189,239,191,189,49,120,126,239,191,189,239,191,189,37,239,191,189,20,239,191,189,239,191,189,87,239,191,189,239,191,189,72,239,191,189,18,12,75,239,191,189,239,191,189,36,68,239,191,189,239,191,189,91,122,239,191,189,239,191,189,239,191,189,89,21,14,74,23,78,81,239,191,189,4,68,239,191,189,75,40,15,61,239,191,189,40,239,191,189,239,191,189,239,191,189,70,239,191,189,15,239,191,189,13,52,239,191,189,239,191,189,40,112,239,191,189,239,191,189,56,89,116,72,79,239,191,189,239,191,189,239,191,189,103,8,6,239,191,189,25,239,191,189,28,194,180,239,191,189,81,10,30,239,191,189,18,123,239,191,189,79,10,26,239,191,189,239,191,189,239,191,189,239,191,189,94,13,19,207,154,239,191,189,73,107,239,191,189,81,120,62,239,191,189,42,239,191,189,52,23,239,191,189,64,101,30,239,191,189,239,191,189,61,70,239,191,189,73,0,239,191,189,239,191,189,239,191,189,43,50,239,191,189,12,239,191,189,77,40,239,191,189,121,239,191,189,122,204,130,239,191,189,239,191,189,239,191,189,109,239,191,189,2,239,191,189,118,118,239,191,189,239,191,189,122,213,136,239,191,189,239,191,189,73,239,191,189,239,191,189,112,239,191,189,18,96,239,191,189,239,191,189,110,239,191,189,239,191,189,127,239,191,189,55,13,198,186,114,15,115,239,191,189,239,191,189,239,191,189,38,57,239,191,189,124,239,191,189,239,191,189,239,191,189,196,134,20,48,45,239,191,189,92,239,191,189,239,191,189,239,191,189,49,239,191,189,103,55,239,191,189,239,191,189,239,191,189,126,201,179,27,22,239,191,189,55,239,191,189,239,191,189,239,191,189,73,239,191,189,93,239,191,189,239,191,189,67,127,6,59,106,239,191,189,10,67,105,0,239,191,189,239,191,189,66,239,191,189,117,239,191,189,45,67,42,239,191,189,239,191,189,239,191,189,212,173,239,191,189,239,191,189,122,82,239,191,189,18,43,100,239,191,189,61,84,239,191,189,49,239,191,189,239,191,189,239,191,189,116,239,191,189,73,26,102,11,239,191,189,239,191,189,102,48,28,75,50,239,191,189,14,101,239,191,189,88,69,239,191,189,65,239,191,189,79,87,239,191,189,75,239,191,189,4,239,191,189,239,191,189,115,111,239,191,189,91,239,191,189,95,239,191,189,239,191,189,71,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,50,239,191,189,46,239,191,189,61,239,191,189,119,239,191,189,239,191,189,239,191,189,54,239,191,189,69,26,41,239,191,189,21,216,189,239,191,189,239,191,189,239,191,189,92,239,191,189,239,191,189,239,191,189,17,91,239,191,189,239,191,189,204,139,96,239,191,189,25,34,214,182,80,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,41,239,191,189,116,44,239,191,189,239,191,189,239,191,189,18,7,74,75,91,99,127,30,76,239,191,189,28,89,11,239,171,146,80,1,7,25,95,239,191,189,34,239,191,189,239,191,189,9,239,191,189,239,191,189,47,124,229,155,172,217,185,239,191,189,22,239,191,189,239,191,189,239,191,189,86,239,191,189,3,239,191,189,239,191,189,94,239,191,189,239,191,189,125,15,35,43,239,191,189,239,191,189,73,239,191,189,239,191,189,111,81,239,191,189,239,191,189,239,191,189,239,191,189,225,128,172,49,54,39,124,239,191,189,66,72,239,191,189,199,133,78,239,191,189,125,71,239,191,189,8,32,89,239,191,189,239,191,189,206,143,47,239,191,189,239,191,189,58,109,239,191,189,93,239,191,189,52,239,191,189,91,239,191,189,239,191,189,239,191,189,86,239,191,189,125,239,191,189,112,26,239,191,189,4,239,191,189,239,191,189,239,191,189,10,36,239,191,189,239,191,189,118,39,239,191,189,221,161,7,239,191,189,239,191,189,108,239,191,189,94,101,32,80,91,125,203,182,9,239,191,189,239,191,189,239,191,189,239,191,189,113,239,191,189,14,42,8,239,191,189,72,98,239,191,189,107,216,190,203,188,239,191,189,239,191,189,206,151,16,19,17,239,191,189,97,239,191,189,59,63,39,83,27,63,66,239,191,189,86,44,41,239,191,189,239,191,189,127,56,36,114,239,191,189,239,191,189,71,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,104,239,191,189,239,191,189,202,189,96,239,191,189,239,191,189,117,205,131,33,15,239,191,189,44,239,191,189,36,116,239,191,189,239,191,189,90,239,191,189,79,94,239,191,189,120,239,191,189,26,34,239,191,189,126,48,239,191,189,239,191,189,92,76,207,152,239,191,189,42,239,191,189,102,239,191,189,239,191,189,2,99,239,191,189,206,177,109,27,49,75,109,239,191,189,239,191,189,239,191,189,239,191,189,29,239,191,189,68,239,191,189,83,34,5,239,191,189,239,191,189,239,191,189,73,85,239,191,189,195,128,115,92,239,191,189,239,191,189,239,191,189,61,239,191,189,239,191,189,104,239,191,189,239,191,189,77,239,191,189,29,13,201,180,239,191,189,123,239,191,189,239,191,189,85,19,239,191,189,239,191,189,18,239,191,189,239,191,189,239,191,189,103,24,63,109,239,191,189,239,191,189,72,239,191,189,239,191,189,239,191,189,239,191,189,93,87,41,239,191,189,239,191,189,239,191,189,12,102,239,191,189,5,239,191,189,100,96,221,153,30,73,15,239,191,189,239,191,189,94,239,191,189,239,191,189,0,239,191,189,79,239,191,189,24,36,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,43,116,239,191,189,239,191,189,6,119,13,239,191,189,211,180,223,143,49,239,191,189,239,191,189,239,191,189,239,191,189,28,239,191,189,239,191,189,105,41,2,68,239,191,189,239,191,189,66,37,48,239,191,189,103,239,191,189,86,11,239,191,189,239,191,189,19,2,239,191,189,239,191,189,239,191,189,45,239,191,189,111,79,239,191,189,73,239,191,189,239,191,189,239,191,189,239,191,189,26,239,191,189,36,1,113,239,191,189,31,18,52,239,191,189,239,191,189,5,77,26,57,38,239,191,189,42,239,191,189,239,191,189,74,239,191,189,70,118,239,191,189,26,212,137,12,239,191,189,96,66,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,99,92,227,190,178,239,191,189,42,39,239,191,189,85,21,239,191,189,97,239,191,189,27,227,150,129,117,239,191,189,5,86,239,191,189,6,59,239,191,189,239,191,189,12,239,191,189,112,239,191,189,63,239,191,189,239,191,189,118,12,239,191,189,239,191,189,75,212,128,127,115,75,239,191,189,239,191,189,38,21,239,191,189,41,36,56,239,191,189,13,121,77,239,191,189,119,20,239,191,189,26,239,191,189,239,191,189,117,239,191,189,107,212,165,239,191,189,11,239,191,189,239,191,189,99,49,239,191,189,99,34,239,191,189,239,191,189,239,191,189,96,239,191,189,239,191,189,71,123,7,10,239,191,189,239,191,189,239,191,189,239,191,189,111,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,44,239,191,189,62,239,191,189,89,212,186,54,22,42,239,191,189,239,191,189,81,66,34,239,191,189,239,191,189,239,191,189,121,97,27,239,191,189,23,56,42,52,239,191,189,119,42,239,191,189,37,239,191,189,119,239,191,189,239,191,189,239,191,189,33,50,79,239,191,189,239,191,189,214,156,68,101,239,191,189,239,191,189,239,191,189,2,80,239,191,189,239,191,189,239,191,189,38,239,191,189,101,37,25,66,12,77,5,12,92,126,98,105,9,239,191,189,239,191,189,70,17,239,191,189,239,191,189,239,191,189,98,239,191,189,239,191,189,86,239,191,189,122,239,191,189,34,239,191,189,239,191,189,239,191,189,7,239,191,189,70,83,239,191,189,25,12,117,239,191,189,239,191,189,239,191,189,64,239,191,189,2,45,239,191,189,24,41,10,239,191,189,60,24,239,191,189,74,239,191,189,54,239,191,189,98,239,191,189,239,191,189,239,191,189,107,239,191,189,239,191,189,91,239,191,189,194,146,239,191,189,44,4,35,39,239,191,189,77,41,83,239,191,189,212,178,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,123,239,191,189,86,239,191,189,239,191,189,23,239,191,189,94,239,191,189,68,239,191,189,87,239,191,189,75,221,179,24,241,175,178,137,12,111,239,191,189,239,191,189,239,191,189,239,191,189,213,187,239,191,189,108,239,191,189,239,191,189,22,24,239,191,189,90,63,15,72,57,239,191,189,239,191,189,91,239,191,189,44,239,191,189,239,191,189,63,239,191,189,239,191,189,64,74,239,191,189,239,191,189,239,191,189,38,71,239,191,189,239,191,189,212,131,58,112,30,111,51,7,89,239,191,189,239,191,189,102,120,239,191,189,39,239,191,189,84,205,162,61,28,123,23,111,239,191,189,122,36,95,239,191,189,96,25,200,134,239,191,189,239,191,189,97,114,239,191,189,210,189,121,239,191,189,239,191,189,239,191,189,28,239,191,189,239,191,189,37,239,191,189,36,239,191,189,88,239,191,189,239,191,189,108,88,107,239,191,189,202,163,75,239,191,189,24,239,191,189,239,191,189,25,239,191,189,239,191,189,239,191,189,239,191,189,80,105,239,191,189,239,191,189,239,191,189,106,239,191,189,71,83,204,168,239,191,189,239,191,189,201,186,239,191,189,35,2,67,239,191,189,239,191,189,239,191,189,32,47,113,239,191,189,239,191,189,239,191,189,17,2,239,191,189,10,66,239,191,189,239,191,189,60,94,239,191,189,239,191,189,2,239,191,189,35,120,239,191,189,239,191,189,77,6,78,62,239,191,189,239,191,189,221,131,83,207,169,72,239,191,189,116,31,208,167,54,80,211,157,239,191,189,2,239,191,189,126,98,99,65,65,239,191,189,239,191,189,46,35,52,35,239,191,189,74,239,191,189,19,12,27,239,191,189,239,191,189,239,191,189,42,239,191,189,75,239,191,189,50,28,239,191,189,39,41,93,239,191,189,3,89,239,191,189,239,191,189,239,191,189,239,191,189,66,239,191,189,239,191,189,123,37,239,191,189,80,239,191,189,239,191,189,239,191,189,34,68,239,191,189,22,239,191,189,7,203,138,239,191,189,24,239,191,189,15,239,191,189,239,191,189,6,239,191,189,215,145,239,191,189,239,191,189,239,191,189,120,121,127,68,103,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,32,239,191,189,36,239,191,189,239,191,189,113,70,239,191,189,239,191,189,239,191,189,53,239,191,189,121,239,191,189,51,239,191,189,24,116,44,239,191,189,239,191,189,239,191,189,9,239,191,189,239,191,189,56,239,191,189,101,10,28,239,191,189,239,191,189,30,239,191,189,98,239,191,189,26,35,239,191,189,239,191,189,205,159,99,239,191,189,239,191,189,239,191,189,239,191,189,17,239,191,189,239,191,189,58,239,191,189,61,60,58,24,27,31,25,57,116,94,239,191,189,113,120,239,191,189,91,122,239,191,189,77,239,191,189,81,239,191,189,46,239,191,189,70,48,80,239,191,189,202,180,239,191,189,239,191,189,37,239,191,189,27,239,191,189,239,191,189,69,74,111,239,191,189,10,78,28,110,239,191,189,239,191,189,63,239,191,189,239,191,189,8,64,65,239,191,189,239,191,189,239,191,189,15,74,239,191,189,239,191,189,239,191,189,32,78,239,191,189,239,191,189,239,191,189,204,144,93,100,122,53,239,191,189,239,191,189,2,71,86,18,239,191,189,239,191,189,62,17,75,39,239,191,189,127,239,191,189,61,239,191,189,30,239,191,189,239,191,189,81,99,239,191,189,218,187,239,191,189,103,239,191,189,239,191,189,97,239,191,189,78,41,211,186,100,228,162,166,239,191,189,239,191,189,92,239,191,189,239,191,189,239,191,189,39,239,191,189,52,239,191,189,63,239,191,189,239,191,189,239,191,189,34,55,39,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,47,239,191,189,239,191,189,239,191,189,239,191,189,49,89,85,119,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,5,239,191,189,239,191,189,51,239,191,189,83,201,162,111,70,239,191,189,44,239,191,189,23,26,82,42,239,191,189,203,137,239,191,189,42,0,111,239,191,189,53,66,239,191,189,85,18,239,191,189,104,74,34,239,191,189,239,191,189,118,239,191,189,99,20,239,191,189,239,191,189,239,191,189,239,191,189,44,4,239,191,189,62,93,54,239,191,189,79,239,191,189,98,46,106,239,191,189,239,191,189,51,29,239,191,189,239,191,189,26,51,1,48,239,191,189,31,127,219,130,66,239,191,189,239,191,189,72,115,24,66,239,191,189,239,191,189,4,107,30,110,239,191,189,120,239,191,189,243,141,170,178,116,69,239,191,189,239,191,189,115,239,191,189,239,191,189,239,191,189,34,1,30,239,191,189,91,34,12,56,101,239,191,189,239,191,189,216,129,118,239,191,189,239,191,189,111,239,191,189,239,191,189,98,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,40,13,239,191,189,40,74,239,191,189,239,191,189,49,69,239,191,189,239,191,189,239,191,189,239,191,189,75,239,191,189,64,239,191,189,14,239,191,189,239,191,189,49,239,191,189,239,191,189,12,67,120,239,191,189,239,191,189,69,40,90,239,191,189,8,50,20,15,15,27,16,5,239,191,189,59,239,191,189,239,191,189,239,191,189,56,122,239,191,189,119,120,239,191,189,239,191,189,3,239,191,189,15,59,28,7,92,52,239,191,189,0,113,61,90,239,191,189,239,191,189,54,239,191,189,48,103,239,191,189,239,191,189,41,239,191,189,32,239,191,189,112,97,63,66,239,191,189,206,176,194,143,4,58,4,239,191,189,239,191,189,19,239,191,189,239,191,189,239,191,189,59,107,239,191,189,66,93,239,191,189,67,77,71,17,239,191,189,107,239,191,189,2,239,191,189,103,239,191,189,239,191,189,29,239,191,189,239,191,189,50,239,191,189,123,239,191,189,127,86,50,239,191,189,60,83,74,239,191,189,47,239,191,189,239,191,189,37,46,4,239,191,189,239,191,189,103,239,191,189,239,191,189,39,36,42,56,22,108,70,109,239,191,189,239,191,189,2,9,239,191,189,51,119,239,191,189,81,17,239,191,189,10,239,191,189,79,239,191,189,239,191,189,71,57,66,126,239,191,189,239,191,189,239,191,189,33,83,239,191,189,84,29,28,66,239,191,189,239,191,189,239,191,189,44,239,191,189,10,239,191,189,39,71,239,191,189,239,191,189,125,239,191,189,239,191,189,120,239,191,189,239,191,189,239,191,189,42,239,191,189,239,191,189,17,239,191,189,114,94,239,191,189,239,191,189,209,136,51,239,191,189,92,20,214,155,239,191,189,125,239,191,189,47,80,239,191,189,123,61,3,239,191,189,45,63,123,46,239,191,189,44,63,23,45,27,239,191,189,239,191,189,82,239,191,189,16,239,191,189,19,239,191,189,108,104,11,60,239,191,189,2,89,239,191,189,239,191,189,0,80,239,191,189,239,191,189,48,73,101,239,191,189,239,191,189,6,239,191,189,68,239,191,189,239,191,189,239,191,189,239,191,189,67,239,191,189,64,239,191,189,239,191,189,42,10,91,239,191,189,52,62,239,191,189,239,191,189,210,147,62,45,239,191,189,239,191,189,7,16,34,54,239,191,189,66,239,191,189,12,67,39,239,191,189,79,67,239,191,189,63,22,239,191,189,239,191,189,29,115,239,191,189,239,191,189,78,107,21,38,32,239,191,189,51,33,6,239,191,189,239,191,189,42,211,178,33,120,239,191,189,239,191,189,239,191,189,30,239,191,189,52,66,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,16,87,37,40,239,191,189,239,191,189,32,239,191,189,34,8,239,191,189,34,33,239,191,189,95,25,239,191,189,239,191,189,239,191,189,239,191,189,3,125,239,191,189,239,191,189,24,26,41,49,43,110,80,119,239,191,189,96,239,191,189,239,191,189,4,239,191,189,239,191,189,105,87,17,125,239,191,189,69,239,191,189,19,120,239,191,189,239,191,189,4,239,191,189,18,239,191,189,239,191,189,213,154,16,239,191,189,239,191,189,239,191,189,89,239,191,189,239,191,189,97,239,191,189,239,191,189,33,239,191,189,20,83,239,191,189,239,191,189,44,239,191,189,0,239,191,189,69,115,7,239,191,189,239,191,189,72,239,191,189,76,239,191,189,120,239,191,189,22,239,191,189,105,239,191,189,72,239,191,189,103,239,191,189,239,191,189,48,239,191,189,12,82,86,239,191,189,239,191,189,97,102,60,229,175,145,59,85,239,191,189,239,191,189,239,191,189,67,16,239,191,189,108,239,191,189,31,2,11,4,239,191,189,239,191,189,84,239,191,189,239,191,189,58,55,105,97,103,239,191,189,89,239,191,189,122,88,239,191,189,115,239,191,189,14,239,191,189,239,191,189,20,239,191,189,239,191,189,239,191,189,36,239,191,189,239,191,189,239,191,189,50,239,191,189,79,75,239,191,189,35,239,191,189,18,239,191,189,32,117,90,239,191,189,239,191,189,53,239,191,189,84,239,191,189,239,191,189,239,191,189,61,239,191,189,239,191,189,126,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,106,239,191,189,46,121,100,14,55,87,239,191,189,239,191,189,239,191,189,113,239,191,189,42,239,191,189,32,200,188,122,239,191,189,16,43,61,239,191,189,96,92,239,191,189,58,239,191,189,239,191,189,102,218,128,239,191,189,239,191,189,44,197,187,239,191,189,117,28,63,239,191,189,85,26,89,92,239,191,189,118,239,191,189,239,191,189,55,208,130,62,104,57,25,8,73,239,191,189,239,191,189,239,191,189,108,13,239,191,189,58,239,191,189,90,13,53,4,239,191,189,239,191,189,56,239,191,189,239,191,189,69,2,104,112,22,239,191,189,118,239,191,189,239,191,189,95,239,191,189,196,140,239,191,189,126,44,31,116,47,71,72,40,239,191,189,34,65,27,239,191,189,50,28,239,191,189,6,223,154,239,191,189,6,239,191,189,239,191,189,239,191,189,239,191,189,106,66,88,239,191,189,239,191,189,239,191,189,107,239,191,189,216,147,93,8,65,86,28,96,69,47,239,191,189,21,239,191,189,111,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,120,75,239,191,189,239,191,189,103,81,239,191,189,239,191,189,73,239,191,189,125,76,121,3,90,239,191,189,82,239,191,189,239,191,189,67,239,191,189,239,191,189,239,191,189,93,239,191,189,239,191,189,57,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,220,158,62,239,191,189,0,239,191,189,239,191,189,239,191,189,121,53,23,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,20,10,91,239,191,189,71,239,191,189,21,210,176,54,7,239,191,189,24,239,191,189,55,239,191,189,239,191,189,239,191,189,112,239,191,189,239,191,189,206,135,239,191,189,91,239,191,189,202,129,239,191,189,239,191,189,9,23,239,191,189,239,191,189,78,48,239,191,189,45,239,191,189,107,239,191,189,202,150,239,191,189,215,150,239,191,189,120,239,191,189,18,62,239,191,189,239,191,189,70,239,191,189,239,191,189,81,239,191,189,239,191,189,68,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,80,239,191,189,7,66,83,89,239,191,189,30,111,239,191,189,51,239,191,189,22,239,191,189,239,191,189,239,191,189,87,239,191,189,239,191,189,34,239,191,189,239,191,189,239,191,189,72,239,191,189,39,26,64,239,191,189,78,64,239,191,189,106,39,100,10,239,191,189,108,239,191,189,83,197,135,239,191,189,194,177,16,46,239,191,189,239,191,189,50,70,9,91,112,239,191,189,239,191,189,9,239,191,189,94,49,239,191,189,124,239,191,189,32,239,191,189,239,191,189,24,238,154,142,239,191,189,239,191,189,239,191,189,76,92,32,239,191,189,60,239,191,189,239,191,189,239,191,189,88,78,102,8,55,63,239,191,189,127,239,191,189,1,2,13,104,123,72,2,239,191,189,43,24,239,191,189,64,39,99,99,92,21,15,20,239,191,189,239,191,189,239,191,189,98,123,56,127,46,31,24,95,89,30,111,239,191,189,239,191,189,220,139,239,191,189,20,30,57,16,127,239,191,189,49,239,191,189,2,239,191,189,33,48,239,191,189,239,191,189,4,52,239,191,189,239,191,189,47,239,191,189,26,239,191,189,204,190,239,191,189,239,191,189,66,214,151,127,239,191,189,62,0,105,120,239,191,189,239,191,189,127,77,66,28,107,61,41,57,120,239,191,189,88,44,73,92,239,191,189,239,191,189,59,239,191,189,67,239,191,189,19,239,191,189,239,191,189,21,107,44,239,191,189,239,191,189,229,141,139,120,239,191,189,3,239,191,189,239,191,189,239,191,189,239,191,189,61,239,191,189,239,191,189,239,191,189,88,98,126,106,54,45,106,6,46,239,191,189,120,34,123,239,191,189,94,44,239,191,189,63,239,191,189,55,83,239,191,189,84,239,191,189,111,69,239,191,189,36,33,117,82,239,191,189,42,115,239,191,189,239,191,189,239,191,189,0,239,191,189,105,239,191,189,239,191,189,94,239,191,189,239,191,189,239,191,189,239,191,189,24,80,239,191,189,20,239,191,189,239,191,189,94,76,109,14,239,191,189,239,191,189,239,191,189,69,229,185,150,239,191,189,239,191,189,7,8,210,149,239,191,189,73,60,239,191,189,116,239,191,189,239,191,189,239,191,189,213,189,239,191,189,239,191,189,118,96,83,239,191,189,239,191,189,39,33,124,239,191,189,5,5,239,191,189,65,239,191,189,239,191,189,12,59,239,191,189,239,191,189,16,126,21,99,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,94,239,191,189,37,51,239,191,189,114,110,88,66,239,191,189,42,239,191,189,239,191,189,85,239,191,189,239,191,189,68,83,109,122,231,164,165,50,60,239,191,189,85,96,239,191,189,239,191,189,30,30,79,64,30,58,239,191,189,239,191,189,239,191,189,207,139,76,239,191,189,65,119,239,191,189,41,40,120,239,191,189,112,90,64,93,239,191,189,239,191,189,25,239,191,189,239,191,189,104,28,14,91,239,191,189,239,191,189,12,239,191,189,239,191,189,55,98,239,191,189,114,86,239,191,189,239,191,189,239,191,189,99,239,191,189,239,191,189,90,45,239,191,189,70,46,239,191,189,239,191,189,239,191,189,70,100,33,239,191,189,218,147,239,191,189,125,239,191,189,38,102,107,15,239,191,189,239,191,189,21,239,191,189,239,191,189,3,239,191,189,110,94,223,182,55,92,13,239,191,189,37,20,117,23,46,239,191,189,96,239,191,189,65,222,151,239,191,189,239,191,189,113,239,191,189,239,191,189,239,191,189,79,239,191,189,239,191,189,59,239,191,189,91,47,239,191,189,59,239,191,189,239,191,189,107,239,191,189,126,239,191,189,239,191,189,87,220,177,79,60,112,35,31,239,191,189,12,103,64,239,191,189,239,191,189,239,191,189,43,239,191,189,239,191,189,239,191,189,54,239,191,189,83,239,191,189,69,86,239,191,189,28,120,77,239,191,189,40,25,60,39,26,239,191,189,3,239,191,189,19,27,239,191,189,28,239,191,189,79,200,128,239,191,189,239,191,189,50,89,239,191,189,206,173,79,15,3,35,107,239,191,189,72,83,239,191,189,239,191,189,239,191,189,239,191,189,77,3,239,191,189,239,191,189,239,191,189,40,13,212,180,239,191,189,239,191,189,86,106,124,239,191,189,111,239,191,189,70,239,191,189,36,90,107,239,191,189,24,22,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,9,74,239,191,189,107,123,125,239,191,189,74,48,239,191,189,239,191,189,239,191,189,239,191,189,119,239,191,189,239,191,189,239,191,189,35,217,188,100,239,191,189,219,136,239,191,189,22,118,239,191,189,62,239,191,189,90,10,239,191,189,120,76,87,239,191,189,1,88,123,239,191,189,239,191,189,239,191,189,127,96,114,31,239,191,189,105,239,191,189,239,191,189,12,239,191,189,108,35,239,191,189,102,125,239,191,189,12,239,191,189,74,239,191,189,12,85,42,85,239,191,189,239,191,189,239,191,189,93,239,191,189,104,26,91,40,111,239,191,189,239,191,189,97,76,239,191,189,239,191,189,25,239,191,189,239,191,189,239,191,189,52,27,104,239,191,189,239,191,189,26,239,191,189,35,53,113,101,239,191,189,118,19,54,239,191,189,197,147,67,60,82,199,186,41,112,239,191,189,118,239,191,189,239,191,189,239,191,189,239,191,189,44,239,191,189,74,32,239,191,189,239,191,189,239,191,189,94,239,191,189,121,239,191,189,38,239,191,189,9,44,95,77,22,45,5,239,191,189,239,191,189,239,191,189,239,191,189,109,96,63,239,191,189,86,239,191,189,48,108,239,191,189,239,191,189,57,72,43,239,191,189,55,239,191,189,52,239,191,189,239,191,189,90,239,191,189,3,31,67,72,41,239,191,189,239,191,189,122,80,239,191,189,235,188,179,62,68,86,8,11,72,239,191,189,113,27,239,191,189,239,191,189,52,90,127,239,191,189,24,80,8,239,191,189,51,239,191,189,92,32,61,14,122,239,191,189,239,191,189,58,74,239,191,189,92,110,63,88,239,191,189,44,239,191,189,122,239,191,189,48,239,191,189,78,95,19,239,191,189,41,239,191,189,98,239,191,189,239,191,189,23,239,191,189,239,191,189,239,191,189,35,24,239,191,189,239,191,189,239,191,189,239,191,189,55,239,191,189,38,239,191,189,239,191,189,27,38,2,239,191,189,36,127,89,98,239,191,189,117,239,191,189,239,191,189,239,191,189,239,191,189,93,78,239,191,189,74,35,69,239,191,189,87,118,239,191,189,124,51,239,191,189,239,191,189,41,239,191,189,22,39,239,191,189,78,239,191,189,2,239,191,189,239,191,189,239,191,189,7,239,191,189,39,76,108,81,58,239,191,189,239,191,189,99,88,94,239,191,189,3,65,239,191,189,196,175,51,6,239,191,189,239,191,189,56,239,191,189,94,239,191,189,5,239,191,189,239,191,189,90,239,191,189,239,191,189,111,27,239,191,189,239,191,189,10,10,126,66,52,20,85,209,154,239,191,189,35,239,191,189,109,239,191,189,83,93,239,191,189,239,191,189,28,239,191,189,14,239,191,189,53,82,239,191,189,8,239,191,189,101,22,239,191,189,35,239,191,189,239,191,189,239,191,189,195,188,114,75,102,8,206,135,110,63,11,7,95,31,239,191,189,239,191,189,107,239,191,189,96,239,191,189,239,191,189,13,239,191,189,41,77,54,52,121,59,239,191,189,73,52,239,191,189,239,191,189,21,46,14,209,136,239,191,189,63,31,239,191,189,18,239,191,189,0,59,70,239,191,189,77,78,85,89,239,191,189,221,182,239,191,189,73,239,191,189,47,239,191,189,85,75,239,191,189,239,191,189,239,191,189,90,239,191,189,10,86,239,191,189,239,191,189,69,239,191,189,239,191,189,239,191,189,70,239,191,189,73,76,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,3,239,191,189,94,84,239,191,189,239,191,189,88,239,191,189,239,191,189,239,191,189,53,29,9,239,191,189,239,191,189,59,59,239,191,189,239,191,189,16,239,191,189,239,191,189,37,112,9,0,239,191,189,51,239,191,189,110,93,1,1,239,191,189,87,239,191,189,2,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,17,239,191,189,64,239,191,189,119,239,191,189,239,191,189,45,239,191,189,239,191,189,65,21,239,191,189,239,191,189,74,239,191,189,35,37,239,191,189,124,117,51,27,13,77,239,191,189,239,191,189,56,239,191,189,239,191,189,36,239,191,189,27,63,94,87,239,191,189,9,239,191,189,50,239,191,189,48,38,30,239,191,189,66,70,239,191,189,239,191,189,3,239,191,189,239,191,189,9,85,111,221,150,50,89,239,191,189,36,114,52,235,190,152,239,191,189,102,239,191,189,239,191,189,4,25,105,239,191,189,239,191,189,69,13,239,191,189,84,11,81,208,129,239,191,189,77,93,239,191,189,239,191,189,208,129,239,191,189,239,191,189,239,191,189,239,191,189,14,79,239,191,189,59,96,33,72,239,191,189,46,239,191,189,239,191,189,239,191,189,93,83,239,191,189,42,207,153,239,191,189,77,239,191,189,84,239,191,189,63,239,191,189,96,239,191,189,52,239,191,189,13,49,118,104,239,191,189,239,191,189,106,73,210,156,50,239,191,189,113,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,75,41,239,191,189,239,191,189,40,239,191,189,99,78,239,191,189,93,239,191,189,239,191,189,239,191,189,40,19,73,33,239,191,189,239,191,189,32,209,173,49,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,27,239,191,189,54,74,239,191,189,97,239,191,189,11,239,191,189,92,9,239,191,189,4,62,239,191,189,13,239,191,189,53,239,191,189,9,239,191,189,40,239,191,189,39,107,239,191,189,46,239,191,189,239,191,189,195,179,43,3,239,191,189,50,7,39,113,195,158,124,8,89,196,138,239,191,189,27,239,191,189,239,191,189,35,84,239,191,189,95,239,191,189,239,191,189,239,191,189,50,14,239,191,189,54,50,13,19,44,239,191,189,239,191,189,239,191,189,43,11,239,191,189,239,191,189,26,114,239,191,189,239,191,189,239,191,189,206,187,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,110,239,191,189,239,191,189,97,0,62,239,191,189,24,239,191,189,239,191,189,107,110,239,191,189,44,27,239,191,189,0,239,191,189,239,191,189,61,58,86,97,20,49,36,118,113,55,239,191,189,239,191,189,47,62,239,191,189,239,191,189,18,96,43,239,191,189,16,205,136,239,191,189,31,239,191,189,239,191,189,239,191,189,239,191,189,20,3,239,191,189,52,239,191,189,106,77,239,191,189,26,93,239,191,189,90,239,191,189,239,191,189,63,239,191,189,110,94,239,191,189,239,191,189,196,186,239,191,189,111,239,191,189,113,239,191,189,239,191,189,125,239,191,189,214,128,239,191,189,22,239,191,189,43,239,191,189,239,191,189,40,239,191,189,19,92,239,191,189,239,191,189,37,46,6,239,191,189,239,191,189,239,191,189,52,65,86,8,239,191,189,89,57,39,239,191,189,35,239,191,189,88,81,239,191,189,239,191,189,39,239,191,189,239,191,189,80,19,15,239,191,189,53,239,191,189,104,8,23,74,239,191,189,107,15,20,239,191,189,78,239,191,189,42,239,191,189,67,42,239,191,189,127,5,4,12,239,191,189,11,26,43,239,191,189,99,61,110,239,191,189,239,191,189,78,11,99,123,106,81,34,239,191,189,0,239,191,189,239,191,189,68,239,191,189,73,239,191,189,239,191,189,67,239,191,189,38,33,239,191,189,239,191,189,49,239,191,189,239,191,189,93,239,191,189,239,191,189,75,31,45,239,191,189,71,239,191,189,239,191,189,239,191,189,239,191,189,12,239,191,189,239,191,189,207,162,5,75,127,118,59,239,191,189,58,1,32,239,191,189,71,239,191,189,93,110,239,191,189,125,239,191,189,12,99,55,239,191,189,239,191,189,239,191,189,239,191,189,59,73,104,54,54,239,191,189,77,82,239,191,189,239,191,189,239,191,189,102,91,34,27,239,191,189,74,239,191,189,117,89,239,191,189,54,239,191,189,239,191,189,72,98,239,191,189,117,239,191,189,16,36,239,191,189,239,191,189,121,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,11,239,191,189,88,111,239,191,189,239,191,189,23,77,239,191,189,71,239,191,189,71,239,191,189,21,239,191,189,95,5,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,216,186,221,182,37,239,191,189,239,191,189,34,239,191,189,239,191,189,126,22,106,94,67,239,191,189,239,191,189,239,191,189,49,21,239,191,189,45,18,239,191,189,67,239,191,189,1,26,239,191,189,239,191,189,23,239,191,189,21,43,34,239,191,189,239,191,189,239,191,189,239,191,189,68,107,200,179,239,191,189,239,191,189,202,170,51,27,61,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,20,114,122,239,191,189,239,191,189,40,239,191,189,200,161,0,62,60,239,191,189,54,31,239,191,189,239,191,189,25,121,107,0,121,0,239,191,189,239,191,189,239,191,189,18,24,33,87,45,119,239,191,189,124,107,84,114,239,191,189,239,191,189,239,191,189,239,191,189,39,239,191,189,107,239,191,189,119,7,239,191,189,19,239,191,189,20,239,191,189,48,60,20,239,191,189,121,4,239,191,189,107,239,191,189,239,191,189,127,239,191,189,17,197,173,239,191,189,239,191,189,239,191,189,122,6,121,239,191,189,239,191,189,217,176,239,191,189,214,135,239,191,189,117,5,82,66,72,70,239,191,189,104,114,239,191,189,109,239,191,189,52,58,45,239,191,189,31,90,49,239,191,189,77,239,191,189,123,83,13,107,239,191,189,239,191,189,59,72,239,191,189,45,65,239,191,189,62,239,191,189,44,102,239,191,189,126,239,191,189,80,64,239,191,189,12,43,68,82,96,49,239,191,189,58,239,191,189,239,191,189,103,239,191,189,239,191,189,239,191,189,53,220,162,12,45,42,239,191,189,64,239,191,189,127,239,191,189,239,191,189,123,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,71,239,191,189,39,81,77,9,239,191,189,239,191,189,239,191,189,239,191,189,77,239,191,189,33,45,49,239,191,189,239,191,189,239,191,189,35,22,239,191,189,204,146,239,191,189,86,221,182,215,170,239,191,189,239,191,189,107,239,191,189,201,183,82,239,191,189,80,239,191,189,35,114,77,239,191,189,20,50,73,97,77,239,191,189,239,191,189,239,191,189,239,191,189,217,145,239,191,189,122,79,98,239,191,189,112,83,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,87,118,239,191,189,56,239,191,189,39,0,239,191,189,119,22,126,239,191,189,12,123,105,81,6,26,239,191,189,239,191,189,82,239,191,189,61,3,81,84,78,207,146,77,30,120,79,123,10,214,167,107,75,239,191,189,239,191,189,239,191,189,100,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,126,239,191,189,80,123,239,191,189,56,239,191,189,239,191,189,54,239,191,189,48,17,42,239,191,189,6,66,239,191,189,112,239,191,189,239,191,189,239,191,189,239,191,189,47,239,191,189,100,76,239,191,189,50,239,191,189,101,88,239,191,189,3,84,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,204,133,20,239,191,189,239,191,189,88,108,202,141,94,239,191,189,88,239,191,189,94,239,191,189,117,239,191,189,23,59,95,239,191,189,100,208,129,75,13,239,191,189,87,51,67,239,191,189,239,191,189,239,191,189,239,191,189,21,239,191,189,64,15,239,191,189,239,191,189,108,104,239,191,189,7,211,140,30,239,191,189,239,191,189,94,103,239,191,189,70,63,35,32,67,109,93,206,130,21,239,191,189,73,205,150,100,7,72,239,191,189,52,239,191,189,239,191,189,71,239,191,189,64,112,201,174,239,191,189,239,191,189,239,191,189,102,239,191,189,220,168,239,191,189,239,191,189,239,191,189,239,191,189,118,211,178,239,191,189,113,87,209,170,58,60,40,22,239,191,189,239,191,189,41,239,191,189,90,239,191,189,77,239,191,189,122,239,191,189,239,191,189,223,162,239,191,189,239,191,189,109,37,239,191,189,78,83,126,96,239,191,189,239,191,189,213,154,111,197,143,113,239,191,189,239,191,189,50,106,239,191,189,239,191,189,77,239,191,189,103,239,191,189,69,239,191,189,20,19,239,191,189,206,167,14,61,20,78,121,239,191,189,90,124,239,191,189,9,239,191,189,42,239,191,189,116,239,191,189,239,191,189,78,8,6,112,69,23,112,239,191,189,70,71,119,14,239,191,189,76,239,191,189,239,191,189,6,239,191,189,96,239,191,189,122,34,28,16,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,126,239,191,189,98,90,16,239,191,189,10,239,191,189,93,98,239,191,189,239,191,189,60,8,49,80,76,239,191,189,125,71,239,191,189,35,239,191,189,19,99,112,43,239,191,189,239,191,189,239,191,189,87,53,125,15,200,146,21,239,191,189,114,239,191,189,239,191,189,36,239,191,189,239,191,189,104,239,191,189,61,26,235,191,139,239,191,189,100,239,191,189,59,90,239,191,189,78,239,191,189,239,191,189,239,191,189,30,239,191,189,239,191,189,11,239,191,189,80,45,63,239,191,189,59,239,191,189,239,191,189,239,191,189,239,191,189,103,123,47,239,191,189,239,191,189,50,16,0,55,14,99,239,191,189,239,191,189,239,191,189,109,239,191,189,198,189,239,191,189,239,191,189,71,227,132,165,106,16,239,191,189,76,239,191,189,239,191,189,107,108,27,239,191,189,239,191,189,197,163,77,109,239,191,189,29,239,191,189,239,191,189,239,191,189,239,191,189,126,89,239,191,189,1,117,218,181,13,239,191,189,32,239,191,189,239,191,189,5,62,34,53,239,191,189,239,191,189,27,239,191,189,99,239,191,189,0,239,191,189,239,191,189,35,111,100,95,123,239,191,189,45,221,179,239,191,189,8,75,14,23,239,191,189,95,35,239,191,189,71,26,239,191,189,15,74,86,106,241,154,175,141,239,191,189,88,67,42,82,107,80,239,191,189,123,127,106,239,191,189,82,82,107,44,104,239,191,189,3,66,4,239,191,189,77,71,239,191,189,239,191,189,95,26,8,17,239,191,189,239,191,189,46,37,35,94,239,191,189,32,239,191,189,239,191,189,100,239,191,189,239,191,189,51,239,191,189,77,75,239,191,189,239,191,189,41,1,76,239,191,189,108,239,191,189,54,10,239,191,189,110,239,191,189,11,54,239,191,189,106,239,191,189,215,159,44,47,12,102,71,239,191,189,87,239,191,189,83,239,191,189,26,106,110,58,239,191,189,58,239,191,189,15,98,239,191,189,239,191,189,239,191,189,239,191,189,83,202,178,239,191,189,45,11,61,98,5,239,191,189,30,239,191,189,239,191,189,195,185,98,64,239,191,189,54,75,239,191,189,239,191,189,239,191,189,104,239,191,189,239,191,189,91,109,239,191,189,221,144,66,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,71,239,191,189,239,191,189,101,239,191,189,27,22,103,27,85,0,239,191,189,49,101,239,191,189,99,58,239,191,189,93,56,49,69,239,191,189,239,191,189,41,208,142,74,26,39,36,104,239,191,189,239,191,189,239,191,189,56,43,63,118,82,239,191,189,239,191,189,5,109,32,239,191,189,42,239,191,189,85,97,239,191,189,126,125,1,239,191,189,239,191,189,59,239,191,189,239,191,189,77,239,191,189,49,239,191,189,49,81,118,2,43,14,115,239,191,189,229,156,155,221,136,8,36,100,239,191,189,239,191,189,239,191,189,66,239,191,189,11,98,239,191,189,239,191,189,118,239,191,189,80,239,191,189,71,239,191,189,239,191,189,239,191,189,239,191,189,90,239,191,189,239,191,189,41,83,110,239,191,189,239,191,189,239,191,189,102,239,191,189,57,50,239,191,189,39,34,239,191,189,47,239,191,189,239,191,189,38,239,191,189,47,239,191,189,30,35,239,191,189,95,84,239,191,189,9,239,191,189,25,202,177,10,239,191,189,114,239,191,189,20,114,239,191,189,239,191,189,239,191,189,60,239,191,189,239,191,189,239,191,189,99,239,191,189,239,191,189,239,191,189,8,239,191,189,106,41,111,116,52,75,239,191,189,56,239,191,189,239,191,189,239,191,189,25,0,118,24,239,191,189,26,239,191,189,239,191,189,110,2,73,120,97,239,191,189,57,239,191,189,239,191,189,95,35,239,191,189,80,95,239,191,189,239,191,189,38,61,239,191,189,90,57,239,191,189,6,1,239,191,189,239,191,189,239,191,189,76,75,239,191,189,239,191,189,239,191,189,81,20,239,191,189,39,38,239,191,189,210,173,239,191,189,60,239,191,189,33,239,191,189,239,191,189,200,160,239,191,189,124,239,191,189,127,239,191,189,93,122,122,239,191,189,72,194,189,24,239,191,189,239,191,189,239,191,189,88,89,60,99,96,116,42,107,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,63,239,191,189,239,191,189,239,191,189,93,239,191,189,13,73,56,239,191,189,239,191,189,43,239,191,189,57,20,239,191,189,239,191,189,239,191,189,55,239,191,189,104,239,191,189,239,191,189,60,239,191,189,7,239,191,189,20,239,191,189,239,191,189,125,239,191,189,22,8,239,191,189,239,191,189,52,239,191,189,239,191,189,76,31,100,239,191,189,239,191,189,53,239,191,189,239,191,189,86,70,69,112,239,191,189,90,239,191,189,87,78,239,191,189,239,191,189,239,191,189,113,53,239,191,189,112,28,1,20,239,191,189,82,50,96,3,239,191,189,239,191,189,62,72,29,239,191,189,90,88,113,239,191,189,239,191,189,112,61,13,239,191,189,239,191,189,49,239,191,189,239,191,189,239,191,189,239,191,189,26,65,22,239,191,189,239,191,189,239,191,189,32,239,191,189,239,191,189,36,239,191,189,66,239,191,189,63,28,239,191,189,57,99,77,119,85,239,191,189,119,17,50,15,68,89,239,191,189,194,157,239,191,189,67,239,191,189,65,39,239,191,189,41,100,121,55,239,191,189,12,239,191,189,239,191,189,239,191,189,71,125,239,191,189,239,191,189,86,48,63,72,239,191,189,122,239,191,189,239,191,189,239,191,189,118,239,191,189,239,191,189,27,220,134,18,239,191,189,53,239,191,189,239,191,189,239,191,189,16,239,191,189,239,191,189,64,239,191,189,239,191,189,222,135,55,239,191,189,199,186,1,107,109,239,191,189,239,191,189,239,191,189,198,136,29,104,239,191,189,239,191,189,112,239,191,189,47,18,119,239,191,189,17,127,239,191,189,239,191,189,69,49,107,8,32,239,191,189,239,191,189,5,239,191,189,239,191,189,239,191,189,13,25,112,24,125,4,107,54,108,197,167,16,239,191,189,239,191,189,14,239,191,189,239,191,189,15,59,239,191,189,72,16,65,38,59,41,239,191,189,6,239,191,189,24,239,191,189,63,7,98,123,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,72,60,239,191,189,239,191,189,33,115,56,17,52,239,191,189,239,191,189,78,239,191,189,239,191,189,239,191,189,239,191,189,74,239,191,189,83,18,239,191,189,47,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,108,239,191,189,239,191,189,239,191,189,21,67,16,239,191,189,239,191,189,71,239,191,189,26,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,34,239,191,189,71,122,101,239,191,189,115,28,239,191,189,239,191,189,239,191,189,24,239,191,189,76,239,191,189,80,239,191,189,239,191,189,126,103,35,239,191,189,10,239,191,189,41,239,191,189,239,191,189,194,157,88,42,93,210,139,57,239,191,189,117,7,239,191,189,88,239,191,189,110,94,43,239,191,189,59,239,191,189,239,191,189,239,191,189,49,239,191,189,25,106,239,191,189,65,239,191,189,95,239,191,189,60,18,239,191,189,90,10,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,15,196,142,15,110,114,239,191,189,239,191,189,239,191,189,239,191,189,14,239,191,189,107,105,16,239,191,189,35,73,239,191,189,41,239,191,189,239,191,189,221,167,89,100,239,191,189,113,43,118,57,25,2,34,42,239,191,189,91,64,239,191,189,216,162,69,77,125,239,191,189,98,239,191,189,35,239,191,189,200,161,120,229,157,135,239,191,189,239,191,189,103,21,14,239,191,189,74,124,119,91,239,191,189,239,191,189,72,63,239,191,189,239,191,189,239,191,189,121,220,135,66,125,95,5,239,191,189,197,173,239,191,189,98,239,191,189,239,191,189,51,101,239,191,189,48,239,191,189,239,191,189,43,239,191,189,239,191,189,88,239,191,189,239,191,189,34,239,191,189,109,86,239,191,189,35,48,239,191,189,239,191,189,9,22,69,124,81,98,30,72,45,239,191,189,25,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,15,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,46,120,239,191,189,60,88,239,191,189,111,201,164,50,22,239,191,189,42,78,86,239,191,189,239,191,189,239,191,189,13,121,239,191,189,214,176,51,239,191,189,239,191,189,220,169,239,191,189,120,239,191,189,5,70,43,239,191,189,239,191,189,239,191,189,20,10,239,191,189,239,191,189,100,239,191,189,239,191,189,214,151,65,86,91,34,19,239,191,189,62,14,88,239,191,189,115,239,191,189,109,239,191,189,239,191,189,239,191,189,44,239,191,189,16,124,239,191,189,103,239,191,189,239,191,189,115,239,191,189,120,239,191,189,107,239,191,189,201,166,239,191,189,83,239,191,189,82,121,85,120,90,8,28,239,191,189,5,97,97,239,191,189,239,191,189,19,111,239,191,189,65,123,89,239,191,189,239,191,189,239,191,189,124,239,191,189,239,191,189,50,239,191,189,239,191,189,95,239,191,189,239,191,189,0,25,17,116,123,239,191,189,45,239,191,189,116,239,191,189,215,131,124,18,233,145,140,239,191,189,72,239,191,189,43,89,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,40,105,120,47,7,239,191,189,97,239,191,189,213,158,239,191,189,239,191,189,20,239,191,189,239,191,189,2,74,239,191,189,239,191,189,239,191,189,239,191,189,18,239,191,189,22,118,239,191,189,239,191,189,95,80,239,191,189,126,49,65,239,191,189,10,105,239,191,189,124,239,191,189,102,239,191,189,239,191,189,7,111,115,101,115,4,239,191,189,57,239,191,189,9,72,239,191,189,87,239,191,189,24,239,191,189,239,191,189,35,239,191,189,239,191,189,118,239,191,189,239,191,189,55,239,191,189,76,90,239,191,189,23,239,191,189,60,239,191,189,36,239,191,189,239,191,189,3,59,51,90,239,191,189,239,191,189,239,191,189,40,239,191,189,6,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,66,54,62,239,191,189,200,159,46,239,191,189,239,191,189,99,108,239,191,189,28,11,239,191,189,50,49,113,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,127,239,191,189,48,39,239,191,189,239,191,189,239,191,189,33,239,191,189,239,191,189,239,191,189,239,191,189,14,239,191,189,99,13,239,191,189,239,191,189,47,73,239,191,189,11,239,191,189,100,239,191,189,103,29,94,63,110,121,67,69,239,191,189,72,239,191,189,239,191,189,112,5,239,191,189,239,191,189,239,191,189,38,17,239,191,189,76,34,239,191,189,41,239,191,189,239,191,189,40,195,175,88,116,239,191,189,204,166,76,239,191,189,239,191,189,226,135,128,107,239,191,189,114,239,191,189,239,191,189,15,42,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,114,52,69,239,191,189,53,239,191,189,239,191,189,81,239,191,189,239,191,189,68,239,191,189,239,191,189,49,202,184,239,191,189,7,225,159,144,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,43,239,128,143,20,89,113,7,35,77,76,4,47,239,191,189,10,45,239,191,189,239,191,189,239,191,189,96,227,174,184,239,191,189,69,73,234,136,149,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,85,239,191,189,239,191,189,68,239,191,189,239,191,189,88,239,191,189,197,185,239,191,189,239,191,189,96,239,191,189,239,191,189,239,191,189,58,239,191,189,239,191,189,95,239,191,189,124,55,239,191,189,74,239,191,189,110,239,191,189,114,239,191,189,239,191,189,80,65,106,239,191,189,100,106,124,7,6,8,50,239,191,189,239,191,189,96,239,191,189,239,191,189,78,239,191,189,18,83,239,191,189,64,98,29,239,191,189,110,56,239,191,189,239,191,189,104,111,62,47,21,68,89,239,191,189,8,61,23,239,191,189,239,191,189,239,191,189,87,117,239,191,189,56,42,239,191,189,239,191,189,32,1,95,65,239,191,189,16,239,191,189,77,239,191,189,239,191,189,49,239,191,189,16,239,191,189,239,191,189,239,191,189,239,191,189,27,80,239,191,189,69,239,191,189,239,191,189,239,191,189,46,239,191,189,11,239,191,189,71,54,13,90,21,72,109,239,191,189,239,191,189,91,51,122,239,191,189,77,71,239,191,189,59,239,191,189,23,239,191,189,239,191,189,239,191,189,79,14,79,239,191,189,239,191,189,87,100,239,191,189,239,191,189,239,191,189,212,165,115,239,191,189,35,39,239,191,189,85,43,20,204,142,239,191,189,239,191,189,73,239,191,189,98,20,91,239,191,189,115,76,38,111,239,191,189,239,191,189,11,37,109,21,122,66,206,174,239,191,189,3,217,137,239,191,189,19,239,191,189,194,146,108,11,239,191,189,38,121,239,191,189,239,191,189,239,191,189,79,79,7,18,239,191,189,126,3,239,191,189,36,28,239,191,189,239,191,189,21,239,191,189,239,191,189,239,191,189,58,48,69,31,239,191,189,82,71,214,176,239,191,189,239,191,189,99,38,216,145,127,239,191,189,32,43,239,191,189,199,155,30,239,191,189,213,177,239,191,189,239,191,189,239,191,189,239,191,189,124,210,130,1,239,191,189,72,97,239,191,189,28,239,191,189,8,49,97,239,191,189,196,159,239,191,189,76,239,191,189,86,92,239,191,189,110,239,191,189,239,191,189,239,191,189,17,239,191,189,73,39,239,191,189,80,239,191,189,239,191,189,61,239,191,189,239,191,189,36,239,191,189,72,30,239,191,189,3,46,239,191,189,57,82,239,191,189,53,239,191,189,81,108,239,191,189,125,239,191,189,100,239,191,189,10,77,55,239,191,189,121,239,191,189,71,239,191,189,52,239,191,189,239,191,189,221,190,239,191,189,95,65,56,239,191,189,239,191,189,64,239,191,189,98,101,239,191,189,239,191,189,19,40,100,239,191,189,123,88,239,191,189,239,191,189,239,191,189,25,239,191,189,17,125,79,14,239,191,189,51,97,239,191,189,239,191,189,239,191,189,119,113,239,191,189,43,73,239,191,189,35,65,239,191,189,239,191,189,120,239,191,189,101,239,191,189,239,191,189,212,184,51,239,191,189,90,239,191,189,115,239,191,189,48,239,191,189,69,239,191,189,88,119,0,239,191,189,239,191,189,28,239,191,189,239,191,189,114,239,191,189,50,111,32,94,239,191,189,113,239,191,189,239,191,189,239,191,189,239,191,189,66,4,95,239,191,189,122,235,136,174,239,191,189,48,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,202,167,49,124,239,191,189,239,191,189,21,112,27,239,191,189,195,183,239,191,189,20,1,10,239,191,189,239,191,189,91,239,191,189,84,24,87,60,15,239,191,189,239,191,189,66,239,191,189,239,191,189,239,191,189,109,239,191,189,239,191,189,202,133,28,86,32,45,239,191,189,68,34,239,191,189,52,239,191,189,239,191,189,239,191,189,38,99,239,191,189,72,19,118,239,191,189,80,239,191,189,108,239,191,189,239,191,189,92,45,93,239,191,189,239,191,189,73,104,43,55,239,191,189,123,239,191,189,59,114,239,191,189,239,191,189,52,239,191,189,239,191,189,8,84,239,191,189,28,90,239,191,189,239,191,189,90,28,55,121,239,191,189,239,191,189,102,68,239,191,189,102,239,191,189,64,239,191,189,239,191,189,36,110,196,160,239,191,189,36,12,239,191,189,239,191,189,239,191,189,27,111,239,191,189,232,135,159,17,2,239,191,189,116,239,191,189,75,239,191,189,239,191,189,239,191,189,35,239,191,189,239,191,189,89,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,123,114,239,191,189,119,239,191,189,101,89,94,32,29,125,239,191,189,49,84,239,191,189,84,74,239,191,189,239,191,189,123,6,239,191,189,28,1,21,239,191,189,93,239,191,189,39,239,191,189,239,191,189,3,239,191,189,239,191,189,239,191,189,239,191,189,25,239,191,189,52,239,191,189,95,212,173,239,191,189,57,112,4,9,239,191,189,123,239,191,189,11,106,239,191,189,239,191,189,85,239,191,189,97,239,191,189,7,105,54,118,124,122,27,239,191,189,239,191,189,82,58,76,239,191,189,239,191,189,239,191,189,239,191,189,110,91,219,141,88,239,191,189,45,239,191,189,239,191,189,55,239,191,189,239,191,189,59,73,239,191,189,120,239,191,189,48,41,94,48,43,29,239,191,189,71,239,191,189,100,47,43,25,239,191,189,74,239,191,189,239,191,189,117,239,191,189,46,239,191,189,239,191,189,239,191,189,72,207,129,239,191,189,239,191,189,239,191,189,23,239,191,189,80,20,239,191,189,126,120,61,48,239,191,189,239,191,189,17,48,36,239,191,189,239,191,189,222,175,106,239,191,189,84,239,191,189,22,74,47,239,191,189,123,21,97,239,191,189,57,14,80,239,191,189,114,127,239,191,189,4,239,191,189,204,128,239,191,189,68,199,133,239,191,189,81,239,191,189,74,77,239,191,189,52,108,40,239,191,189,29,239,191,189,6,239,191,189,4,2,98,220,134,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,126,239,191,189,239,191,189,218,157,77,239,191,189,239,191,189,79,196,145})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "xclientdev3",
                        container: "testc6bcad2100bd245a4b2c75feee0584c63",
                        blob: "blob1",
                        body: body,
                        maxSize: 34816,
                        appendPosition: 16384,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test000585 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\000585_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\000585_s.txt", Encoding.UTF8);

    public Test000585() : base(recordedRequest, recordedResponse, "xclientdev3")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes("t\0e\0s\0t\0"));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "xclientdev3",
                        container: "testc9ffdd366a5c34a3bb774f316074fb913",
                        blob: "blob1",
                        body: body,
                        appendPosition: 0,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test000595 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\000595_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\000595_s.txt", Encoding.UTF8);

    public Test000595() : base(recordedRequest, recordedResponse, "xclientdev3")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{99,0,104,0,97,0,114,0,45,78,239,191,189,101,116,0,101,0,115,0,116,0})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "xclientdev3",
                        container: "testcf75041e0b1004a6f9226e3654a468643",
                        blob: "blob1",
                        body: body,
                        appendPosition: 0,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test000578 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\000578_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\000578_s.txt", Encoding.UTF8);

    public Test000578() : base(recordedRequest, recordedResponse, "xclientdev3")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes("test"));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "xclientdev3",
                        container: "testc9ffdd366a5c34a3bb774f316074fb913",
                        blob: "blob1",
                        body: body,
                        appendPosition: 0,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test000581 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\000581_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\000581_s.txt", Encoding.UTF8);

    public Test000581() : base(recordedRequest, recordedResponse, "xclientdev3")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes("t\0e\0s\0t\0"));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "xclientdev3",
                        container: "testc9ffdd366a5c34a3bb774f316074fb913",
                        blob: "blob1",
                        body: body,
                        appendPosition: 0,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test000599 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\000599_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\000599_s.txt", Encoding.UTF8);

    public Test000599() : base(recordedRequest, recordedResponse, "xclientdev3")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{99,0,104,0,97,0,114,0,45,78,239,191,189,101,116,0,101,0,115,0,116,0})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "xclientdev3",
                        container: "testcf75041e0b1004a6f9226e3654a468643",
                        blob: "blob1",
                        body: body,
                        appendPosition: 0,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test000591 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\000591_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\000591_s.txt", Encoding.UTF8);

    public Test000591() : base(recordedRequest, recordedResponse, "xclientdev3")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{99,104,97,114,228,184,173,230,150,135,116,101,115,116})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "xclientdev3",
                        container: "testcf75041e0b1004a6f9226e3654a468643",
                        blob: "blob1",
                        body: body,
                        appendPosition: 0,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test001353 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\001353_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\001353_s.txt", Encoding.UTF8);

    public Test001353() : base(recordedRequest, recordedResponse, "xclientdev3")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes("t\0e\0s\0t\0"));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "xclientdev3",
                        container: "testc775950c16dc4414ba00faa68e503b17a",
                        blob: "blob1",
                        body: body,
                        appendPosition: 0,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test001347 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\001347_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\001347_s.txt", Encoding.UTF8);

    public Test001347() : base(recordedRequest, recordedResponse, "xclientdev3")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes("test"));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "xclientdev3",
                        container: "testc775950c16dc4414ba00faa68e503b17a",
                        blob: "blob1",
                        body: body,
                        appendPosition: 0,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test001350 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\001350_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\001350_s.txt", Encoding.UTF8);

    public Test001350() : base(recordedRequest, recordedResponse, "xclientdev3")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes("t\0e\0s\0t\0"));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "xclientdev3",
                        container: "testc775950c16dc4414ba00faa68e503b17a",
                        blob: "blob1",
                        body: body,
                        appendPosition: 0,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test001367 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\001367_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\001367_s.txt", Encoding.UTF8);

    public Test001367() : base(recordedRequest, recordedResponse, "xclientdev3")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{99,0,104,0,97,0,114,0,45,78,239,191,189,101,116,0,101,0,115,0,116,0})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "xclientdev3",
                        container: "testcff79497db7274e1692ef7808f63f40b4",
                        blob: "blob1",
                        body: body,
                        appendPosition: 0,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test001359 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\001359_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\001359_s.txt", Encoding.UTF8);

    public Test001359() : base(recordedRequest, recordedResponse, "xclientdev3")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{99,104,97,114,228,184,173,230,150,135,116,101,115,116})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "xclientdev3",
                        container: "testcff79497db7274e1692ef7808f63f40b4",
                        blob: "blob1",
                        body: body,
                        appendPosition: 0,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test001363 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\001363_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\001363_s.txt", Encoding.UTF8);

    public Test001363() : base(recordedRequest, recordedResponse, "xclientdev3")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{99,0,104,0,97,0,114,0,45,78,239,191,189,101,116,0,101,0,115,0,116,0})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "xclientdev3",
                        container: "testcff79497db7274e1692ef7808f63f40b4",
                        blob: "blob1",
                        body: body,
                        appendPosition: 0,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00571 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00571_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00571_s.txt", Encoding.UTF8);

    public Test00571() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,239,191,189,239,191,189,106,239,191,189,0,29,239,191,189,83})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containerscac7716e1c2d4447ae454c4d747d06da",
                        blob: "Blobf1fb9c41ccc1483fafc0c7fe50f8a1a7",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00564 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00564_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00564_s.txt", Encoding.UTF8);

    public Test00564() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{81,2,10,36,70,239,191,189,41,239,191,189,239,191,189,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersc116a400f07e4be3a7e25bcc394fff8a",
                        blob: "Blob09dcdaa35f934ebf91cc3c6c00076b0a",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00589 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00589_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00589_s.txt", Encoding.UTF8);

    public Test00589() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,6,239,191,189,239,191,189,239,191,189,239,191,189,107,239,191,189,116,8})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersaca560b6824046d5929c686ad0ed7296",
                        blob: "Blob1578e27f53aa491f8b839ff14c9dbfee",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00590 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00590_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00590_s.txt", Encoding.UTF8);

    public Test00590() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{43,239,191,189,20,30,216,184,119,22,239,191,189,239,191,189,239,191,189,197,175,68,239,191,189,239,191,189,239,191,189,70})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersaca560b6824046d5929c686ad0ed7296",
                        blob: "Blob1578e27f53aa491f8b839ff14c9dbfee",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00723 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00723_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00723_s.txt", Encoding.UTF8);

    public Test00723() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,27,96,239,191,189,239,191,189,72,67,239,191,189,239,191,189,107})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers126883a875804a4885607d9d17fe3f5f",
                        blob: "Blob2e7689ef47484c39915261933a9b5db0",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00620 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00620_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00620_s.txt", Encoding.UTF8);

    public Test00620() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,45,108,239,191,189,79,239,191,189,101,37,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersd2446c97a4eb436fb625295120403e37",
                        blob: "Blobd6c02affef54428ca61cc47c330327fa",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00591 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00591_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00591_s.txt", Encoding.UTF8);

    public Test00591() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,55,6,124,239,191,189,113,239,191,189,239,191,189,222,177,239,191,189,239,191,189,55,3,89,239,191,189,62,53,49,203,187,79,239,191,189,239,191,189,206,150,16,239,191,189,96})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersaca560b6824046d5929c686ad0ed7296",
                        blob: "Blob1578e27f53aa491f8b839ff14c9dbfee",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00771 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00771_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00771_s.txt", Encoding.UTF8);

    public Test00771() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{24,53,239,191,189,239,191,189,206,177,239,191,189,239,191,189,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers86d11756fd8146d68560e6958991d654",
                        blob: "Blob4a16035b6ebb4f45b63f6ef12ff95d42",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00772 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00772_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00772_s.txt", Encoding.UTF8);

    public Test00772() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{77,124,37,239,191,189,239,191,189,239,191,189,11,21,239,191,189,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers86d11756fd8146d68560e6958991d654",
                        blob: "Blob4a16035b6ebb4f45b63f6ef12ff95d42",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00716 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00716_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00716_s.txt", Encoding.UTF8);

    public Test00716() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,239,191,189,22,239,191,189,239,191,189,50,239,191,189,239,191,189,95,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers5669889a66da49db80eaab8e395bd697",
                        blob: "Blob8922530f10434a809e7bac53ca9d95c4",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00795 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00795_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00795_s.txt", Encoding.UTF8);

    public Test00795() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{106,239,191,189,28,99,239,191,189,44,6,239,191,189,58,106})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers2f7107f9ed4b4d7aa6f5255cc33d919e",
                        blob: "Blob86aa4fe373e642518ee6817c946a1581",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00700 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00700_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00700_s.txt", Encoding.UTF8);

    public Test00700() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{82,106,16,239,191,189,61,26,124,32,104,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersb34107dcfd3f4b3f9282bea598e0e28d",
                        blob: "Blob8798c86819774c96a219d7588865cf97",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00835 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00835_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00835_s.txt", Encoding.UTF8);

    public Test00835() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,64,239,191,189,85,90,105,52,239,191,189,47,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers5c1e910061064f639bc20af79d19029d",
                        blob: "Blob0e6978ac35c64fe999fe338aedf951af",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00557 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00557_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00557_s.txt", Encoding.UTF8);

    public Test00557() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,239,191,189,97,239,191,189,239,191,189,9,239,191,189,48})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers6405927489f64fa4b4f6ea53080d5b65",
                        blob: "Blob7c5815289a4a41808e11f5359ff9ded9",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00740 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00740_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00740_s.txt", Encoding.UTF8);

    public Test00740() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{93,239,191,189,239,191,189,116,239,191,189,239,191,189,55,81,239,191,189,45})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers24c4b999e5ea4e6f8bf26412d7f290f0",
                        blob: "Blob8ae708e8d79642c8ab811318c2f292a4",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00819 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00819_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00819_s.txt", Encoding.UTF8);

    public Test00819() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{0,2,78,239,191,189,98,239,191,189,110,83,239,191,189,33})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers3fa113fee5174727bcb16f01864d815d",
                        blob: "Blob3f6730c49ef9413d99919471500a85f8",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00661 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00661_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00661_s.txt", Encoding.UTF8);

    public Test00661() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,239,191,189,105,26,83,46,58,239,191,189,239,191,189,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers5196cc688b9a46e5995a860f8d51c7dd",
                        blob: "Blob3b9e4df0dec6467db6a1c490011a0f7a",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00582 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00582_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00582_s.txt", Encoding.UTF8);

    public Test00582() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{69,239,191,189,239,191,189,78,102,52,239,191,189,239,191,189,82,23})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers96bab8d9dd0c4a39bcb0fe0d80076c65",
                        blob: "Bloba87d5a89873844239710763f305d717a",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00915 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00915_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00915_s.txt", Encoding.UTF8);

    public Test00915() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{119,239,191,189,239,191,189,239,191,189,127,88,239,191,189,123,239,191,189,57})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers401c1ad2534f465c82393324b42a1a27",
                        blob: "Blob98b9afdc6e7d4325b2bbb6a8dbe2b9e2",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00734 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00734_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00734_s.txt", Encoding.UTF8);

    public Test00734() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{72,239,191,189,53,17,239,191,189,105,38,126,63})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers512f8b414443487a849d4e43fedc09df",
                        blob: "Bloba218619307a84c83974814eb542c9d98",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00717 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00717_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00717_s.txt", Encoding.UTF8);

    public Test00717() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,239,191,189,10,239,191,189,239,191,189,217,184,239,191,189,33,66})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers5669889a66da49db80eaab8e395bd697",
                        blob: "Blob8922530f10434a809e7bac53ca9d95c4",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00812 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00812_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00812_s.txt", Encoding.UTF8);

    public Test00812() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{221,148,239,191,189,239,191,189,15,239,191,189,239,191,189,40,37})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers090ccd090914439bb7d7c562f746254d",
                        blob: "Blob839edfa94b5d4b80862b439c3998c35a",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00923 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00923_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00923_s.txt", Encoding.UTF8);

    public Test00923() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,44,127,74,30,12,239,191,189,39,239,191,189,51})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers2251efe5465944ebb213ae66ab0b2754",
                        blob: "Blobb1e1065dd11b439e82bafca9413bb60b",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00836 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00836_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00836_s.txt", Encoding.UTF8);

    public Test00836() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,239,191,189,213,189,66,239,191,189,239,191,189,239,191,189,239,191,189,39})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers5c1e910061064f639bc20af79d19029d",
                        blob: "Blob0e6978ac35c64fe999fe338aedf951af",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00852 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00852_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00852_s.txt", Encoding.UTF8);

    public Test00852() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{103,89,96,239,191,189,9,239,191,189,49,108,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containerse67ea6b3f6c941a1ae4410e48a72ebdd",
                        blob: "Blob3d7ac8b61f894738983e22629b7b50ce",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00765 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00765_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00765_s.txt", Encoding.UTF8);

    public Test00765() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{127,28,239,191,189,110,45,30,16,58,214,154})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers55c42c297e1c47d4a6f11dc705011499",
                        blob: "Blobb713e53592c84b1f935999034b8aeced",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00630 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00630_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00630_s.txt", Encoding.UTF8);

    public Test00630() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{109,239,191,189,239,191,189,29,239,191,189,63,106,61,239,191,189,19})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers50aa6ebcc56d4174a32f029d1df33997",
                        blob: "Blob70f9f2f106b14b6493a2f3b285e5f593",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00662 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00662_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00662_s.txt", Encoding.UTF8);

    public Test00662() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,123,239,191,189,239,191,189,24,105,1,239,191,189,50,28})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers5196cc688b9a46e5995a860f8d51c7dd",
                        blob: "Blob3b9e4df0dec6467db6a1c490011a0f7a",
                        body: body,
                        maxSize: 20,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00796 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00796_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00796_s.txt", Encoding.UTF8);

    public Test00796() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,52,61,239,191,189,84,239,191,189,239,191,189,42,239,191,189,64})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers2f7107f9ed4b4d7aa6f5255cc33d919e",
                        blob: "Blob86aa4fe373e642518ee6817c946a1581",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00971 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00971_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00971_s.txt", Encoding.UTF8);

    public Test00971() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{110,239,191,189,239,191,189,86,103,74,17,239,191,189,89,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers6025e9c199cd48c2a1b71bd84c271e1d",
                        blob: "Blob0b2dcea0816840118900c27bb585ab16",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00813 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00813_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00813_s.txt", Encoding.UTF8);

    public Test00813() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{125,239,191,189,6,239,191,189,239,191,189,64,5,82,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers090ccd090914439bb7d7c562f746254d",
                        blob: "Blob839edfa94b5d4b80862b439c3998c35a",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00735 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00735_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00735_s.txt", Encoding.UTF8);

    public Test00735() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,109,239,191,189,5,239,191,189,63,33,66,44})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers512f8b414443487a849d4e43fedc09df",
                        blob: "Bloba218619307a84c83974814eb542c9d98",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00853 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00853_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00853_s.txt", Encoding.UTF8);

    public Test00853() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{127,239,191,189,239,191,189,32,109,51,70,117,239,191,189,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containerse67ea6b3f6c941a1ae4410e48a72ebdd",
                        blob: "Blob3d7ac8b61f894738983e22629b7b50ce",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00742 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00742_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00742_s.txt", Encoding.UTF8);

    public Test00742() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,239,191,189,105,239,191,189,57,239,191,189,239,191,189,117,5,108})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers24c4b999e5ea4e6f8bf26412d7f290f0",
                        blob: "Blob8ae708e8d79642c8ab811318c2f292a4",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00631 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00631_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00631_s.txt", Encoding.UTF8);

    public Test00631() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{71,239,191,189,239,191,189,34,239,191,189,239,191,189,27,82,38,118})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers50aa6ebcc56d4174a32f029d1df33997",
                        blob: "Blob70f9f2f106b14b6493a2f3b285e5f593",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00678 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00678_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00678_s.txt", Encoding.UTF8);

    public Test00678() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,28,239,191,189,239,191,189,239,191,189,203,178,109,76})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers1daad0ad144c46ec8aecafc846e6d4b1",
                        blob: "Blob46dc1b53556a468986ed191a663eb531",
                        body: body,
                        appendPosition: 0,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00797 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00797_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00797_s.txt", Encoding.UTF8);

    public Test00797() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{62,109,239,191,189,239,191,189,62,118,239,191,189,89,239,191,189,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers2f7107f9ed4b4d7aa6f5255cc33d919e",
                        blob: "Blob86aa4fe373e642518ee6817c946a1581",
                        body: body,
                        maxSize: 30,
                        ifMatches: "\"0x8D439FDF586A675\"",
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00679 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00679_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00679_s.txt", Encoding.UTF8);

    public Test00679() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,64,85,97,239,191,189,239,191,189,10,239,191,189,239,191,189,93})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers1daad0ad144c46ec8aecafc846e6d4b1",
                        blob: "Blob46dc1b53556a468986ed191a663eb531",
                        body: body,
                        appendPosition: 10,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00632 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00632_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00632_s.txt", Encoding.UTF8);

    public Test00632() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{59,239,191,189,239,191,189,239,191,189,58,239,191,189,69,239,191,189,70})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers50aa6ebcc56d4174a32f029d1df33997",
                        blob: "Blob70f9f2f106b14b6493a2f3b285e5f593",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00766 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00766_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00766_s.txt", Encoding.UTF8);

    public Test00766() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,239,191,189,21,239,191,189,239,191,189,53,239,191,189,77,24,5})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers55c42c297e1c47d4a6f11dc705011499",
                        blob: "Blobb713e53592c84b1f935999034b8aeced",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00972 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00972_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00972_s.txt", Encoding.UTF8);

    public Test00972() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{110,239,191,189,239,191,189,86,103,74,17,239,191,189,89,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers6025e9c199cd48c2a1b71bd84c271e1d",
                        blob: "Blob0b2dcea0816840118900c27bb585ab16",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00909 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00909_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00909_s.txt", Encoding.UTF8);

    public Test00909() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,239,191,189,21,239,191,189,40,92,239,191,189,25,116,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersc2c620fd383949b09ee3006bef7dc113",
                        blob: "Blob284144187d8b46ce95fe1e4c55576516",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00949 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00949_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00949_s.txt", Encoding.UTF8);

    public Test00949() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,71,80,239,191,189,194,167,239,191,189,239,191,189,77})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers90130160ec2f4f3da34c2db5d3e1cf98",
                        blob: "Blob33eaab27d18f4054900035dff338bf01",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00648 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00648_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00648_s.txt", Encoding.UTF8);

    public Test00648() : base(recordedRequest, recordedResponse, "accounts8d439fdefe43270")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{222,134,239,191,189,33,52,85,12,239,191,189,239,191,189,120})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "accounts8d439fdefe43270",
                        container: "containers9388ef98f4af4a06b78c8118e85526ec",
                        blob: "Blob1a9bcce2b1da4bba89785299c6817d57",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00624 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00624_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00624_s.txt", Encoding.UTF8);

    public Test00624() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{89,239,191,189,239,191,189,239,191,189,239,191,189,89,121,239,191,189,51})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers780d8608ea684a2eaf8693da42254d26",
                        blob: "Blobc0f6e0d4efc14bac8cfdb3816a953b00",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00789 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00789_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00789_s.txt", Encoding.UTF8);

    public Test00789() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,22,22,23,239,191,189,81,239,191,189,239,191,189,43})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers241e227901ca436085ffe7d7365e7182",
                        blob: "Blob83320c776ed4451ab68172bb3bb0bd26",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00783 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00783_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00783_s.txt", Encoding.UTF8);

    public Test00783() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{41,77,64,239,191,189,239,191,189,239,191,189,88,120,239,191,189,116})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers7fe7acc895bc48dcb2a9eaaeaba2ddac",
                        blob: "Blobd77d5ff2604247d18c0730a7de262de3",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00710 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00710_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00710_s.txt", Encoding.UTF8);

    public Test00710() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,105,38,239,191,189,123,239,191,189,239,191,189,106,216,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersf1c416b74a4940b1879654f2470f71b0",
                        blob: "Blobbd87ab05549b491384236fb7d24f931b",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00711 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00711_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00711_s.txt", Encoding.UTF8);

    public Test00711() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,70,239,191,189,74,93,85,239,191,189,40,28,65})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersf1c416b74a4940b1879654f2470f71b0",
                        blob: "Blobbd87ab05549b491384236fb7d24f931b",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00957 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00957_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00957_s.txt", Encoding.UTF8);

    public Test00957() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{70,102,41,239,191,189,51,87,75,239,191,189,121,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers4c448ec68435452985538526880b5050",
                        blob: "Blob3cff3dfce82a43bbbfd508e80e515917",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00728 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00728_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00728_s.txt", Encoding.UTF8);

    public Test00728() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{27,239,191,189,0,239,191,189,78,239,191,189,35})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers8d73c72d9bee4385941fe0d1e661fa8d",
                        blob: "Blob5f884f1f1417462d9fd1433d80cec9f2",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00625 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00625_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00625_s.txt", Encoding.UTF8);

    public Test00625() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,239,191,189,95,100,239,191,189,239,191,189,41,239,191,189,84,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers780d8608ea684a2eaf8693da42254d26",
                        blob: "Blobc0f6e0d4efc14bac8cfdb3816a953b00",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00705 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00705_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00705_s.txt", Encoding.UTF8);

    public Test00705() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{15,24,6,16,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers3d2adad83d3a418db1a6f9337437b998",
                        blob: "Blobcec80bea87cd4702a007944580243dc1",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00790 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00790_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00790_s.txt", Encoding.UTF8);

    public Test00790() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{22,21,239,191,189,20,75,239,191,189,73,42})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers241e227901ca436085ffe7d7365e7182",
                        blob: "Blob83320c776ed4451ab68172bb3bb0bd26",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00784 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00784_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00784_s.txt", Encoding.UTF8);

    public Test00784() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,239,191,189,239,191,189,82,104,239,191,189,239,191,189,2,239,191,189,45})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers7fe7acc895bc48dcb2a9eaaeaba2ddac",
                        blob: "Blobd77d5ff2604247d18c0730a7de262de3",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00830 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00830_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00830_s.txt", Encoding.UTF8);

    public Test00830() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{62,84,239,191,189,239,191,189,56,90,239,191,189,239,191,189,239,191,189,91})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersef00da3559f6448e9ea1cc48438c091a",
                        blob: "Bloba12b5d5bd3ed433b9cde2e0fadcff8cb",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00878 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00878_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00878_s.txt", Encoding.UTF8);

    public Test00878() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{53,239,191,189,54,239,191,189,123,233,141,190})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers1339dfddf5e44242bee66b8f1b68969c",
                        blob: "Blob74f08d730b50464b80f312d0c699b937",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00824 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00824_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00824_s.txt", Encoding.UTF8);

    public Test00824() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{92,17,5,239,191,189,239,191,189,14,124,81,12})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers82b60a758e324f9084c8db5a8a081a07",
                        blob: "Blob17e6dab3880748748792626ca7778ca3",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00801 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00801_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00801_s.txt", Encoding.UTF8);

    public Test00801() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,60,239,191,189,201,145,4,43,4,28,66})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers9c68629eec1145ee947f760477b2f02a",
                        blob: "Bloba4401dd33f004bfcbdf16a6182aa6f00",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00729 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00729_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00729_s.txt", Encoding.UTF8);

    public Test00729() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{230,147,133,63,114,239,191,189,26,239,191,189,239,191,189,113})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers8d73c72d9bee4385941fe0d1e661fa8d",
                        blob: "Blob5f884f1f1417462d9fd1433d80cec9f2",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00777 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00777_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00777_s.txt", Encoding.UTF8);

    public Test00777() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,97,66,239,191,189,97,218,137,239,191,189,239,191,189,2})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersdd37614fcf1b4ccc85ad5df2360504e0",
                        blob: "Bloba5370bc0898447e7b13fc51bc70778de",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00626 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00626_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00626_s.txt", Encoding.UTF8);

    public Test00626() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{70,239,191,189,116,62,49,51,90,239,191,189,86})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers780d8608ea684a2eaf8693da42254d26",
                        blob: "Blobc0f6e0d4efc14bac8cfdb3816a953b00",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00656 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00656_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00656_s.txt", Encoding.UTF8);

    public Test00656() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{34,67,211,179,239,191,189,107,61,95,212,138})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers5997bdc39c794673931c19a7fdefb832",
                        blob: "Blob223a4e5514c84039b145c60eb5aec184",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00942 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00942_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00942_s.txt", Encoding.UTF8);

    public Test00942() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,96,239,191,189,239,191,189,239,191,189,239,191,189,217,174,239,191,189,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersa495df775cff474483b26014eb69d1b9",
                        blob: "Blob70272fe4f7ac4ae795c83b4c446d926e",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00802 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00802_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00802_s.txt", Encoding.UTF8);

    public Test00802() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{67,47,239,191,189,39,43,70,50,64,46,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers9c68629eec1145ee947f760477b2f02a",
                        blob: "Bloba4401dd33f004bfcbdf16a6182aa6f00",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00825 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00825_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00825_s.txt", Encoding.UTF8);

    public Test00825() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,11,239,191,189,239,191,189,93,95,63,239,191,189,15,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers82b60a758e324f9084c8db5a8a081a07",
                        blob: "Blob17e6dab3880748748792626ca7778ca3",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test01205 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\01205_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\01205_s.txt", Encoding.UTF8);

    public Test01205() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,113,239,191,189,25,32,82,239,191,189,239,191,189,84})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers55d2d6b0305a4fa2adc57f74340abfc6",
                        blob: "AppendBlob1ca02d3420174ea28aa544f1f8962c7f",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00847 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00847_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00847_s.txt", Encoding.UTF8);

    public Test00847() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{69,17,114,239,191,189,239,191,189,67,98,239,191,189,239,191,189,120})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersb90b0a3656a44e5c91bdcb4278b8bae7",
                        blob: "Blob32dfb480134344ecbcf69df181687b1c",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00759 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00759_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00759_s.txt", Encoding.UTF8);

    public Test00759() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{98,7,239,191,189,239,191,189,82,239,191,189,85,55})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers43c8994e8cf94e598a0520abdfb756e1",
                        blob: "Blobda596fcdae25473dac380d69b615661f",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00778 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00778_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00778_s.txt", Encoding.UTF8);

    public Test00778() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,239,191,189,239,191,189,60,108,26,11,62,124,100})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersdd37614fcf1b4ccc85ad5df2360504e0",
                        blob: "Bloba5370bc0898447e7b13fc51bc70778de",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00760 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00760_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00760_s.txt", Encoding.UTF8);

    public Test00760() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,79,239,191,189,109,85,239,191,189,239,191,189,239,191,189,12})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers43c8994e8cf94e598a0520abdfb756e1",
                        blob: "Blobda596fcdae25473dac380d69b615661f",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test01136 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\01136_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\01136_s.txt", Encoding.UTF8);

    public Test01136() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{50,239,191,189,31,239,191,189,239,191,189,15,239,191,189,91})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersf56ce0ea35bf4df9a429524e81f07586",
                        blob: "AppendBlobc1c2e10183f84d2e94cf2e6004ba6d66",
                        body: body,
                        leaseId: "853d759c-9aa7-43b0-8669-fa474eec2089",
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00944 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00944_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00944_s.txt", Encoding.UTF8);

    public Test00944() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{78,239,191,189,75,74,60,239,191,189,239,191,189,239,191,189,107,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersa495df775cff474483b26014eb69d1b9",
                        blob: "Blob70272fe4f7ac4ae795c83b4c446d926e",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00895 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00895_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00895_s.txt", Encoding.UTF8);

    public Test00895() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{69,239,191,189,31,40,239,191,189,55,21,239,191,189,86,86})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers504be5e4792646d4a19fd8e81066b7d0",
                        blob: "Blob021c8f139c024479969b11b1000f5c07",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00826 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00826_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00826_s.txt", Encoding.UTF8);

    public Test00826() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,12,239,191,189,239,191,189,15,239,191,189,37,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers82b60a758e324f9084c8db5a8a081a07",
                        blob: "Blob17e6dab3880748748792626ca7778ca3",
                        body: body,
                        ifNoneMatch: "\"0x8D439FDF658C50D\"",
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00841 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00841_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00841_s.txt", Encoding.UTF8);

    public Test00841() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,6,239,191,189,239,191,189,91,239,191,189,16,239,191,189,239,191,189,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers8529affb74fd45bc8fd4f60b2d231813",
                        blob: "Bloba7c459d6bc2046ffbcdf69f2790bcceb",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00896 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00896_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00896_s.txt", Encoding.UTF8);

    public Test00896() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,120,239,191,189,111,239,191,189,52,239,191,189,93,239,191,189,98})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers504be5e4792646d4a19fd8e81066b7d0",
                        blob: "Blob021c8f139c024479969b11b1000f5c07",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00807 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00807_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00807_s.txt", Encoding.UTF8);

    public Test00807() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,37,54,124,239,191,189,239,191,189,69,26,239,191,189,54})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containerse9ba9b4dd1974295bd822fd6e3ae78b9",
                        blob: "Blob2fb3da2726d641268cfe01b69acbafe7",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00673 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00673_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00673_s.txt", Encoding.UTF8);

    public Test00673() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{115,239,191,189,114,239,191,189,239,191,189,74,95,239,191,189,86,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers8bb56b052fc64dc8a3200d19428f8aca",
                        blob: "Blob7e0d3978de9a4a9eb71bf08506c3cc8c",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00966 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00966_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00966_s.txt", Encoding.UTF8);

    public Test00966() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,72,33,239,191,189,239,191,189,64,239,191,189,239,191,189,239,191,189,110})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers00632d8b71ae405d9cadf15dec9c2499",
                        blob: "Blobeef22c146a9745508531d66122a92387",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test01176 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\01176_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\01176_s.txt", Encoding.UTF8);

    public Test01176() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{0,239,191,189,45,34,57,5,110,36,110,114})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers9ee24cb73de4494a86035b877fb75a2a",
                        blob: "AppendBlobe98cd006cec94aa682fe293e0c2f5e18",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00842 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00842_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00842_s.txt", Encoding.UTF8);

    public Test00842() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{49,34,43,75,47,239,191,189,239,191,189,120,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers8529affb74fd45bc8fd4f60b2d231813",
                        blob: "Bloba7c459d6bc2046ffbcdf69f2790bcceb",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00808 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00808_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00808_s.txt", Encoding.UTF8);

    public Test00808() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{41,239,191,189,40,239,191,189,79,18,239,191,189,100,239,191,189,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containerse9ba9b4dd1974295bd822fd6e3ae78b9",
                        blob: "Blob2fb3da2726d641268cfe01b69acbafe7",
                        body: body,
                        ifMatches: "\"0x8D439FDF636218E\"",
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00690 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00690_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00690_s.txt", Encoding.UTF8);

    public Test00690() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,62,42,20,239,191,189,38,53,125,239,191,189,71})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersf5ee0fc624764f39951e6518adedf098",
                        blob: "Blobcde1444272784a5ea59b7768ee7665c2",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00747 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00747_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00747_s.txt", Encoding.UTF8);

    public Test00747() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,42,239,191,189,75,239,191,189,124,239,191,189,239,191,189,13,98})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containerse5997c46b1194ba0864b14af4d386747",
                        blob: "Blob2f9156f8a97b4fd4908b738168006089",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00818 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00818_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00818_s.txt", Encoding.UTF8);

    public Test00818() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,239,191,189,125,239,191,189,36,126,26,116,52,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers3fa113fee5174727bcb16f01864d815d",
                        blob: "Blob3f6730c49ef9413d99919471500a85f8",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00722 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00722_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00722_s.txt", Encoding.UTF8);

    public Test00722() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{96,239,191,189,58,239,191,189,239,191,189,5,38,43,62})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers126883a875804a4885607d9d17fe3f5f",
                        blob: "Blob2e7689ef47484c39915261933a9b5db0",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00748 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00748_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00748_s.txt", Encoding.UTF8);

    public Test00748() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,239,191,189,11,239,191,189,239,191,189,103,239,191,189,239,191,189,21,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containerse5997c46b1194ba0864b14af4d386747",
                        blob: "Blob2f9156f8a97b4fd4908b738168006089",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test01180 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\01180_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\01180_s.txt", Encoding.UTF8);

    public Test01180() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{78,75,124,239,191,189,120,239,191,189,239,191,189,95,96,84})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers9ee24cb73de4494a86035b877fb75a2a",
                        blob: "AppendBlobe98cd006cec94aa682fe293e0c2f5e18",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00749 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00749_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00749_s.txt", Encoding.UTF8);

    public Test00749() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{38,81,239,191,189,239,191,189,239,191,189,56,11,90,239,191,189,19})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containerse5997c46b1194ba0864b14af4d386747",
                        blob: "Blob2f9156f8a97b4fd4908b738168006089",
                        body: body,
                        appendPosition: 20,
                        ifMatches: "\"0x8D439FDF2C81DB6\"",
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test01146 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\01146_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\01146_s.txt", Encoding.UTF8);

    public Test01146() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,109,239,191,189,123,239,191,189,97,6,239,191,189,107,64})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersdfb625f2345e4fefba5baae14be3827d",
                        blob: "AppendBlob133a7026c7ff456db978bc3cc475b1eb",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00533 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00533_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00533_s.txt", Encoding.UTF8);

    public Test00533() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{118,27,239,191,189,50,239,191,189,102,239,191,189,239,191,189,104,55})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers443704b2c5a8444f86830afc6cf73db7",
                        blob: "Blob21c6da2328c24c7c8e34312cfe827950",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00695 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00695_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00695_s.txt", Encoding.UTF8);

    public Test00695() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{126,92,239,191,189,114,239,191,189,88,239,191,189,103,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers6abb38e889d34d27a5f040094696fae7",
                        blob: "Blob7eee08fe4b634bc48fdd06366c788474",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00858 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00858_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00858_s.txt", Encoding.UTF8);

    public Test00858() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,41,30,239,191,189,239,191,189,32,239,191,189,239,191,189,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers9b22dee41a4b42c88dd5977cde2998a5",
                        blob: "Blobc7b28372fd6942f9b2d114af50e0348a",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00696 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00696_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00696_s.txt", Encoding.UTF8);

    public Test00696() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,239,191,189,239,191,189,50,239,191,189,239,191,189,23,45,73,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers6abb38e889d34d27a5f040094696fae7",
                        blob: "Blob7eee08fe4b634bc48fdd06366c788474",
                        body: body,
                        maxSize: 20,
                        appendPosition: 10,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00933 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00933_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00933_s.txt", Encoding.UTF8);

    public Test00933() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,63,239,191,189,239,191,189,239,191,189,108,239,191,189,239,191,189,239,191,189,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers3148a5cb74724dc998ef459199a64bcd",
                        blob: "Blob56d91926cd3e48a9bf8c5bb07c5cbad3",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test02563 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02563_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02563_s.txt", Encoding.UTF8);

    public Test02563() : base(recordedRequest, recordedResponse, "accounts8d439fe92cb9e68")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,239,191,189,105,239,191,189,239,191,189,91,12,239,191,189,239,191,189,104})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "accounts8d439fe92cb9e68",
                        container: "containers3a40347921104c7fbdb34d16b5502408",
                        blob: "Blobff0d3691dee74dec977c74c4c1da5aed",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test02476 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02476_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02476_s.txt", Encoding.UTF8);

    public Test02476() : base(recordedRequest, recordedResponse, "accounts8d439fe91e8dde0")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,239,191,189,239,191,189,12,239,191,189,95,221,160,239,191,189,47})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "accounts8d439fe91e8dde0",
                        container: "containersa00d9dc9bc2941bd819a61b1e7c26227",
                        blob: "Blob847f7134423043688de511b22cabd862",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00753 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00753_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00753_s.txt", Encoding.UTF8);

    public Test00753() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,33,239,191,189,37,239,191,189,229,184,150,24,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers50de1d2ffe0c46458cd56669060a40b7",
                        blob: "Blob0f074b97e3a14f9db0cd0ec5b85e558b",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test02428 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02428_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02428_s.txt", Encoding.UTF8);

    public Test02428() : base(recordedRequest, recordedResponse, "accounts8d439fe917051a6")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,239,191,189,9,239,191,189,68,109,8,239,191,189,75,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "accounts8d439fe917051a6",
                        container: "containers839e6d9b136e46aa9639f43d74877399",
                        blob: "Blobc930d1f2d01c43488f2fa63fd72ea246",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test02540 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02540_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02540_s.txt", Encoding.UTF8);

    public Test02540() : base(recordedRequest, recordedResponse, "accounts8d439fe929858fa")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,239,191,189,239,191,189,114,13,97,239,191,189,239,191,189,239,191,189,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "accounts8d439fe929858fa",
                        container: "containersffd02da71fb04cdaad8dbb65408b9e61",
                        blob: "Blobbe5005b0194a48c7a4cf2a285ee48729",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test02683 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02683_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02683_s.txt", Encoding.UTF8);

    public Test02683() : base(recordedRequest, recordedResponse, "accounts8d439fe946701db")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,220,183,108,119,12,239,191,189,120,30})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "accounts8d439fe946701db",
                        container: "containers074ef12020544ad99c334822e617ff8f",
                        blob: "Blob1d45e2dc77bd4a1aa471e34a26090c7f",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test02636 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02636_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02636_s.txt", Encoding.UTF8);

    public Test02636() : base(recordedRequest, recordedResponse, "accounts8d439fe93c4a636")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,219,183,239,191,189,239,191,189,239,191,189,121,239,191,189,239,191,189,239,191,189,19,48,239,191,189,194,177,37,76,239,191,189,239,191,189,94,87,239,191,189,239,191,189,127,239,191,189,15,69,107,61,57,39,61,95,239,191,189,19,239,191,189,239,191,189,11,112,27,41,239,191,189,239,191,189,105,108,39,77,239,191,189,239,191,189,27,75,239,191,189,239,191,189,41,239,191,189,239,191,189,239,191,189,56,239,191,189,119,71,14,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,219,174,26,239,191,189,64,62,239,191,189,52,101,239,191,189,19,239,191,189,239,191,189,239,191,189,109,33,237,131,188,54,22,61,239,191,189,83,37,239,191,189,239,191,189,27,108,94,239,191,189,239,191,189,86,114,239,191,189,239,191,189,10,100,239,191,189,239,191,189,45,239,191,189,108,36,59,239,191,189,239,191,189,239,191,189,99,239,191,189,48,25,239,191,189,239,191,189,113,115,70,27,69,239,191,189,25,239,191,189,239,191,189,239,191,189,125,84,79,239,191,189,239,191,189,239,191,189,239,191,189,31,239,191,189,65,239,191,189,88,58,47,239,191,189,66,36,122,9,239,191,189,239,191,189,124,239,191,189,239,191,189,239,191,189,110,59,239,191,189,30,76,239,191,189,53,81,239,191,189,239,191,189,239,191,189,103,21,21,239,191,189,239,191,189,17,89,87,239,191,189,24,57,23,49,3,239,191,189,239,191,189,239,191,189,239,191,189,73,0,239,191,189,239,191,189,13,28,99,239,191,189,0,114,103,239,191,189,7,239,191,189,239,191,189,3,239,191,189,15,100,69,239,191,189,115,34,101,239,191,189,116,53,36,239,191,189,27,239,191,189,59,69,120,85,239,191,189,79,239,191,189,7,239,191,189,96,239,191,189,17,239,191,189,239,191,189,41,17,239,191,189,239,191,189,46,40,124,58,239,191,189,239,191,189,239,191,189,239,191,189,49,208,153,239,191,189,62,53,239,191,189,43,109,239,191,189,71,239,191,189,21,7,106,239,191,189,40,98,59,116,239,191,189,98,239,191,189,239,191,189,239,191,189,239,191,189,69,1,239,191,189,239,191,189,127,239,191,189,30,239,191,189,110,19,33,239,191,189,44,53,197,188,239,191,189,85,239,191,189,122,18,116,239,191,189,197,186,115,239,191,189,239,191,189,41,54,77,239,191,189,239,191,189,239,191,189,108,42,239,191,189,239,191,189,239,191,189,24,239,191,189,32,239,191,189,87,195,143,53,6,239,191,189,239,191,189,239,191,189,67,239,191,189,20,239,191,189,239,191,189,49,239,191,189,239,191,189,11,39,96,239,191,189,55,239,191,189,120,239,191,189,58,201,155,234,136,141,239,191,189,239,191,189,239,191,189,239,191,189,119,1,42,61,239,191,189,14,62,85,10,239,191,189,239,191,189,16,239,191,189,239,191,189,239,191,189,29,239,191,189,239,191,189,52,84,97,239,191,189,75,239,191,189,239,191,189,60,19,0,87,239,191,189,82,46,239,191,189,239,191,189,239,191,189,212,176,205,139,81,239,191,189,226,186,182,97,41,45,239,191,189,239,191,189,107,209,164,239,191,189,239,191,189,121,229,182,141,66,94,239,191,189,61,239,191,189,85,110,98,33,239,191,189,62,39,109,239,191,189,100,239,191,189,239,191,189,127,215,148,59,239,191,189,14,112,17,239,191,189,239,191,189,125,81,124,239,191,189,29,34,239,191,189,45,87,80,239,191,189,101,72,239,191,189,7,239,191,189,99,239,191,189,239,191,189,239,191,189,63,239,191,189,239,191,189,239,191,189,13,33,82,113,79,239,191,189,43,16,113,239,191,189,239,191,189,239,191,189,40,106,9,74,98,55,239,191,189,118,239,191,189,114,76,60,201,134,13,74,239,191,189,0,110,239,191,189,123,239,191,189,239,191,189,239,191,189,239,191,189,25,239,191,189,239,191,189,36,239,191,189,239,191,189,26,55,96,239,191,189,239,191,189,239,191,189,239,191,189,7,66})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "accounts8d439fe93c4a636",
                        container: "containers0aa37dbbd27f434ba511bc9a8834d61d",
                        blob: "Blob9e6effa4f6304d98b7f8ad380f9b1d0f",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00754 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00754_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00754_s.txt", Encoding.UTF8);

    public Test00754() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{61,239,191,189,28,74,59,34,239,191,189,239,191,189,64,13})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers50de1d2ffe0c46458cd56669060a40b7",
                        blob: "Blob0f074b97e3a14f9db0cd0ec5b85e558b",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00902 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00902_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00902_s.txt", Encoding.UTF8);

    public Test00902() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,239,191,189,239,191,189,52,239,191,189,239,191,189,69,32,108,117})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersc24466ebaa894995a82f48a9023650c8",
                        blob: "Blobf2fee9efb5a040a28df0fb5a333c1f0f",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test01185 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\01185_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\01185_s.txt", Encoding.UTF8);

    public Test01185() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{56,239,191,189,14,13,64,80,51,239,191,189,12,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers31d5372ea1f44d42aa9dbb50052a40e7",
                        blob: "AppendBlob704fb0dc4d7443b9b4546270a50321df",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test02646 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02646_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02646_s.txt", Encoding.UTF8);

    public Test02646() : base(recordedRequest, recordedResponse, "accounts8d439fe93e7499e")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,239,191,189,124,239,191,189,33,112,81,52,84,239,191,189,239,191,189,13,122,73,90,239,191,189,81,239,191,189,126,239,191,189,34,239,191,189,37,19,239,191,189,59,239,191,189,102,109,27,36,43,39,239,191,189,113,19,80,67,239,191,189,239,191,189,53,239,191,189,239,191,189,84,239,191,189,57,54,239,191,189,239,191,189,14,239,191,189,28,15,239,191,189,23,239,191,189,105,83,239,191,189,239,191,189,239,191,189,239,191,189,57,239,191,189,121,239,191,189,239,191,189,70,110,13,21,239,191,189,239,191,189,61,239,191,189,107,239,191,189,239,191,189,2,73,239,191,189,239,191,189,12,239,191,189,14,24,239,191,189,90,112,239,191,189,239,191,189,203,147,74,30,239,191,189,57,239,191,189,239,191,189,121,94,102,21,0,239,191,189,32,127,239,191,189,104,56,239,191,189,118,239,191,189,49,239,191,189,44,239,191,189,106,239,191,189,239,191,189,125,214,135,29,74,104,69,31,4,49,239,191,189,17,239,191,189,239,191,189,82,239,191,189,12,10,239,191,189,17,239,191,189,55,61,121,239,191,189,239,191,189,24,64,125,68,112,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,56,239,191,189,58,239,191,189,100,7,239,191,189,101,90,239,191,189,239,191,189,8,32,239,191,189,124,52,230,140,158,74,239,191,189,98,123,44,222,135,239,191,189,115,20,7,10,239,191,189,71,41,239,191,189,54,94,122,239,191,189,48,119,20,239,191,189,49,57,55,92,89,239,191,189,200,155,84,239,191,189,67,62,239,191,189,60,13,239,191,189,239,191,189,26,82,80,82,239,191,189,29,239,191,189,239,191,189,24,70,239,191,189,107,239,191,189,110,211,144,239,191,189,74,239,191,189,42,239,191,189,127,75,108,239,191,189,239,191,189,4,239,191,189,239,191,189,239,191,189,80,194,176,21,36,239,191,189,59,239,191,189,28,118,102,65,239,191,189,239,191,189,47,84,239,191,189,112,239,191,189,1,239,191,189,26,17,239,191,189,239,191,189,239,191,189,4,239,191,189,239,191,189,78,239,191,189,11,28,76,239,191,189,239,191,189,79,88,239,191,189,205,152,239,191,189,239,191,189,48,239,191,189,81,239,191,189,90,60,97,75,239,191,189,61,239,191,189,8,53,239,191,189,239,191,189,239,191,189,81,239,191,189,85,239,191,189,206,184,91,36,97,107,239,191,189,5,43,239,191,189,239,191,189,105,38,68,239,191,189,239,191,189,54,1,239,191,189,239,191,189,239,191,189,2,41,239,191,189,34,67,81,239,191,189,82,239,191,189,92,14,67,70,8,120,105,45,112,239,191,189,91,31,239,191,189,93,239,191,189,239,191,189,239,191,189,239,191,189,14,87,80,19,239,191,189,239,191,189,203,143,239,191,189,1,30,26,239,191,189,239,191,189,97,101,239,191,189,37,239,191,189,59,104,239,191,189,8,239,191,189,239,191,189,239,191,189,62,239,191,189,87,111,239,191,189,97,95,38,67,114,11,239,191,189,239,191,189,92,61,239,191,189,239,191,189,44,82,239,191,189,38,239,191,189,239,191,189,108,239,191,189,106,1,239,191,189,104,239,191,189,78,239,191,189,88,239,191,189,239,191,189,239,191,189,56,30,111,239,191,189,239,191,189,104,112,239,191,189,89,214,143,239,191,189,239,191,189,127,239,191,189,239,191,189,62,239,191,189,204,150,37,239,191,189,239,191,189,39,96,239,191,189,239,191,189,239,191,189,35,76,239,191,189,221,176,85,239,191,189,239,191,189,239,191,189,239,191,189,26,239,191,189,56,239,191,189,19,239,191,189,239,191,189,124,239,191,189,239,191,189,239,191,189,114,239,191,189,113,239,191,189,20,239,191,189,77,58,71,92,16,239,191,189,239,191,189,239,191,189,13,51,239,191,189,211,169,239,191,189,239,191,189,31,239,191,189,239,191,189,15,93,86,239,191,189,46,75,239,191,189,239,191,189,239,191,189,217,177,239,191,189,49})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "accounts8d439fe93e7499e",
                        container: "containers84033c7a6d144958bf617b4ec1e7630c",
                        blob: "Blobc0e32c363e2647f0a8e9864dd23782a0",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test02400 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02400_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02400_s.txt", Encoding.UTF8);

    public Test02400() : base(recordedRequest, recordedResponse, "accounts8d439fe91308911")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{67,86,239,191,189,49,239,191,189,239,191,189,239,191,189,239,191,189,80,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "accounts8d439fe91308911",
                        container: "containers67e7ae281d234a72a1d306644d915ae3",
                        blob: "Blob2132d8f8de5a460ca175c59ee3f4959d",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test02582 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02582_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02582_s.txt", Encoding.UTF8);

    public Test02582() : base(recordedRequest, recordedResponse, "accounts8d439fe92fe95a0")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,25,126,239,191,189,120,94,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "accounts8d439fe92fe95a0",
                        container: "containersbbf824bc61f64800b71e218153209e3e",
                        blob: "Blob4e1fdbde1e7d4948a0c5d4e661883999",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test02466 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02466_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02466_s.txt", Encoding.UTF8);

    public Test02466() : base(recordedRequest, recordedResponse, "accounts8d439fe91d0e8e5")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,0,110,239,191,189,197,179,239,191,189,239,191,189,104,20})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "accounts8d439fe91d0e8e5",
                        container: "containersbc47122b98ff466e8468caaf27f45bb9",
                        blob: "Blob763456a5d5ef4e0aabc328b924c0fe10",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test02504 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02504_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02504_s.txt", Encoding.UTF8);

    public Test02504() : base(recordedRequest, recordedResponse, "accounts8d439fe9232dfda")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{7,217,153,15,239,191,189,97,119,37,26,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "accounts8d439fe9232dfda",
                        container: "containersa334a7cac5854b0db7f74517796b622a",
                        blob: "Bloba60d4bdddcd14478af9e78c74508ccf3",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00904 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00904_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00904_s.txt", Encoding.UTF8);

    public Test00904() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{30,239,191,189,100,239,191,189,99,239,191,189,239,191,189,239,191,189,15,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersc24466ebaa894995a82f48a9023650c8",
                        blob: "Blobf2fee9efb5a040a28df0fb5a333c1f0f",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test02592 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02592_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02592_s.txt", Encoding.UTF8);

    public Test02592() : base(recordedRequest, recordedResponse, "accounts8d439fe931db695")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,239,191,189,239,191,189,68,127,87,239,191,189,111,239,191,189,65})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "accounts8d439fe931db695",
                        container: "containersf4ed1ab2a7fd45a38f0f97904a9da3db",
                        blob: "Blob57a6c2daf16f44d090295a981eee2ee3",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test02543 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02543_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02543_s.txt", Encoding.UTF8);

    public Test02543() : base(recordedRequest, recordedResponse, "accounts8d439fe929858fa")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,127,105,26,239,191,189,56,239,191,189,239,191,189,239,191,189,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "accounts8d439fe929858fa",
                        container: "containersffd02da71fb04cdaad8dbb65408b9e61",
                        blob: "Blobbe5005b0194a48c7a4cf2a285ee48729",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test02860 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02860_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02860_s.txt", Encoding.UTF8);

    public Test02860() : base(recordedRequest, recordedResponse, "accounts8d439fe96c7b262")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,35,239,191,189,239,191,189,239,191,189,239,191,189,62,207,162})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "accounts8d439fe96c7b262",
                        container: "containers3584529997b04b3d87f1c9b0650c3638",
                        blob: "Blob6b32343c2ac54618b3f73e6840c25169",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test02718 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02718_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02718_s.txt", Encoding.UTF8);

    public Test02718() : base(recordedRequest, recordedResponse, "ardfepirv28d439fe94e644d")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,239,191,189,94,239,191,189,21,239,191,189,37,239,191,189,118})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "ardfepirv28d439fe94e644d",
                        container: "containers02f94c7054474a439aa33bfc71084ada",
                        blob: "Blobf8996222ab7c47fcb33cc21f304b0046",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test02514 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02514_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02514_s.txt", Encoding.UTF8);

    public Test02514() : base(recordedRequest, recordedResponse, "accounts8d439fe924d6cc8")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{107,98,50,239,191,189,239,191,189,84,239,191,189,34,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "accounts8d439fe924d6cc8",
                        container: "containers2f4809f92fef4fc389dcbd3153236a30",
                        blob: "Blobfdde60ebc6ff4d9e8a5e3a01c5e4f8cc",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test02832 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02832_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02832_s.txt", Encoding.UTF8);

    public Test02832() : base(recordedRequest, recordedResponse, "accounts8d439fe966d0e9c")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,3,239,191,189,239,191,189,115,72,239,191,189,59,219,147})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "accounts8d439fe966d0e9c",
                        container: "containersf87b0a5aed384093a3c51ae8e8944cfb",
                        blob: "Blob63d7f72c205d4e50b35b4a03efa93f29",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test02869 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02869_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02869_s.txt", Encoding.UTF8);

    public Test02869() : base(recordedRequest, recordedResponse, "accounts8d439fe96e6d376")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{119,11,95,10,22,46,239,191,189,64,78})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "accounts8d439fe96e6d376",
                        container: "containersf4010a7af669420aa6aa361aa47be9a1",
                        blob: "Blobc2ee834e208341f89a35d81418f2f605",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test02903 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02903_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02903_s.txt", Encoding.UTF8);

    public Test02903() : base(recordedRequest, recordedResponse, "accounts8d439fe975a0858")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{226,145,142,239,191,189,28,33,200,153,114,5})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "accounts8d439fe975a0858",
                        container: "containersb183f6b50dd84af8b7cd23be21881720",
                        blob: "Blobaa556cf6247a4da0a5730fe678067424",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test02784 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02784_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02784_s.txt", Encoding.UTF8);

    public Test02784() : base(recordedRequest, recordedResponse, "accounts8d439fe95cd9936")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,239,191,189,239,191,189,55,101,12,45,239,191,189,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "accounts8d439fe95cd9936",
                        container: "containers473499019eac416d977ea591cba1503b",
                        blob: "Blob735bdd44eaf64c7d81c65de33fac1ab0",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test02674 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02674_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02674_s.txt", Encoding.UTF8);

    public Test02674() : base(recordedRequest, recordedResponse, "accounts8d439fe944807f2")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{117,57,9,18,239,191,189,4,6,239,191,189,42,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "accounts8d439fe944807f2",
                        container: "containerse247e7330f6640c699263755a7a54015",
                        blob: "Blobd1072d3feb3c4a30b739e98bc70f88e8",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test02937 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02937_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02937_s.txt", Encoding.UTF8);

    public Test02937() : base(recordedRequest, recordedResponse, "accounts8d439fe97cbddd1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{105,239,191,189,25,239,191,189,239,191,189,99,239,191,189,239,191,189,107})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "accounts8d439fe97cbddd1",
                        container: "containers5bc7ea4815c24c4ab633b2a54f665641",
                        blob: "Blobc96763879876479c85c940808848b8bb",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test02756 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02756_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02756_s.txt", Encoding.UTF8);

    public Test02756() : base(recordedRequest, recordedResponse, "accounts8d439fe956783ad")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{95,239,191,189,62,59,29,239,191,189,239,191,189,79,117,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "accounts8d439fe956783ad",
                        container: "containersf7abd15030314716b2216aa6a13897af",
                        blob: "Blob164d942d067245f4a1d469641582c558",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test02560 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02560_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02560_s.txt", Encoding.UTF8);

    public Test02560() : base(recordedRequest, recordedResponse, "accounts8d439fe92cb9e68")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,239,191,189,105,239,191,189,239,191,189,91,12,239,191,189,239,191,189,104})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "accounts8d439fe92cb9e68",
                        container: "containers3a40347921104c7fbdb34d16b5502408",
                        blob: "Blobff0d3691dee74dec977c74c4c1da5aed",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test02708 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02708_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02708_s.txt", Encoding.UTF8);

    public Test02708() : base(recordedRequest, recordedResponse, "ardfepirv28d439fe94c3ef9")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{55,22,108,105,239,191,189,111,239,191,189,239,191,189,239,191,189,81})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "ardfepirv28d439fe94c3ef9",
                        container: "containersf87b19391b0f48a0af3f0217a4239523",
                        blob: "Blobb55bda62daad4ef296117585533d6bf1",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test02570 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02570_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02570_s.txt", Encoding.UTF8);

    public Test02570() : base(recordedRequest, recordedResponse, "accounts8d439fe92e6a0c9")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{113,23,25,239,191,189,34,104,16,239,191,189,72,1})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "accounts8d439fe92e6a0c9",
                        container: "containers8f247302356d40c8806731d2f1f6ccdb",
                        blob: "Blob6f40f00f42084046b04244f9c517b9c4",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test02438 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02438_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02438_s.txt", Encoding.UTF8);

    public Test02438() : base(recordedRequest, recordedResponse, "accounts8d439fe9187354f")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{23,97,239,191,189,75,23,1,11,239,191,189,239,191,189,87})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "accounts8d439fe9187354f",
                        container: "containers59166c1eba834cb3b7b7b17561538c0f",
                        blob: "Blob78822ae5a5be498fa1dd1948a94ee428",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test02573 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02573_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02573_s.txt", Encoding.UTF8);

    public Test02573() : base(recordedRequest, recordedResponse, "accounts8d439fe92e6a0c9")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{113,23,25,239,191,189,34,104,16,239,191,189,72,1})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "accounts8d439fe92e6a0c9",
                        container: "containers8f247302356d40c8806731d2f1f6ccdb",
                        blob: "Blob6f40f00f42084046b04244f9c517b9c4",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test02390 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02390_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02390_s.txt", Encoding.UTF8);

    public Test02390() : base(recordedRequest, recordedResponse, "accounts8d439fe91164a25")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,10,126,239,191,189,239,191,189,55,239,191,189,124,239,191,189,107})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "accounts8d439fe91164a25",
                        container: "containersaab888ea04fb4ee8af7aa0a1f7007378",
                        blob: "Blobdfb5cf7d1496470994f6eb12af7a6ccf",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test02822 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02822_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02822_s.txt", Encoding.UTF8);

    public Test02822() : base(recordedRequest, recordedResponse, "accounts8d439fe964e3bcb")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{6,46,239,191,189,119,239,191,189,9,29,239,191,189,239,191,189,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "accounts8d439fe964e3bcb",
                        container: "containers404fa5de1ce74f64a4513d864bcd4f82",
                        blob: "Blobacda5f4989304ccca6214e7d7b81480e",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test02894 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02894_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02894_s.txt", Encoding.UTF8);

    public Test02894() : base(recordedRequest, recordedResponse, "accounts8d439fe973d0a57")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,121,26,239,191,189,0,14,50,239,191,189,107,54})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "accounts8d439fe973d0a57",
                        container: "containersd9c677d557c1400cb10ba1d1071bf34f",
                        blob: "Blob43912d7c9d374a3f847e8285e8d691ef",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test02746 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02746_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02746_s.txt", Encoding.UTF8);

    public Test02746() : base(recordedRequest, recordedResponse, "accounts8d439fe95452e61")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,239,191,189,127,107,113,239,191,189,239,191,189,239,191,189,239,191,189,105})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "accounts8d439fe95452e61",
                        container: "containers7245d5bc0f1e42a6b8a3fe38814e1f3a",
                        blob: "Blob3507950014194bc6b58aa442404dc4bc",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test02550 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02550_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02550_s.txt", Encoding.UTF8);

    public Test02550() : base(recordedRequest, recordedResponse, "accounts8d439fe92b11157")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{2,239,191,189,239,191,189,239,191,189,204,179,239,191,189,40,123})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "accounts8d439fe92b11157",
                        container: "containers18b95412895e405c8f66704e8adccac6",
                        blob: "Blob84b7da004583406c9d7133b5ef6bd75b",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test02794 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02794_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02794_s.txt", Encoding.UTF8);

    public Test02794() : base(recordedRequest, recordedResponse, "accounts8d439fe95f0ffef")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{54,9,10,69,23,239,191,189,239,191,189,239,191,189,29,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "accounts8d439fe95f0ffef",
                        container: "containers388e452a74954fb1905345d589156918",
                        blob: "Blob4938831fdd114f21a3fe68e8b25249a0",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test02928 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02928_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02928_s.txt", Encoding.UTF8);

    public Test02928() : base(recordedRequest, recordedResponse, "accounts8d439fe97af550e")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,12,90,66,239,191,189,239,191,189,75,211,171})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "accounts8d439fe97af550e",
                        container: "containersa6b3db01f6e6487e8bdad8cf07ef7f86",
                        blob: "Blobe435383e1a6a4f0ba3578fc67a6ec1ac",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test02553 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02553_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\02553_s.txt", Encoding.UTF8);

    public Test02553() : base(recordedRequest, recordedResponse, "accounts8d439fe92b11157")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{126,239,191,189,239,191,189,95,239,191,189,54,239,191,189,93,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "accounts8d439fe92b11157",
                        container: "containers18b95412895e405c8f66704e8adccac6",
                        blob: "Blob84b7da004583406c9d7133b5ef6bd75b",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test05515 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\05515_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\05515_s.txt", Encoding.UTF8);

    public Test05515() : base(recordedRequest, recordedResponse, "accounts8d439ff1e86b791")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,95,239,191,189,94,36,239,191,189,71,239,191,189,126,97})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "accounts8d439ff1e86b791",
                        container: "containers76d0496ed6d9427c8f06337243e4904b",
                        blob: "Blob790c99335e8747fb928e5982866539ec",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test05532 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\05532_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\05532_s.txt", Encoding.UTF8);

    public Test05532() : base(recordedRequest, recordedResponse, "accounts8d439ff1eb73dc7")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{19,3,22,201,176,73,239,191,189,19,239,191,189,62})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "accounts8d439ff1eb73dc7",
                        container: "containers6e78eb79790345449b1de0f33bb35e45",
                        blob: "Blobe0a2f4f0d6b849be8ecb2b5b0547fa7b",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test05548 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\05548_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\05548_s.txt", Encoding.UTF8);

    public Test05548() : base(recordedRequest, recordedResponse, "accounts8d439ff1ee44197")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,17,9,239,191,189,7,62,19,239,191,189,103,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "accounts8d439ff1ee44197",
                        container: "containers201a743151a2464e8282965fa8ca8632",
                        blob: "Blob213affa62f03421985f98b0ee3ab18da",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test05612 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\05612_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\05612_s.txt", Encoding.UTF8);

    public Test05612() : base(recordedRequest, recordedResponse, "accounts8d439ff1f90fd8e")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,99,47,239,191,189,36,239,191,189,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "accounts8d439ff1f90fd8e",
                        container: "containers93ee973b052f475f9fe2466e75fb2739",
                        blob: "Blobed2386a659434de6886d3cdfa7a06d10",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test05550 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\05550_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\05550_s.txt", Encoding.UTF8);

    public Test05550() : base(recordedRequest, recordedResponse, "accounts8d439ff1ee44197")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,17,9,239,191,189,7,62,19,239,191,189,103,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "accounts8d439ff1ee44197",
                        container: "containers201a743151a2464e8282965fa8ca8632",
                        blob: "Blob213affa62f03421985f98b0ee3ab18da",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test05569 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\05569_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\05569_s.txt", Encoding.UTF8);

    public Test05569() : base(recordedRequest, recordedResponse, "accounts8d439ff1f0fe5bb")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{70,239,191,189,239,191,189,239,191,189,64,32,239,191,189,239,191,189,117,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "accounts8d439ff1f0fe5bb",
                        container: "containers256545ae773e4b17bdf2a2cada03fe88",
                        blob: "Bloba84ad9904b76418a965d5b45d2cb4a34",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test05586 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\05586_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\05586_s.txt", Encoding.UTF8);

    public Test05586() : base(recordedRequest, recordedResponse, "accounts8d439ff1f5098cb")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,239,191,189,34,40,94,88,239,191,189,197,134,93})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "accounts8d439ff1f5098cb",
                        container: "containers02702acedffa4e0db77889abc4423f55",
                        blob: "Blob0e2760d2c58a45aaa8f895b9e6081f85",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test05620 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\05620_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\05620_s.txt", Encoding.UTF8);

    public Test05620() : base(recordedRequest, recordedResponse, "accounts8d439ff1fa9dcf7")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,74,239,191,189,10,64,60,239,191,189,38,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "accounts8d439ff1fa9dcf7",
                        container: "containers63f60b120f494e7ca227d061e7f8d631",
                        blob: "Blobf02c8098e9ab4b5da4029ea8de36066b",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test05603 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\05603_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\05603_s.txt", Encoding.UTF8);

    public Test05603() : base(recordedRequest, recordedResponse, "ardfepirv28d439ff1f7cd92")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{82,239,191,189,63,47,239,191,189,239,191,189,118,52,239,191,189,105})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "ardfepirv28d439ff1f7cd92",
                        container: "containersd3b7267e3458457db2d5e5a6e633ccf1",
                        blob: "Blobd46bb570ccc24b5ca1baa8edd889f3a4",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test05524 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\05524_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\05524_s.txt", Encoding.UTF8);

    public Test05524() : base(recordedRequest, recordedResponse, "accounts8d439ff1e9ed3ad")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{53,105,74,239,191,189,239,191,189,67,239,191,189,30,239,191,189,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "accounts8d439ff1e9ed3ad",
                        container: "containersbccae8b69c594b6f9ca7d760fc41c2c4",
                        blob: "Blobb49808e8d932419998d5a9cc5f659b2d",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test05539 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\05539_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\05539_s.txt", Encoding.UTF8);

    public Test05539() : base(recordedRequest, recordedResponse, "accounts8d439ff1ece9678")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{25,97,239,191,189,114,239,191,189,98,53,239,191,189,239,191,189,2})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "accounts8d439ff1ece9678",
                        container: "containers49299d4e27974b83bd55c5585a72db51",
                        blob: "Blobc8ab143283f04d3f957b0628b6c721be",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test05721 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\05721_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\05721_s.txt", Encoding.UTF8);

    public Test05721() : base(recordedRequest, recordedResponse, "zrdfepirv28d439ff20c6727")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,239,191,189,49,59,127,239,191,189,239,191,189,81,80})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "zrdfepirv28d439ff20c6727",
                        container: "containers1840aa154baf4a8c96e615ea282a414b",
                        blob: "Blobb7f9a9cdbbfd43b0aae49b8e9686cbe4",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test05541 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\05541_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\05541_s.txt", Encoding.UTF8);

    public Test05541() : base(recordedRequest, recordedResponse, "accounts8d439ff1ece9678")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,108,196,173,239,191,189,239,191,189,88,28,85})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "accounts8d439ff1ece9678",
                        container: "containers49299d4e27974b83bd55c5585a72db51",
                        blob: "Blobc8ab143283f04d3f957b0628b6c721be",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test05594 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\05594_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\05594_s.txt", Encoding.UTF8);

    public Test05594() : base(recordedRequest, recordedResponse, "accounts8d439ff1f67552a")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,32,59,75,239,191,189,239,191,189,239,191,189,124,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "accounts8d439ff1f67552a",
                        container: "containers0fa978c2a78149d88de04f7a9d702fdb",
                        blob: "Blob055fe7aa05ad494caf2d19803b34d80e",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test05577 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\05577_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\05577_s.txt", Encoding.UTF8);

    public Test05577() : base(recordedRequest, recordedResponse, "accounts8d439ff1f2d802a")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,4,85,239,191,189,43,112,239,191,189,20,48,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "accounts8d439ff1f2d802a",
                        container: "containerscd2c624773f24bd6ad8ba8fd86f2a54d",
                        blob: "Blob526ce10ef0af407ca8cfd1d952954bde",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test05557 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\05557_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\05557_s.txt", Encoding.UTF8);

    public Test05557() : base(recordedRequest, recordedResponse, "accounts8d439ff1ef95071")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,67,239,191,189,239,191,189,239,191,189,239,191,189,125,67,13,38})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "accounts8d439ff1ef95071",
                        container: "containers55cefde42dae470197d4fd676d62c49e",
                        blob: "Blob4d2cf1e9257648aa87721b4778bc8476",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test05530 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\05530_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\05530_s.txt", Encoding.UTF8);

    public Test05530() : base(recordedRequest, recordedResponse, "accounts8d439ff1eb73dc7")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{110,46,68,38,39,3,2,239,191,189,239,191,189,33})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "accounts8d439ff1eb73dc7",
                        container: "containers6e78eb79790345449b1de0f33bb35e45",
                        blob: "Blobe0a2f4f0d6b849be8ecb2b5b0547fa7b",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test05559 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\05559_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\05559_s.txt", Encoding.UTF8);

    public Test05559() : base(recordedRequest, recordedResponse, "accounts8d439ff1ef95071")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,67,239,191,189,239,191,189,239,191,189,239,191,189,125,67,13,38})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "accounts8d439ff1ef95071",
                        container: "containers55cefde42dae470197d4fd676d62c49e",
                        blob: "Blob4d2cf1e9257648aa87721b4778bc8476",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test06827 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\06827_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\06827_s.txt", Encoding.UTF8);

    public Test06827() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{200,131,239,191,189,239,191,189,239,191,189,61,13,239,191,189,87,42})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers95832cd104524d5ab2bda671f8228ad8",
                        blob: "Blob4c0d37c0e32245e8bcffab19ea6a060f",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test06832 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\06832_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\06832_s.txt", Encoding.UTF8);

    public Test06832() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,47,121,95,239,191,189,126,239,191,189,18,239,191,189,91})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers2ff3a1af5b174e89b2d08da73a4b8f9f",
                        blob: "Blobc4e5307cf6ad41c7aa8a4a64681423a3",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test06833 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\06833_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\06833_s.txt", Encoding.UTF8);

    public Test06833() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{69,92,20,103,239,191,189,125,239,191,189,239,191,189,34})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers2ff3a1af5b174e89b2d08da73a4b8f9f",
                        blob: "Blobc4e5307cf6ad41c7aa8a4a64681423a3",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test06848 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\06848_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\06848_s.txt", Encoding.UTF8);

    public Test06848() : base(recordedRequest, recordedResponse, "accounts8d439ff6a23f0e1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{82,104,239,191,189,59,72,239,191,189,239,191,189,220,168,239,191,189,22,57,126,239,191,189,239,191,189,239,191,189,239,191,189,26,32,104,239,191,189,239,191,189,64,239,191,189,239,191,189,97,239,191,189,104,30,239,191,189,239,191,189,95,51,111,239,191,189,54,61,239,191,189,239,191,189,239,191,189,40,24,10,239,191,189,239,191,189,15,69,204,172,104,239,191,189,239,191,189,234,155,152,40,22,112,239,191,189,239,191,189,108,239,191,189,35,89,239,191,189,5,14,239,191,189,239,191,189,239,191,189,239,191,189,52,121,239,191,189,95,239,191,189,54,239,191,189,10,81,98,239,191,189,114,28,24,239,191,189,73,239,191,189,82,14,39,105,239,191,189,239,191,189,112,107,239,191,189,239,191,189,27,239,191,189,1,79,65,239,191,189,75,85,94,59,239,191,189,239,191,189,60,101,239,191,189,239,191,189,239,191,189,74,6,65,38,239,191,189,58,239,191,189,125,239,191,189,102,54,239,191,189,26,239,191,189,239,191,189,239,191,189,80,80,18,90,126,239,191,189,239,191,189,59,239,191,189,91,28,239,191,189,4,104,15,239,191,189,32,239,191,189,112,239,191,189,239,191,189,198,172,239,191,189,98,50,20,239,191,189,67,71,75,108,125,20,69,239,191,189,118,203,129,116,239,191,189,209,162,70,97,239,191,189,98,239,191,189,239,191,189,123,211,188,20,239,191,189,81,239,191,189,101,239,191,189,27,82,239,191,189,239,191,189,239,191,189,80,16,239,191,189,109,239,191,189,34,239,191,189,40,85,109,239,191,189,11,45,35,102,98,239,191,189,239,191,189,69,239,191,189,239,191,189,116,239,191,189,87,239,191,189,195,187,33,239,191,189,47,239,191,189,51,42,82,53,239,191,189,56,115,239,191,189,57,82,126,79,25,239,191,189,36,102,239,191,189,51,95,239,191,189,115,239,191,189,239,191,189,220,130,87,239,191,189,44,103,102,72,239,191,189,61,64,239,191,189,2,239,191,189,48,239,191,189,239,191,189,93,239,191,189,239,191,189,118,239,191,189,63,62,239,191,189,239,191,189,84,34,239,191,189,80,239,191,189,72,63,77,117,239,191,189,91,125,71,69,239,191,189,9,239,191,189,17,239,191,189,239,191,189,34,239,191,189,207,131,239,191,189,36,239,191,189,105,103,239,191,189,67,24,197,141,18,68,239,191,189,85,239,191,189,239,191,189,239,191,189,239,191,189,91,125,85,7,22,83,239,191,189,108,29,46,102,14,123,239,191,189,82,41,118,239,191,189,110,239,191,189,239,191,189,112,66,239,191,189,239,191,189,50,239,191,189,110,239,191,189,239,191,189,239,191,189,77,109,57,82,46,239,191,189,14,239,191,189,239,191,189,239,191,189,239,191,189,20,239,191,189,239,191,189,17,82,239,191,189,113,239,191,189,6,239,191,189,239,191,189,239,191,189,239,191,189,12,18,78,92,33,40,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,14,239,191,189,0,239,191,189,239,191,189,122,239,191,189,34,239,191,189,239,191,189,91,239,191,189,2,239,191,189,239,191,189,239,191,189,239,191,189,122,87,239,191,189,239,191,189,109,69,28,239,191,189,239,191,189,101,239,191,189,239,191,189,45,103,44,239,191,189,3,239,191,189,239,191,189,118,59,239,191,189,239,191,189,239,191,189,239,191,189,4,239,191,189,239,191,189,76,239,191,189,65,239,191,189,1,239,191,189,50,45,55,112,24,239,191,189,239,191,189,30,200,131,239,191,189,239,191,189,239,191,189,99,12,239,191,189,19,239,191,189,239,191,189,104,239,191,189,239,191,189,104,239,191,189,239,191,189,56,239,191,189,36,239,191,189,239,191,189,55,53,239,191,189,239,191,189,239,191,189,239,191,189,53,239,191,189,29,239,191,189,30,7,239,191,189,106,239,191,189,29,63,17,45,239,191,189,123,239,191,189,69,119,77,239,191,189,239,191,189,39,68,239,191,189,239,191,189,94,239,191,189,239,191,189,98,239,191,189,100,78,17})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "accounts8d439ff6a23f0e1",
                        container: "containers0bd2ff2655f1407d96c6f80c5886d7ab",
                        blob: "Blobee93764db23e40948772e48057391d54",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test06853 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\06853_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\06853_s.txt", Encoding.UTF8);

    public Test06853() : base(recordedRequest, recordedResponse, "accounts8d439ff6a33333b")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,124,239,191,189,239,191,189,239,191,189,30,127,239,191,189,239,191,189,112,239,191,189,3,13,83,55,239,191,189,239,191,189,107,1,8,239,191,189,239,191,189,239,191,189,0,239,191,189,104,239,191,189,66,27,239,191,189,107,239,191,189,81,239,191,189,239,191,189,239,191,189,104,125,116,239,191,189,239,191,189,239,191,189,239,191,189,53,92,105,239,191,189,19,49,239,191,189,118,239,191,189,239,191,189,239,191,189,239,191,189,8,239,191,189,41,239,191,189,239,191,189,103,212,168,4,239,191,189,81,239,191,189,239,191,189,75,23,87,239,191,189,79,48,239,191,189,17,239,191,189,112,239,191,189,239,191,189,47,239,191,189,6,239,191,189,46,239,191,189,122,5,239,191,189,239,191,189,62,199,130,81,239,191,189,52,239,191,189,76,11,239,191,189,15,239,191,189,25,239,191,189,239,191,189,54,239,191,189,239,191,189,239,191,189,239,191,189,32,239,191,189,239,191,189,239,191,189,55,239,191,189,15,239,191,189,239,191,189,65,239,191,189,103,34,24,39,10,239,191,189,54,239,191,189,55,126,101,80,239,191,189,102,209,132,109,239,191,189,20,239,191,189,30,239,191,189,213,132,15,239,191,189,25,15,239,191,189,202,145,116,108,239,191,189,97,239,191,189,105,95,44,239,191,189,112,62,239,191,189,239,191,189,84,102,25,239,191,189,25,29,239,191,189,239,191,189,239,191,189,109,103,122,76,239,191,189,24,239,191,189,239,191,189,38,21,109,239,191,189,239,191,189,239,191,189,91,5,239,191,189,27,13,239,191,189,106,99,239,191,189,45,51,48,239,191,189,106,72,239,191,189,117,40,239,191,189,239,191,189,239,191,189,34,239,191,189,239,191,189,71,239,191,189,239,191,189,73,41,81,239,191,189,99,239,191,189,239,191,189,239,191,189,62,1,239,191,189,239,191,189,24,9,239,191,189,76,24,99,111,27,239,191,189,47,239,191,189,69,28,239,191,189,239,191,189,57,30,47,70,239,191,189,38,239,191,189,26,239,191,189,239,191,189,126,239,191,189,37,239,191,189,125,239,191,189,115,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,113,215,138,44,25,239,191,189,11,239,191,189,101,239,191,189,239,191,189,239,191,189,15,239,191,189,239,191,189,239,191,189,116,239,191,189,239,191,189,111,239,191,189,239,191,189,73,111,28,119,44,239,191,189,66,36,241,158,131,157,239,191,189,239,191,189,119,0,44,239,191,189,239,191,189,103,239,191,189,38,208,168,239,191,189,239,191,189,11,100,5,239,191,189,42,239,191,189,218,141,27,15,239,191,189,93,89,86,64,239,191,189,239,191,189,41,114,239,191,189,239,191,189,51,239,191,189,239,163,159,239,191,189,47,239,191,189,72,76,239,191,189,116,239,191,189,54,239,191,189,239,191,189,239,191,189,88,239,191,189,239,191,189,96,127,103,94,239,191,189,119,239,191,189,39,239,191,189,63,239,191,189,54,239,191,189,239,191,189,239,191,189,103,22,38,239,191,189,69,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,108,31,239,191,189,239,191,189,19,239,191,189,239,191,189,239,191,189,127,239,191,189,239,191,189,239,191,189,239,191,189,39,34,8,239,191,189,9,239,191,189,239,191,189,239,191,189,8,93,88,213,172,239,191,189,95,79,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,11,112,239,191,189,29,43,239,191,189,105,239,191,189,100,36,209,133,82,99,35,239,191,189,239,191,189,239,191,189,28,57,70,99,239,191,189,39,239,191,189,102,4,109,239,191,189,239,191,189,7,239,191,189,4,239,191,189,28,239,191,189,97,239,191,189,239,191,189,239,191,189,47,239,191,189,239,191,189,56,239,191,189,80,90,104,60,239,191,189,239,191,189,239,191,189,82,239,191,189,239,191,189,239,191,189,127,51,239,191,189,239,191,189,239,191,189,73,121,29,239,191,189,100,71,113,64,35,239,191,189,76,9,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,12,239,191,189,48,239,191,189,65,36,103})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "accounts8d439ff6a33333b",
                        container: "containersed15f4ac31ae4bcbb1a78114117a7770",
                        blob: "Blobfaa7a2dca2224f13b9cfbbfad4d803a9",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test06820 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\06820_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\06820_s.txt", Encoding.UTF8);

    public Test06820() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{6,239,191,189,38,239,191,189,38,82,75,239,191,189,239,191,189,48})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers0be247666ad848e18d9ca32fa08e46a0",
                        blob: "Blob9f0516be634d49b5b2570ac29f0e763f",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test06821 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\06821_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\06821_s.txt", Encoding.UTF8);

    public Test06821() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{92,110,239,191,189,111,239,191,189,239,161,148,126,4})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers0be247666ad848e18d9ca32fa08e46a0",
                        blob: "Blob9f0516be634d49b5b2570ac29f0e763f",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21414 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21414_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21414_s.txt", Encoding.UTF8);

    public Test21414() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{104,5,1,239,191,189,109,239,191,189,239,191,189,112,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers98cc65957c4f48e99347da7107cb63ca",
                        blob: "Blob8e143eb8bbcc489eb7c7304a3000f5ad",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21415 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21415_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21415_s.txt", Encoding.UTF8);

    public Test21415() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{15,91,239,191,189,239,191,189,239,191,189,49,108,82,239,191,189,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers98cc65957c4f48e99347da7107cb63ca",
                        blob: "Blob8e143eb8bbcc489eb7c7304a3000f5ad",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test23163 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\23163_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\23163_s.txt", Encoding.UTF8);

    public Test23163() : base(recordedRequest, recordedResponse, "accounts8d43a04978b6f6b")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,239,191,189,33,239,191,189,6,239,191,189,239,191,189,54,41})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "accounts8d43a04978b6f6b",
                        container: "containers3b49311f769c47118fdeb05dc877024c",
                        blob: "AppendBlob51f1db0d1bfc45fda330481ce3d9e38c",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22347 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22347_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22347_s.txt", Encoding.UTF8);

    public Test22347() : base(recordedRequest, recordedResponse, "accounts8d43a0489613c7d")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{118,239,191,189,239,191,189,239,191,189,239,191,189,239,191,189,43,46,12,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "accounts8d43a0489613c7d",
                        container: "containers34f0312103cb43c8a087d037dd36dbb7",
                        blob: "AppendBlobc9788f3571664b70b0daf75bd8a4c6c2",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22351 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22351_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22351_s.txt", Encoding.UTF8);

    public Test22351() : base(recordedRequest, recordedResponse, "accounts8d43a04896eaa28")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{17,0,23,239,191,189,239,191,189,239,191,189,8,103,107,123})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "accounts8d43a04896eaa28",
                        container: "containers6d86be9341ce4f5591ef95a8e9bf2a9b",
                        blob: "AppendBlob351a58b302334f4bb659cdc91cf76a6c",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22355 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22355_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22355_s.txt", Encoding.UTF8);

    public Test22355() : base(recordedRequest, recordedResponse, "accounts8d43a04897d293f")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,19,108,239,191,189,239,191,189,53,77,239,191,189,31})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.AppendBlockWithHttpMessagesAsync(
                        accountName: "accounts8d43a04897d293f",
                        container: "containerse730154add5b42809d6807c4db11184e",
                        blob: "AppendBlob2b64a07d48164cf2b4bce4e9b4b65d6a",
                        body: body,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                
                
            }
            catch (CloudException)
            {
                throw; // expected success

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                throw; // expected success
            }
            catch (ArgumentException)
            {
                throw; // expected success
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*<*/throw ServerException/*></assertServerFail>*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// 

using Microsoft.Rest;
using System;
using System.Diagnostics;
using System.Linq;
using System.IO;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;
using Xunit;
using BlobStorageTest.Client;
using BlobStorageTest.Client.Models;
using BlobStorageTest.Tests;
using Microsoft.Rest.Azure;

//<dump disabled/>

public class Test00048 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00048_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00048_s.txt", Encoding.UTF8);

    public Test00048() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersd785b53c7d634e24900c727c037a79fa",
                        blob: "Blob66d41c33372046b48558e859fd749a73",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 0,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00046 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00046_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00046_s.txt", Encoding.UTF8);

    public Test00046() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersd785b53c7d634e24900c727c037a79fa",
                        blob: "Blob66d41c33372046b48558e859fd749a73",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 0,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00047 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00047_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00047_s.txt", Encoding.UTF8);

    public Test00047() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersd785b53c7d634e24900c727c037a79fa",
                        blob: "Blob66d41c33372046b48558e859fd749a73",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 0,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00049 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00049_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00049_s.txt", Encoding.UTF8);

    public Test00049() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersd785b53c7d634e24900c727c037a79fa",
                        blob: "Blob66d41c33372046b48558e859fd749a73",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 0,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00053 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00053_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00053_s.txt", Encoding.UTF8);

    public Test00053() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersac2168f25ba048caadf6281566cf9c6c",
                        blob: "Blob21b5f78d8ea64c4181f15273e9d5a236",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 0,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test001177 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\001177_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\001177_s.txt", Encoding.UTF8);

    public Test001177() : base(recordedRequest, recordedResponse, "xclientdev3")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "xclientdev3",
                        container: "testc9b2dfa23e9f845418de3e498815ee865",
                        blob: "blob1",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        xMsBlobContentLength: -1,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test001178 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\001178_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\001178_s.txt", Encoding.UTF8);

    public Test001178() : base(recordedRequest, recordedResponse, "xclientdev3")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "xclientdev3",
                        container: "testc9b2dfa23e9f845418de3e498815ee865",
                        blob: "blob1",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        xMsBlobContentLength: 1099511627777,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test001297 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\001297_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\001297_s.txt", Encoding.UTF8);

    public Test001297() : base(recordedRequest, recordedResponse, "xclientdev3")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "xclientdev3",
                        container: "testc7af05eb93fa04815a478675b009858ea",
                        blob: "pageblob",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test001340 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\001340_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\001340_s.txt", Encoding.UTF8);

    public Test001340() : base(recordedRequest, recordedResponse, "xclientdev3")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "xclientdev3",
                        container: "c80c3a938a0cb4e87bf57d4e36179c828",
                        blob: "n6db6705d2e2d4cc8ac92f60fbe996639",
                        blobType: "BlockBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "BlockBlob"),
                        body: body,
                        ifMatches: "abcd",
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test001607 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\001607_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\001607_s.txt", Encoding.UTF8);

    public Test001607() : base(recordedRequest, recordedResponse, "xclientdev3")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "xclientdev3",
                        container: "c910cbb1262aa45b6ba9d0b1acc4cbc67",
                        blob: "nee13efbb2cab48d2a20bf0de610c8738",
                        blobType: "BlockBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "BlockBlob"),
                        body: body,
                        ifMatches: "etag",
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00212 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00212_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00212_s.txt", Encoding.UTF8);

    public Test00212() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containerse07ea1015ed34fb4809566bee0890744",
                        blob: "Blob8ec1ea72223a41a6b5e7cc793802457d",
                        blobType: "BlockBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "BlockBlob"),
                        body: body,
                        timeout: 30,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00207 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00207_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00207_s.txt", Encoding.UTF8);

    public Test00207() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containerse07ea1015ed34fb4809566bee0890744",
                        blob: "Blob8ec1ea72223a41a6b5e7cc793802457d",
                        blobType: "BlockBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "BlockBlob"),
                        body: body,
                        timeout: 30,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00206 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00206_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00206_s.txt", Encoding.UTF8);

    public Test00206() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containerse07ea1015ed34fb4809566bee0890744",
                        blob: "Blob8ec1ea72223a41a6b5e7cc793802457d",
                        blobType: "BlockBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "BlockBlob"),
                        body: body,
                        timeout: 30,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00220 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00220_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00220_s.txt", Encoding.UTF8);

    public Test00220() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers0805c29bd73a4e59b8901f9ee40b2a99",
                        blob: "Blob40d81ed6a10045e69ad126e025971ac2",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 0,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00223 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00223_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00223_s.txt", Encoding.UTF8);

    public Test00223() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers0805c29bd73a4e59b8901f9ee40b2a99",
                        blob: "Blob40d81ed6a10045e69ad126e025971ac2",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 0,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00222 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00222_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00222_s.txt", Encoding.UTF8);

    public Test00222() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers0805c29bd73a4e59b8901f9ee40b2a99",
                        blob: "Blob40d81ed6a10045e69ad126e025971ac2",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 0,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00211 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00211_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00211_s.txt", Encoding.UTF8);

    public Test00211() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containerse07ea1015ed34fb4809566bee0890744",
                        blob: "Blob8ec1ea72223a41a6b5e7cc793802457d",
                        blobType: "BlockBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "BlockBlob"),
                        body: body,
                        timeout: 30,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00219 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00219_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00219_s.txt", Encoding.UTF8);

    public Test00219() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers0805c29bd73a4e59b8901f9ee40b2a99",
                        blob: "Blob40d81ed6a10045e69ad126e025971ac2",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 0,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00210 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00210_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00210_s.txt", Encoding.UTF8);

    public Test00210() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containerse07ea1015ed34fb4809566bee0890744",
                        blob: "Blob8ec1ea72223a41a6b5e7cc793802457d",
                        blobType: "BlockBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "BlockBlob"),
                        body: body,
                        timeout: 30,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00226 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00226_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00226_s.txt", Encoding.UTF8);

    public Test00226() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers0805c29bd73a4e59b8901f9ee40b2a99",
                        blob: "Blob40d81ed6a10045e69ad126e025971ac2",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 0,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00209 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00209_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00209_s.txt", Encoding.UTF8);

    public Test00209() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containerse07ea1015ed34fb4809566bee0890744",
                        blob: "Blob8ec1ea72223a41a6b5e7cc793802457d",
                        blobType: "BlockBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "BlockBlob"),
                        body: body,
                        timeout: 30,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00213 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00213_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00213_s.txt", Encoding.UTF8);

    public Test00213() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containerse07ea1015ed34fb4809566bee0890744",
                        blob: "Blob8ec1ea72223a41a6b5e7cc793802457d",
                        blobType: "BlockBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "BlockBlob"),
                        body: body,
                        timeout: 30,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00221 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00221_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00221_s.txt", Encoding.UTF8);

    public Test00221() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers0805c29bd73a4e59b8901f9ee40b2a99",
                        blob: "Blob40d81ed6a10045e69ad126e025971ac2",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 0,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00225 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00225_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00225_s.txt", Encoding.UTF8);

    public Test00225() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers0805c29bd73a4e59b8901f9ee40b2a99",
                        blob: "Blob40d81ed6a10045e69ad126e025971ac2",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 0,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00208 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00208_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00208_s.txt", Encoding.UTF8);

    public Test00208() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containerse07ea1015ed34fb4809566bee0890744",
                        blob: "Blob8ec1ea72223a41a6b5e7cc793802457d",
                        blobType: "BlockBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "BlockBlob"),
                        body: body,
                        timeout: 30,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00224 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00224_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00224_s.txt", Encoding.UTF8);

    public Test00224() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers0805c29bd73a4e59b8901f9ee40b2a99",
                        blob: "Blob40d81ed6a10045e69ad126e025971ac2",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 0,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00518 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00518_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00518_s.txt", Encoding.UTF8);

    public Test00518() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{122,239,191,189,98,106,53,90,105,95,219,145})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersc05037bcd2c5490299f736a0d003ffdc",
                        blob: "Blobd5176331feaf4d8f947893d7a834ad44",
                        blobType: "AppendBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "AppendBlob"),
                        body: body,
                        timeout: 30,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00540 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00540_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00540_s.txt", Encoding.UTF8);

    public Test00540() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersca1b9a6d051b496ab550ef0b279cb71c",
                        blob: "Blobf3342845a00b4cc0829cf728c5c1ee40",
                        blobType: "AppendBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "AppendBlob"),
                        body: body,
                        timeout: 30,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00573 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00573_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00573_s.txt", Encoding.UTF8);

    public Test00573() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,207,158,89,239,191,189,17,239,191,189,69,239,191,189})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containerscac7716e1c2d4447ae454c4d747d06da",
                        blob: "Blobf1fb9c41ccc1483fafc0c7fe50f8a1a7",
                        blobType: "BlockBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "BlockBlob"),
                        body: body,
                        timeout: 30,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00510 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00510_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00510_s.txt", Encoding.UTF8);

    public Test00510() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers23444087bc69438592c583d1a679c0a9",
                        blob: "testBlob",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 0,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00521 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00521_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00521_s.txt", Encoding.UTF8);

    public Test00521() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers2d6de41d206b44ba96034473f7a558d2",
                        blob: "Blobac508d45d6934756824b22ee55e6f9bc",
                        blobType: "AppendBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "AppendBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00553 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00553_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00553_s.txt", Encoding.UTF8);

    public Test00553() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers09de4071897643149fbf4a100820101e",
                        blob: "Blob8e2a29f758be41d5bf188815048bfdf9",
                        blobType: "AppendBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "AppendBlob"),
                        body: body,
                        timeout: 30,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test01107 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\01107_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\01107_s.txt", Encoding.UTF8);

    public Test01107() : base(recordedRequest, recordedResponse, "accounts8d439fe1030db9c")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d439fe1030db9c",
                        container: "containers29da31aaca254ec9a70e4f608f7b3657",
                        blob: "PageBlob1f7f9a5041ba43878e5477fefc2b3746",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1048576,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test01061 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\01061_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\01061_s.txt", Encoding.UTF8);

    public Test01061() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers7617aa4ecada4c32859dbb9ca3fda41f",
                        blob: "sasWithSi",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 0,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test00546 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00546_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\00546_s.txt", Encoding.UTF8);

    public Test00546() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers4342350d5e0e4dda93cb3498165d69fe",
                        blob: "Blob39e6a108c598491893259948c66798a4",
                        blobType: "AppendBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "AppendBlob"),
                        body: body,
                        timeout: 30,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test01069 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\01069_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\01069_s.txt", Encoding.UTF8);

    public Test01069() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers749ce3e28b6141408991f4844f13dc3e",
                        blob: "doubleExpiry",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 0,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test01065 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\01065_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\01065_s.txt", Encoding.UTF8);

    public Test01065() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersf210f21cf28941e8b9b579ecedbc3d62",
                        blob: "sasWithExpiredPolicy",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 0,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test01050 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\01050_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\01050_s.txt", Encoding.UTF8);

    public Test01050() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersd488ba5ba4434ac68ea6f131af529416",
                        blob: "testblob",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 0,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test01008 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\01008_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\01008_s.txt", Encoding.UTF8);

    public Test01008() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers8ee4aaaa4b664c2aa137d01083a2c9c5",
                        blob: "BlockBlob7e8a1ef4517749189182d38002fdf6d1",
                        blobType: "BlockBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "BlockBlob"),
                        body: body,
                        timeout: 30,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test03651 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\03651_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\03651_s.txt", Encoding.UTF8);

    public Test03651() : base(recordedRequest, recordedResponse, "accounts8d439fea03dca8d")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d439fea03dca8d",
                        container: "containersb1774f3bf8b8480d96cb489ecbc9d495",
                        blob: "PageBlob7482437690354ad8ad399d3e8f19d3b0",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test03812 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\03812_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\03812_s.txt", Encoding.UTF8);

    public Test03812() : base(recordedRequest, recordedResponse, "accounts8d439fea21b4079")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d439fea21b4079",
                        container: "containersffc108eb142f4c2f89b352aead086a9a",
                        blob: "Blob8b333fe125a8477597979c88a504fee5",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test03813 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\03813_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\03813_s.txt", Encoding.UTF8);

    public Test03813() : base(recordedRequest, recordedResponse, "accounts8d439fea21b4079")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d439fea21b4079",
                        container: "containersffc108eb142f4c2f89b352aead086a9a",
                        blob: "Blob8b333fe125a8477597979c88a504fee5",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test03814 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\03814_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\03814_s.txt", Encoding.UTF8);

    public Test03814() : base(recordedRequest, recordedResponse, "accounts8d439fea21b4079")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d439fea21b4079",
                        container: "containersffc108eb142f4c2f89b352aead086a9a",
                        blob: "Blob8b333fe125a8477597979c88a504fee5",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test03815 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\03815_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\03815_s.txt", Encoding.UTF8);

    public Test03815() : base(recordedRequest, recordedResponse, "accounts8d439fea21b4079")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d439fea21b4079",
                        container: "containersffc108eb142f4c2f89b352aead086a9a",
                        blob: "Blob8b333fe125a8477597979c88a504fee5",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test04182 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\04182_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\04182_s.txt", Encoding.UTF8);

    public Test04182() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containerse6c109f9343d4bbb9527c19e0e65dac4",
                        blob: "PageBlob860088e50ace490088a08e43ef91761b",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test04196 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\04196_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\04196_s.txt", Encoding.UTF8);

    public Test04196() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containerse6c109f9343d4bbb9527c19e0e65dac4",
                        blob: "PageBlobb0e8557c941043f6975faeda52a1d893",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        leaseId: "bb2f10ac-7824-44cf-abe2-86f9803a1c48",
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test03672 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\03672_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\03672_s.txt", Encoding.UTF8);

    public Test03672() : base(recordedRequest, recordedResponse, "accounts8d439fea07a85e8")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d439fea07a85e8",
                        container: "containers8191e25b06a746b1b20661258b777a2e",
                        blob: "PageBlob21b2c8922bf24abd85eb87316f3ebec5",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test04185 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\04185_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\04185_s.txt", Encoding.UTF8);

    public Test04185() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containerse6c109f9343d4bbb9527c19e0e65dac4",
                        blob: "PageBlob860088e50ace490088a08e43ef91761b",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        leaseId: "bfb8a160-8bf1-42f0-9d8d-ba09a960df3a",
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test03659 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\03659_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\03659_s.txt", Encoding.UTF8);

    public Test03659() : base(recordedRequest, recordedResponse, "accounts8d439fea05682dd")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d439fea05682dd",
                        container: "containers43a2953c39f9496fbf32c14fdfdd376a",
                        blob: "PageBlob424a31bbd6654f30bba64693f8121455",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test04216 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\04216_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\04216_s.txt", Encoding.UTF8);

    public Test04216() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersfb205ec10bb2405ab343d60ec9aff645",
                        blob: "Blob6584c18998f44abb8560e8d03aee341a",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        leaseId: "abc",
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test03664 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\03664_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\03664_s.txt", Encoding.UTF8);

    public Test03664() : base(recordedRequest, recordedResponse, "accounts8d439fea05682dd")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d439fea05682dd",
                        container: "containers43a2953c39f9496fbf32c14fdfdd376a",
                        blob: "PageBlob424a31bbd6654f30bba64693f8121455",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test03867 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\03867_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\03867_s.txt", Encoding.UTF8);

    public Test03867() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers25c12c0f5c4747fc93fc987125172c1e",
                        blob: "testPageBlob",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        ifMatches: "\"invalidETag\"",
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test04024 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\04024_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\04024_s.txt", Encoding.UTF8);

    public Test04024() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers9fc303a4a59c4bf28372a59ecebc465a",
                        blob: "PageBlobdc94e8057c11477a91724254470a606b",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        ifMatches: "\"0x8D439FEA3E35986\"",
                        ifNoneMatch: "\"0x8D439FEA3E35986\"",
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test03947 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\03947_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\03947_s.txt", Encoding.UTF8);

    public Test03947() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersa4bcb04a7c4d40e99f66414d935aee50",
                        blob: "PageBlob8035e0805c1d45bea8806dbe9bb65433",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        ifMatches: "\"0x8D439FEA3512A9F\",\"0x8D439FEA3512A9F\"",
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test03679 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\03679_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\03679_s.txt", Encoding.UTF8);

    public Test03679() : base(recordedRequest, recordedResponse, "accounts8d439fea08fbbbc")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d439fea08fbbbc",
                        container: "containersf6378b8e47e14abaa8e0fa006fbda2cb",
                        blob: "Blob61ddd08940fa4c6d8c78fbd72a1de613",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test03949 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\03949_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\03949_s.txt", Encoding.UTF8);

    public Test03949() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersa4bcb04a7c4d40e99f66414d935aee50",
                        blob: "PageBlob8035e0805c1d45bea8806dbe9bb65433",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        ifMatches: "\"0x8D439FEA3512A9F\",\"0x8D439FEA3512A9F\"",
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test03968 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\03968_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\03968_s.txt", Encoding.UTF8);

    public Test03968() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers0bbc5d2759ab45c68f2ecde32251e14a",
                        blob: "PageBlob60fafdc34caf4d86800f1efac3bd06c9",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        ifNoneMatch: "\"0x8D439FEA373F537\",\"0x8D439FEA373F537\"",
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test03850 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\03850_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\03850_s.txt", Encoding.UTF8);

    public Test03850() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersaf53192c60d64c0da9bf161d1cd9f086",
                        blob: "testPageBlob",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        ifMatches: "invalidETag",
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test04370 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\04370_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\04370_s.txt", Encoding.UTF8);

    public Test04370() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersafdc2a4be61c4d6d8b9c639f085a5c3d",
                        blob: "Blob84dc722192da483cb6269cb9e305be55",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test03921 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\03921_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\03921_s.txt", Encoding.UTF8);

    public Test03921() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers9a7313b5bdbf42d1b35d9746f93ed358",
                        blob: "PageBlob95e2b8e601b14317bf93160322062676",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        ifNoneMatch: "0x8D439FEA3207D59",
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test04174 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\04174_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\04174_s.txt", Encoding.UTF8);

    public Test04174() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containerse6c109f9343d4bbb9527c19e0e65dac4",
                        blob: "Blobf1ac703bac7e4466bb6364f29e59d08b",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        leaseId: "99999999-9999-9999-9999-999999999999",
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test03970 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\03970_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\03970_s.txt", Encoding.UTF8);

    public Test03970() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers0bbc5d2759ab45c68f2ecde32251e14a",
                        blob: "PageBlob60fafdc34caf4d86800f1efac3bd06c9",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        ifNoneMatch: "\"0x8D439FEA373F537\",\"0x8D439FEA373F537\"",
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test03886 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\03886_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\03886_s.txt", Encoding.UTF8);

    public Test03886() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersf7f492e6184a4d18979be5f1a565c013",
                        blob: "PageBlob016a78ac504d4c28ae1e7707faac1571",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        ifMatches: "\"0x8D439FEA2DB0F79",
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test04176 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\04176_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\04176_s.txt", Encoding.UTF8);

    public Test04176() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containerse6c109f9343d4bbb9527c19e0e65dac4",
                        blob: "PageBlob860088e50ace490088a08e43ef91761b",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        leaseId: "99999999-9999-9999-9999-999999999999",
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test03887 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\03887_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\03887_s.txt", Encoding.UTF8);

    public Test03887() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersf7f492e6184a4d18979be5f1a565c013",
                        blob: "PageBlob016a78ac504d4c28ae1e7707faac1571",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        ifMatches: "0x8D439FEA2DB0F79\"",
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19995 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19995_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19995_s.txt", Encoding.UTF8);

    public Test19995() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersc5d3e7c5509046d2aa3f8bb095571b82",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,48,48,51,57,50,84,243,180,143,136,84,84,49,48,48,48,51,57,51,84,243,180,143,137,84,84,49,48,48,48,51,57,52,84,243,180,143,138,84,84,49,48,48,48,51,57,53,84,243,180,143,139,84,84,49,48,48,48,51,57,54,84,243,180,143,140,84,84,49,48,48,48,51,57,55,84,243,180,143,141,84,84,49,48,48,48,51,57,56,84,243,180,143,142,84,84,49,48,48,48,51,57,57,84,243,180,143,143,84,84,49,48,48,48,52,48,48,84,243,180,143,144,84,84,49,48,48,48,52,48,49,84,243,180,143,145,84,84,49,48,48,48,52,48,50,84,243,180,143,146,84,84,49,48,48,48,52,48,51,84,243,180,143,147,84,84,49,48,48,48,52,48,52,84,243,180,143,148,84,84,49,48,48,48,52,48,53,84,243,180,143,149,84,84,49,48,48,48,52,48,54,84,243,180,143,150,84,84,49,48,48,48,52,48,55,84,243,180,143,151,84,84,49,48,48,48,52,48,56,84,243,180,143,152,84,84,49,48,48,48,52,48,57,84,243,180,143,153,84,84,49,48,48,48,52,49,48,84,243,180,143,154,84,84,49,48,48,48,52,49,49,84,243,180,143,155,84,84,49,48,48,48,52,49,50,84,243,180,143,156,84,84,49,48,48,48,52,49,51,84,243,180,143,157,84,84,49,48,48,48,52,49,52,84,243,180,143,158,84,84,49,48,48,48,52,49,53,84,243,180,143,159,84,84,49,48,48,48,52,49,54,84,243,180,143,160,84,84,49,48,48,48,52,49,55,84,243,180,143,161,84,84,49,48,48,48,52,49,56,84,243,180,143,162,84,84,49,48,48,48,52,49,57,84,243,180,143,163,84,84,49,48,48,48,52,50,48,84,243,180,143,164,84,84,49,48,48,48,52,50,49,84,243,180,143,165,84,84,49,48,48,48,52,50,50,84,243,180,143,166,84,84,49,48,48,48,52,50,51,84,243,180,143,167,84,84,49,48,48,48,52,50,52,84,243,180,143,168,84,84,49,48,48,48,52,50,53,84,243,180,143,169,84,84,49,48,48,48,52,50,54,84,243,180,143,170,84,84,49,48,48,48,52,50,55,84,243,180,143,171,84,84,49,48,48,48,52,50,56,84,243,180,143,172,84,84,49,48,48,48,52,50,57,84,243,180,143,173,84,84,49,48,48,48,52,51,48,84,243,180,143,174,84,84,49,48,48,48,52,51,49,84,243,180,143,175,84,84,49,48,48,48,52,51,50,84,243,180,143,176,84,84,49,48,48,48,52,51,51,84,243,180,143,177,84,84,49,48,48,48,52,51,52,84,243,180,143,178,84,84,49,48,48,48,52,51,53,84,243,180,143,179,84,84,49,48,48,48,52,51,54,84,243,180,143,180,84,84,49,48,48,48,52,51,55,84,243,180,143,181,84,84,49,48,48,48,52,51,56,84,243,180,143,182,84,84,49,48,48,48,52,51,57,84,243,180,143,183,84,84,49,48,48,48,52,52,48,84,243,180,143,184,84,84,49,48,48,48,52,52,49,84,243,180,143,185,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19804 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19804_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19804_s.txt", Encoding.UTF8);

    public Test19804() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers3d1fce2fe43b489ca49e5d4066014499",
                        blob: Encoding.UTF8.GetString(new byte[]{84,48,84,0,84,84,49,84,1,84,84,50,84,2,84,84,51,84,3,84,84,52,84,4,84,84,53,84,5,84,84,54,84,6,84,84,55,84,7,84,84,56,84,8,84,84,57,84,9,84,84,49,48,84,10,84,84,49,49,84,11,84,84,49,50,84,12,84,84,49,51,84,13,84,84,49,52,84,14,84,84,49,53,84,15,84,84,49,54,84,16,84,84,49,55,84,17,84,84,49,56,84,18,84,84,49,57,84,19,84,84,50,48,84,20,84,84,50,49,84,21,84,84,50,50,84,22,84,84,50,51,84,23,84,84,50,52,84,24,84,84,50,53,84,25,84,84,50,54,84,26,84,84,50,55,84,27,84,84,50,56,84,28,84,84,50,57,84,29,84,84,51,48,84,30,84,84,51,49,84,31,84,84,49,50,55,84,127,84,84,49,50,57,84,194,129,84,84,49,52,49,84,194,141,84,84,49,52,51,84,194,143,84,84,49,52,52,84,194,144,84,84,49,53,55,84,194,157,84,84,53,55,51,52,53,84,238,128,129,84,84,53,55,51,53,55,84,238,128,141,84,84,53,55,51,53,57,84,238,128,143,84,84,53,55,51,54,48,84,238,128,144,84,84,53,55,51,55,51,84,238,128,157,84,84,53,55,52,48,56,84,238,129,128,84,84,53,55,52,48,57,84,238,129,129,84,84,53,55,52,49,48,84,238,129,130,84,84,53,55,52,49,49,84,238,129,131,84,84,53,55,52,49,50,84,238,129,132,84,84,53,55,52,49,51,84,238,129,133,84,84,53,55,52,49,52,84,238,129,134,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19931 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19931_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19931_s.txt", Encoding.UTF8);

    public Test19931() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersbf5ecfbea5a24d8a8188936c9be6fa20",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,56,57,55,48,57,84,243,177,168,141,84,84,57,56,57,55,49,49,84,243,177,168,143,84,84,57,56,57,55,49,50,84,243,177,168,144,84,84,57,56,57,55,50,53,84,243,177,168,157,84,84,57,56,57,55,54,49,84,243,177,169,129,84,84,57,56,57,55,55,51,84,243,177,169,141,84,84,57,56,57,55,55,53,84,243,177,169,143,84,84,57,56,57,55,55,54,84,243,177,169,144,84,84,57,56,57,55,56,57,84,243,177,169,157,84,84,57,56,57,56,50,53,84,243,177,170,129,84,84,57,56,57,56,51,55,84,243,177,170,141,84,84,57,56,57,56,51,57,84,243,177,170,143,84,84,57,56,57,56,52,48,84,243,177,170,144,84,84,57,56,57,56,53,51,84,243,177,170,157,84,84,57,56,57,56,56,57,84,243,177,171,129,84,84,57,56,57,57,48,49,84,243,177,171,141,84,84,57,56,57,57,48,51,84,243,177,171,143,84,84,57,56,57,57,48,52,84,243,177,171,144,84,84,57,56,57,57,49,55,84,243,177,171,157,84,84,57,56,57,57,53,51,84,243,177,172,129,84,84,57,56,57,57,54,53,84,243,177,172,141,84,84,57,56,57,57,54,55,84,243,177,172,143,84,84,57,56,57,57,54,56,84,243,177,172,144,84,84,57,56,57,57,56,49,84,243,177,172,157,84,84,57,57,48,48,49,55,84,243,177,173,129,84,84,57,57,48,48,50,57,84,243,177,173,141,84,84,57,57,48,48,51,49,84,243,177,173,143,84,84,57,57,48,48,51,50,84,243,177,173,144,84,84,57,57,48,48,52,53,84,243,177,173,157,84,84,57,57,48,48,56,49,84,243,177,174,129,84,84,57,57,48,48,57,51,84,243,177,174,141,84,84,57,57,48,48,57,53,84,243,177,174,143,84,84,57,57,48,48,57,54,84,243,177,174,144,84,84,57,57,48,49,48,57,84,243,177,174,157,84,84,57,57,48,49,52,53,84,243,177,175,129,84,84,57,57,48,49,53,55,84,243,177,175,141,84,84,57,57,48,49,53,57,84,243,177,175,143,84,84,57,57,48,49,54,48,84,243,177,175,144,84,84,57,57,48,49,55,51,84,243,177,175,157,84,84,57,57,48,50,48,57,84,243,177,176,129,84,84,57,57,48,50,50,49,84,243,177,176,141,84,84,57,57,48,50,50,51,84,243,177,176,143,84,84,57,57,48,50,50,52,84,243,177,176,144,84,84,57,57,48,50,51,55,84,243,177,176,157,84,84,57,57,48,50,55,51,84,243,177,177,129,84,84,57,57,48,50,56,53,84,243,177,177,141,84,84,57,57,48,50,56,55,84,243,177,177,143,84,84,57,57,48,50,56,56,84,243,177,177,144,84,84,57,57,48,51,48,49,84,243,177,177,157,84,84,57,57,48,51,51,55,84,243,177,178,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20155 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20155_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20155_s.txt", Encoding.UTF8);

    public Test20155() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers4f3362aed9424bd2bfac6751ee820ab9",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,50,53,48,50,56,84,243,186,144,132,84,84,49,48,50,53,48,50,57,84,243,186,144,133,84,84,49,48,50,53,48,51,48,84,243,186,144,134,84,84,49,48,50,53,48,51,49,84,243,186,144,135,84,84,49,48,50,53,48,51,50,84,243,186,144,136,84,84,49,48,50,53,48,51,51,84,243,186,144,137,84,84,49,48,50,53,48,51,52,84,243,186,144,138,84,84,49,48,50,53,48,51,53,84,243,186,144,139,84,84,49,48,50,53,48,51,54,84,243,186,144,140,84,84,49,48,50,53,48,51,55,84,243,186,144,141,84,84,49,48,50,53,48,51,56,84,243,186,144,142,84,84,49,48,50,53,48,51,57,84,243,186,144,143,84,84,49,48,50,53,48,52,48,84,243,186,144,144,84,84,49,48,50,53,48,52,49,84,243,186,144,145,84,84,49,48,50,53,48,52,50,84,243,186,144,146,84,84,49,48,50,53,48,52,51,84,243,186,144,147,84,84,49,48,50,53,48,52,52,84,243,186,144,148,84,84,49,48,50,53,48,52,53,84,243,186,144,149,84,84,49,48,50,53,48,52,54,84,243,186,144,150,84,84,49,48,50,53,48,52,55,84,243,186,144,151,84,84,49,48,50,53,48,52,56,84,243,186,144,152,84,84,49,48,50,53,48,52,57,84,243,186,144,153,84,84,49,48,50,53,48,53,48,84,243,186,144,154,84,84,49,48,50,53,48,53,49,84,243,186,144,155,84,84,49,48,50,53,48,53,50,84,243,186,144,156,84,84,49,48,50,53,48,53,51,84,243,186,144,157,84,84,49,48,50,53,48,53,52,84,243,186,144,158,84,84,49,48,50,53,48,53,53,84,243,186,144,159,84,84,49,48,50,53,48,53,54,84,243,186,144,160,84,84,49,48,50,53,48,53,55,84,243,186,144,161,84,84,49,48,50,53,48,53,56,84,243,186,144,162,84,84,49,48,50,53,48,53,57,84,243,186,144,163,84,84,49,48,50,53,48,54,48,84,243,186,144,164,84,84,49,48,50,53,48,54,49,84,243,186,144,165,84,84,49,48,50,53,48,54,50,84,243,186,144,166,84,84,49,48,50,53,48,54,51,84,243,186,144,167,84,84,49,48,50,53,48,54,52,84,243,186,144,168,84,84,49,48,50,53,48,54,53,84,243,186,144,169,84,84,49,48,50,53,48,54,54,84,243,186,144,170,84,84,49,48,50,53,48,54,55,84,243,186,144,171,84,84,49,48,50,53,48,54,56,84,243,186,144,172,84,84,49,48,50,53,48,54,57,84,243,186,144,173,84,84,49,48,50,53,48,55,48,84,243,186,144,174,84,84,49,48,50,53,48,55,49,84,243,186,144,175,84,84,49,48,50,53,48,55,50,84,243,186,144,176,84,84,49,48,50,53,48,55,51,84,243,186,144,177,84,84,49,48,50,53,48,55,52,84,243,186,144,178,84,84,49,48,50,53,48,55,53,84,243,186,144,179,84,84,49,48,50,53,48,55,54,84,243,186,144,180,84,84,49,48,50,53,48,55,55,84,243,186,144,181,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20219 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20219_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20219_s.txt", Encoding.UTF8);

    public Test20219() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers2b6cdd6684eb4500abcaa682adc323b7",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,51,53,56,53,51,84,243,188,185,141,84,84,49,48,51,53,56,53,53,84,243,188,185,143,84,84,49,48,51,53,56,53,54,84,243,188,185,144,84,84,49,48,51,53,56,54,57,84,243,188,185,157,84,84,49,48,51,53,57,48,53,84,243,188,186,129,84,84,49,48,51,53,57,49,55,84,243,188,186,141,84,84,49,48,51,53,57,49,57,84,243,188,186,143,84,84,49,48,51,53,57,50,48,84,243,188,186,144,84,84,49,48,51,53,57,51,51,84,243,188,186,157,84,84,49,48,51,53,57,54,57,84,243,188,187,129,84,84,49,48,51,53,57,56,49,84,243,188,187,141,84,84,49,48,51,53,57,56,51,84,243,188,187,143,84,84,49,48,51,53,57,56,52,84,243,188,187,144,84,84,49,48,51,53,57,57,55,84,243,188,187,157,84,84,49,48,51,54,48,51,51,84,243,188,188,129,84,84,49,48,51,54,48,52,53,84,243,188,188,141,84,84,49,48,51,54,48,52,55,84,243,188,188,143,84,84,49,48,51,54,48,52,56,84,243,188,188,144,84,84,49,48,51,54,48,54,49,84,243,188,188,157,84,84,49,48,51,54,48,57,55,84,243,188,189,129,84,84,49,48,51,54,49,48,57,84,243,188,189,141,84,84,49,48,51,54,49,49,49,84,243,188,189,143,84,84,49,48,51,54,49,49,50,84,243,188,189,144,84,84,49,48,51,54,49,50,53,84,243,188,189,157,84,84,49,48,51,54,49,54,49,84,243,188,190,129,84,84,49,48,51,54,49,55,51,84,243,188,190,141,84,84,49,48,51,54,49,55,53,84,243,188,190,143,84,84,49,48,51,54,49,55,54,84,243,188,190,144,84,84,49,48,51,54,49,56,57,84,243,188,190,157,84,84,49,48,51,54,50,50,53,84,243,188,191,129,84,84,49,48,51,54,50,51,55,84,243,188,191,141,84,84,49,48,51,54,50,51,57,84,243,188,191,143,84,84,49,48,51,54,50,52,48,84,243,188,191,144,84,84,49,48,51,54,50,53,51,84,243,188,191,157,84,84,49,48,51,54,50,56,57,84,243,189,128,129,84,84,49,48,51,54,51,48,49,84,243,189,128,141,84,84,49,48,51,54,51,48,51,84,243,189,128,143,84,84,49,48,51,54,51,48,52,84,243,189,128,144,84,84,49,48,51,54,51,49,55,84,243,189,128,157,84,84,49,48,51,54,51,53,50,84,243,189,129,128,84,84,49,48,51,54,51,53,51,84,243,189,129,129,84,84,49,48,51,54,51,53,52,84,243,189,129,130,84,84,49,48,51,54,51,53,53,84,243,189,129,131,84,84,49,48,51,54,51,53,54,84,243,189,129,132,84,84,49,48,51,54,51,53,55,84,243,189,129,133,84,84,49,48,51,54,51,53,56,84,243,189,129,134,84,84,49,48,51,54,51,53,57,84,243,189,129,135,84,84,49,48,51,54,51,54,48,84,243,189,129,136,84,84,49,48,51,54,51,54,49,84,243,189,129,137,84,84,49,48,51,54,51,54,50,84,243,189,129,138,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19868 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19868_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19868_s.txt", Encoding.UTF8);

    public Test19868() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers7032abc4111d4702bce9d36696a0a648",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,49,56,53,52,55,84,243,160,144,147,84,84,57,49,56,53,52,56,84,243,160,144,148,84,84,57,49,56,53,52,57,84,243,160,144,149,84,84,57,49,56,53,53,48,84,243,160,144,150,84,84,57,49,56,53,53,49,84,243,160,144,151,84,84,57,49,56,53,53,50,84,243,160,144,152,84,84,57,49,56,53,53,51,84,243,160,144,153,84,84,57,49,56,53,53,52,84,243,160,144,154,84,84,57,49,56,53,53,53,84,243,160,144,155,84,84,57,49,56,53,53,54,84,243,160,144,156,84,84,57,49,56,53,53,55,84,243,160,144,157,84,84,57,49,56,53,53,56,84,243,160,144,158,84,84,57,49,56,53,53,57,84,243,160,144,159,84,84,57,49,56,53,54,48,84,243,160,144,160,84,84,57,49,56,53,54,49,84,243,160,144,161,84,84,57,49,56,53,54,50,84,243,160,144,162,84,84,57,49,56,53,54,51,84,243,160,144,163,84,84,57,49,56,53,54,52,84,243,160,144,164,84,84,57,49,56,53,54,53,84,243,160,144,165,84,84,57,49,56,53,54,54,84,243,160,144,166,84,84,57,49,56,53,54,55,84,243,160,144,167,84,84,57,49,56,53,54,56,84,243,160,144,168,84,84,57,49,56,53,54,57,84,243,160,144,169,84,84,57,49,56,53,55,48,84,243,160,144,170,84,84,57,49,56,53,55,49,84,243,160,144,171,84,84,57,49,56,53,55,50,84,243,160,144,172,84,84,57,49,56,53,55,51,84,243,160,144,173,84,84,57,49,56,53,55,52,84,243,160,144,174,84,84,57,49,56,53,55,53,84,243,160,144,175,84,84,57,49,56,53,55,54,84,243,160,144,176,84,84,57,49,56,53,55,55,84,243,160,144,177,84,84,57,49,56,53,55,56,84,243,160,144,178,84,84,57,49,56,53,55,57,84,243,160,144,179,84,84,57,49,56,53,56,48,84,243,160,144,180,84,84,57,49,56,53,56,49,84,243,160,144,181,84,84,57,49,56,53,56,50,84,243,160,144,182,84,84,57,49,56,53,56,51,84,243,160,144,183,84,84,57,49,56,53,56,52,84,243,160,144,184,84,84,57,49,56,53,56,53,84,243,160,144,185,84,84,57,49,56,53,56,54,84,243,160,144,186,84,84,57,49,56,53,56,55,84,243,160,144,187,84,84,57,49,56,53,56,56,84,243,160,144,188,84,84,57,49,56,53,56,57,84,243,160,144,189,84,84,57,49,56,53,57,48,84,243,160,144,190,84,84,57,49,56,53,57,49,84,243,160,144,191,84,84,57,49,56,53,57,51,84,243,160,145,129,84,84,57,49,56,54,48,53,84,243,160,145,141,84,84,57,49,56,54,48,55,84,243,160,145,143,84,84,57,49,56,54,48,56,84,243,160,145,144,84,84,57,49,56,54,50,49,84,243,160,145,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20411 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20411_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20411_s.txt", Encoding.UTF8);

    public Test20411() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers7f83ba854dc4459da9078f97f691d28c",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,52,54,55,56,84,244,129,159,150,84,84,49,48,53,52,54,55,57,84,244,129,159,151,84,84,49,48,53,52,54,56,48,84,244,129,159,152,84,84,49,48,53,52,54,56,49,84,244,129,159,153,84,84,49,48,53,52,54,56,50,84,244,129,159,154,84,84,49,48,53,52,54,56,51,84,244,129,159,155,84,84,49,48,53,52,54,56,52,84,244,129,159,156,84,84,49,48,53,52,54,56,53,84,244,129,159,157,84,84,49,48,53,52,54,56,54,84,244,129,159,158,84,84,49,48,53,52,54,56,55,84,244,129,159,159,84,84,49,48,53,52,54,56,56,84,244,129,159,160,84,84,49,48,53,52,54,56,57,84,244,129,159,161,84,84,49,48,53,52,54,57,48,84,244,129,159,162,84,84,49,48,53,52,54,57,49,84,244,129,159,163,84,84,49,48,53,52,54,57,50,84,244,129,159,164,84,84,49,48,53,52,54,57,51,84,244,129,159,165,84,84,49,48,53,52,54,57,52,84,244,129,159,166,84,84,49,48,53,52,54,57,53,84,244,129,159,167,84,84,49,48,53,52,54,57,54,84,244,129,159,168,84,84,49,48,53,52,54,57,55,84,244,129,159,169,84,84,49,48,53,52,54,57,56,84,244,129,159,170,84,84,49,48,53,52,54,57,57,84,244,129,159,171,84,84,49,48,53,52,55,48,48,84,244,129,159,172,84,84,49,48,53,52,55,48,49,84,244,129,159,173,84,84,49,48,53,52,55,48,50,84,244,129,159,174,84,84,49,48,53,52,55,48,51,84,244,129,159,175,84,84,49,48,53,52,55,48,52,84,244,129,159,176,84,84,49,48,53,52,55,48,53,84,244,129,159,177,84,84,49,48,53,52,55,48,54,84,244,129,159,178,84,84,49,48,53,52,55,48,55,84,244,129,159,179,84,84,49,48,53,52,55,48,56,84,244,129,159,180,84,84,49,48,53,52,55,48,57,84,244,129,159,181,84,84,49,48,53,52,55,49,48,84,244,129,159,182,84,84,49,48,53,52,55,49,49,84,244,129,159,183,84,84,49,48,53,52,55,49,50,84,244,129,159,184,84,84,49,48,53,52,55,49,51,84,244,129,159,185,84,84,49,48,53,52,55,49,52,84,244,129,159,186,84,84,49,48,53,52,55,49,53,84,244,129,159,187,84,84,49,48,53,52,55,49,54,84,244,129,159,188,84,84,49,48,53,52,55,49,55,84,244,129,159,189,84,84,49,48,53,52,55,49,56,84,244,129,159,190,84,84,49,48,53,52,55,49,57,84,244,129,159,191,84,84,49,48,53,52,55,50,48,84,244,129,160,128,84,84,49,48,53,52,55,50,49,84,244,129,160,129,84,84,49,48,53,52,55,50,50,84,244,129,160,130,84,84,49,48,53,52,55,50,51,84,244,129,160,131,84,84,49,48,53,52,55,50,52,84,244,129,160,132,84,84,49,48,53,52,55,50,53,84,244,129,160,133,84,84,49,48,53,52,55,50,54,84,244,129,160,134,84,84,49,48,53,52,55,50,55,84,244,129,160,135,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20507 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20507_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20507_s.txt", Encoding.UTF8);

    public Test20507() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers3bfa703d74a140e499ecce701b962b8c",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,55,55,52,53,84,244,130,143,145,84,84,49,48,53,55,55,52,54,84,244,130,143,146,84,84,49,48,53,55,55,52,55,84,244,130,143,147,84,84,49,48,53,55,55,52,56,84,244,130,143,148,84,84,49,48,53,55,55,52,57,84,244,130,143,149,84,84,49,48,53,55,55,53,48,84,244,130,143,150,84,84,49,48,53,55,55,53,49,84,244,130,143,151,84,84,49,48,53,55,55,53,50,84,244,130,143,152,84,84,49,48,53,55,55,53,51,84,244,130,143,153,84,84,49,48,53,55,55,53,52,84,244,130,143,154,84,84,49,48,53,55,55,53,53,84,244,130,143,155,84,84,49,48,53,55,55,53,54,84,244,130,143,156,84,84,49,48,53,55,55,53,55,84,244,130,143,157,84,84,49,48,53,55,55,53,56,84,244,130,143,158,84,84,49,48,53,55,55,53,57,84,244,130,143,159,84,84,49,48,53,55,55,54,48,84,244,130,143,160,84,84,49,48,53,55,55,54,49,84,244,130,143,161,84,84,49,48,53,55,55,54,50,84,244,130,143,162,84,84,49,48,53,55,55,54,51,84,244,130,143,163,84,84,49,48,53,55,55,54,52,84,244,130,143,164,84,84,49,48,53,55,55,54,53,84,244,130,143,165,84,84,49,48,53,55,55,54,54,84,244,130,143,166,84,84,49,48,53,55,55,54,55,84,244,130,143,167,84,84,49,48,53,55,55,54,56,84,244,130,143,168,84,84,49,48,53,55,55,54,57,84,244,130,143,169,84,84,49,48,53,55,55,55,48,84,244,130,143,170,84,84,49,48,53,55,55,55,49,84,244,130,143,171,84,84,49,48,53,55,55,55,50,84,244,130,143,172,84,84,49,48,53,55,55,55,51,84,244,130,143,173,84,84,49,48,53,55,55,55,52,84,244,130,143,174,84,84,49,48,53,55,55,55,53,84,244,130,143,175,84,84,49,48,53,55,55,55,54,84,244,130,143,176,84,84,49,48,53,55,55,55,55,84,244,130,143,177,84,84,49,48,53,55,55,55,56,84,244,130,143,178,84,84,49,48,53,55,55,55,57,84,244,130,143,179,84,84,49,48,53,55,55,56,48,84,244,130,143,180,84,84,49,48,53,55,55,56,49,84,244,130,143,181,84,84,49,48,53,55,55,56,50,84,244,130,143,182,84,84,49,48,53,55,55,56,51,84,244,130,143,183,84,84,49,48,53,55,55,56,52,84,244,130,143,184,84,84,49,48,53,55,55,56,53,84,244,130,143,185,84,84,49,48,53,55,55,56,54,84,244,130,143,186,84,84,49,48,53,55,55,56,55,84,244,130,143,187,84,84,49,48,53,55,55,56,56,84,244,130,143,188,84,84,49,48,53,55,55,56,57,84,244,130,143,189,84,84,49,48,53,55,55,57,48,84,244,130,143,190,84,84,49,48,53,55,55,57,49,84,244,130,143,191,84,84,49,48,53,55,55,57,50,84,244,130,144,128,84,84,49,48,53,55,55,57,51,84,244,130,144,129,84,84,49,48,53,55,55,57,52,84,244,130,144,130,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20475 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20475_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20475_s.txt", Encoding.UTF8);

    public Test20475() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersee5ddc6232b847869028904d3d06a0f3",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,54,50,50,56,84,244,129,183,164,84,84,49,48,53,54,50,50,57,84,244,129,183,165,84,84,49,48,53,54,50,51,48,84,244,129,183,166,84,84,49,48,53,54,50,51,49,84,244,129,183,167,84,84,49,48,53,54,50,51,50,84,244,129,183,168,84,84,49,48,53,54,50,51,51,84,244,129,183,169,84,84,49,48,53,54,50,51,52,84,244,129,183,170,84,84,49,48,53,54,50,51,53,84,244,129,183,171,84,84,49,48,53,54,50,51,54,84,244,129,183,172,84,84,49,48,53,54,50,51,55,84,244,129,183,173,84,84,49,48,53,54,50,51,56,84,244,129,183,174,84,84,49,48,53,54,50,51,57,84,244,129,183,175,84,84,49,48,53,54,50,52,48,84,244,129,183,176,84,84,49,48,53,54,50,52,49,84,244,129,183,177,84,84,49,48,53,54,50,52,50,84,244,129,183,178,84,84,49,48,53,54,50,52,51,84,244,129,183,179,84,84,49,48,53,54,50,52,52,84,244,129,183,180,84,84,49,48,53,54,50,52,53,84,244,129,183,181,84,84,49,48,53,54,50,52,54,84,244,129,183,182,84,84,49,48,53,54,50,52,55,84,244,129,183,183,84,84,49,48,53,54,50,52,56,84,244,129,183,184,84,84,49,48,53,54,50,52,57,84,244,129,183,185,84,84,49,48,53,54,50,53,48,84,244,129,183,186,84,84,49,48,53,54,50,53,49,84,244,129,183,187,84,84,49,48,53,54,50,53,50,84,244,129,183,188,84,84,49,48,53,54,50,53,51,84,244,129,183,189,84,84,49,48,53,54,50,53,52,84,244,129,183,190,84,84,49,48,53,54,50,53,53,84,244,129,183,191,84,84,49,48,53,54,50,53,54,84,244,129,184,128,84,84,49,48,53,54,50,53,55,84,244,129,184,129,84,84,49,48,53,54,50,53,56,84,244,129,184,130,84,84,49,48,53,54,50,53,57,84,244,129,184,131,84,84,49,48,53,54,50,54,48,84,244,129,184,132,84,84,49,48,53,54,50,54,49,84,244,129,184,133,84,84,49,48,53,54,50,54,50,84,244,129,184,134,84,84,49,48,53,54,50,54,51,84,244,129,184,135,84,84,49,48,53,54,50,54,52,84,244,129,184,136,84,84,49,48,53,54,50,54,53,84,244,129,184,137,84,84,49,48,53,54,50,54,54,84,244,129,184,138,84,84,49,48,53,54,50,54,55,84,244,129,184,139,84,84,49,48,53,54,50,54,56,84,244,129,184,140,84,84,49,48,53,54,50,54,57,84,244,129,184,141,84,84,49,48,53,54,50,55,48,84,244,129,184,142,84,84,49,48,53,54,50,55,49,84,244,129,184,143,84,84,49,48,53,54,50,55,50,84,244,129,184,144,84,84,49,48,53,54,50,55,51,84,244,129,184,145,84,84,49,48,53,54,50,55,52,84,244,129,184,146,84,84,49,48,53,54,50,55,53,84,244,129,184,147,84,84,49,48,53,54,50,55,54,84,244,129,184,148,84,84,49,48,53,54,50,55,55,84,244,129,184,149,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19521 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19521_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19521_s.txt", Encoding.UTF8);

    public Test19521() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers3ba88e4d66584c2eb5d0283251fb52a0",
                        blob: @"IsHPhxGcuWWtLyNDxoujLjcVRaLUeLkmJygEEkMxRnFhFWXWMCqozONYQmyHllxjmkjNRJzNbxSYevQuCoIbUvnukIoSmFLfpVuUmJFCDdMBvpuVWDEwcWPrxpdJVgaVlniIBvHtjFYrjlyvOTwjBPCTGDXxgwhWCqQIGlUavLNWyXHLqiuCkrUWkPBxXKMmYBosVpocyVnqCfUivLHyBflLWtYqjWClyaywjPqAtSDPDeTEuTCMCOksPdWbRyscSCrchYzfUHEjcWHraUwQTqijpGgGtPivZawAmrXWUXrvJBPsVeAxBbJcTImarsmFYJJCaHEixZwwznanqnlOOltxRTgeEwebklWzsNSOaSAbfMcgizkDHYqmQLkGaZdAvVLNQavdVXnwlRSErAwFMaUMukjgcLnAozgKBOPIDGijkuAytgPZdXoUAySgqPAJjnHmkIDcloCFskcAjknwvOXQKMJCwiRoGYAxmOOkcnooVjcPWSxFcEOUPrcYyBgCWOzTkfNUWCTIaivajtfdlMLBKfhvlpmbHlRHkIfrEciZkFugwCoEVCRKCxJExRjhPsApQnpbOoYIemREkBzjAhFETHEnybtntAKsEFPIMMqhdJgQgFTwSzgimvVJjCdmulPdbYzflrXnrYaKboGtHxVtTbFIjGYJjDmsuCoHFoLabtrOVLhvvjfxQVJASqveSOEnliQYzznSluRakrnYYdNzYpcYtopOtgHNoDdmvIvwwMLVDiPbCXFpAEPvFrfLJYZFmElhOBcPhQDLdHVKZOMWaSMkohgDdkmXnGizwiMBupHkBERyWUlvMDeUrBsgUYmxefXXYVNrBKblLcjkPhhJyrKjcOHvpggVDKFVguaAGuuBbtJOSIQmrcymUnvKOSBVdGhAWODUHgCDwJIiFsdgPueaLTAszQmntZYVLIrEFveKauqLfMEVpUFjcHoDNKVruOKXlmXxAYbTPTARcoNnLQyYTotEToquanPLjSasoHUQtmTIGXaZxhgeQmDwa",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 0,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20060 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20060_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20060_s.txt", Encoding.UTF8);

    public Test20060() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersb3c703c6e551430d9c914c24c3792dd5",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,48,57,56,54,57,84,243,182,163,141,84,84,49,48,48,57,56,55,49,84,243,182,163,143,84,84,49,48,48,57,56,55,50,84,243,182,163,144,84,84,49,48,48,57,56,56,53,84,243,182,163,157,84,84,49,48,48,57,57,50,49,84,243,182,164,129,84,84,49,48,48,57,57,51,51,84,243,182,164,141,84,84,49,48,48,57,57,51,53,84,243,182,164,143,84,84,49,48,48,57,57,51,54,84,243,182,164,144,84,84,49,48,48,57,57,52,57,84,243,182,164,157,84,84,49,48,48,57,57,56,53,84,243,182,165,129,84,84,49,48,48,57,57,57,55,84,243,182,165,141,84,84,49,48,48,57,57,57,57,84,243,182,165,143,84,84,49,48,49,48,48,48,48,84,243,182,165,144,84,84,49,48,49,48,48,49,51,84,243,182,165,157,84,84,49,48,49,48,48,52,57,84,243,182,166,129,84,84,49,48,49,48,48,54,49,84,243,182,166,141,84,84,49,48,49,48,48,54,51,84,243,182,166,143,84,84,49,48,49,48,48,54,52,84,243,182,166,144,84,84,49,48,49,48,48,55,55,84,243,182,166,157,84,84,49,48,49,48,49,49,51,84,243,182,167,129,84,84,49,48,49,48,49,50,53,84,243,182,167,141,84,84,49,48,49,48,49,50,55,84,243,182,167,143,84,84,49,48,49,48,49,50,56,84,243,182,167,144,84,84,49,48,49,48,49,52,49,84,243,182,167,157,84,84,49,48,49,48,49,55,55,84,243,182,168,129,84,84,49,48,49,48,49,56,57,84,243,182,168,141,84,84,49,48,49,48,49,57,49,84,243,182,168,143,84,84,49,48,49,48,49,57,50,84,243,182,168,144,84,84,49,48,49,48,50,48,53,84,243,182,168,157,84,84,49,48,49,48,50,52,49,84,243,182,169,129,84,84,49,48,49,48,50,53,51,84,243,182,169,141,84,84,49,48,49,48,50,53,53,84,243,182,169,143,84,84,49,48,49,48,50,53,54,84,243,182,169,144,84,84,49,48,49,48,50,54,57,84,243,182,169,157,84,84,49,48,49,48,51,48,53,84,243,182,170,129,84,84,49,48,49,48,51,49,55,84,243,182,170,141,84,84,49,48,49,48,51,49,57,84,243,182,170,143,84,84,49,48,49,48,51,50,48,84,243,182,170,144,84,84,49,48,49,48,51,51,51,84,243,182,170,157,84,84,49,48,49,48,51,54,57,84,243,182,171,129,84,84,49,48,49,48,51,56,49,84,243,182,171,141,84,84,49,48,49,48,51,56,51,84,243,182,171,143,84,84,49,48,49,48,51,56,52,84,243,182,171,144,84,84,49,48,49,48,51,57,55,84,243,182,171,157,84,84,49,48,49,48,52,51,51,84,243,182,172,129,84,84,49,48,49,48,52,52,53,84,243,182,172,141,84,84,49,48,49,48,52,52,55,84,243,182,172,143,84,84,49,48,49,48,52,52,56,84,243,182,172,144,84,84,49,48,49,48,52,54,49,84,243,182,172,157,84,84,49,48,49,48,52,57,55,84,243,182,173,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20092 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20092_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20092_s.txt", Encoding.UTF8);

    public Test20092() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersb3c703c6e551430d9c914c24c3792dd5",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,49,53,57,48,56,84,243,184,129,164,84,84,49,48,49,53,57,48,57,84,243,184,129,165,84,84,49,48,49,53,57,49,48,84,243,184,129,166,84,84,49,48,49,53,57,49,49,84,243,184,129,167,84,84,49,48,49,53,57,49,50,84,243,184,129,168,84,84,49,48,49,53,57,49,51,84,243,184,129,169,84,84,49,48,49,53,57,49,52,84,243,184,129,170,84,84,49,48,49,53,57,49,53,84,243,184,129,171,84,84,49,48,49,53,57,49,54,84,243,184,129,172,84,84,49,48,49,53,57,49,55,84,243,184,129,173,84,84,49,48,49,53,57,49,56,84,243,184,129,174,84,84,49,48,49,53,57,49,57,84,243,184,129,175,84,84,49,48,49,53,57,50,48,84,243,184,129,176,84,84,49,48,49,53,57,50,49,84,243,184,129,177,84,84,49,48,49,53,57,50,50,84,243,184,129,178,84,84,49,48,49,53,57,50,51,84,243,184,129,179,84,84,49,48,49,53,57,50,52,84,243,184,129,180,84,84,49,48,49,53,57,50,53,84,243,184,129,181,84,84,49,48,49,53,57,50,54,84,243,184,129,182,84,84,49,48,49,53,57,50,55,84,243,184,129,183,84,84,49,48,49,53,57,50,56,84,243,184,129,184,84,84,49,48,49,53,57,50,57,84,243,184,129,185,84,84,49,48,49,53,57,51,48,84,243,184,129,186,84,84,49,48,49,53,57,51,49,84,243,184,129,187,84,84,49,48,49,53,57,51,50,84,243,184,129,188,84,84,49,48,49,53,57,51,51,84,243,184,129,189,84,84,49,48,49,53,57,51,52,84,243,184,129,190,84,84,49,48,49,53,57,51,53,84,243,184,129,191,84,84,49,48,49,53,57,51,55,84,243,184,130,129,84,84,49,48,49,53,57,52,57,84,243,184,130,141,84,84,49,48,49,53,57,53,49,84,243,184,130,143,84,84,49,48,49,53,57,53,50,84,243,184,130,144,84,84,49,48,49,53,57,54,53,84,243,184,130,157,84,84,49,48,49,54,48,48,49,84,243,184,131,129,84,84,49,48,49,54,48,49,51,84,243,184,131,141,84,84,49,48,49,54,48,49,53,84,243,184,131,143,84,84,49,48,49,54,48,49,54,84,243,184,131,144,84,84,49,48,49,54,48,50,57,84,243,184,131,157,84,84,49,48,49,54,48,54,53,84,243,184,132,129,84,84,49,48,49,54,48,55,55,84,243,184,132,141,84,84,49,48,49,54,48,55,57,84,243,184,132,143,84,84,49,48,49,54,48,56,48,84,243,184,132,144,84,84,49,48,49,54,48,57,51,84,243,184,132,157,84,84,49,48,49,54,49,50,57,84,243,184,133,129,84,84,49,48,49,54,49,52,49,84,243,184,133,141,84,84,49,48,49,54,49,52,51,84,243,184,133,143,84,84,49,48,49,54,49,52,52,84,243,184,133,144,84,84,49,48,49,54,49,53,55,84,243,184,133,157,84,84,49,48,49,54,49,57,51,84,243,184,134,129,84,84,49,48,49,54,50,48,53,84,243,184,134,141,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20731 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20731_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20731_s.txt", Encoding.UTF8);

    public Test20731() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers0bb7ae45edef4594997d97499d26b519",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,57,50,54,55,51,84,244,138,177,129,84,84,49,48,57,50,54,56,53,84,244,138,177,141,84,84,49,48,57,50,54,56,55,84,244,138,177,143,84,84,49,48,57,50,54,56,56,84,244,138,177,144,84,84,49,48,57,50,55,48,49,84,244,138,177,157,84,84,49,48,57,50,55,51,55,84,244,138,178,129,84,84,49,48,57,50,55,52,57,84,244,138,178,141,84,84,49,48,57,50,55,53,49,84,244,138,178,143,84,84,49,48,57,50,55,53,50,84,244,138,178,144,84,84,49,48,57,50,55,54,53,84,244,138,178,157,84,84,49,48,57,50,56,48,49,84,244,138,179,129,84,84,49,48,57,50,56,49,51,84,244,138,179,141,84,84,49,48,57,50,56,49,53,84,244,138,179,143,84,84,49,48,57,50,56,49,54,84,244,138,179,144,84,84,49,48,57,50,56,50,57,84,244,138,179,157,84,84,49,48,57,50,56,54,53,84,244,138,180,129,84,84,49,48,57,50,56,55,55,84,244,138,180,141,84,84,49,48,57,50,56,55,57,84,244,138,180,143,84,84,49,48,57,50,56,56,48,84,244,138,180,144,84,84,49,48,57,50,56,57,51,84,244,138,180,157,84,84,49,48,57,50,57,50,57,84,244,138,181,129,84,84,49,48,57,50,57,52,49,84,244,138,181,141,84,84,49,48,57,50,57,52,51,84,244,138,181,143,84,84,49,48,57,50,57,52,52,84,244,138,181,144,84,84,49,48,57,50,57,53,55,84,244,138,181,157,84,84,49,48,57,50,57,57,51,84,244,138,182,129,84,84,49,48,57,51,48,48,53,84,244,138,182,141,84,84,49,48,57,51,48,48,55,84,244,138,182,143,84,84,49,48,57,51,48,48,56,84,244,138,182,144,84,84,49,48,57,51,48,50,49,84,244,138,182,157,84,84,49,48,57,51,48,53,55,84,244,138,183,129,84,84,49,48,57,51,48,54,57,84,244,138,183,141,84,84,49,48,57,51,48,55,49,84,244,138,183,143,84,84,49,48,57,51,48,55,50,84,244,138,183,144,84,84,49,48,57,51,48,56,53,84,244,138,183,157,84,84,49,48,57,51,49,50,49,84,244,138,184,129,84,84,49,48,57,51,49,51,51,84,244,138,184,141,84,84,49,48,57,51,49,51,53,84,244,138,184,143,84,84,49,48,57,51,49,51,54,84,244,138,184,144,84,84,49,48,57,51,49,52,57,84,244,138,184,157,84,84,49,48,57,51,49,56,53,84,244,138,185,129,84,84,49,48,57,51,49,57,55,84,244,138,185,141,84,84,49,48,57,51,49,57,57,84,244,138,185,143,84,84,49,48,57,51,50,48,48,84,244,138,185,144,84,84,49,48,57,51,50,49,51,84,244,138,185,157,84,84,49,48,57,51,50,52,57,84,244,138,186,129,84,84,49,48,57,51,50,54,49,84,244,138,186,141,84,84,49,48,57,51,50,54,51,84,244,138,186,143,84,84,49,48,57,51,50,54,52,84,244,138,186,144,84,84,49,48,57,51,50,55,55,84,244,138,186,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20667 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20667_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20667_s.txt", Encoding.UTF8);

    public Test20667() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers9df780a74f2549dda8f9f337dadb7946",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,56,50,51,51,49,84,244,136,143,155,84,84,49,48,56,50,51,51,50,84,244,136,143,156,84,84,49,48,56,50,51,51,51,84,244,136,143,157,84,84,49,48,56,50,51,51,52,84,244,136,143,158,84,84,49,48,56,50,51,51,53,84,244,136,143,159,84,84,49,48,56,50,51,51,54,84,244,136,143,160,84,84,49,48,56,50,51,51,55,84,244,136,143,161,84,84,49,48,56,50,51,51,56,84,244,136,143,162,84,84,49,48,56,50,51,51,57,84,244,136,143,163,84,84,49,48,56,50,51,52,48,84,244,136,143,164,84,84,49,48,56,50,51,52,49,84,244,136,143,165,84,84,49,48,56,50,51,52,50,84,244,136,143,166,84,84,49,48,56,50,51,52,51,84,244,136,143,167,84,84,49,48,56,50,51,52,52,84,244,136,143,168,84,84,49,48,56,50,51,52,53,84,244,136,143,169,84,84,49,48,56,50,51,52,54,84,244,136,143,170,84,84,49,48,56,50,51,52,55,84,244,136,143,171,84,84,49,48,56,50,51,52,56,84,244,136,143,172,84,84,49,48,56,50,51,52,57,84,244,136,143,173,84,84,49,48,56,50,51,53,48,84,244,136,143,174,84,84,49,48,56,50,51,53,49,84,244,136,143,175,84,84,49,48,56,50,51,53,50,84,244,136,143,176,84,84,49,48,56,50,51,53,51,84,244,136,143,177,84,84,49,48,56,50,51,53,52,84,244,136,143,178,84,84,49,48,56,50,51,53,53,84,244,136,143,179,84,84,49,48,56,50,51,53,54,84,244,136,143,180,84,84,49,48,56,50,51,53,55,84,244,136,143,181,84,84,49,48,56,50,51,53,56,84,244,136,143,182,84,84,49,48,56,50,51,53,57,84,244,136,143,183,84,84,49,48,56,50,51,54,48,84,244,136,143,184,84,84,49,48,56,50,51,54,49,84,244,136,143,185,84,84,49,48,56,50,51,54,50,84,244,136,143,186,84,84,49,48,56,50,51,54,51,84,244,136,143,187,84,84,49,48,56,50,51,54,52,84,244,136,143,188,84,84,49,48,56,50,51,54,53,84,244,136,143,189,84,84,49,48,56,50,51,54,54,84,244,136,143,190,84,84,49,48,56,50,51,54,55,84,244,136,143,191,84,84,49,48,56,50,51,54,56,84,244,136,144,128,84,84,49,48,56,50,51,54,57,84,244,136,144,129,84,84,49,48,56,50,51,55,48,84,244,136,144,130,84,84,49,48,56,50,51,55,49,84,244,136,144,131,84,84,49,48,56,50,51,55,50,84,244,136,144,132,84,84,49,48,56,50,51,55,51,84,244,136,144,133,84,84,49,48,56,50,51,55,52,84,244,136,144,134,84,84,49,48,56,50,51,55,53,84,244,136,144,135,84,84,49,48,56,50,51,55,54,84,244,136,144,136,84,84,49,48,56,50,51,55,55,84,244,136,144,137,84,84,49,48,56,50,51,55,56,84,244,136,144,138,84,84,49,48,56,50,51,55,57,84,244,136,144,139,84,84,49,48,56,50,51,56,48,84,244,136,144,140,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20540 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20540_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20540_s.txt", Encoding.UTF8);

    public Test20540() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers169b02be047c4c76acbb586fdc8886c6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,54,50,50,51,55,84,244,131,149,157,84,84,49,48,54,50,50,55,51,84,244,131,150,129,84,84,49,48,54,50,50,56,53,84,244,131,150,141,84,84,49,48,54,50,50,56,55,84,244,131,150,143,84,84,49,48,54,50,50,56,56,84,244,131,150,144,84,84,49,48,54,50,51,48,49,84,244,131,150,157,84,84,49,48,54,50,51,51,55,84,244,131,151,129,84,84,49,48,54,50,51,52,57,84,244,131,151,141,84,84,49,48,54,50,51,53,49,84,244,131,151,143,84,84,49,48,54,50,51,53,50,84,244,131,151,144,84,84,49,48,54,50,51,54,53,84,244,131,151,157,84,84,49,48,54,50,52,48,49,84,244,131,152,129,84,84,49,48,54,50,52,49,51,84,244,131,152,141,84,84,49,48,54,50,52,49,53,84,244,131,152,143,84,84,49,48,54,50,52,49,54,84,244,131,152,144,84,84,49,48,54,50,52,50,57,84,244,131,152,157,84,84,49,48,54,50,52,54,53,84,244,131,153,129,84,84,49,48,54,50,52,55,55,84,244,131,153,141,84,84,49,48,54,50,52,55,57,84,244,131,153,143,84,84,49,48,54,50,52,56,48,84,244,131,153,144,84,84,49,48,54,50,52,57,51,84,244,131,153,157,84,84,49,48,54,50,53,50,57,84,244,131,154,129,84,84,49,48,54,50,53,52,49,84,244,131,154,141,84,84,49,48,54,50,53,52,51,84,244,131,154,143,84,84,49,48,54,50,53,52,52,84,244,131,154,144,84,84,49,48,54,50,53,53,55,84,244,131,154,157,84,84,49,48,54,50,53,57,51,84,244,131,155,129,84,84,49,48,54,50,54,48,53,84,244,131,155,141,84,84,49,48,54,50,54,48,55,84,244,131,155,143,84,84,49,48,54,50,54,48,56,84,244,131,155,144,84,84,49,48,54,50,54,50,49,84,244,131,155,157,84,84,49,48,54,50,54,53,55,84,244,131,156,129,84,84,49,48,54,50,54,54,57,84,244,131,156,141,84,84,49,48,54,50,54,55,49,84,244,131,156,143,84,84,49,48,54,50,54,55,50,84,244,131,156,144,84,84,49,48,54,50,54,56,53,84,244,131,156,157,84,84,49,48,54,50,55,50,48,84,244,131,157,128,84,84,49,48,54,50,55,50,49,84,244,131,157,129,84,84,49,48,54,50,55,50,50,84,244,131,157,130,84,84,49,48,54,50,55,50,51,84,244,131,157,131,84,84,49,48,54,50,55,50,52,84,244,131,157,132,84,84,49,48,54,50,55,50,53,84,244,131,157,133,84,84,49,48,54,50,55,50,54,84,244,131,157,134,84,84,49,48,54,50,55,50,55,84,244,131,157,135,84,84,49,48,54,50,55,50,56,84,244,131,157,136,84,84,49,48,54,50,55,50,57,84,244,131,157,137,84,84,49,48,54,50,55,51,48,84,244,131,157,138,84,84,49,48,54,50,55,51,49,84,244,131,157,139,84,84,49,48,54,50,55,51,50,84,244,131,157,140,84,84,49,48,54,50,55,51,51,84,244,131,157,141,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20955 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20955_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20955_s.txt", Encoding.UTF8);

    public Test20955() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersdf87e0f5374149afa792ac52b484870e",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,53,55,54,57,84,244,141,189,169,84,84,49,49,48,53,55,55,48,84,244,141,189,170,84,84,49,49,48,53,55,55,49,84,244,141,189,171,84,84,49,49,48,53,55,55,50,84,244,141,189,172,84,84,49,49,48,53,55,55,51,84,244,141,189,173,84,84,49,49,48,53,55,55,52,84,244,141,189,174,84,84,49,49,48,53,55,55,53,84,244,141,189,175,84,84,49,49,48,53,55,55,54,84,244,141,189,176,84,84,49,49,48,53,55,55,55,84,244,141,189,177,84,84,49,49,48,53,55,55,56,84,244,141,189,178,84,84,49,49,48,53,55,55,57,84,244,141,189,179,84,84,49,49,48,53,55,56,48,84,244,141,189,180,84,84,49,49,48,53,55,56,49,84,244,141,189,181,84,84,49,49,48,53,55,56,50,84,244,141,189,182,84,84,49,49,48,53,55,56,51,84,244,141,189,183,84,84,49,49,48,53,55,56,52,84,244,141,189,184,84,84,49,49,48,53,55,56,53,84,244,141,189,185,84,84,49,49,48,53,55,56,54,84,244,141,189,186,84,84,49,49,48,53,55,56,55,84,244,141,189,187,84,84,49,49,48,53,55,56,56,84,244,141,189,188,84,84,49,49,48,53,55,56,57,84,244,141,189,189,84,84,49,49,48,53,55,57,48,84,244,141,189,190,84,84,49,49,48,53,55,57,49,84,244,141,189,191,84,84,49,49,48,53,55,57,50,84,244,141,190,128,84,84,49,49,48,53,55,57,51,84,244,141,190,129,84,84,49,49,48,53,55,57,52,84,244,141,190,130,84,84,49,49,48,53,55,57,53,84,244,141,190,131,84,84,49,49,48,53,55,57,54,84,244,141,190,132,84,84,49,49,48,53,55,57,55,84,244,141,190,133,84,84,49,49,48,53,55,57,56,84,244,141,190,134,84,84,49,49,48,53,55,57,57,84,244,141,190,135,84,84,49,49,48,53,56,48,48,84,244,141,190,136,84,84,49,49,48,53,56,48,49,84,244,141,190,137,84,84,49,49,48,53,56,48,50,84,244,141,190,138,84,84,49,49,48,53,56,48,51,84,244,141,190,139,84,84,49,49,48,53,56,48,52,84,244,141,190,140,84,84,49,49,48,53,56,48,53,84,244,141,190,141,84,84,49,49,48,53,56,48,54,84,244,141,190,142,84,84,49,49,48,53,56,48,55,84,244,141,190,143,84,84,49,49,48,53,56,48,56,84,244,141,190,144,84,84,49,49,48,53,56,48,57,84,244,141,190,145,84,84,49,49,48,53,56,49,48,84,244,141,190,146,84,84,49,49,48,53,56,49,49,84,244,141,190,147,84,84,49,49,48,53,56,49,50,84,244,141,190,148,84,84,49,49,48,53,56,49,51,84,244,141,190,149,84,84,49,49,48,53,56,49,52,84,244,141,190,150,84,84,49,49,48,53,56,49,53,84,244,141,190,151,84,84,49,49,48,53,56,49,54,84,244,141,190,152,84,84,49,49,48,53,56,49,55,84,244,141,190,153,84,84,49,49,48,53,56,49,56,84,244,141,190,154,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20413 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20413_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20413_s.txt", Encoding.UTF8);

    public Test20413() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers7f83ba854dc4459da9078f97f691d28c",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,52,55,50,56,84,244,129,160,136,84,84,49,48,53,52,55,50,57,84,244,129,160,137,84,84,49,48,53,52,55,51,48,84,244,129,160,138,84,84,49,48,53,52,55,51,49,84,244,129,160,139,84,84,49,48,53,52,55,51,50,84,244,129,160,140,84,84,49,48,53,52,55,51,51,84,244,129,160,141,84,84,49,48,53,52,55,51,52,84,244,129,160,142,84,84,49,48,53,52,55,51,53,84,244,129,160,143,84,84,49,48,53,52,55,51,54,84,244,129,160,144,84,84,49,48,53,52,55,51,55,84,244,129,160,145,84,84,49,48,53,52,55,51,56,84,244,129,160,146,84,84,49,48,53,52,55,51,57,84,244,129,160,147,84,84,49,48,53,52,55,52,48,84,244,129,160,148,84,84,49,48,53,52,55,52,49,84,244,129,160,149,84,84,49,48,53,52,55,52,50,84,244,129,160,150,84,84,49,48,53,52,55,52,51,84,244,129,160,151,84,84,49,48,53,52,55,52,52,84,244,129,160,152,84,84,49,48,53,52,55,52,53,84,244,129,160,153,84,84,49,48,53,52,55,52,54,84,244,129,160,154,84,84,49,48,53,52,55,52,55,84,244,129,160,155,84,84,49,48,53,52,55,52,56,84,244,129,160,156,84,84,49,48,53,52,55,52,57,84,244,129,160,157,84,84,49,48,53,52,55,53,48,84,244,129,160,158,84,84,49,48,53,52,55,53,49,84,244,129,160,159,84,84,49,48,53,52,55,53,50,84,244,129,160,160,84,84,49,48,53,52,55,53,51,84,244,129,160,161,84,84,49,48,53,52,55,53,52,84,244,129,160,162,84,84,49,48,53,52,55,53,53,84,244,129,160,163,84,84,49,48,53,52,55,53,54,84,244,129,160,164,84,84,49,48,53,52,55,53,55,84,244,129,160,165,84,84,49,48,53,52,55,53,56,84,244,129,160,166,84,84,49,48,53,52,55,53,57,84,244,129,160,167,84,84,49,48,53,52,55,54,48,84,244,129,160,168,84,84,49,48,53,52,55,54,49,84,244,129,160,169,84,84,49,48,53,52,55,54,50,84,244,129,160,170,84,84,49,48,53,52,55,54,51,84,244,129,160,171,84,84,49,48,53,52,55,54,52,84,244,129,160,172,84,84,49,48,53,52,55,54,53,84,244,129,160,173,84,84,49,48,53,52,55,54,54,84,244,129,160,174,84,84,49,48,53,52,55,54,55,84,244,129,160,175,84,84,49,48,53,52,55,54,56,84,244,129,160,176,84,84,49,48,53,52,55,54,57,84,244,129,160,177,84,84,49,48,53,52,55,55,48,84,244,129,160,178,84,84,49,48,53,52,55,55,49,84,244,129,160,179,84,84,49,48,53,52,55,55,50,84,244,129,160,180,84,84,49,48,53,52,55,55,51,84,244,129,160,181,84,84,49,48,53,52,55,55,52,84,244,129,160,182,84,84,49,48,53,52,55,55,53,84,244,129,160,183,84,84,49,48,53,52,55,55,54,84,244,129,160,184,84,84,49,48,53,52,55,55,55,84,244,129,160,185,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20763 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20763_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20763_s.txt", Encoding.UTF8);

    public Test20763() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersc5ae22b09f3f4a3eaff829adc5876203",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,57,55,56,52,55,84,244,140,129,183,84,84,49,48,57,55,56,52,56,84,244,140,129,184,84,84,49,48,57,55,56,52,57,84,244,140,129,185,84,84,49,48,57,55,56,53,48,84,244,140,129,186,84,84,49,48,57,55,56,53,49,84,244,140,129,187,84,84,49,48,57,55,56,53,50,84,244,140,129,188,84,84,49,48,57,55,56,53,51,84,244,140,129,189,84,84,49,48,57,55,56,53,52,84,244,140,129,190,84,84,49,48,57,55,56,53,53,84,244,140,129,191,84,84,49,48,57,55,56,53,55,84,244,140,130,129,84,84,49,48,57,55,56,54,57,84,244,140,130,141,84,84,49,48,57,55,56,55,49,84,244,140,130,143,84,84,49,48,57,55,56,55,50,84,244,140,130,144,84,84,49,48,57,55,56,56,53,84,244,140,130,157,84,84,49,48,57,55,57,50,49,84,244,140,131,129,84,84,49,48,57,55,57,51,51,84,244,140,131,141,84,84,49,48,57,55,57,51,53,84,244,140,131,143,84,84,49,48,57,55,57,51,54,84,244,140,131,144,84,84,49,48,57,55,57,52,57,84,244,140,131,157,84,84,49,48,57,55,57,56,53,84,244,140,132,129,84,84,49,48,57,55,57,57,55,84,244,140,132,141,84,84,49,48,57,55,57,57,57,84,244,140,132,143,84,84,49,48,57,56,48,48,48,84,244,140,132,144,84,84,49,48,57,56,48,49,51,84,244,140,132,157,84,84,49,48,57,56,48,52,57,84,244,140,133,129,84,84,49,48,57,56,48,54,49,84,244,140,133,141,84,84,49,48,57,56,48,54,51,84,244,140,133,143,84,84,49,48,57,56,48,54,52,84,244,140,133,144,84,84,49,48,57,56,48,55,55,84,244,140,133,157,84,84,49,48,57,56,49,49,51,84,244,140,134,129,84,84,49,48,57,56,49,50,53,84,244,140,134,141,84,84,49,48,57,56,49,50,55,84,244,140,134,143,84,84,49,48,57,56,49,50,56,84,244,140,134,144,84,84,49,48,57,56,49,52,49,84,244,140,134,157,84,84,49,48,57,56,49,55,55,84,244,140,135,129,84,84,49,48,57,56,49,56,57,84,244,140,135,141,84,84,49,48,57,56,49,57,49,84,244,140,135,143,84,84,49,48,57,56,49,57,50,84,244,140,135,144,84,84,49,48,57,56,50,48,53,84,244,140,135,157,84,84,49,48,57,56,50,52,49,84,244,140,136,129,84,84,49,48,57,56,50,53,51,84,244,140,136,141,84,84,49,48,57,56,50,53,53,84,244,140,136,143,84,84,49,48,57,56,50,53,54,84,244,140,136,144,84,84,49,48,57,56,50,54,57,84,244,140,136,157,84,84,49,48,57,56,51,48,53,84,244,140,137,129,84,84,49,48,57,56,51,49,55,84,244,140,137,141,84,84,49,48,57,56,51,49,57,84,244,140,137,143,84,84,49,48,57,56,51,50,48,84,244,140,137,144,84,84,49,48,57,56,51,51,51,84,244,140,137,157,84,84,49,48,57,56,51,54,57,84,244,140,138,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21019 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21019_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21019_s.txt", Encoding.UTF8);

    public Test21019() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersd35ea9f156764511b97173ebc769448f",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,48,56,48,48,84,244,143,140,144,84,84,49,49,49,48,56,48,49,84,244,143,140,145,84,84,49,49,49,48,56,48,50,84,244,143,140,146,84,84,49,49,49,48,56,48,51,84,244,143,140,147,84,84,49,49,49,48,56,48,52,84,244,143,140,148,84,84,49,49,49,48,56,48,53,84,244,143,140,149,84,84,49,49,49,48,56,48,54,84,244,143,140,150,84,84,49,49,49,48,56,48,55,84,244,143,140,151,84,84,49,49,49,48,56,48,56,84,244,143,140,152,84,84,49,49,49,48,56,48,57,84,244,143,140,153,84,84,49,49,49,48,56,49,48,84,244,143,140,154,84,84,49,49,49,48,56,49,49,84,244,143,140,155,84,84,49,49,49,48,56,49,50,84,244,143,140,156,84,84,49,49,49,48,56,49,51,84,244,143,140,157,84,84,49,49,49,48,56,49,52,84,244,143,140,158,84,84,49,49,49,48,56,49,53,84,244,143,140,159,84,84,49,49,49,48,56,49,54,84,244,143,140,160,84,84,49,49,49,48,56,49,55,84,244,143,140,161,84,84,49,49,49,48,56,49,56,84,244,143,140,162,84,84,49,49,49,48,56,49,57,84,244,143,140,163,84,84,49,49,49,48,56,50,48,84,244,143,140,164,84,84,49,49,49,48,56,50,49,84,244,143,140,165,84,84,49,49,49,48,56,50,50,84,244,143,140,166,84,84,49,49,49,48,56,50,51,84,244,143,140,167,84,84,49,49,49,48,56,50,52,84,244,143,140,168,84,84,49,49,49,48,56,50,53,84,244,143,140,169,84,84,49,49,49,48,56,50,54,84,244,143,140,170,84,84,49,49,49,48,56,50,55,84,244,143,140,171,84,84,49,49,49,48,56,50,56,84,244,143,140,172,84,84,49,49,49,48,56,50,57,84,244,143,140,173,84,84,49,49,49,48,56,51,48,84,244,143,140,174,84,84,49,49,49,48,56,51,49,84,244,143,140,175,84,84,49,49,49,48,56,51,50,84,244,143,140,176,84,84,49,49,49,48,56,51,51,84,244,143,140,177,84,84,49,49,49,48,56,51,52,84,244,143,140,178,84,84,49,49,49,48,56,51,53,84,244,143,140,179,84,84,49,49,49,48,56,51,54,84,244,143,140,180,84,84,49,49,49,48,56,51,55,84,244,143,140,181,84,84,49,49,49,48,56,51,56,84,244,143,140,182,84,84,49,49,49,48,56,51,57,84,244,143,140,183,84,84,49,49,49,48,56,52,48,84,244,143,140,184,84,84,49,49,49,48,56,52,49,84,244,143,140,185,84,84,49,49,49,48,56,52,50,84,244,143,140,186,84,84,49,49,49,48,56,52,51,84,244,143,140,187,84,84,49,49,49,48,56,52,52,84,244,143,140,188,84,84,49,49,49,48,56,52,53,84,244,143,140,189,84,84,49,49,49,48,56,52,54,84,244,143,140,190,84,84,49,49,49,48,56,52,55,84,244,143,140,191,84,84,49,49,49,48,56,52,56,84,244,143,141,128,84,84,49,49,49,48,56,52,57,84,244,143,141,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19806 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19806_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19806_s.txt", Encoding.UTF8);

    public Test19806() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers3d1fce2fe43b489ca49e5d4066014499",
                        blob: Encoding.UTF8.GetString(new byte[]{84,53,55,52,49,53,84,238,129,135,84,84,53,55,52,49,54,84,238,129,136,84,84,53,55,52,49,55,84,238,129,137,84,84,53,55,52,49,56,84,238,129,138,84,84,53,55,52,49,57,84,238,129,139,84,84,53,55,52,50,48,84,238,129,140,84,84,53,55,52,50,49,84,238,129,141,84,84,53,55,52,50,50,84,238,129,142,84,84,53,55,52,50,51,84,238,129,143,84,84,53,55,52,50,52,84,238,129,144,84,84,53,55,52,50,53,84,238,129,145,84,84,53,55,52,50,54,84,238,129,146,84,84,53,55,52,50,55,84,238,129,147,84,84,53,55,52,50,56,84,238,129,148,84,84,53,55,52,50,57,84,238,129,149,84,84,53,55,52,51,48,84,238,129,150,84,84,53,55,52,51,49,84,238,129,151,84,84,53,55,52,51,50,84,238,129,152,84,84,53,55,52,51,51,84,238,129,153,84,84,53,55,52,51,52,84,238,129,154,84,84,53,55,52,51,53,84,238,129,155,84,84,53,55,52,51,54,84,238,129,156,84,84,53,55,52,51,55,84,238,129,157,84,84,53,55,52,51,56,84,238,129,158,84,84,53,55,52,51,57,84,238,129,159,84,84,53,55,52,52,48,84,238,129,160,84,84,53,55,52,52,49,84,238,129,161,84,84,53,55,52,52,50,84,238,129,162,84,84,53,55,52,52,51,84,238,129,163,84,84,53,55,52,52,52,84,238,129,164,84,84,53,55,52,52,53,84,238,129,165,84,84,53,55,52,52,54,84,238,129,166,84,84,53,55,52,52,55,84,238,129,167,84,84,53,55,52,52,56,84,238,129,168,84,84,53,55,52,52,57,84,238,129,169,84,84,53,55,52,53,48,84,238,129,170,84,84,53,55,52,53,49,84,238,129,171,84,84,53,55,52,53,50,84,238,129,172,84,84,53,55,52,53,51,84,238,129,173,84,84,53,55,52,53,52,84,238,129,174,84,84,53,55,52,53,53,84,238,129,175,84,84,53,55,52,53,54,84,238,129,176,84,84,53,55,52,53,55,84,238,129,177,84,84,53,55,52,53,56,84,238,129,178,84,84,53,55,52,53,57,84,238,129,179,84,84,53,55,52,54,48,84,238,129,180,84,84,53,55,52,54,49,84,238,129,181,84,84,53,55,52,54,50,84,238,129,182,84,84,53,55,52,54,51,84,238,129,183,84,84,53,55,52,54,52,84,238,129,184,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20316 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20316_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20316_s.txt", Encoding.UTF8);

    public Test20316() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers412024b733e349978217e6093afed677",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,48,51,48,53,84,244,128,155,129,84,84,49,48,53,48,51,49,55,84,244,128,155,141,84,84,49,48,53,48,51,49,57,84,244,128,155,143,84,84,49,48,53,48,51,50,48,84,244,128,155,144,84,84,49,48,53,48,51,51,51,84,244,128,155,157,84,84,49,48,53,48,51,54,57,84,244,128,156,129,84,84,49,48,53,48,51,56,49,84,244,128,156,141,84,84,49,48,53,48,51,56,51,84,244,128,156,143,84,84,49,48,53,48,51,56,52,84,244,128,156,144,84,84,49,48,53,48,51,57,55,84,244,128,156,157,84,84,49,48,53,48,52,51,50,84,244,128,157,128,84,84,49,48,53,48,52,51,51,84,244,128,157,129,84,84,49,48,53,48,52,51,52,84,244,128,157,130,84,84,49,48,53,48,52,51,53,84,244,128,157,131,84,84,49,48,53,48,52,51,54,84,244,128,157,132,84,84,49,48,53,48,52,51,55,84,244,128,157,133,84,84,49,48,53,48,52,51,56,84,244,128,157,134,84,84,49,48,53,48,52,51,57,84,244,128,157,135,84,84,49,48,53,48,52,52,48,84,244,128,157,136,84,84,49,48,53,48,52,52,49,84,244,128,157,137,84,84,49,48,53,48,52,52,50,84,244,128,157,138,84,84,49,48,53,48,52,52,51,84,244,128,157,139,84,84,49,48,53,48,52,52,52,84,244,128,157,140,84,84,49,48,53,48,52,52,53,84,244,128,157,141,84,84,49,48,53,48,52,52,54,84,244,128,157,142,84,84,49,48,53,48,52,52,55,84,244,128,157,143,84,84,49,48,53,48,52,52,56,84,244,128,157,144,84,84,49,48,53,48,52,52,57,84,244,128,157,145,84,84,49,48,53,48,52,53,48,84,244,128,157,146,84,84,49,48,53,48,52,53,49,84,244,128,157,147,84,84,49,48,53,48,52,53,50,84,244,128,157,148,84,84,49,48,53,48,52,53,51,84,244,128,157,149,84,84,49,48,53,48,52,53,52,84,244,128,157,150,84,84,49,48,53,48,52,53,53,84,244,128,157,151,84,84,49,48,53,48,52,53,54,84,244,128,157,152,84,84,49,48,53,48,52,53,55,84,244,128,157,153,84,84,49,48,53,48,52,53,56,84,244,128,157,154,84,84,49,48,53,48,52,53,57,84,244,128,157,155,84,84,49,48,53,48,52,54,48,84,244,128,157,156,84,84,49,48,53,48,52,54,49,84,244,128,157,157,84,84,49,48,53,48,52,54,50,84,244,128,157,158,84,84,49,48,53,48,52,54,51,84,244,128,157,159,84,84,49,48,53,48,52,54,52,84,244,128,157,160,84,84,49,48,53,48,52,54,53,84,244,128,157,161,84,84,49,48,53,48,52,54,54,84,244,128,157,162,84,84,49,48,53,48,52,54,55,84,244,128,157,163,84,84,49,48,53,48,52,54,56,84,244,128,157,164,84,84,49,48,53,48,52,54,57,84,244,128,157,165,84,84,49,48,53,48,52,55,48,84,244,128,157,166,84,84,49,48,53,48,52,55,49,84,244,128,157,167,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19870 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19870_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19870_s.txt", Encoding.UTF8);

    public Test19870() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers7032abc4111d4702bce9d36696a0a648",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,49,56,54,53,55,84,243,160,146,129,84,84,57,49,56,54,54,57,84,243,160,146,141,84,84,57,49,56,54,55,49,84,243,160,146,143,84,84,57,49,56,54,55,50,84,243,160,146,144,84,84,57,49,56,54,56,53,84,243,160,146,157,84,84,57,49,56,55,50,49,84,243,160,147,129,84,84,57,49,56,55,51,51,84,243,160,147,141,84,84,57,49,56,55,51,53,84,243,160,147,143,84,84,57,49,56,55,51,54,84,243,160,147,144,84,84,57,49,56,55,52,57,84,243,160,147,157,84,84,57,49,56,55,56,53,84,243,160,148,129,84,84,57,49,56,55,57,55,84,243,160,148,141,84,84,57,49,56,55,57,57,84,243,160,148,143,84,84,57,49,56,56,48,48,84,243,160,148,144,84,84,57,49,56,56,49,51,84,243,160,148,157,84,84,57,49,56,56,52,57,84,243,160,149,129,84,84,57,49,56,56,54,49,84,243,160,149,141,84,84,57,49,56,56,54,51,84,243,160,149,143,84,84,57,49,56,56,54,52,84,243,160,149,144,84,84,57,49,56,56,55,55,84,243,160,149,157,84,84,57,49,56,57,49,51,84,243,160,150,129,84,84,57,49,56,57,50,53,84,243,160,150,141,84,84,57,49,56,57,50,55,84,243,160,150,143,84,84,57,49,56,57,50,56,84,243,160,150,144,84,84,57,49,56,57,52,49,84,243,160,150,157,84,84,57,49,56,57,55,55,84,243,160,151,129,84,84,57,49,56,57,56,57,84,243,160,151,141,84,84,57,49,56,57,57,49,84,243,160,151,143,84,84,57,49,56,57,57,50,84,243,160,151,144,84,84,57,49,57,48,48,53,84,243,160,151,157,84,84,57,49,57,48,52,49,84,243,160,152,129,84,84,57,49,57,48,53,51,84,243,160,152,141,84,84,57,49,57,48,53,53,84,243,160,152,143,84,84,57,49,57,48,53,54,84,243,160,152,144,84,84,57,49,57,48,54,57,84,243,160,152,157,84,84,57,49,57,49,48,53,84,243,160,153,129,84,84,57,49,57,49,49,55,84,243,160,153,141,84,84,57,49,57,49,49,57,84,243,160,153,143,84,84,57,49,57,49,50,48,84,243,160,153,144,84,84,57,49,57,49,51,51,84,243,160,153,157,84,84,57,49,57,49,54,57,84,243,160,154,129,84,84,57,49,57,49,56,49,84,243,160,154,141,84,84,57,49,57,49,56,51,84,243,160,154,143,84,84,57,49,57,49,56,52,84,243,160,154,144,84,84,57,49,57,49,57,55,84,243,160,154,157,84,84,57,49,57,50,51,51,84,243,160,155,129,84,84,57,49,57,50,52,53,84,243,160,155,141,84,84,57,49,57,50,52,55,84,243,160,155,143,84,84,57,49,57,50,52,56,84,243,160,155,144,84,84,57,49,57,50,54,49,84,243,160,155,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19933 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19933_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19933_s.txt", Encoding.UTF8);

    public Test19933() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersbf5ecfbea5a24d8a8188936c9be6fa20",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,57,48,51,52,57,84,243,177,178,141,84,84,57,57,48,51,53,49,84,243,177,178,143,84,84,57,57,48,51,53,50,84,243,177,178,144,84,84,57,57,48,51,54,53,84,243,177,178,157,84,84,57,57,48,52,48,49,84,243,177,179,129,84,84,57,57,48,52,49,51,84,243,177,179,141,84,84,57,57,48,52,49,53,84,243,177,179,143,84,84,57,57,48,52,49,54,84,243,177,179,144,84,84,57,57,48,52,50,57,84,243,177,179,157,84,84,57,57,48,52,54,53,84,243,177,180,129,84,84,57,57,48,52,55,55,84,243,177,180,141,84,84,57,57,48,52,55,57,84,243,177,180,143,84,84,57,57,48,52,56,48,84,243,177,180,144,84,84,57,57,48,52,57,51,84,243,177,180,157,84,84,57,57,48,53,50,57,84,243,177,181,129,84,84,57,57,48,53,52,49,84,243,177,181,141,84,84,57,57,48,53,52,51,84,243,177,181,143,84,84,57,57,48,53,52,52,84,243,177,181,144,84,84,57,57,48,53,53,55,84,243,177,181,157,84,84,57,57,48,53,57,51,84,243,177,182,129,84,84,57,57,48,54,48,53,84,243,177,182,141,84,84,57,57,48,54,48,55,84,243,177,182,143,84,84,57,57,48,54,48,56,84,243,177,182,144,84,84,57,57,48,54,50,49,84,243,177,182,157,84,84,57,57,48,54,53,55,84,243,177,183,129,84,84,57,57,48,54,54,57,84,243,177,183,141,84,84,57,57,48,54,55,49,84,243,177,183,143,84,84,57,57,48,54,55,50,84,243,177,183,144,84,84,57,57,48,54,56,53,84,243,177,183,157,84,84,57,57,48,55,50,49,84,243,177,184,129,84,84,57,57,48,55,51,51,84,243,177,184,141,84,84,57,57,48,55,51,53,84,243,177,184,143,84,84,57,57,48,55,51,54,84,243,177,184,144,84,84,57,57,48,55,52,57,84,243,177,184,157,84,84,57,57,48,55,56,53,84,243,177,185,129,84,84,57,57,48,55,57,55,84,243,177,185,141,84,84,57,57,48,55,57,57,84,243,177,185,143,84,84,57,57,48,56,48,48,84,243,177,185,144,84,84,57,57,48,56,49,51,84,243,177,185,157,84,84,57,57,48,56,52,57,84,243,177,186,129,84,84,57,57,48,56,54,49,84,243,177,186,141,84,84,57,57,48,56,54,51,84,243,177,186,143,84,84,57,57,48,56,54,52,84,243,177,186,144,84,84,57,57,48,56,55,55,84,243,177,186,157,84,84,57,57,48,57,49,51,84,243,177,187,129,84,84,57,57,48,57,50,53,84,243,177,187,141,84,84,57,57,48,57,50,55,84,243,177,187,143,84,84,57,57,48,57,50,56,84,243,177,187,144,84,84,57,57,48,57,52,49,84,243,177,187,157,84,84,57,57,48,57,55,55,84,243,177,188,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20221 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20221_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20221_s.txt", Encoding.UTF8);

    public Test20221() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers2b6cdd6684eb4500abcaa682adc323b7",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,51,54,51,54,51,84,243,189,129,139,84,84,49,48,51,54,51,54,52,84,243,189,129,140,84,84,49,48,51,54,51,54,53,84,243,189,129,141,84,84,49,48,51,54,51,54,54,84,243,189,129,142,84,84,49,48,51,54,51,54,55,84,243,189,129,143,84,84,49,48,51,54,51,54,56,84,243,189,129,144,84,84,49,48,51,54,51,54,57,84,243,189,129,145,84,84,49,48,51,54,51,55,48,84,243,189,129,146,84,84,49,48,51,54,51,55,49,84,243,189,129,147,84,84,49,48,51,54,51,55,50,84,243,189,129,148,84,84,49,48,51,54,51,55,51,84,243,189,129,149,84,84,49,48,51,54,51,55,52,84,243,189,129,150,84,84,49,48,51,54,51,55,53,84,243,189,129,151,84,84,49,48,51,54,51,55,54,84,243,189,129,152,84,84,49,48,51,54,51,55,55,84,243,189,129,153,84,84,49,48,51,54,51,55,56,84,243,189,129,154,84,84,49,48,51,54,51,55,57,84,243,189,129,155,84,84,49,48,51,54,51,56,48,84,243,189,129,156,84,84,49,48,51,54,51,56,49,84,243,189,129,157,84,84,49,48,51,54,51,56,50,84,243,189,129,158,84,84,49,48,51,54,51,56,51,84,243,189,129,159,84,84,49,48,51,54,51,56,52,84,243,189,129,160,84,84,49,48,51,54,51,56,53,84,243,189,129,161,84,84,49,48,51,54,51,56,54,84,243,189,129,162,84,84,49,48,51,54,51,56,55,84,243,189,129,163,84,84,49,48,51,54,51,56,56,84,243,189,129,164,84,84,49,48,51,54,51,56,57,84,243,189,129,165,84,84,49,48,51,54,51,57,48,84,243,189,129,166,84,84,49,48,51,54,51,57,49,84,243,189,129,167,84,84,49,48,51,54,51,57,50,84,243,189,129,168,84,84,49,48,51,54,51,57,51,84,243,189,129,169,84,84,49,48,51,54,51,57,52,84,243,189,129,170,84,84,49,48,51,54,51,57,53,84,243,189,129,171,84,84,49,48,51,54,51,57,54,84,243,189,129,172,84,84,49,48,51,54,51,57,55,84,243,189,129,173,84,84,49,48,51,54,51,57,56,84,243,189,129,174,84,84,49,48,51,54,51,57,57,84,243,189,129,175,84,84,49,48,51,54,52,48,48,84,243,189,129,176,84,84,49,48,51,54,52,48,49,84,243,189,129,177,84,84,49,48,51,54,52,48,50,84,243,189,129,178,84,84,49,48,51,54,52,48,51,84,243,189,129,179,84,84,49,48,51,54,52,48,52,84,243,189,129,180,84,84,49,48,51,54,52,48,53,84,243,189,129,181,84,84,49,48,51,54,52,48,54,84,243,189,129,182,84,84,49,48,51,54,52,48,55,84,243,189,129,183,84,84,49,48,51,54,52,48,56,84,243,189,129,184,84,84,49,48,51,54,52,48,57,84,243,189,129,185,84,84,49,48,51,54,52,49,48,84,243,189,129,186,84,84,49,48,51,54,52,49,49,84,243,189,129,187,84,84,49,48,51,54,52,49,50,84,243,189,129,188,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20509 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20509_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20509_s.txt", Encoding.UTF8);

    public Test20509() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers3bfa703d74a140e499ecce701b962b8c",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,55,55,57,53,84,244,130,144,131,84,84,49,48,53,55,55,57,54,84,244,130,144,132,84,84,49,48,53,55,55,57,55,84,244,130,144,133,84,84,49,48,53,55,55,57,56,84,244,130,144,134,84,84,49,48,53,55,55,57,57,84,244,130,144,135,84,84,49,48,53,55,56,48,48,84,244,130,144,136,84,84,49,48,53,55,56,48,49,84,244,130,144,137,84,84,49,48,53,55,56,48,50,84,244,130,144,138,84,84,49,48,53,55,56,48,51,84,244,130,144,139,84,84,49,48,53,55,56,48,52,84,244,130,144,140,84,84,49,48,53,55,56,48,53,84,244,130,144,141,84,84,49,48,53,55,56,48,54,84,244,130,144,142,84,84,49,48,53,55,56,48,55,84,244,130,144,143,84,84,49,48,53,55,56,48,56,84,244,130,144,144,84,84,49,48,53,55,56,48,57,84,244,130,144,145,84,84,49,48,53,55,56,49,48,84,244,130,144,146,84,84,49,48,53,55,56,49,49,84,244,130,144,147,84,84,49,48,53,55,56,49,50,84,244,130,144,148,84,84,49,48,53,55,56,49,51,84,244,130,144,149,84,84,49,48,53,55,56,49,52,84,244,130,144,150,84,84,49,48,53,55,56,49,53,84,244,130,144,151,84,84,49,48,53,55,56,49,54,84,244,130,144,152,84,84,49,48,53,55,56,49,55,84,244,130,144,153,84,84,49,48,53,55,56,49,56,84,244,130,144,154,84,84,49,48,53,55,56,49,57,84,244,130,144,155,84,84,49,48,53,55,56,50,48,84,244,130,144,156,84,84,49,48,53,55,56,50,49,84,244,130,144,157,84,84,49,48,53,55,56,50,50,84,244,130,144,158,84,84,49,48,53,55,56,50,51,84,244,130,144,159,84,84,49,48,53,55,56,50,52,84,244,130,144,160,84,84,49,48,53,55,56,50,53,84,244,130,144,161,84,84,49,48,53,55,56,50,54,84,244,130,144,162,84,84,49,48,53,55,56,50,55,84,244,130,144,163,84,84,49,48,53,55,56,50,56,84,244,130,144,164,84,84,49,48,53,55,56,50,57,84,244,130,144,165,84,84,49,48,53,55,56,51,48,84,244,130,144,166,84,84,49,48,53,55,56,51,49,84,244,130,144,167,84,84,49,48,53,55,56,51,50,84,244,130,144,168,84,84,49,48,53,55,56,51,51,84,244,130,144,169,84,84,49,48,53,55,56,51,52,84,244,130,144,170,84,84,49,48,53,55,56,51,53,84,244,130,144,171,84,84,49,48,53,55,56,51,54,84,244,130,144,172,84,84,49,48,53,55,56,51,55,84,244,130,144,173,84,84,49,48,53,55,56,51,56,84,244,130,144,174,84,84,49,48,53,55,56,51,57,84,244,130,144,175,84,84,49,48,53,55,56,52,48,84,244,130,144,176,84,84,49,48,53,55,56,52,49,84,244,130,144,177,84,84,49,48,53,55,56,52,50,84,244,130,144,178,84,84,49,48,53,55,56,52,51,84,244,130,144,179,84,84,49,48,53,55,56,52,52,84,244,130,144,180,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20380 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20380_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20380_s.txt", Encoding.UTF8);

    public Test20380() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers319eca44915441a6b60a6025f5eab2bd",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,51,57,55,56,84,244,129,148,154,84,84,49,48,53,51,57,55,57,84,244,129,148,155,84,84,49,48,53,51,57,56,48,84,244,129,148,156,84,84,49,48,53,51,57,56,49,84,244,129,148,157,84,84,49,48,53,51,57,56,50,84,244,129,148,158,84,84,49,48,53,51,57,56,51,84,244,129,148,159,84,84,49,48,53,51,57,56,52,84,244,129,148,160,84,84,49,48,53,51,57,56,53,84,244,129,148,161,84,84,49,48,53,51,57,56,54,84,244,129,148,162,84,84,49,48,53,51,57,56,55,84,244,129,148,163,84,84,49,48,53,51,57,56,56,84,244,129,148,164,84,84,49,48,53,51,57,56,57,84,244,129,148,165,84,84,49,48,53,51,57,57,48,84,244,129,148,166,84,84,49,48,53,51,57,57,49,84,244,129,148,167,84,84,49,48,53,51,57,57,50,84,244,129,148,168,84,84,49,48,53,51,57,57,51,84,244,129,148,169,84,84,49,48,53,51,57,57,52,84,244,129,148,170,84,84,49,48,53,51,57,57,53,84,244,129,148,171,84,84,49,48,53,51,57,57,54,84,244,129,148,172,84,84,49,48,53,51,57,57,55,84,244,129,148,173,84,84,49,48,53,51,57,57,56,84,244,129,148,174,84,84,49,48,53,51,57,57,57,84,244,129,148,175,84,84,49,48,53,52,48,48,48,84,244,129,148,176,84,84,49,48,53,52,48,48,49,84,244,129,148,177,84,84,49,48,53,52,48,48,50,84,244,129,148,178,84,84,49,48,53,52,48,48,51,84,244,129,148,179,84,84,49,48,53,52,48,48,52,84,244,129,148,180,84,84,49,48,53,52,48,48,53,84,244,129,148,181,84,84,49,48,53,52,48,48,54,84,244,129,148,182,84,84,49,48,53,52,48,48,55,84,244,129,148,183,84,84,49,48,53,52,48,48,56,84,244,129,148,184,84,84,49,48,53,52,48,48,57,84,244,129,148,185,84,84,49,48,53,52,48,49,48,84,244,129,148,186,84,84,49,48,53,52,48,49,49,84,244,129,148,187,84,84,49,48,53,52,48,49,50,84,244,129,148,188,84,84,49,48,53,52,48,49,51,84,244,129,148,189,84,84,49,48,53,52,48,49,52,84,244,129,148,190,84,84,49,48,53,52,48,49,53,84,244,129,148,191,84,84,49,48,53,52,48,49,54,84,244,129,149,128,84,84,49,48,53,52,48,49,55,84,244,129,149,129,84,84,49,48,53,52,48,49,56,84,244,129,149,130,84,84,49,48,53,52,48,49,57,84,244,129,149,131,84,84,49,48,53,52,48,50,48,84,244,129,149,132,84,84,49,48,53,52,48,50,49,84,244,129,149,133,84,84,49,48,53,52,48,50,50,84,244,129,149,134,84,84,49,48,53,52,48,50,51,84,244,129,149,135,84,84,49,48,53,52,48,50,52,84,244,129,149,136,84,84,49,48,53,52,48,50,53,84,244,129,149,137,84,84,49,48,53,52,48,50,54,84,244,129,149,138,84,84,49,48,53,52,48,50,55,84,244,129,149,139,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20284 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20284_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20284_s.txt", Encoding.UTF8);

    public Test20284() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers712afb35b54344eb8fa90647f752cd92",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,52,53,52,56,51,84,243,191,143,171,84,84,49,48,52,53,52,56,52,84,243,191,143,172,84,84,49,48,52,53,52,56,53,84,243,191,143,173,84,84,49,48,52,53,52,56,54,84,243,191,143,174,84,84,49,48,52,53,52,56,55,84,243,191,143,175,84,84,49,48,52,53,52,56,56,84,243,191,143,176,84,84,49,48,52,53,52,56,57,84,243,191,143,177,84,84,49,48,52,53,52,57,48,84,243,191,143,178,84,84,49,48,52,53,52,57,49,84,243,191,143,179,84,84,49,48,52,53,52,57,50,84,243,191,143,180,84,84,49,48,52,53,52,57,51,84,243,191,143,181,84,84,49,48,52,53,52,57,52,84,243,191,143,182,84,84,49,48,52,53,52,57,53,84,243,191,143,183,84,84,49,48,52,53,52,57,54,84,243,191,143,184,84,84,49,48,52,53,52,57,55,84,243,191,143,185,84,84,49,48,52,53,52,57,56,84,243,191,143,186,84,84,49,48,52,53,52,57,57,84,243,191,143,187,84,84,49,48,52,53,53,48,48,84,243,191,143,188,84,84,49,48,52,53,53,48,49,84,243,191,143,189,84,84,49,48,52,53,53,48,50,84,243,191,143,190,84,84,49,48,52,53,53,48,51,84,243,191,143,191,84,84,49,48,52,53,53,48,52,84,243,191,144,128,84,84,49,48,52,53,53,48,53,84,243,191,144,129,84,84,49,48,52,53,53,48,54,84,243,191,144,130,84,84,49,48,52,53,53,48,55,84,243,191,144,131,84,84,49,48,52,53,53,48,56,84,243,191,144,132,84,84,49,48,52,53,53,48,57,84,243,191,144,133,84,84,49,48,52,53,53,49,48,84,243,191,144,134,84,84,49,48,52,53,53,49,49,84,243,191,144,135,84,84,49,48,52,53,53,49,50,84,243,191,144,136,84,84,49,48,52,53,53,49,51,84,243,191,144,137,84,84,49,48,52,53,53,49,52,84,243,191,144,138,84,84,49,48,52,53,53,49,53,84,243,191,144,139,84,84,49,48,52,53,53,49,54,84,243,191,144,140,84,84,49,48,52,53,53,49,55,84,243,191,144,141,84,84,49,48,52,53,53,49,56,84,243,191,144,142,84,84,49,48,52,53,53,49,57,84,243,191,144,143,84,84,49,48,52,53,53,50,48,84,243,191,144,144,84,84,49,48,52,53,53,50,49,84,243,191,144,145,84,84,49,48,52,53,53,50,50,84,243,191,144,146,84,84,49,48,52,53,53,50,51,84,243,191,144,147,84,84,49,48,52,53,53,50,52,84,243,191,144,148,84,84,49,48,52,53,53,50,53,84,243,191,144,149,84,84,49,48,52,53,53,50,54,84,243,191,144,150,84,84,49,48,52,53,53,50,55,84,243,191,144,151,84,84,49,48,52,53,53,50,56,84,243,191,144,152,84,84,49,48,52,53,53,50,57,84,243,191,144,153,84,84,49,48,52,53,53,51,48,84,243,191,144,154,84,84,49,48,52,53,53,51,49,84,243,191,144,155,84,84,49,48,52,53,53,51,50,84,243,191,144,156,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20572 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20572_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20572_s.txt", Encoding.UTF8);

    public Test20572() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers2997cf743a0f481c9f696984938aa742",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,54,55,51,50,57,84,244,132,165,129,84,84,49,48,54,55,51,52,49,84,244,132,165,141,84,84,49,48,54,55,51,52,51,84,244,132,165,143,84,84,49,48,54,55,51,52,52,84,244,132,165,144,84,84,49,48,54,55,51,53,55,84,244,132,165,157,84,84,49,48,54,55,51,57,51,84,244,132,166,129,84,84,49,48,54,55,52,48,53,84,244,132,166,141,84,84,49,48,54,55,52,48,55,84,244,132,166,143,84,84,49,48,54,55,52,48,56,84,244,132,166,144,84,84,49,48,54,55,52,50,49,84,244,132,166,157,84,84,49,48,54,55,52,53,55,84,244,132,167,129,84,84,49,48,54,55,52,54,57,84,244,132,167,141,84,84,49,48,54,55,52,55,49,84,244,132,167,143,84,84,49,48,54,55,52,55,50,84,244,132,167,144,84,84,49,48,54,55,52,56,53,84,244,132,167,157,84,84,49,48,54,55,53,50,49,84,244,132,168,129,84,84,49,48,54,55,53,51,51,84,244,132,168,141,84,84,49,48,54,55,53,51,53,84,244,132,168,143,84,84,49,48,54,55,53,51,54,84,244,132,168,144,84,84,49,48,54,55,53,52,57,84,244,132,168,157,84,84,49,48,54,55,53,56,53,84,244,132,169,129,84,84,49,48,54,55,53,57,55,84,244,132,169,141,84,84,49,48,54,55,53,57,57,84,244,132,169,143,84,84,49,48,54,55,54,48,48,84,244,132,169,144,84,84,49,48,54,55,54,49,51,84,244,132,169,157,84,84,49,48,54,55,54,52,57,84,244,132,170,129,84,84,49,48,54,55,54,54,49,84,244,132,170,141,84,84,49,48,54,55,54,54,51,84,244,132,170,143,84,84,49,48,54,55,54,54,52,84,244,132,170,144,84,84,49,48,54,55,54,55,55,84,244,132,170,157,84,84,49,48,54,55,55,49,51,84,244,132,171,129,84,84,49,48,54,55,55,50,53,84,244,132,171,141,84,84,49,48,54,55,55,50,55,84,244,132,171,143,84,84,49,48,54,55,55,50,56,84,244,132,171,144,84,84,49,48,54,55,55,52,49,84,244,132,171,157,84,84,49,48,54,55,55,55,55,84,244,132,172,129,84,84,49,48,54,55,55,56,57,84,244,132,172,141,84,84,49,48,54,55,55,57,49,84,244,132,172,143,84,84,49,48,54,55,55,57,50,84,244,132,172,144,84,84,49,48,54,55,56,48,53,84,244,132,172,157,84,84,49,48,54,55,56,52,49,84,244,132,173,129,84,84,49,48,54,55,56,53,51,84,244,132,173,141,84,84,49,48,54,55,56,53,53,84,244,132,173,143,84,84,49,48,54,55,56,53,54,84,244,132,173,144,84,84,49,48,54,55,56,54,57,84,244,132,173,157,84,84,49,48,54,55,57,48,53,84,244,132,174,129,84,84,49,48,54,55,57,49,55,84,244,132,174,141,84,84,49,48,54,55,57,49,57,84,244,132,174,143,84,84,49,48,54,55,57,50,48,84,244,132,174,144,84,84,49,48,54,55,57,51,51,84,244,132,174,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20157 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20157_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20157_s.txt", Encoding.UTF8);

    public Test20157() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers4f3362aed9424bd2bfac6751ee820ab9",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,50,53,48,55,56,84,243,186,144,182,84,84,49,48,50,53,48,55,57,84,243,186,144,183,84,84,49,48,50,53,48,56,48,84,243,186,144,184,84,84,49,48,50,53,48,56,49,84,243,186,144,185,84,84,49,48,50,53,48,56,50,84,243,186,144,186,84,84,49,48,50,53,48,56,51,84,243,186,144,187,84,84,49,48,50,53,48,56,52,84,243,186,144,188,84,84,49,48,50,53,48,56,53,84,243,186,144,189,84,84,49,48,50,53,48,56,54,84,243,186,144,190,84,84,49,48,50,53,48,56,55,84,243,186,144,191,84,84,49,48,50,53,48,56,57,84,243,186,145,129,84,84,49,48,50,53,49,48,49,84,243,186,145,141,84,84,49,48,50,53,49,48,51,84,243,186,145,143,84,84,49,48,50,53,49,48,52,84,243,186,145,144,84,84,49,48,50,53,49,49,55,84,243,186,145,157,84,84,49,48,50,53,49,53,51,84,243,186,146,129,84,84,49,48,50,53,49,54,53,84,243,186,146,141,84,84,49,48,50,53,49,54,55,84,243,186,146,143,84,84,49,48,50,53,49,54,56,84,243,186,146,144,84,84,49,48,50,53,49,56,49,84,243,186,146,157,84,84,49,48,50,53,50,49,55,84,243,186,147,129,84,84,49,48,50,53,50,50,57,84,243,186,147,141,84,84,49,48,50,53,50,51,49,84,243,186,147,143,84,84,49,48,50,53,50,51,50,84,243,186,147,144,84,84,49,48,50,53,50,52,53,84,243,186,147,157,84,84,49,48,50,53,50,56,49,84,243,186,148,129,84,84,49,48,50,53,50,57,51,84,243,186,148,141,84,84,49,48,50,53,50,57,53,84,243,186,148,143,84,84,49,48,50,53,50,57,54,84,243,186,148,144,84,84,49,48,50,53,51,48,57,84,243,186,148,157,84,84,49,48,50,53,51,52,53,84,243,186,149,129,84,84,49,48,50,53,51,53,55,84,243,186,149,141,84,84,49,48,50,53,51,53,57,84,243,186,149,143,84,84,49,48,50,53,51,54,48,84,243,186,149,144,84,84,49,48,50,53,51,55,51,84,243,186,149,157,84,84,49,48,50,53,52,48,57,84,243,186,150,129,84,84,49,48,50,53,52,50,49,84,243,186,150,141,84,84,49,48,50,53,52,50,51,84,243,186,150,143,84,84,49,48,50,53,52,50,52,84,243,186,150,144,84,84,49,48,50,53,52,51,55,84,243,186,150,157,84,84,49,48,50,53,52,55,51,84,243,186,151,129,84,84,49,48,50,53,52,56,53,84,243,186,151,141,84,84,49,48,50,53,52,56,55,84,243,186,151,143,84,84,49,48,50,53,52,56,56,84,243,186,151,144,84,84,49,48,50,53,53,48,49,84,243,186,151,157,84,84,49,48,50,53,53,51,55,84,243,186,152,129,84,84,49,48,50,53,53,52,57,84,243,186,152,141,84,84,49,48,50,53,53,53,49,84,243,186,152,143,84,84,49,48,50,53,53,53,50,84,243,186,152,144,84,84,49,48,50,53,53,54,53,84,243,186,152,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20892 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20892_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20892_s.txt", Encoding.UTF8);

    public Test20892() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersdd41d3a5bb7f42709f7cec587f1a204a",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,52,51,49,57,84,244,141,166,191,84,84,49,49,48,52,51,50,48,84,244,141,167,128,84,84,49,49,48,52,51,50,49,84,244,141,167,129,84,84,49,49,48,52,51,50,50,84,244,141,167,130,84,84,49,49,48,52,51,50,51,84,244,141,167,131,84,84,49,49,48,52,51,50,52,84,244,141,167,132,84,84,49,49,48,52,51,50,53,84,244,141,167,133,84,84,49,49,48,52,51,50,54,84,244,141,167,134,84,84,49,49,48,52,51,50,55,84,244,141,167,135,84,84,49,49,48,52,51,50,56,84,244,141,167,136,84,84,49,49,48,52,51,50,57,84,244,141,167,137,84,84,49,49,48,52,51,51,48,84,244,141,167,138,84,84,49,49,48,52,51,51,49,84,244,141,167,139,84,84,49,49,48,52,51,51,50,84,244,141,167,140,84,84,49,49,48,52,51,51,51,84,244,141,167,141,84,84,49,49,48,52,51,51,52,84,244,141,167,142,84,84,49,49,48,52,51,51,53,84,244,141,167,143,84,84,49,49,48,52,51,51,54,84,244,141,167,144,84,84,49,49,48,52,51,51,55,84,244,141,167,145,84,84,49,49,48,52,51,51,56,84,244,141,167,146,84,84,49,49,48,52,51,51,57,84,244,141,167,147,84,84,49,49,48,52,51,52,48,84,244,141,167,148,84,84,49,49,48,52,51,52,49,84,244,141,167,149,84,84,49,49,48,52,51,52,50,84,244,141,167,150,84,84,49,49,48,52,51,52,51,84,244,141,167,151,84,84,49,49,48,52,51,52,52,84,244,141,167,152,84,84,49,49,48,52,51,52,53,84,244,141,167,153,84,84,49,49,48,52,51,52,54,84,244,141,167,154,84,84,49,49,48,52,51,52,55,84,244,141,167,155,84,84,49,49,48,52,51,52,56,84,244,141,167,156,84,84,49,49,48,52,51,52,57,84,244,141,167,157,84,84,49,49,48,52,51,53,48,84,244,141,167,158,84,84,49,49,48,52,51,53,49,84,244,141,167,159,84,84,49,49,48,52,51,53,50,84,244,141,167,160,84,84,49,49,48,52,51,53,51,84,244,141,167,161,84,84,49,49,48,52,51,53,52,84,244,141,167,162,84,84,49,49,48,52,51,53,53,84,244,141,167,163,84,84,49,49,48,52,51,53,54,84,244,141,167,164,84,84,49,49,48,52,51,53,55,84,244,141,167,165,84,84,49,49,48,52,51,53,56,84,244,141,167,166,84,84,49,49,48,52,51,53,57,84,244,141,167,167,84,84,49,49,48,52,51,54,48,84,244,141,167,168,84,84,49,49,48,52,51,54,49,84,244,141,167,169,84,84,49,49,48,52,51,54,50,84,244,141,167,170,84,84,49,49,48,52,51,54,51,84,244,141,167,171,84,84,49,49,48,52,51,54,52,84,244,141,167,172,84,84,49,49,48,52,51,54,53,84,244,141,167,173,84,84,49,49,48,52,51,54,54,84,244,141,167,174,84,84,49,49,48,52,51,54,55,84,244,141,167,175,84,84,49,49,48,52,51,54,56,84,244,141,167,176,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19997 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19997_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19997_s.txt", Encoding.UTF8);

    public Test19997() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersc5d3e7c5509046d2aa3f8bb095571b82",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,48,48,52,52,50,84,243,180,143,186,84,84,49,48,48,48,52,52,51,84,243,180,143,187,84,84,49,48,48,48,52,52,52,84,243,180,143,188,84,84,49,48,48,48,52,52,53,84,243,180,143,189,84,84,49,48,48,48,52,52,54,84,243,180,143,190,84,84,49,48,48,48,52,52,55,84,243,180,143,191,84,84,49,48,48,48,52,52,56,84,243,180,144,128,84,84,49,48,48,48,52,52,57,84,243,180,144,129,84,84,49,48,48,48,52,53,48,84,243,180,144,130,84,84,49,48,48,48,52,53,49,84,243,180,144,131,84,84,49,48,48,48,52,53,50,84,243,180,144,132,84,84,49,48,48,48,52,53,51,84,243,180,144,133,84,84,49,48,48,48,52,53,52,84,243,180,144,134,84,84,49,48,48,48,52,53,53,84,243,180,144,135,84,84,49,48,48,48,52,53,54,84,243,180,144,136,84,84,49,48,48,48,52,53,55,84,243,180,144,137,84,84,49,48,48,48,52,53,56,84,243,180,144,138,84,84,49,48,48,48,52,53,57,84,243,180,144,139,84,84,49,48,48,48,52,54,48,84,243,180,144,140,84,84,49,48,48,48,52,54,49,84,243,180,144,141,84,84,49,48,48,48,52,54,50,84,243,180,144,142,84,84,49,48,48,48,52,54,51,84,243,180,144,143,84,84,49,48,48,48,52,54,52,84,243,180,144,144,84,84,49,48,48,48,52,54,53,84,243,180,144,145,84,84,49,48,48,48,52,54,54,84,243,180,144,146,84,84,49,48,48,48,52,54,55,84,243,180,144,147,84,84,49,48,48,48,52,54,56,84,243,180,144,148,84,84,49,48,48,48,52,54,57,84,243,180,144,149,84,84,49,48,48,48,52,55,48,84,243,180,144,150,84,84,49,48,48,48,52,55,49,84,243,180,144,151,84,84,49,48,48,48,52,55,50,84,243,180,144,152,84,84,49,48,48,48,52,55,51,84,243,180,144,153,84,84,49,48,48,48,52,55,52,84,243,180,144,154,84,84,49,48,48,48,52,55,53,84,243,180,144,155,84,84,49,48,48,48,52,55,54,84,243,180,144,156,84,84,49,48,48,48,52,55,55,84,243,180,144,157,84,84,49,48,48,48,52,55,56,84,243,180,144,158,84,84,49,48,48,48,52,55,57,84,243,180,144,159,84,84,49,48,48,48,52,56,48,84,243,180,144,160,84,84,49,48,48,48,52,56,49,84,243,180,144,161,84,84,49,48,48,48,52,56,50,84,243,180,144,162,84,84,49,48,48,48,52,56,51,84,243,180,144,163,84,84,49,48,48,48,52,56,52,84,243,180,144,164,84,84,49,48,48,48,52,56,53,84,243,180,144,165,84,84,49,48,48,48,52,56,54,84,243,180,144,166,84,84,49,48,48,48,52,56,55,84,243,180,144,167,84,84,49,48,48,48,52,56,56,84,243,180,144,168,84,84,49,48,48,48,52,56,57,84,243,180,144,169,84,84,49,48,48,48,52,57,48,84,243,180,144,170,84,84,49,48,48,48,52,57,49,84,243,180,144,171,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20318 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20318_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20318_s.txt", Encoding.UTF8);

    public Test20318() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers412024b733e349978217e6093afed677",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,48,52,55,50,84,244,128,157,168,84,84,49,48,53,48,52,55,51,84,244,128,157,169,84,84,49,48,53,48,52,55,52,84,244,128,157,170,84,84,49,48,53,48,52,55,53,84,244,128,157,171,84,84,49,48,53,48,52,55,54,84,244,128,157,172,84,84,49,48,53,48,52,55,55,84,244,128,157,173,84,84,49,48,53,48,52,55,56,84,244,128,157,174,84,84,49,48,53,48,52,55,57,84,244,128,157,175,84,84,49,48,53,48,52,56,48,84,244,128,157,176,84,84,49,48,53,48,52,56,49,84,244,128,157,177,84,84,49,48,53,48,52,56,50,84,244,128,157,178,84,84,49,48,53,48,52,56,51,84,244,128,157,179,84,84,49,48,53,48,52,56,52,84,244,128,157,180,84,84,49,48,53,48,52,56,53,84,244,128,157,181,84,84,49,48,53,48,52,56,54,84,244,128,157,182,84,84,49,48,53,48,52,56,55,84,244,128,157,183,84,84,49,48,53,48,52,56,56,84,244,128,157,184,84,84,49,48,53,48,52,56,57,84,244,128,157,185,84,84,49,48,53,48,52,57,48,84,244,128,157,186,84,84,49,48,53,48,52,57,49,84,244,128,157,187,84,84,49,48,53,48,52,57,50,84,244,128,157,188,84,84,49,48,53,48,52,57,51,84,244,128,157,189,84,84,49,48,53,48,52,57,52,84,244,128,157,190,84,84,49,48,53,48,52,57,53,84,244,128,157,191,84,84,49,48,53,48,52,57,55,84,244,128,158,129,84,84,49,48,53,48,53,48,57,84,244,128,158,141,84,84,49,48,53,48,53,49,49,84,244,128,158,143,84,84,49,48,53,48,53,49,50,84,244,128,158,144,84,84,49,48,53,48,53,50,53,84,244,128,158,157,84,84,49,48,53,48,53,54,49,84,244,128,159,129,84,84,49,48,53,48,53,55,51,84,244,128,159,141,84,84,49,48,53,48,53,55,53,84,244,128,159,143,84,84,49,48,53,48,53,55,54,84,244,128,159,144,84,84,49,48,53,48,53,56,57,84,244,128,159,157,84,84,49,48,53,48,54,50,53,84,244,128,160,129,84,84,49,48,53,48,54,51,55,84,244,128,160,141,84,84,49,48,53,48,54,51,57,84,244,128,160,143,84,84,49,48,53,48,54,52,48,84,244,128,160,144,84,84,49,48,53,48,54,53,51,84,244,128,160,157,84,84,49,48,53,48,54,56,57,84,244,128,161,129,84,84,49,48,53,48,55,48,49,84,244,128,161,141,84,84,49,48,53,48,55,48,51,84,244,128,161,143,84,84,49,48,53,48,55,48,52,84,244,128,161,144,84,84,49,48,53,48,55,49,55,84,244,128,161,157,84,84,49,48,53,48,55,53,51,84,244,128,162,129,84,84,49,48,53,48,55,54,53,84,244,128,162,141,84,84,49,48,53,48,55,54,55,84,244,128,162,143,84,84,49,48,53,48,55,54,56,84,244,128,162,144,84,84,49,48,53,48,55,56,49,84,244,128,162,157,84,84,49,48,53,48,56,49,55,84,244,128,163,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21021 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21021_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21021_s.txt", Encoding.UTF8);

    public Test21021() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersd35ea9f156764511b97173ebc769448f",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,48,56,53,48,84,244,143,141,130,84,84,49,49,49,48,56,53,49,84,244,143,141,131,84,84,49,49,49,48,56,53,50,84,244,143,141,132,84,84,49,49,49,48,56,53,51,84,244,143,141,133,84,84,49,49,49,48,56,53,52,84,244,143,141,134,84,84,49,49,49,48,56,53,53,84,244,143,141,135,84,84,49,49,49,48,56,53,54,84,244,143,141,136,84,84,49,49,49,48,56,53,55,84,244,143,141,137,84,84,49,49,49,48,56,53,56,84,244,143,141,138,84,84,49,49,49,48,56,53,57,84,244,143,141,139,84,84,49,49,49,48,56,54,48,84,244,143,141,140,84,84,49,49,49,48,56,54,49,84,244,143,141,141,84,84,49,49,49,48,56,54,50,84,244,143,141,142,84,84,49,49,49,48,56,54,51,84,244,143,141,143,84,84,49,49,49,48,56,54,52,84,244,143,141,144,84,84,49,49,49,48,56,54,53,84,244,143,141,145,84,84,49,49,49,48,56,54,54,84,244,143,141,146,84,84,49,49,49,48,56,54,55,84,244,143,141,147,84,84,49,49,49,48,56,54,56,84,244,143,141,148,84,84,49,49,49,48,56,54,57,84,244,143,141,149,84,84,49,49,49,48,56,55,48,84,244,143,141,150,84,84,49,49,49,48,56,55,49,84,244,143,141,151,84,84,49,49,49,48,56,55,50,84,244,143,141,152,84,84,49,49,49,48,56,55,51,84,244,143,141,153,84,84,49,49,49,48,56,55,52,84,244,143,141,154,84,84,49,49,49,48,56,55,53,84,244,143,141,155,84,84,49,49,49,48,56,55,54,84,244,143,141,156,84,84,49,49,49,48,56,55,55,84,244,143,141,157,84,84,49,49,49,48,56,55,56,84,244,143,141,158,84,84,49,49,49,48,56,55,57,84,244,143,141,159,84,84,49,49,49,48,56,56,48,84,244,143,141,160,84,84,49,49,49,48,56,56,49,84,244,143,141,161,84,84,49,49,49,48,56,56,50,84,244,143,141,162,84,84,49,49,49,48,56,56,51,84,244,143,141,163,84,84,49,49,49,48,56,56,52,84,244,143,141,164,84,84,49,49,49,48,56,56,53,84,244,143,141,165,84,84,49,49,49,48,56,56,54,84,244,143,141,166,84,84,49,49,49,48,56,56,55,84,244,143,141,167,84,84,49,49,49,48,56,56,56,84,244,143,141,168,84,84,49,49,49,48,56,56,57,84,244,143,141,169,84,84,49,49,49,48,56,57,48,84,244,143,141,170,84,84,49,49,49,48,56,57,49,84,244,143,141,171,84,84,49,49,49,48,56,57,50,84,244,143,141,172,84,84,49,49,49,48,56,57,51,84,244,143,141,173,84,84,49,49,49,48,56,57,52,84,244,143,141,174,84,84,49,49,49,48,56,57,53,84,244,143,141,175,84,84,49,49,49,48,56,57,54,84,244,143,141,176,84,84,49,49,49,48,56,57,55,84,244,143,141,177,84,84,49,49,49,48,56,57,56,84,244,143,141,178,84,84,49,49,49,48,56,57,57,84,244,143,141,179,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20604 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20604_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20604_s.txt", Encoding.UTF8);

    public Test20604() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers2997cf743a0f481c9f696984938aa742",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,55,51,49,53,51,84,244,134,128,129,84,84,49,48,55,51,49,54,53,84,244,134,128,141,84,84,49,48,55,51,49,54,55,84,244,134,128,143,84,84,49,48,55,51,49,54,56,84,244,134,128,144,84,84,49,48,55,51,49,56,49,84,244,134,128,157,84,84,49,48,55,51,50,49,54,84,244,134,129,128,84,84,49,48,55,51,50,49,55,84,244,134,129,129,84,84,49,48,55,51,50,49,56,84,244,134,129,130,84,84,49,48,55,51,50,49,57,84,244,134,129,131,84,84,49,48,55,51,50,50,48,84,244,134,129,132,84,84,49,48,55,51,50,50,49,84,244,134,129,133,84,84,49,48,55,51,50,50,50,84,244,134,129,134,84,84,49,48,55,51,50,50,51,84,244,134,129,135,84,84,49,48,55,51,50,50,52,84,244,134,129,136,84,84,49,48,55,51,50,50,53,84,244,134,129,137,84,84,49,48,55,51,50,50,54,84,244,134,129,138,84,84,49,48,55,51,50,50,55,84,244,134,129,139,84,84,49,48,55,51,50,50,56,84,244,134,129,140,84,84,49,48,55,51,50,50,57,84,244,134,129,141,84,84,49,48,55,51,50,51,48,84,244,134,129,142,84,84,49,48,55,51,50,51,49,84,244,134,129,143,84,84,49,48,55,51,50,51,50,84,244,134,129,144,84,84,49,48,55,51,50,51,51,84,244,134,129,145,84,84,49,48,55,51,50,51,52,84,244,134,129,146,84,84,49,48,55,51,50,51,53,84,244,134,129,147,84,84,49,48,55,51,50,51,54,84,244,134,129,148,84,84,49,48,55,51,50,51,55,84,244,134,129,149,84,84,49,48,55,51,50,51,56,84,244,134,129,150,84,84,49,48,55,51,50,51,57,84,244,134,129,151,84,84,49,48,55,51,50,52,48,84,244,134,129,152,84,84,49,48,55,51,50,52,49,84,244,134,129,153,84,84,49,48,55,51,50,52,50,84,244,134,129,154,84,84,49,48,55,51,50,52,51,84,244,134,129,155,84,84,49,48,55,51,50,52,52,84,244,134,129,156,84,84,49,48,55,51,50,52,53,84,244,134,129,157,84,84,49,48,55,51,50,52,54,84,244,134,129,158,84,84,49,48,55,51,50,52,55,84,244,134,129,159,84,84,49,48,55,51,50,52,56,84,244,134,129,160,84,84,49,48,55,51,50,52,57,84,244,134,129,161,84,84,49,48,55,51,50,53,48,84,244,134,129,162,84,84,49,48,55,51,50,53,49,84,244,134,129,163,84,84,49,48,55,51,50,53,50,84,244,134,129,164,84,84,49,48,55,51,50,53,51,84,244,134,129,165,84,84,49,48,55,51,50,53,52,84,244,134,129,166,84,84,49,48,55,51,50,53,53,84,244,134,129,167,84,84,49,48,55,51,50,53,54,84,244,134,129,168,84,84,49,48,55,51,50,53,55,84,244,134,129,169,84,84,49,48,55,51,50,53,56,84,244,134,129,170,84,84,49,48,55,51,50,53,57,84,244,134,129,171,84,84,49,48,55,51,50,54,48,84,244,134,129,172,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20735 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20735_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20735_s.txt", Encoding.UTF8);

    public Test20735() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersc5ae22b09f3f4a3eaff829adc5876203",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,57,51,51,49,51,84,244,138,187,129,84,84,49,48,57,51,51,50,53,84,244,138,187,141,84,84,49,48,57,51,51,50,55,84,244,138,187,143,84,84,49,48,57,51,51,50,56,84,244,138,187,144,84,84,49,48,57,51,51,52,49,84,244,138,187,157,84,84,49,48,57,51,51,55,55,84,244,138,188,129,84,84,49,48,57,51,51,56,57,84,244,138,188,141,84,84,49,48,57,51,51,57,49,84,244,138,188,143,84,84,49,48,57,51,51,57,50,84,244,138,188,144,84,84,49,48,57,51,52,48,53,84,244,138,188,157,84,84,49,48,57,51,52,52,49,84,244,138,189,129,84,84,49,48,57,51,52,53,51,84,244,138,189,141,84,84,49,48,57,51,52,53,53,84,244,138,189,143,84,84,49,48,57,51,52,53,54,84,244,138,189,144,84,84,49,48,57,51,52,54,57,84,244,138,189,157,84,84,49,48,57,51,53,48,53,84,244,138,190,129,84,84,49,48,57,51,53,49,55,84,244,138,190,141,84,84,49,48,57,51,53,49,57,84,244,138,190,143,84,84,49,48,57,51,53,50,48,84,244,138,190,144,84,84,49,48,57,51,53,51,51,84,244,138,190,157,84,84,49,48,57,51,53,54,57,84,244,138,191,129,84,84,49,48,57,51,53,56,49,84,244,138,191,141,84,84,49,48,57,51,53,56,51,84,244,138,191,143,84,84,49,48,57,51,53,56,52,84,244,138,191,144,84,84,49,48,57,51,53,57,55,84,244,138,191,157,84,84,49,48,57,51,54,51,51,84,244,139,128,129,84,84,49,48,57,51,54,52,53,84,244,139,128,141,84,84,49,48,57,51,54,52,55,84,244,139,128,143,84,84,49,48,57,51,54,52,56,84,244,139,128,144,84,84,49,48,57,51,54,54,49,84,244,139,128,157,84,84,49,48,57,51,54,57,54,84,244,139,129,128,84,84,49,48,57,51,54,57,55,84,244,139,129,129,84,84,49,48,57,51,54,57,56,84,244,139,129,130,84,84,49,48,57,51,54,57,57,84,244,139,129,131,84,84,49,48,57,51,55,48,48,84,244,139,129,132,84,84,49,48,57,51,55,48,49,84,244,139,129,133,84,84,49,48,57,51,55,48,50,84,244,139,129,134,84,84,49,48,57,51,55,48,51,84,244,139,129,135,84,84,49,48,57,51,55,48,52,84,244,139,129,136,84,84,49,48,57,51,55,48,53,84,244,139,129,137,84,84,49,48,57,51,55,48,54,84,244,139,129,138,84,84,49,48,57,51,55,48,55,84,244,139,129,139,84,84,49,48,57,51,55,48,56,84,244,139,129,140,84,84,49,48,57,51,55,48,57,84,244,139,129,141,84,84,49,48,57,51,55,49,48,84,244,139,129,142,84,84,49,48,57,51,55,49,49,84,244,139,129,143,84,84,49,48,57,51,55,49,50,84,244,139,129,144,84,84,49,48,57,51,55,49,51,84,244,139,129,145,84,84,49,48,57,51,55,49,52,84,244,139,129,146,84,84,49,48,57,51,55,49,53,84,244,139,129,147,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19872 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19872_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19872_s.txt", Encoding.UTF8);

    public Test19872() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers7032abc4111d4702bce9d36696a0a648",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,49,57,50,57,55,84,243,160,156,129,84,84,57,49,57,51,48,57,84,243,160,156,141,84,84,57,49,57,51,49,49,84,243,160,156,143,84,84,57,49,57,51,49,50,84,243,160,156,144,84,84,57,49,57,51,50,53,84,243,160,156,157,84,84,57,49,57,51,54,48,84,243,160,157,128,84,84,57,49,57,51,54,49,84,243,160,157,129,84,84,57,49,57,51,54,50,84,243,160,157,130,84,84,57,49,57,51,54,51,84,243,160,157,131,84,84,57,49,57,51,54,52,84,243,160,157,132,84,84,57,49,57,51,54,53,84,243,160,157,133,84,84,57,49,57,51,54,54,84,243,160,157,134,84,84,57,49,57,51,54,55,84,243,160,157,135,84,84,57,49,57,51,54,56,84,243,160,157,136,84,84,57,49,57,51,54,57,84,243,160,157,137,84,84,57,49,57,51,55,48,84,243,160,157,138,84,84,57,49,57,51,55,49,84,243,160,157,139,84,84,57,49,57,51,55,50,84,243,160,157,140,84,84,57,49,57,51,55,51,84,243,160,157,141,84,84,57,49,57,51,55,52,84,243,160,157,142,84,84,57,49,57,51,55,53,84,243,160,157,143,84,84,57,49,57,51,55,54,84,243,160,157,144,84,84,57,49,57,51,55,55,84,243,160,157,145,84,84,57,49,57,51,55,56,84,243,160,157,146,84,84,57,49,57,51,55,57,84,243,160,157,147,84,84,57,49,57,51,56,48,84,243,160,157,148,84,84,57,49,57,51,56,49,84,243,160,157,149,84,84,57,49,57,51,56,50,84,243,160,157,150,84,84,57,49,57,51,56,51,84,243,160,157,151,84,84,57,49,57,51,56,52,84,243,160,157,152,84,84,57,49,57,51,56,53,84,243,160,157,153,84,84,57,49,57,51,56,54,84,243,160,157,154,84,84,57,49,57,51,56,55,84,243,160,157,155,84,84,57,49,57,51,56,56,84,243,160,157,156,84,84,57,49,57,51,56,57,84,243,160,157,157,84,84,57,49,57,51,57,48,84,243,160,157,158,84,84,57,49,57,51,57,49,84,243,160,157,159,84,84,57,49,57,51,57,50,84,243,160,157,160,84,84,57,49,57,51,57,51,84,243,160,157,161,84,84,57,49,57,51,57,52,84,243,160,157,162,84,84,57,49,57,51,57,53,84,243,160,157,163,84,84,57,49,57,51,57,54,84,243,160,157,164,84,84,57,49,57,51,57,55,84,243,160,157,165,84,84,57,49,57,51,57,56,84,243,160,157,166,84,84,57,49,57,51,57,57,84,243,160,157,167,84,84,57,49,57,52,48,48,84,243,160,157,168,84,84,57,49,57,52,48,49,84,243,160,157,169,84,84,57,49,57,52,48,50,84,243,160,157,170,84,84,57,49,57,52,48,51,84,243,160,157,171,84,84,57,49,57,52,48,52,84,243,160,157,172,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20828 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20828_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20828_s.txt", Encoding.UTF8);

    public Test20828() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersf4b0dcea8f7b4ccf92e1f36b952ddf93",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,50,55,54,57,84,244,141,142,177,84,84,49,49,48,50,55,55,48,84,244,141,142,178,84,84,49,49,48,50,55,55,49,84,244,141,142,179,84,84,49,49,48,50,55,55,50,84,244,141,142,180,84,84,49,49,48,50,55,55,51,84,244,141,142,181,84,84,49,49,48,50,55,55,52,84,244,141,142,182,84,84,49,49,48,50,55,55,53,84,244,141,142,183,84,84,49,49,48,50,55,55,54,84,244,141,142,184,84,84,49,49,48,50,55,55,55,84,244,141,142,185,84,84,49,49,48,50,55,55,56,84,244,141,142,186,84,84,49,49,48,50,55,55,57,84,244,141,142,187,84,84,49,49,48,50,55,56,48,84,244,141,142,188,84,84,49,49,48,50,55,56,49,84,244,141,142,189,84,84,49,49,48,50,55,56,50,84,244,141,142,190,84,84,49,49,48,50,55,56,51,84,244,141,142,191,84,84,49,49,48,50,55,56,52,84,244,141,143,128,84,84,49,49,48,50,55,56,53,84,244,141,143,129,84,84,49,49,48,50,55,56,54,84,244,141,143,130,84,84,49,49,48,50,55,56,55,84,244,141,143,131,84,84,49,49,48,50,55,56,56,84,244,141,143,132,84,84,49,49,48,50,55,56,57,84,244,141,143,133,84,84,49,49,48,50,55,57,48,84,244,141,143,134,84,84,49,49,48,50,55,57,49,84,244,141,143,135,84,84,49,49,48,50,55,57,50,84,244,141,143,136,84,84,49,49,48,50,55,57,51,84,244,141,143,137,84,84,49,49,48,50,55,57,52,84,244,141,143,138,84,84,49,49,48,50,55,57,53,84,244,141,143,139,84,84,49,49,48,50,55,57,54,84,244,141,143,140,84,84,49,49,48,50,55,57,55,84,244,141,143,141,84,84,49,49,48,50,55,57,56,84,244,141,143,142,84,84,49,49,48,50,55,57,57,84,244,141,143,143,84,84,49,49,48,50,56,48,48,84,244,141,143,144,84,84,49,49,48,50,56,48,49,84,244,141,143,145,84,84,49,49,48,50,56,48,50,84,244,141,143,146,84,84,49,49,48,50,56,48,51,84,244,141,143,147,84,84,49,49,48,50,56,48,52,84,244,141,143,148,84,84,49,49,48,50,56,48,53,84,244,141,143,149,84,84,49,49,48,50,56,48,54,84,244,141,143,150,84,84,49,49,48,50,56,48,55,84,244,141,143,151,84,84,49,49,48,50,56,48,56,84,244,141,143,152,84,84,49,49,48,50,56,48,57,84,244,141,143,153,84,84,49,49,48,50,56,49,48,84,244,141,143,154,84,84,49,49,48,50,56,49,49,84,244,141,143,155,84,84,49,49,48,50,56,49,50,84,244,141,143,156,84,84,49,49,48,50,56,49,51,84,244,141,143,157,84,84,49,49,48,50,56,49,52,84,244,141,143,158,84,84,49,49,48,50,56,49,53,84,244,141,143,159,84,84,49,49,48,50,56,49,54,84,244,141,143,160,84,84,49,49,48,50,56,49,55,84,244,141,143,161,84,84,49,49,48,50,56,49,56,84,244,141,143,162,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21084 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21084_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21084_s.txt", Encoding.UTF8);

    public Test21084() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers79aa3dd90e344ebe9466f3cb0c56378a",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,50,51,48,48,84,244,143,163,172,84,84,49,49,49,50,51,48,49,84,244,143,163,173,84,84,49,49,49,50,51,48,50,84,244,143,163,174,84,84,49,49,49,50,51,48,51,84,244,143,163,175,84,84,49,49,49,50,51,48,52,84,244,143,163,176,84,84,49,49,49,50,51,48,53,84,244,143,163,177,84,84,49,49,49,50,51,48,54,84,244,143,163,178,84,84,49,49,49,50,51,48,55,84,244,143,163,179,84,84,49,49,49,50,51,48,56,84,244,143,163,180,84,84,49,49,49,50,51,48,57,84,244,143,163,181,84,84,49,49,49,50,51,49,48,84,244,143,163,182,84,84,49,49,49,50,51,49,49,84,244,143,163,183,84,84,49,49,49,50,51,49,50,84,244,143,163,184,84,84,49,49,49,50,51,49,51,84,244,143,163,185,84,84,49,49,49,50,51,49,52,84,244,143,163,186,84,84,49,49,49,50,51,49,53,84,244,143,163,187,84,84,49,49,49,50,51,49,54,84,244,143,163,188,84,84,49,49,49,50,51,49,55,84,244,143,163,189,84,84,49,49,49,50,51,49,56,84,244,143,163,190,84,84,49,49,49,50,51,49,57,84,244,143,163,191,84,84,49,49,49,50,51,50,48,84,244,143,164,128,84,84,49,49,49,50,51,50,49,84,244,143,164,129,84,84,49,49,49,50,51,50,50,84,244,143,164,130,84,84,49,49,49,50,51,50,51,84,244,143,164,131,84,84,49,49,49,50,51,50,52,84,244,143,164,132,84,84,49,49,49,50,51,50,53,84,244,143,164,133,84,84,49,49,49,50,51,50,54,84,244,143,164,134,84,84,49,49,49,50,51,50,55,84,244,143,164,135,84,84,49,49,49,50,51,50,56,84,244,143,164,136,84,84,49,49,49,50,51,50,57,84,244,143,164,137,84,84,49,49,49,50,51,51,48,84,244,143,164,138,84,84,49,49,49,50,51,51,49,84,244,143,164,139,84,84,49,49,49,50,51,51,50,84,244,143,164,140,84,84,49,49,49,50,51,51,51,84,244,143,164,141,84,84,49,49,49,50,51,51,52,84,244,143,164,142,84,84,49,49,49,50,51,51,53,84,244,143,164,143,84,84,49,49,49,50,51,51,54,84,244,143,164,144,84,84,49,49,49,50,51,51,55,84,244,143,164,145,84,84,49,49,49,50,51,51,56,84,244,143,164,146,84,84,49,49,49,50,51,51,57,84,244,143,164,147,84,84,49,49,49,50,51,52,48,84,244,143,164,148,84,84,49,49,49,50,51,52,49,84,244,143,164,149,84,84,49,49,49,50,51,52,50,84,244,143,164,150,84,84,49,49,49,50,51,52,51,84,244,143,164,151,84,84,49,49,49,50,51,52,52,84,244,143,164,152,84,84,49,49,49,50,51,52,53,84,244,143,164,153,84,84,49,49,49,50,51,52,54,84,244,143,164,154,84,84,49,49,49,50,51,52,55,84,244,143,164,155,84,84,49,49,49,50,51,52,56,84,244,143,164,156,84,84,49,49,49,50,51,52,57,84,244,143,164,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20765 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20765_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20765_s.txt", Encoding.UTF8);

    public Test20765() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersc5ae22b09f3f4a3eaff829adc5876203",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,57,56,51,56,49,84,244,140,138,141,84,84,49,48,57,56,51,56,51,84,244,140,138,143,84,84,49,48,57,56,51,56,52,84,244,140,138,144,84,84,49,48,57,56,51,57,55,84,244,140,138,157,84,84,49,48,57,56,52,51,51,84,244,140,139,129,84,84,49,48,57,56,52,52,53,84,244,140,139,141,84,84,49,48,57,56,52,52,55,84,244,140,139,143,84,84,49,48,57,56,52,52,56,84,244,140,139,144,84,84,49,48,57,56,52,54,49,84,244,140,139,157,84,84,49,48,57,56,52,57,55,84,244,140,140,129,84,84,49,48,57,56,53,48,57,84,244,140,140,141,84,84,49,48,57,56,53,49,49,84,244,140,140,143,84,84,49,48,57,56,53,49,50,84,244,140,140,144,84,84,49,48,57,56,53,50,53,84,244,140,140,157,84,84,49,48,57,56,53,54,48,84,244,140,141,128,84,84,49,48,57,56,53,54,49,84,244,140,141,129,84,84,49,48,57,56,53,54,50,84,244,140,141,130,84,84,49,48,57,56,53,54,51,84,244,140,141,131,84,84,49,48,57,56,53,54,52,84,244,140,141,132,84,84,49,48,57,56,53,54,53,84,244,140,141,133,84,84,49,48,57,56,53,54,54,84,244,140,141,134,84,84,49,48,57,56,53,54,55,84,244,140,141,135,84,84,49,48,57,56,53,54,56,84,244,140,141,136,84,84,49,48,57,56,53,54,57,84,244,140,141,137,84,84,49,48,57,56,53,55,48,84,244,140,141,138,84,84,49,48,57,56,53,55,49,84,244,140,141,139,84,84,49,48,57,56,53,55,50,84,244,140,141,140,84,84,49,48,57,56,53,55,51,84,244,140,141,141,84,84,49,48,57,56,53,55,52,84,244,140,141,142,84,84,49,48,57,56,53,55,53,84,244,140,141,143,84,84,49,48,57,56,53,55,54,84,244,140,141,144,84,84,49,48,57,56,53,55,55,84,244,140,141,145,84,84,49,48,57,56,53,55,56,84,244,140,141,146,84,84,49,48,57,56,53,55,57,84,244,140,141,147,84,84,49,48,57,56,53,56,48,84,244,140,141,148,84,84,49,48,57,56,53,56,49,84,244,140,141,149,84,84,49,48,57,56,53,56,50,84,244,140,141,150,84,84,49,48,57,56,53,56,51,84,244,140,141,151,84,84,49,48,57,56,53,56,52,84,244,140,141,152,84,84,49,48,57,56,53,56,53,84,244,140,141,153,84,84,49,48,57,56,53,56,54,84,244,140,141,154,84,84,49,48,57,56,53,56,55,84,244,140,141,155,84,84,49,48,57,56,53,56,56,84,244,140,141,156,84,84,49,48,57,56,53,56,57,84,244,140,141,157,84,84,49,48,57,56,53,57,48,84,244,140,141,158,84,84,49,48,57,56,53,57,49,84,244,140,141,159,84,84,49,48,57,56,53,57,50,84,244,140,141,160,84,84,49,48,57,56,53,57,51,84,244,140,141,161,84,84,49,48,57,56,53,57,52,84,244,140,141,162,84,84,49,48,57,56,53,57,53,84,244,140,141,163,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19808 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19808_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19808_s.txt", Encoding.UTF8);

    public Test19808() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers3d1fce2fe43b489ca49e5d4066014499",
                        blob: Encoding.UTF8.GetString(new byte[]{84,53,55,52,54,53,84,238,129,185,84,84,53,55,52,54,54,84,238,129,186,84,84,53,55,52,54,55,84,238,129,187,84,84,53,55,52,54,56,84,238,129,188,84,84,53,55,52,54,57,84,238,129,189,84,84,53,55,52,55,48,84,238,129,190,84,84,53,55,52,55,49,84,238,129,191,84,84,53,55,52,55,51,84,238,130,129,84,84,53,55,52,56,53,84,238,130,141,84,84,53,55,52,56,55,84,238,130,143,84,84,53,55,52,56,56,84,238,130,144,84,84,53,55,53,48,49,84,238,130,157,84,84,53,55,53,51,55,84,238,131,129,84,84,53,55,53,52,57,84,238,131,141,84,84,53,55,53,53,49,84,238,131,143,84,84,53,55,53,53,50,84,238,131,144,84,84,53,55,53,54,53,84,238,131,157,84,84,53,55,54,48,49,84,238,132,129,84,84,53,55,54,49,51,84,238,132,141,84,84,53,55,54,49,53,84,238,132,143,84,84,53,55,54,49,54,84,238,132,144,84,84,53,55,54,50,57,84,238,132,157,84,84,53,55,54,54,53,84,238,133,129,84,84,53,55,54,55,55,84,238,133,141,84,84,53,55,54,55,57,84,238,133,143,84,84,53,55,54,56,48,84,238,133,144,84,84,53,55,54,57,51,84,238,133,157,84,84,53,55,55,50,57,84,238,134,129,84,84,53,55,55,52,49,84,238,134,141,84,84,53,55,55,52,51,84,238,134,143,84,84,53,55,55,52,52,84,238,134,144,84,84,53,55,55,53,55,84,238,134,157,84,84,53,55,55,57,51,84,238,135,129,84,84,53,55,56,48,53,84,238,135,141,84,84,53,55,56,48,55,84,238,135,143,84,84,53,55,56,48,56,84,238,135,144,84,84,53,55,56,50,49,84,238,135,157,84,84,53,55,56,53,55,84,238,136,129,84,84,53,55,56,54,57,84,238,136,141,84,84,53,55,56,55,49,84,238,136,143,84,84,53,55,56,55,50,84,238,136,144,84,84,53,55,56,56,53,84,238,136,157,84,84,53,55,57,50,49,84,238,137,129,84,84,53,55,57,51,51,84,238,137,141,84,84,53,55,57,51,53,84,238,137,143,84,84,53,55,57,51,54,84,238,137,144,84,84,53,55,57,52,57,84,238,137,157,84,84,53,55,57,56,53,84,238,138,129,84,84,53,55,57,57,55,84,238,138,141,84,84,53,55,57,57,57,84,238,138,143,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19935 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19935_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19935_s.txt", Encoding.UTF8);

    public Test19935() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersbf5ecfbea5a24d8a8188936c9be6fa20",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,57,48,57,56,57,84,243,177,188,141,84,84,57,57,48,57,57,49,84,243,177,188,143,84,84,57,57,48,57,57,50,84,243,177,188,144,84,84,57,57,49,48,48,53,84,243,177,188,157,84,84,57,57,49,48,52,49,84,243,177,189,129,84,84,57,57,49,48,53,51,84,243,177,189,141,84,84,57,57,49,48,53,53,84,243,177,189,143,84,84,57,57,49,48,53,54,84,243,177,189,144,84,84,57,57,49,48,54,57,84,243,177,189,157,84,84,57,57,49,49,48,53,84,243,177,190,129,84,84,57,57,49,49,49,55,84,243,177,190,141,84,84,57,57,49,49,49,57,84,243,177,190,143,84,84,57,57,49,49,50,48,84,243,177,190,144,84,84,57,57,49,49,51,51,84,243,177,190,157,84,84,57,57,49,49,54,57,84,243,177,191,129,84,84,57,57,49,49,56,49,84,243,177,191,141,84,84,57,57,49,49,56,51,84,243,177,191,143,84,84,57,57,49,49,56,52,84,243,177,191,144,84,84,57,57,49,49,57,55,84,243,177,191,157,84,84,57,57,49,50,51,51,84,243,178,128,129,84,84,57,57,49,50,52,53,84,243,178,128,141,84,84,57,57,49,50,52,55,84,243,178,128,143,84,84,57,57,49,50,52,56,84,243,178,128,144,84,84,57,57,49,50,54,49,84,243,178,128,157,84,84,57,57,49,50,57,54,84,243,178,129,128,84,84,57,57,49,50,57,55,84,243,178,129,129,84,84,57,57,49,50,57,56,84,243,178,129,130,84,84,57,57,49,50,57,57,84,243,178,129,131,84,84,57,57,49,51,48,48,84,243,178,129,132,84,84,57,57,49,51,48,49,84,243,178,129,133,84,84,57,57,49,51,48,50,84,243,178,129,134,84,84,57,57,49,51,48,51,84,243,178,129,135,84,84,57,57,49,51,48,52,84,243,178,129,136,84,84,57,57,49,51,48,53,84,243,178,129,137,84,84,57,57,49,51,48,54,84,243,178,129,138,84,84,57,57,49,51,48,55,84,243,178,129,139,84,84,57,57,49,51,48,56,84,243,178,129,140,84,84,57,57,49,51,48,57,84,243,178,129,141,84,84,57,57,49,51,49,48,84,243,178,129,142,84,84,57,57,49,51,49,49,84,243,178,129,143,84,84,57,57,49,51,49,50,84,243,178,129,144,84,84,57,57,49,51,49,51,84,243,178,129,145,84,84,57,57,49,51,49,52,84,243,178,129,146,84,84,57,57,49,51,49,53,84,243,178,129,147,84,84,57,57,49,51,49,54,84,243,178,129,148,84,84,57,57,49,51,49,55,84,243,178,129,149,84,84,57,57,49,51,49,56,84,243,178,129,150,84,84,57,57,49,51,49,57,84,243,178,129,151,84,84,57,57,49,51,50,48,84,243,178,129,152,84,84,57,57,49,51,50,49,84,243,178,129,153,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20094 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20094_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20094_s.txt", Encoding.UTF8);

    public Test20094() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersb3c703c6e551430d9c914c24c3792dd5",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,49,54,50,48,55,84,243,184,134,143,84,84,49,48,49,54,50,48,56,84,243,184,134,144,84,84,49,48,49,54,50,50,49,84,243,184,134,157,84,84,49,48,49,54,50,53,55,84,243,184,135,129,84,84,49,48,49,54,50,54,57,84,243,184,135,141,84,84,49,48,49,54,50,55,49,84,243,184,135,143,84,84,49,48,49,54,50,55,50,84,243,184,135,144,84,84,49,48,49,54,50,56,53,84,243,184,135,157,84,84,49,48,49,54,51,50,49,84,243,184,136,129,84,84,49,48,49,54,51,51,51,84,243,184,136,141,84,84,49,48,49,54,51,51,53,84,243,184,136,143,84,84,49,48,49,54,51,51,54,84,243,184,136,144,84,84,49,48,49,54,51,52,57,84,243,184,136,157,84,84,49,48,49,54,51,56,53,84,243,184,137,129,84,84,49,48,49,54,51,57,55,84,243,184,137,141,84,84,49,48,49,54,51,57,57,84,243,184,137,143,84,84,49,48,49,54,52,48,48,84,243,184,137,144,84,84,49,48,49,54,52,49,51,84,243,184,137,157,84,84,49,48,49,54,52,52,57,84,243,184,138,129,84,84,49,48,49,54,52,54,49,84,243,184,138,141,84,84,49,48,49,54,52,54,51,84,243,184,138,143,84,84,49,48,49,54,52,54,52,84,243,184,138,144,84,84,49,48,49,54,52,55,55,84,243,184,138,157,84,84,49,48,49,54,53,49,51,84,243,184,139,129,84,84,49,48,49,54,53,50,53,84,243,184,139,141,84,84,49,48,49,54,53,50,55,84,243,184,139,143,84,84,49,48,49,54,53,50,56,84,243,184,139,144,84,84,49,48,49,54,53,52,49,84,243,184,139,157,84,84,49,48,49,54,53,55,55,84,243,184,140,129,84,84,49,48,49,54,53,56,57,84,243,184,140,141,84,84,49,48,49,54,53,57,49,84,243,184,140,143,84,84,49,48,49,54,53,57,50,84,243,184,140,144,84,84,49,48,49,54,54,48,53,84,243,184,140,157,84,84,49,48,49,54,54,52,48,84,243,184,141,128,84,84,49,48,49,54,54,52,49,84,243,184,141,129,84,84,49,48,49,54,54,52,50,84,243,184,141,130,84,84,49,48,49,54,54,52,51,84,243,184,141,131,84,84,49,48,49,54,54,52,52,84,243,184,141,132,84,84,49,48,49,54,54,52,53,84,243,184,141,133,84,84,49,48,49,54,54,52,54,84,243,184,141,134,84,84,49,48,49,54,54,52,55,84,243,184,141,135,84,84,49,48,49,54,54,52,56,84,243,184,141,136,84,84,49,48,49,54,54,52,57,84,243,184,141,137,84,84,49,48,49,54,54,53,48,84,243,184,141,138,84,84,49,48,49,54,54,53,49,84,243,184,141,139,84,84,49,48,49,54,54,53,50,84,243,184,141,140,84,84,49,48,49,54,54,53,51,84,243,184,141,141,84,84,49,48,49,54,54,53,52,84,243,184,141,142,84,84,49,48,49,54,54,53,53,84,243,184,141,143,84,84,49,48,49,54,54,53,54,84,243,184,141,144,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20957 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20957_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20957_s.txt", Encoding.UTF8);

    public Test20957() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersdf87e0f5374149afa792ac52b484870e",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,53,56,49,57,84,244,141,190,155,84,84,49,49,48,53,56,50,48,84,244,141,190,156,84,84,49,49,48,53,56,50,49,84,244,141,190,157,84,84,49,49,48,53,56,50,50,84,244,141,190,158,84,84,49,49,48,53,56,50,51,84,244,141,190,159,84,84,49,49,48,53,56,50,52,84,244,141,190,160,84,84,49,49,48,53,56,50,53,84,244,141,190,161,84,84,49,49,48,53,56,50,54,84,244,141,190,162,84,84,49,49,48,53,56,50,55,84,244,141,190,163,84,84,49,49,48,53,56,50,56,84,244,141,190,164,84,84,49,49,48,53,56,50,57,84,244,141,190,165,84,84,49,49,48,53,56,51,48,84,244,141,190,166,84,84,49,49,48,53,56,51,49,84,244,141,190,167,84,84,49,49,48,53,56,51,50,84,244,141,190,168,84,84,49,49,48,53,56,51,51,84,244,141,190,169,84,84,49,49,48,53,56,51,52,84,244,141,190,170,84,84,49,49,48,53,56,51,53,84,244,141,190,171,84,84,49,49,48,53,56,51,54,84,244,141,190,172,84,84,49,49,48,53,56,51,55,84,244,141,190,173,84,84,49,49,48,53,56,51,56,84,244,141,190,174,84,84,49,49,48,53,56,51,57,84,244,141,190,175,84,84,49,49,48,53,56,52,48,84,244,141,190,176,84,84,49,49,48,53,56,52,49,84,244,141,190,177,84,84,49,49,48,53,56,52,50,84,244,141,190,178,84,84,49,49,48,53,56,52,51,84,244,141,190,179,84,84,49,49,48,53,56,52,52,84,244,141,190,180,84,84,49,49,48,53,56,52,53,84,244,141,190,181,84,84,49,49,48,53,56,52,54,84,244,141,190,182,84,84,49,49,48,53,56,52,55,84,244,141,190,183,84,84,49,49,48,53,56,52,56,84,244,141,190,184,84,84,49,49,48,53,56,52,57,84,244,141,190,185,84,84,49,49,48,53,56,53,48,84,244,141,190,186,84,84,49,49,48,53,56,53,49,84,244,141,190,187,84,84,49,49,48,53,56,53,50,84,244,141,190,188,84,84,49,49,48,53,56,53,51,84,244,141,190,189,84,84,49,49,48,53,56,53,52,84,244,141,190,190,84,84,49,49,48,53,56,53,53,84,244,141,190,191,84,84,49,49,48,53,56,53,54,84,244,141,191,128,84,84,49,49,48,53,56,53,55,84,244,141,191,129,84,84,49,49,48,53,56,53,56,84,244,141,191,130,84,84,49,49,48,53,56,53,57,84,244,141,191,131,84,84,49,49,48,53,56,54,48,84,244,141,191,132,84,84,49,49,48,53,56,54,49,84,244,141,191,133,84,84,49,49,48,53,56,54,50,84,244,141,191,134,84,84,49,49,48,53,56,54,51,84,244,141,191,135,84,84,49,49,48,53,56,54,52,84,244,141,191,136,84,84,49,49,48,53,56,54,53,84,244,141,191,137,84,84,49,49,48,53,56,54,54,84,244,141,191,138,84,84,49,49,48,53,56,54,55,84,244,141,191,139,84,84,49,49,48,53,56,54,56,84,244,141,191,140,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21149 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21149_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21149_s.txt", Encoding.UTF8);

    public Test21149() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers56d1c908d8f44b69abe6817b1847a0f6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,51,56,53,48,84,244,143,187,186,84,84,49,49,49,51,56,53,49,84,244,143,187,187,84,84,49,49,49,51,56,53,50,84,244,143,187,188,84,84,49,49,49,51,56,53,51,84,244,143,187,189,84,84,49,49,49,51,56,53,52,84,244,143,187,190,84,84,49,49,49,51,56,53,53,84,244,143,187,191,84,84,49,49,49,51,56,53,54,84,244,143,188,128,84,84,49,49,49,51,56,53,55,84,244,143,188,129,84,84,49,49,49,51,56,53,56,84,244,143,188,130,84,84,49,49,49,51,56,53,57,84,244,143,188,131,84,84,49,49,49,51,56,54,48,84,244,143,188,132,84,84,49,49,49,51,56,54,49,84,244,143,188,133,84,84,49,49,49,51,56,54,50,84,244,143,188,134,84,84,49,49,49,51,56,54,51,84,244,143,188,135,84,84,49,49,49,51,56,54,52,84,244,143,188,136,84,84,49,49,49,51,56,54,53,84,244,143,188,137,84,84,49,49,49,51,56,54,54,84,244,143,188,138,84,84,49,49,49,51,56,54,55,84,244,143,188,139,84,84,49,49,49,51,56,54,56,84,244,143,188,140,84,84,49,49,49,51,56,54,57,84,244,143,188,141,84,84,49,49,49,51,56,55,48,84,244,143,188,142,84,84,49,49,49,51,56,55,49,84,244,143,188,143,84,84,49,49,49,51,56,55,50,84,244,143,188,144,84,84,49,49,49,51,56,55,51,84,244,143,188,145,84,84,49,49,49,51,56,55,52,84,244,143,188,146,84,84,49,49,49,51,56,55,53,84,244,143,188,147,84,84,49,49,49,51,56,55,54,84,244,143,188,148,84,84,49,49,49,51,56,55,55,84,244,143,188,149,84,84,49,49,49,51,56,55,56,84,244,143,188,150,84,84,49,49,49,51,56,55,57,84,244,143,188,151,84,84,49,49,49,51,56,56,48,84,244,143,188,152,84,84,49,49,49,51,56,56,49,84,244,143,188,153,84,84,49,49,49,51,56,56,50,84,244,143,188,154,84,84,49,49,49,51,56,56,51,84,244,143,188,155,84,84,49,49,49,51,56,56,52,84,244,143,188,156,84,84,49,49,49,51,56,56,53,84,244,143,188,157,84,84,49,49,49,51,56,56,54,84,244,143,188,158,84,84,49,49,49,51,56,56,55,84,244,143,188,159,84,84,49,49,49,51,56,56,56,84,244,143,188,160,84,84,49,49,49,51,56,56,57,84,244,143,188,161,84,84,49,49,49,51,56,57,48,84,244,143,188,162,84,84,49,49,49,51,56,57,49,84,244,143,188,163,84,84,49,49,49,51,56,57,50,84,244,143,188,164,84,84,49,49,49,51,56,57,51,84,244,143,188,165,84,84,49,49,49,51,56,57,52,84,244,143,188,166,84,84,49,49,49,51,56,57,53,84,244,143,188,167,84,84,49,49,49,51,56,57,54,84,244,143,188,168,84,84,49,49,49,51,56,57,55,84,244,143,188,169,84,84,49,49,49,51,56,57,56,84,244,143,188,170,84,84,49,49,49,51,56,57,57,84,244,143,188,171,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21566 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21566_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21566_s.txt", Encoding.UTF8);

    public Test21566() : base(recordedRequest, recordedResponse, "accounts8d43a03f9bb74b2")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a03f9bb74b2",
                        container: "containers422c0a9bbaf3431885276f977c734a65",
                        blob: "Blobed59494f363c422db587326d01282ae4",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 0,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20574 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20574_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20574_s.txt", Encoding.UTF8);

    public Test20574() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers2997cf743a0f481c9f696984938aa742",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,54,55,57,54,57,84,244,132,175,129,84,84,49,48,54,55,57,56,49,84,244,132,175,141,84,84,49,48,54,55,57,56,51,84,244,132,175,143,84,84,49,48,54,55,57,56,52,84,244,132,175,144,84,84,49,48,54,55,57,57,55,84,244,132,175,157,84,84,49,48,54,56,48,51,51,84,244,132,176,129,84,84,49,48,54,56,48,52,53,84,244,132,176,141,84,84,49,48,54,56,48,52,55,84,244,132,176,143,84,84,49,48,54,56,48,52,56,84,244,132,176,144,84,84,49,48,54,56,48,54,49,84,244,132,176,157,84,84,49,48,54,56,48,57,55,84,244,132,177,129,84,84,49,48,54,56,49,48,57,84,244,132,177,141,84,84,49,48,54,56,49,49,49,84,244,132,177,143,84,84,49,48,54,56,49,49,50,84,244,132,177,144,84,84,49,48,54,56,49,50,53,84,244,132,177,157,84,84,49,48,54,56,49,54,49,84,244,132,178,129,84,84,49,48,54,56,49,55,51,84,244,132,178,141,84,84,49,48,54,56,49,55,53,84,244,132,178,143,84,84,49,48,54,56,49,55,54,84,244,132,178,144,84,84,49,48,54,56,49,56,57,84,244,132,178,157,84,84,49,48,54,56,50,50,53,84,244,132,179,129,84,84,49,48,54,56,50,51,55,84,244,132,179,141,84,84,49,48,54,56,50,51,57,84,244,132,179,143,84,84,49,48,54,56,50,52,48,84,244,132,179,144,84,84,49,48,54,56,50,53,51,84,244,132,179,157,84,84,49,48,54,56,50,56,57,84,244,132,180,129,84,84,49,48,54,56,51,48,49,84,244,132,180,141,84,84,49,48,54,56,51,48,51,84,244,132,180,143,84,84,49,48,54,56,51,48,52,84,244,132,180,144,84,84,49,48,54,56,51,49,55,84,244,132,180,157,84,84,49,48,54,56,51,53,51,84,244,132,181,129,84,84,49,48,54,56,51,54,53,84,244,132,181,141,84,84,49,48,54,56,51,54,55,84,244,132,181,143,84,84,49,48,54,56,51,54,56,84,244,132,181,144,84,84,49,48,54,56,51,56,49,84,244,132,181,157,84,84,49,48,54,56,52,49,55,84,244,132,182,129,84,84,49,48,54,56,52,50,57,84,244,132,182,141,84,84,49,48,54,56,52,51,49,84,244,132,182,143,84,84,49,48,54,56,52,51,50,84,244,132,182,144,84,84,49,48,54,56,52,52,53,84,244,132,182,157,84,84,49,48,54,56,52,56,49,84,244,132,183,129,84,84,49,48,54,56,52,57,51,84,244,132,183,141,84,84,49,48,54,56,52,57,53,84,244,132,183,143,84,84,49,48,54,56,52,57,54,84,244,132,183,144,84,84,49,48,54,56,53,48,57,84,244,132,183,157,84,84,49,48,54,56,53,52,53,84,244,132,184,129,84,84,49,48,54,56,53,53,55,84,244,132,184,141,84,84,49,48,54,56,53,53,57,84,244,132,184,143,84,84,49,48,54,56,53,54,48,84,244,132,184,144,84,84,49,48,54,56,53,55,51,84,244,132,184,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20608 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20608_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20608_s.txt", Encoding.UTF8);

    public Test20608() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers5f5b393ed8e742338d6031fb2e225092",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,55,51,50,54,49,84,244,134,129,173,84,84,49,48,55,51,50,54,50,84,244,134,129,174,84,84,49,48,55,51,50,54,51,84,244,134,129,175,84,84,49,48,55,51,50,54,52,84,244,134,129,176,84,84,49,48,55,51,50,54,53,84,244,134,129,177,84,84,49,48,55,51,50,54,54,84,244,134,129,178,84,84,49,48,55,51,50,54,55,84,244,134,129,179,84,84,49,48,55,51,50,54,56,84,244,134,129,180,84,84,49,48,55,51,50,54,57,84,244,134,129,181,84,84,49,48,55,51,50,55,48,84,244,134,129,182,84,84,49,48,55,51,50,55,49,84,244,134,129,183,84,84,49,48,55,51,50,55,50,84,244,134,129,184,84,84,49,48,55,51,50,55,51,84,244,134,129,185,84,84,49,48,55,51,50,55,52,84,244,134,129,186,84,84,49,48,55,51,50,55,53,84,244,134,129,187,84,84,49,48,55,51,50,55,54,84,244,134,129,188,84,84,49,48,55,51,50,55,55,84,244,134,129,189,84,84,49,48,55,51,50,55,56,84,244,134,129,190,84,84,49,48,55,51,50,55,57,84,244,134,129,191,84,84,49,48,55,51,50,56,49,84,244,134,130,129,84,84,49,48,55,51,50,57,51,84,244,134,130,141,84,84,49,48,55,51,50,57,53,84,244,134,130,143,84,84,49,48,55,51,50,57,54,84,244,134,130,144,84,84,49,48,55,51,51,48,57,84,244,134,130,157,84,84,49,48,55,51,51,52,53,84,244,134,131,129,84,84,49,48,55,51,51,53,55,84,244,134,131,141,84,84,49,48,55,51,51,53,57,84,244,134,131,143,84,84,49,48,55,51,51,54,48,84,244,134,131,144,84,84,49,48,55,51,51,55,51,84,244,134,131,157,84,84,49,48,55,51,52,48,57,84,244,134,132,129,84,84,49,48,55,51,52,50,49,84,244,134,132,141,84,84,49,48,55,51,52,50,51,84,244,134,132,143,84,84,49,48,55,51,52,50,52,84,244,134,132,144,84,84,49,48,55,51,52,51,55,84,244,134,132,157,84,84,49,48,55,51,52,55,51,84,244,134,133,129,84,84,49,48,55,51,52,56,53,84,244,134,133,141,84,84,49,48,55,51,52,56,55,84,244,134,133,143,84,84,49,48,55,51,52,56,56,84,244,134,133,144,84,84,49,48,55,51,53,48,49,84,244,134,133,157,84,84,49,48,55,51,53,51,55,84,244,134,134,129,84,84,49,48,55,51,53,52,57,84,244,134,134,141,84,84,49,48,55,51,53,53,49,84,244,134,134,143,84,84,49,48,55,51,53,53,50,84,244,134,134,144,84,84,49,48,55,51,53,54,53,84,244,134,134,157,84,84,49,48,55,51,54,48,49,84,244,134,135,129,84,84,49,48,55,51,54,49,51,84,244,134,135,141,84,84,49,48,55,51,54,49,53,84,244,134,135,143,84,84,49,48,55,51,54,49,54,84,244,134,135,144,84,84,49,48,55,51,54,50,57,84,244,134,135,157,84,84,49,48,55,51,54,54,53,84,244,134,136,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20511 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20511_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20511_s.txt", Encoding.UTF8);

    public Test20511() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers3bfa703d74a140e499ecce701b962b8c",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,55,56,52,53,84,244,130,144,181,84,84,49,48,53,55,56,52,54,84,244,130,144,182,84,84,49,48,53,55,56,52,55,84,244,130,144,183,84,84,49,48,53,55,56,52,56,84,244,130,144,184,84,84,49,48,53,55,56,52,57,84,244,130,144,185,84,84,49,48,53,55,56,53,48,84,244,130,144,186,84,84,49,48,53,55,56,53,49,84,244,130,144,187,84,84,49,48,53,55,56,53,50,84,244,130,144,188,84,84,49,48,53,55,56,53,51,84,244,130,144,189,84,84,49,48,53,55,56,53,52,84,244,130,144,190,84,84,49,48,53,55,56,53,53,84,244,130,144,191,84,84,49,48,53,55,56,53,55,84,244,130,145,129,84,84,49,48,53,55,56,54,57,84,244,130,145,141,84,84,49,48,53,55,56,55,49,84,244,130,145,143,84,84,49,48,53,55,56,55,50,84,244,130,145,144,84,84,49,48,53,55,56,56,53,84,244,130,145,157,84,84,49,48,53,55,57,50,49,84,244,130,146,129,84,84,49,48,53,55,57,51,51,84,244,130,146,141,84,84,49,48,53,55,57,51,53,84,244,130,146,143,84,84,49,48,53,55,57,51,54,84,244,130,146,144,84,84,49,48,53,55,57,52,57,84,244,130,146,157,84,84,49,48,53,55,57,56,53,84,244,130,147,129,84,84,49,48,53,55,57,57,55,84,244,130,147,141,84,84,49,48,53,55,57,57,57,84,244,130,147,143,84,84,49,48,53,56,48,48,48,84,244,130,147,144,84,84,49,48,53,56,48,49,51,84,244,130,147,157,84,84,49,48,53,56,48,52,57,84,244,130,148,129,84,84,49,48,53,56,48,54,49,84,244,130,148,141,84,84,49,48,53,56,48,54,51,84,244,130,148,143,84,84,49,48,53,56,48,54,52,84,244,130,148,144,84,84,49,48,53,56,48,55,55,84,244,130,148,157,84,84,49,48,53,56,49,49,51,84,244,130,149,129,84,84,49,48,53,56,49,50,53,84,244,130,149,141,84,84,49,48,53,56,49,50,55,84,244,130,149,143,84,84,49,48,53,56,49,50,56,84,244,130,149,144,84,84,49,48,53,56,49,52,49,84,244,130,149,157,84,84,49,48,53,56,49,55,55,84,244,130,150,129,84,84,49,48,53,56,49,56,57,84,244,130,150,141,84,84,49,48,53,56,49,57,49,84,244,130,150,143,84,84,49,48,53,56,49,57,50,84,244,130,150,144,84,84,49,48,53,56,50,48,53,84,244,130,150,157,84,84,49,48,53,56,50,52,49,84,244,130,151,129,84,84,49,48,53,56,50,53,51,84,244,130,151,141,84,84,49,48,53,56,50,53,53,84,244,130,151,143,84,84,49,48,53,56,50,53,54,84,244,130,151,144,84,84,49,48,53,56,50,54,57,84,244,130,151,157,84,84,49,48,53,56,51,48,53,84,244,130,152,129,84,84,49,48,53,56,51,49,55,84,244,130,152,141,84,84,49,48,53,56,51,49,57,84,244,130,152,143,84,84,49,48,53,56,51,50,48,84,244,130,152,144,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20382 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20382_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20382_s.txt", Encoding.UTF8);

    public Test20382() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers319eca44915441a6b60a6025f5eab2bd",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,52,48,50,56,84,244,129,149,140,84,84,49,48,53,52,48,50,57,84,244,129,149,141,84,84,49,48,53,52,48,51,48,84,244,129,149,142,84,84,49,48,53,52,48,51,49,84,244,129,149,143,84,84,49,48,53,52,48,51,50,84,244,129,149,144,84,84,49,48,53,52,48,51,51,84,244,129,149,145,84,84,49,48,53,52,48,51,52,84,244,129,149,146,84,84,49,48,53,52,48,51,53,84,244,129,149,147,84,84,49,48,53,52,48,51,54,84,244,129,149,148,84,84,49,48,53,52,48,51,55,84,244,129,149,149,84,84,49,48,53,52,48,51,56,84,244,129,149,150,84,84,49,48,53,52,48,51,57,84,244,129,149,151,84,84,49,48,53,52,48,52,48,84,244,129,149,152,84,84,49,48,53,52,48,52,49,84,244,129,149,153,84,84,49,48,53,52,48,52,50,84,244,129,149,154,84,84,49,48,53,52,48,52,51,84,244,129,149,155,84,84,49,48,53,52,48,52,52,84,244,129,149,156,84,84,49,48,53,52,48,52,53,84,244,129,149,157,84,84,49,48,53,52,48,52,54,84,244,129,149,158,84,84,49,48,53,52,48,52,55,84,244,129,149,159,84,84,49,48,53,52,48,52,56,84,244,129,149,160,84,84,49,48,53,52,48,52,57,84,244,129,149,161,84,84,49,48,53,52,48,53,48,84,244,129,149,162,84,84,49,48,53,52,48,53,49,84,244,129,149,163,84,84,49,48,53,52,48,53,50,84,244,129,149,164,84,84,49,48,53,52,48,53,51,84,244,129,149,165,84,84,49,48,53,52,48,53,52,84,244,129,149,166,84,84,49,48,53,52,48,53,53,84,244,129,149,167,84,84,49,48,53,52,48,53,54,84,244,129,149,168,84,84,49,48,53,52,48,53,55,84,244,129,149,169,84,84,49,48,53,52,48,53,56,84,244,129,149,170,84,84,49,48,53,52,48,53,57,84,244,129,149,171,84,84,49,48,53,52,48,54,48,84,244,129,149,172,84,84,49,48,53,52,48,54,49,84,244,129,149,173,84,84,49,48,53,52,48,54,50,84,244,129,149,174,84,84,49,48,53,52,48,54,51,84,244,129,149,175,84,84,49,48,53,52,48,54,52,84,244,129,149,176,84,84,49,48,53,52,48,54,53,84,244,129,149,177,84,84,49,48,53,52,48,54,54,84,244,129,149,178,84,84,49,48,53,52,48,54,55,84,244,129,149,179,84,84,49,48,53,52,48,54,56,84,244,129,149,180,84,84,49,48,53,52,48,54,57,84,244,129,149,181,84,84,49,48,53,52,48,55,48,84,244,129,149,182,84,84,49,48,53,52,48,55,49,84,244,129,149,183,84,84,49,48,53,52,48,55,50,84,244,129,149,184,84,84,49,48,53,52,48,55,51,84,244,129,149,185,84,84,49,48,53,52,48,55,52,84,244,129,149,186,84,84,49,48,53,52,48,55,53,84,244,129,149,187,84,84,49,48,53,52,48,55,54,84,244,129,149,188,84,84,49,48,53,52,48,55,55,84,244,129,149,189,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20415 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20415_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20415_s.txt", Encoding.UTF8);

    public Test20415() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers7f83ba854dc4459da9078f97f691d28c",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,52,55,55,56,84,244,129,160,186,84,84,49,48,53,52,55,55,57,84,244,129,160,187,84,84,49,48,53,52,55,56,48,84,244,129,160,188,84,84,49,48,53,52,55,56,49,84,244,129,160,189,84,84,49,48,53,52,55,56,50,84,244,129,160,190,84,84,49,48,53,52,55,56,51,84,244,129,160,191,84,84,49,48,53,52,55,56,52,84,244,129,161,128,84,84,49,48,53,52,55,56,53,84,244,129,161,129,84,84,49,48,53,52,55,56,54,84,244,129,161,130,84,84,49,48,53,52,55,56,55,84,244,129,161,131,84,84,49,48,53,52,55,56,56,84,244,129,161,132,84,84,49,48,53,52,55,56,57,84,244,129,161,133,84,84,49,48,53,52,55,57,48,84,244,129,161,134,84,84,49,48,53,52,55,57,49,84,244,129,161,135,84,84,49,48,53,52,55,57,50,84,244,129,161,136,84,84,49,48,53,52,55,57,51,84,244,129,161,137,84,84,49,48,53,52,55,57,52,84,244,129,161,138,84,84,49,48,53,52,55,57,53,84,244,129,161,139,84,84,49,48,53,52,55,57,54,84,244,129,161,140,84,84,49,48,53,52,55,57,55,84,244,129,161,141,84,84,49,48,53,52,55,57,56,84,244,129,161,142,84,84,49,48,53,52,55,57,57,84,244,129,161,143,84,84,49,48,53,52,56,48,48,84,244,129,161,144,84,84,49,48,53,52,56,48,49,84,244,129,161,145,84,84,49,48,53,52,56,48,50,84,244,129,161,146,84,84,49,48,53,52,56,48,51,84,244,129,161,147,84,84,49,48,53,52,56,48,52,84,244,129,161,148,84,84,49,48,53,52,56,48,53,84,244,129,161,149,84,84,49,48,53,52,56,48,54,84,244,129,161,150,84,84,49,48,53,52,56,48,55,84,244,129,161,151,84,84,49,48,53,52,56,48,56,84,244,129,161,152,84,84,49,48,53,52,56,48,57,84,244,129,161,153,84,84,49,48,53,52,56,49,48,84,244,129,161,154,84,84,49,48,53,52,56,49,49,84,244,129,161,155,84,84,49,48,53,52,56,49,50,84,244,129,161,156,84,84,49,48,53,52,56,49,51,84,244,129,161,157,84,84,49,48,53,52,56,49,52,84,244,129,161,158,84,84,49,48,53,52,56,49,53,84,244,129,161,159,84,84,49,48,53,52,56,49,54,84,244,129,161,160,84,84,49,48,53,52,56,49,55,84,244,129,161,161,84,84,49,48,53,52,56,49,56,84,244,129,161,162,84,84,49,48,53,52,56,49,57,84,244,129,161,163,84,84,49,48,53,52,56,50,48,84,244,129,161,164,84,84,49,48,53,52,56,50,49,84,244,129,161,165,84,84,49,48,53,52,56,50,50,84,244,129,161,166,84,84,49,48,53,52,56,50,51,84,244,129,161,167,84,84,49,48,53,52,56,50,52,84,244,129,161,168,84,84,49,48,53,52,56,50,53,84,244,129,161,169,84,84,49,48,53,52,56,50,54,84,244,129,161,170,84,84,49,48,53,52,56,50,55,84,244,129,161,171,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20062 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20062_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20062_s.txt", Encoding.UTF8);

    public Test20062() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersb3c703c6e551430d9c914c24c3792dd5",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,49,48,53,48,57,84,243,182,173,141,84,84,49,48,49,48,53,49,49,84,243,182,173,143,84,84,49,48,49,48,53,49,50,84,243,182,173,144,84,84,49,48,49,48,53,50,53,84,243,182,173,157,84,84,49,48,49,48,53,54,49,84,243,182,174,129,84,84,49,48,49,48,53,55,51,84,243,182,174,141,84,84,49,48,49,48,53,55,53,84,243,182,174,143,84,84,49,48,49,48,53,55,54,84,243,182,174,144,84,84,49,48,49,48,53,56,57,84,243,182,174,157,84,84,49,48,49,48,54,50,53,84,243,182,175,129,84,84,49,48,49,48,54,51,55,84,243,182,175,141,84,84,49,48,49,48,54,51,57,84,243,182,175,143,84,84,49,48,49,48,54,52,48,84,243,182,175,144,84,84,49,48,49,48,54,53,51,84,243,182,175,157,84,84,49,48,49,48,54,56,57,84,243,182,176,129,84,84,49,48,49,48,55,48,49,84,243,182,176,141,84,84,49,48,49,48,55,48,51,84,243,182,176,143,84,84,49,48,49,48,55,48,52,84,243,182,176,144,84,84,49,48,49,48,55,49,55,84,243,182,176,157,84,84,49,48,49,48,55,53,51,84,243,182,177,129,84,84,49,48,49,48,55,54,53,84,243,182,177,141,84,84,49,48,49,48,55,54,55,84,243,182,177,143,84,84,49,48,49,48,55,54,56,84,243,182,177,144,84,84,49,48,49,48,55,56,49,84,243,182,177,157,84,84,49,48,49,48,56,49,55,84,243,182,178,129,84,84,49,48,49,48,56,50,57,84,243,182,178,141,84,84,49,48,49,48,56,51,49,84,243,182,178,143,84,84,49,48,49,48,56,51,50,84,243,182,178,144,84,84,49,48,49,48,56,52,53,84,243,182,178,157,84,84,49,48,49,48,56,56,49,84,243,182,179,129,84,84,49,48,49,48,56,57,51,84,243,182,179,141,84,84,49,48,49,48,56,57,53,84,243,182,179,143,84,84,49,48,49,48,56,57,54,84,243,182,179,144,84,84,49,48,49,48,57,48,57,84,243,182,179,157,84,84,49,48,49,48,57,52,53,84,243,182,180,129,84,84,49,48,49,48,57,53,55,84,243,182,180,141,84,84,49,48,49,48,57,53,57,84,243,182,180,143,84,84,49,48,49,48,57,54,48,84,243,182,180,144,84,84,49,48,49,48,57,55,51,84,243,182,180,157,84,84,49,48,49,49,48,48,57,84,243,182,181,129,84,84,49,48,49,49,48,50,49,84,243,182,181,141,84,84,49,48,49,49,48,50,51,84,243,182,181,143,84,84,49,48,49,49,48,50,52,84,243,182,181,144,84,84,49,48,49,49,48,51,55,84,243,182,181,157,84,84,49,48,49,49,48,55,51,84,243,182,182,129,84,84,49,48,49,49,48,56,53,84,243,182,182,141,84,84,49,48,49,49,48,56,55,84,243,182,182,143,84,84,49,48,49,49,48,56,56,84,243,182,182,144,84,84,49,48,49,49,49,48,49,84,243,182,182,157,84,84,49,48,49,49,49,51,55,84,243,182,183,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19999 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19999_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19999_s.txt", Encoding.UTF8);

    public Test19999() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersc5d3e7c5509046d2aa3f8bb095571b82",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,48,48,52,57,50,84,243,180,144,172,84,84,49,48,48,48,52,57,51,84,243,180,144,173,84,84,49,48,48,48,52,57,52,84,243,180,144,174,84,84,49,48,48,48,52,57,53,84,243,180,144,175,84,84,49,48,48,48,52,57,54,84,243,180,144,176,84,84,49,48,48,48,52,57,55,84,243,180,144,177,84,84,49,48,48,48,52,57,56,84,243,180,144,178,84,84,49,48,48,48,52,57,57,84,243,180,144,179,84,84,49,48,48,48,53,48,48,84,243,180,144,180,84,84,49,48,48,48,53,48,49,84,243,180,144,181,84,84,49,48,48,48,53,48,50,84,243,180,144,182,84,84,49,48,48,48,53,48,51,84,243,180,144,183,84,84,49,48,48,48,53,48,52,84,243,180,144,184,84,84,49,48,48,48,53,48,53,84,243,180,144,185,84,84,49,48,48,48,53,48,54,84,243,180,144,186,84,84,49,48,48,48,53,48,55,84,243,180,144,187,84,84,49,48,48,48,53,48,56,84,243,180,144,188,84,84,49,48,48,48,53,48,57,84,243,180,144,189,84,84,49,48,48,48,53,49,48,84,243,180,144,190,84,84,49,48,48,48,53,49,49,84,243,180,144,191,84,84,49,48,48,48,53,49,51,84,243,180,145,129,84,84,49,48,48,48,53,50,53,84,243,180,145,141,84,84,49,48,48,48,53,50,55,84,243,180,145,143,84,84,49,48,48,48,53,50,56,84,243,180,145,144,84,84,49,48,48,48,53,52,49,84,243,180,145,157,84,84,49,48,48,48,53,55,55,84,243,180,146,129,84,84,49,48,48,48,53,56,57,84,243,180,146,141,84,84,49,48,48,48,53,57,49,84,243,180,146,143,84,84,49,48,48,48,53,57,50,84,243,180,146,144,84,84,49,48,48,48,54,48,53,84,243,180,146,157,84,84,49,48,48,48,54,52,49,84,243,180,147,129,84,84,49,48,48,48,54,53,51,84,243,180,147,141,84,84,49,48,48,48,54,53,53,84,243,180,147,143,84,84,49,48,48,48,54,53,54,84,243,180,147,144,84,84,49,48,48,48,54,54,57,84,243,180,147,157,84,84,49,48,48,48,55,48,53,84,243,180,148,129,84,84,49,48,48,48,55,49,55,84,243,180,148,141,84,84,49,48,48,48,55,49,57,84,243,180,148,143,84,84,49,48,48,48,55,50,48,84,243,180,148,144,84,84,49,48,48,48,55,51,51,84,243,180,148,157,84,84,49,48,48,48,55,54,57,84,243,180,149,129,84,84,49,48,48,48,55,56,49,84,243,180,149,141,84,84,49,48,48,48,55,56,51,84,243,180,149,143,84,84,49,48,48,48,55,56,52,84,243,180,149,144,84,84,49,48,48,48,55,57,55,84,243,180,149,157,84,84,49,48,48,48,56,51,51,84,243,180,150,129,84,84,49,48,48,48,56,52,53,84,243,180,150,141,84,84,49,48,48,48,56,52,55,84,243,180,150,143,84,84,49,48,48,48,56,52,56,84,243,180,150,144,84,84,49,48,48,48,56,54,49,84,243,180,150,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20159 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20159_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20159_s.txt", Encoding.UTF8);

    public Test20159() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers4f3362aed9424bd2bfac6751ee820ab9",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,50,53,54,48,49,84,243,186,153,129,84,84,49,48,50,53,54,49,51,84,243,186,153,141,84,84,49,48,50,53,54,49,53,84,243,186,153,143,84,84,49,48,50,53,54,49,54,84,243,186,153,144,84,84,49,48,50,53,54,50,57,84,243,186,153,157,84,84,49,48,50,53,54,54,53,84,243,186,154,129,84,84,49,48,50,53,54,55,55,84,243,186,154,141,84,84,49,48,50,53,54,55,57,84,243,186,154,143,84,84,49,48,50,53,54,56,48,84,243,186,154,144,84,84,49,48,50,53,54,57,51,84,243,186,154,157,84,84,49,48,50,53,55,50,57,84,243,186,155,129,84,84,49,48,50,53,55,52,49,84,243,186,155,141,84,84,49,48,50,53,55,52,51,84,243,186,155,143,84,84,49,48,50,53,55,52,52,84,243,186,155,144,84,84,49,48,50,53,55,53,55,84,243,186,155,157,84,84,49,48,50,53,55,57,51,84,243,186,156,129,84,84,49,48,50,53,56,48,53,84,243,186,156,141,84,84,49,48,50,53,56,48,55,84,243,186,156,143,84,84,49,48,50,53,56,48,56,84,243,186,156,144,84,84,49,48,50,53,56,50,49,84,243,186,156,157,84,84,49,48,50,53,56,53,54,84,243,186,157,128,84,84,49,48,50,53,56,53,55,84,243,186,157,129,84,84,49,48,50,53,56,53,56,84,243,186,157,130,84,84,49,48,50,53,56,53,57,84,243,186,157,131,84,84,49,48,50,53,56,54,48,84,243,186,157,132,84,84,49,48,50,53,56,54,49,84,243,186,157,133,84,84,49,48,50,53,56,54,50,84,243,186,157,134,84,84,49,48,50,53,56,54,51,84,243,186,157,135,84,84,49,48,50,53,56,54,52,84,243,186,157,136,84,84,49,48,50,53,56,54,53,84,243,186,157,137,84,84,49,48,50,53,56,54,54,84,243,186,157,138,84,84,49,48,50,53,56,54,55,84,243,186,157,139,84,84,49,48,50,53,56,54,56,84,243,186,157,140,84,84,49,48,50,53,56,54,57,84,243,186,157,141,84,84,49,48,50,53,56,55,48,84,243,186,157,142,84,84,49,48,50,53,56,55,49,84,243,186,157,143,84,84,49,48,50,53,56,55,50,84,243,186,157,144,84,84,49,48,50,53,56,55,51,84,243,186,157,145,84,84,49,48,50,53,56,55,52,84,243,186,157,146,84,84,49,48,50,53,56,55,53,84,243,186,157,147,84,84,49,48,50,53,56,55,54,84,243,186,157,148,84,84,49,48,50,53,56,55,55,84,243,186,157,149,84,84,49,48,50,53,56,55,56,84,243,186,157,150,84,84,49,48,50,53,56,55,57,84,243,186,157,151,84,84,49,48,50,53,56,56,48,84,243,186,157,152,84,84,49,48,50,53,56,56,49,84,243,186,157,153,84,84,49,48,50,53,56,56,50,84,243,186,157,154,84,84,49,48,50,53,56,56,51,84,243,186,157,155,84,84,49,48,50,53,56,56,52,84,243,186,157,156,84,84,49,48,50,53,56,56,53,84,243,186,157,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20225 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20225_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20225_s.txt", Encoding.UTF8);

    public Test20225() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersca1800aaa567470781b999118df6ba97",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,51,54,52,49,51,84,243,189,129,189,84,84,49,48,51,54,52,49,52,84,243,189,129,190,84,84,49,48,51,54,52,49,53,84,243,189,129,191,84,84,49,48,51,54,52,49,55,84,243,189,130,129,84,84,49,48,51,54,52,50,57,84,243,189,130,141,84,84,49,48,51,54,52,51,49,84,243,189,130,143,84,84,49,48,51,54,52,51,50,84,243,189,130,144,84,84,49,48,51,54,52,52,53,84,243,189,130,157,84,84,49,48,51,54,52,56,49,84,243,189,131,129,84,84,49,48,51,54,52,57,51,84,243,189,131,141,84,84,49,48,51,54,52,57,53,84,243,189,131,143,84,84,49,48,51,54,52,57,54,84,243,189,131,144,84,84,49,48,51,54,53,48,57,84,243,189,131,157,84,84,49,48,51,54,53,52,53,84,243,189,132,129,84,84,49,48,51,54,53,53,55,84,243,189,132,141,84,84,49,48,51,54,53,53,57,84,243,189,132,143,84,84,49,48,51,54,53,54,48,84,243,189,132,144,84,84,49,48,51,54,53,55,51,84,243,189,132,157,84,84,49,48,51,54,54,48,57,84,243,189,133,129,84,84,49,48,51,54,54,50,49,84,243,189,133,141,84,84,49,48,51,54,54,50,51,84,243,189,133,143,84,84,49,48,51,54,54,50,52,84,243,189,133,144,84,84,49,48,51,54,54,51,55,84,243,189,133,157,84,84,49,48,51,54,54,55,51,84,243,189,134,129,84,84,49,48,51,54,54,56,53,84,243,189,134,141,84,84,49,48,51,54,54,56,55,84,243,189,134,143,84,84,49,48,51,54,54,56,56,84,243,189,134,144,84,84,49,48,51,54,55,48,49,84,243,189,134,157,84,84,49,48,51,54,55,51,55,84,243,189,135,129,84,84,49,48,51,54,55,52,57,84,243,189,135,141,84,84,49,48,51,54,55,53,49,84,243,189,135,143,84,84,49,48,51,54,55,53,50,84,243,189,135,144,84,84,49,48,51,54,55,54,53,84,243,189,135,157,84,84,49,48,51,54,56,48,49,84,243,189,136,129,84,84,49,48,51,54,56,49,51,84,243,189,136,141,84,84,49,48,51,54,56,49,53,84,243,189,136,143,84,84,49,48,51,54,56,49,54,84,243,189,136,144,84,84,49,48,51,54,56,50,57,84,243,189,136,157,84,84,49,48,51,54,56,54,53,84,243,189,137,129,84,84,49,48,51,54,56,55,55,84,243,189,137,141,84,84,49,48,51,54,56,55,57,84,243,189,137,143,84,84,49,48,51,54,56,56,48,84,243,189,137,144,84,84,49,48,51,54,56,57,51,84,243,189,137,157,84,84,49,48,51,54,57,50,57,84,243,189,138,129,84,84,49,48,51,54,57,52,49,84,243,189,138,141,84,84,49,48,51,54,57,52,51,84,243,189,138,143,84,84,49,48,51,54,57,52,52,84,243,189,138,144,84,84,49,48,51,54,57,53,55,84,243,189,138,157,84,84,49,48,51,54,57,57,51,84,243,189,139,129,84,84,49,48,51,55,48,48,53,84,243,189,139,141,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20669 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20669_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20669_s.txt", Encoding.UTF8);

    public Test20669() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers9df780a74f2549dda8f9f337dadb7946",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,56,50,51,56,49,84,244,136,144,141,84,84,49,48,56,50,51,56,50,84,244,136,144,142,84,84,49,48,56,50,51,56,51,84,244,136,144,143,84,84,49,48,56,50,51,56,52,84,244,136,144,144,84,84,49,48,56,50,51,56,53,84,244,136,144,145,84,84,49,48,56,50,51,56,54,84,244,136,144,146,84,84,49,48,56,50,51,56,55,84,244,136,144,147,84,84,49,48,56,50,51,56,56,84,244,136,144,148,84,84,49,48,56,50,51,56,57,84,244,136,144,149,84,84,49,48,56,50,51,57,48,84,244,136,144,150,84,84,49,48,56,50,51,57,49,84,244,136,144,151,84,84,49,48,56,50,51,57,50,84,244,136,144,152,84,84,49,48,56,50,51,57,51,84,244,136,144,153,84,84,49,48,56,50,51,57,52,84,244,136,144,154,84,84,49,48,56,50,51,57,53,84,244,136,144,155,84,84,49,48,56,50,51,57,54,84,244,136,144,156,84,84,49,48,56,50,51,57,55,84,244,136,144,157,84,84,49,48,56,50,51,57,56,84,244,136,144,158,84,84,49,48,56,50,51,57,57,84,244,136,144,159,84,84,49,48,56,50,52,48,48,84,244,136,144,160,84,84,49,48,56,50,52,48,49,84,244,136,144,161,84,84,49,48,56,50,52,48,50,84,244,136,144,162,84,84,49,48,56,50,52,48,51,84,244,136,144,163,84,84,49,48,56,50,52,48,52,84,244,136,144,164,84,84,49,48,56,50,52,48,53,84,244,136,144,165,84,84,49,48,56,50,52,48,54,84,244,136,144,166,84,84,49,48,56,50,52,48,55,84,244,136,144,167,84,84,49,48,56,50,52,48,56,84,244,136,144,168,84,84,49,48,56,50,52,48,57,84,244,136,144,169,84,84,49,48,56,50,52,49,48,84,244,136,144,170,84,84,49,48,56,50,52,49,49,84,244,136,144,171,84,84,49,48,56,50,52,49,50,84,244,136,144,172,84,84,49,48,56,50,52,49,51,84,244,136,144,173,84,84,49,48,56,50,52,49,52,84,244,136,144,174,84,84,49,48,56,50,52,49,53,84,244,136,144,175,84,84,49,48,56,50,52,49,54,84,244,136,144,176,84,84,49,48,56,50,52,49,55,84,244,136,144,177,84,84,49,48,56,50,52,49,56,84,244,136,144,178,84,84,49,48,56,50,52,49,57,84,244,136,144,179,84,84,49,48,56,50,52,50,48,84,244,136,144,180,84,84,49,48,56,50,52,50,49,84,244,136,144,181,84,84,49,48,56,50,52,50,50,84,244,136,144,182,84,84,49,48,56,50,52,50,51,84,244,136,144,183,84,84,49,48,56,50,52,50,52,84,244,136,144,184,84,84,49,48,56,50,52,50,53,84,244,136,144,185,84,84,49,48,56,50,52,50,54,84,244,136,144,186,84,84,49,48,56,50,52,50,55,84,244,136,144,187,84,84,49,48,56,50,52,50,56,84,244,136,144,188,84,84,49,48,56,50,52,50,57,84,244,136,144,189,84,84,49,48,56,50,52,51,48,84,244,136,144,190,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21854 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21854_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21854_s.txt", Encoding.UTF8);

    public Test21854() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers558523dcbea64a12818db33a6c48f8d9",
                        blob: "Blob1f9082326d7d48c39fe7fd30a0af694c",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 0,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21024 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21024_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21024_s.txt", Encoding.UTF8);

    public Test21024() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersd35ea9f156764511b97173ebc769448f",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,48,57,48,48,84,244,143,141,180,84,84,49,49,49,48,57,48,49,84,244,143,141,181,84,84,49,49,49,48,57,48,50,84,244,143,141,182,84,84,49,49,49,48,57,48,51,84,244,143,141,183,84,84,49,49,49,48,57,48,52,84,244,143,141,184,84,84,49,49,49,48,57,48,53,84,244,143,141,185,84,84,49,49,49,48,57,48,54,84,244,143,141,186,84,84,49,49,49,48,57,48,55,84,244,143,141,187,84,84,49,49,49,48,57,48,56,84,244,143,141,188,84,84,49,49,49,48,57,48,57,84,244,143,141,189,84,84,49,49,49,48,57,49,48,84,244,143,141,190,84,84,49,49,49,48,57,49,49,84,244,143,141,191,84,84,49,49,49,48,57,49,50,84,244,143,142,128,84,84,49,49,49,48,57,49,51,84,244,143,142,129,84,84,49,49,49,48,57,49,52,84,244,143,142,130,84,84,49,49,49,48,57,49,53,84,244,143,142,131,84,84,49,49,49,48,57,49,54,84,244,143,142,132,84,84,49,49,49,48,57,49,55,84,244,143,142,133,84,84,49,49,49,48,57,49,56,84,244,143,142,134,84,84,49,49,49,48,57,49,57,84,244,143,142,135,84,84,49,49,49,48,57,50,48,84,244,143,142,136,84,84,49,49,49,48,57,50,49,84,244,143,142,137,84,84,49,49,49,48,57,50,50,84,244,143,142,138,84,84,49,49,49,48,57,50,51,84,244,143,142,139,84,84,49,49,49,48,57,50,52,84,244,143,142,140,84,84,49,49,49,48,57,50,53,84,244,143,142,141,84,84,49,49,49,48,57,50,54,84,244,143,142,142,84,84,49,49,49,48,57,50,55,84,244,143,142,143,84,84,49,49,49,48,57,50,56,84,244,143,142,144,84,84,49,49,49,48,57,50,57,84,244,143,142,145,84,84,49,49,49,48,57,51,48,84,244,143,142,146,84,84,49,49,49,48,57,51,49,84,244,143,142,147,84,84,49,49,49,48,57,51,50,84,244,143,142,148,84,84,49,49,49,48,57,51,51,84,244,143,142,149,84,84,49,49,49,48,57,51,52,84,244,143,142,150,84,84,49,49,49,48,57,51,53,84,244,143,142,151,84,84,49,49,49,48,57,51,54,84,244,143,142,152,84,84,49,49,49,48,57,51,55,84,244,143,142,153,84,84,49,49,49,48,57,51,56,84,244,143,142,154,84,84,49,49,49,48,57,51,57,84,244,143,142,155,84,84,49,49,49,48,57,52,48,84,244,143,142,156,84,84,49,49,49,48,57,52,49,84,244,143,142,157,84,84,49,49,49,48,57,52,50,84,244,143,142,158,84,84,49,49,49,48,57,52,51,84,244,143,142,159,84,84,49,49,49,48,57,52,52,84,244,143,142,160,84,84,49,49,49,48,57,52,53,84,244,143,142,161,84,84,49,49,49,48,57,52,54,84,244,143,142,162,84,84,49,49,49,48,57,52,55,84,244,143,142,163,84,84,49,49,49,48,57,52,56,84,244,143,142,164,84,84,49,49,49,48,57,52,57,84,244,143,142,165,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21086 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21086_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21086_s.txt", Encoding.UTF8);

    public Test21086() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers79aa3dd90e344ebe9466f3cb0c56378a",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,50,51,53,48,84,244,143,164,158,84,84,49,49,49,50,51,53,49,84,244,143,164,159,84,84,49,49,49,50,51,53,50,84,244,143,164,160,84,84,49,49,49,50,51,53,51,84,244,143,164,161,84,84,49,49,49,50,51,53,52,84,244,143,164,162,84,84,49,49,49,50,51,53,53,84,244,143,164,163,84,84,49,49,49,50,51,53,54,84,244,143,164,164,84,84,49,49,49,50,51,53,55,84,244,143,164,165,84,84,49,49,49,50,51,53,56,84,244,143,164,166,84,84,49,49,49,50,51,53,57,84,244,143,164,167,84,84,49,49,49,50,51,54,48,84,244,143,164,168,84,84,49,49,49,50,51,54,49,84,244,143,164,169,84,84,49,49,49,50,51,54,50,84,244,143,164,170,84,84,49,49,49,50,51,54,51,84,244,143,164,171,84,84,49,49,49,50,51,54,52,84,244,143,164,172,84,84,49,49,49,50,51,54,53,84,244,143,164,173,84,84,49,49,49,50,51,54,54,84,244,143,164,174,84,84,49,49,49,50,51,54,55,84,244,143,164,175,84,84,49,49,49,50,51,54,56,84,244,143,164,176,84,84,49,49,49,50,51,54,57,84,244,143,164,177,84,84,49,49,49,50,51,55,48,84,244,143,164,178,84,84,49,49,49,50,51,55,49,84,244,143,164,179,84,84,49,49,49,50,51,55,50,84,244,143,164,180,84,84,49,49,49,50,51,55,51,84,244,143,164,181,84,84,49,49,49,50,51,55,52,84,244,143,164,182,84,84,49,49,49,50,51,55,53,84,244,143,164,183,84,84,49,49,49,50,51,55,54,84,244,143,164,184,84,84,49,49,49,50,51,55,55,84,244,143,164,185,84,84,49,49,49,50,51,55,56,84,244,143,164,186,84,84,49,49,49,50,51,55,57,84,244,143,164,187,84,84,49,49,49,50,51,56,48,84,244,143,164,188,84,84,49,49,49,50,51,56,49,84,244,143,164,189,84,84,49,49,49,50,51,56,50,84,244,143,164,190,84,84,49,49,49,50,51,56,51,84,244,143,164,191,84,84,49,49,49,50,51,56,52,84,244,143,165,128,84,84,49,49,49,50,51,56,53,84,244,143,165,129,84,84,49,49,49,50,51,56,54,84,244,143,165,130,84,84,49,49,49,50,51,56,55,84,244,143,165,131,84,84,49,49,49,50,51,56,56,84,244,143,165,132,84,84,49,49,49,50,51,56,57,84,244,143,165,133,84,84,49,49,49,50,51,57,48,84,244,143,165,134,84,84,49,49,49,50,51,57,49,84,244,143,165,135,84,84,49,49,49,50,51,57,50,84,244,143,165,136,84,84,49,49,49,50,51,57,51,84,244,143,165,137,84,84,49,49,49,50,51,57,52,84,244,143,165,138,84,84,49,49,49,50,51,57,53,84,244,143,165,139,84,84,49,49,49,50,51,57,54,84,244,143,165,140,84,84,49,49,49,50,51,57,55,84,244,143,165,141,84,84,49,49,49,50,51,57,56,84,244,143,165,142,84,84,49,49,49,50,51,57,57,84,244,143,165,143,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20737 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20737_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20737_s.txt", Encoding.UTF8);

    public Test20737() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersc5ae22b09f3f4a3eaff829adc5876203",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,57,51,55,49,54,84,244,139,129,148,84,84,49,48,57,51,55,49,55,84,244,139,129,149,84,84,49,48,57,51,55,49,56,84,244,139,129,150,84,84,49,48,57,51,55,49,57,84,244,139,129,151,84,84,49,48,57,51,55,50,48,84,244,139,129,152,84,84,49,48,57,51,55,50,49,84,244,139,129,153,84,84,49,48,57,51,55,50,50,84,244,139,129,154,84,84,49,48,57,51,55,50,51,84,244,139,129,155,84,84,49,48,57,51,55,50,52,84,244,139,129,156,84,84,49,48,57,51,55,50,53,84,244,139,129,157,84,84,49,48,57,51,55,50,54,84,244,139,129,158,84,84,49,48,57,51,55,50,55,84,244,139,129,159,84,84,49,48,57,51,55,50,56,84,244,139,129,160,84,84,49,48,57,51,55,50,57,84,244,139,129,161,84,84,49,48,57,51,55,51,48,84,244,139,129,162,84,84,49,48,57,51,55,51,49,84,244,139,129,163,84,84,49,48,57,51,55,51,50,84,244,139,129,164,84,84,49,48,57,51,55,51,51,84,244,139,129,165,84,84,49,48,57,51,55,51,52,84,244,139,129,166,84,84,49,48,57,51,55,51,53,84,244,139,129,167,84,84,49,48,57,51,55,51,54,84,244,139,129,168,84,84,49,48,57,51,55,51,55,84,244,139,129,169,84,84,49,48,57,51,55,51,56,84,244,139,129,170,84,84,49,48,57,51,55,51,57,84,244,139,129,171,84,84,49,48,57,51,55,52,48,84,244,139,129,172,84,84,49,48,57,51,55,52,49,84,244,139,129,173,84,84,49,48,57,51,55,52,50,84,244,139,129,174,84,84,49,48,57,51,55,52,51,84,244,139,129,175,84,84,49,48,57,51,55,52,52,84,244,139,129,176,84,84,49,48,57,51,55,52,53,84,244,139,129,177,84,84,49,48,57,51,55,52,54,84,244,139,129,178,84,84,49,48,57,51,55,52,55,84,244,139,129,179,84,84,49,48,57,51,55,52,56,84,244,139,129,180,84,84,49,48,57,51,55,52,57,84,244,139,129,181,84,84,49,48,57,51,55,53,48,84,244,139,129,182,84,84,49,48,57,51,55,53,49,84,244,139,129,183,84,84,49,48,57,51,55,53,50,84,244,139,129,184,84,84,49,48,57,51,55,53,51,84,244,139,129,185,84,84,49,48,57,51,55,53,52,84,244,139,129,186,84,84,49,48,57,51,55,53,53,84,244,139,129,187,84,84,49,48,57,51,55,53,54,84,244,139,129,188,84,84,49,48,57,51,55,53,55,84,244,139,129,189,84,84,49,48,57,51,55,53,56,84,244,139,129,190,84,84,49,48,57,51,55,53,57,84,244,139,129,191,84,84,49,48,57,51,55,54,49,84,244,139,130,129,84,84,49,48,57,51,55,55,51,84,244,139,130,141,84,84,49,48,57,51,55,55,53,84,244,139,130,143,84,84,49,48,57,51,55,55,54,84,244,139,130,144,84,84,49,48,57,51,55,56,57,84,244,139,130,157,84,84,49,48,57,51,56,50,53,84,244,139,131,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20320 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20320_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20320_s.txt", Encoding.UTF8);

    public Test20320() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers412024b733e349978217e6093afed677",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,48,56,50,57,84,244,128,163,141,84,84,49,48,53,48,56,51,49,84,244,128,163,143,84,84,49,48,53,48,56,51,50,84,244,128,163,144,84,84,49,48,53,48,56,52,53,84,244,128,163,157,84,84,49,48,53,48,56,56,49,84,244,128,164,129,84,84,49,48,53,48,56,57,51,84,244,128,164,141,84,84,49,48,53,48,56,57,53,84,244,128,164,143,84,84,49,48,53,48,56,57,54,84,244,128,164,144,84,84,49,48,53,48,57,48,57,84,244,128,164,157,84,84,49,48,53,48,57,52,53,84,244,128,165,129,84,84,49,48,53,48,57,53,55,84,244,128,165,141,84,84,49,48,53,48,57,53,57,84,244,128,165,143,84,84,49,48,53,48,57,54,48,84,244,128,165,144,84,84,49,48,53,48,57,55,51,84,244,128,165,157,84,84,49,48,53,49,48,48,57,84,244,128,166,129,84,84,49,48,53,49,48,50,49,84,244,128,166,141,84,84,49,48,53,49,48,50,51,84,244,128,166,143,84,84,49,48,53,49,48,50,52,84,244,128,166,144,84,84,49,48,53,49,48,51,55,84,244,128,166,157,84,84,49,48,53,49,48,55,51,84,244,128,167,129,84,84,49,48,53,49,48,56,53,84,244,128,167,141,84,84,49,48,53,49,48,56,55,84,244,128,167,143,84,84,49,48,53,49,48,56,56,84,244,128,167,144,84,84,49,48,53,49,49,48,49,84,244,128,167,157,84,84,49,48,53,49,49,51,55,84,244,128,168,129,84,84,49,48,53,49,49,52,57,84,244,128,168,141,84,84,49,48,53,49,49,53,49,84,244,128,168,143,84,84,49,48,53,49,49,53,50,84,244,128,168,144,84,84,49,48,53,49,49,54,53,84,244,128,168,157,84,84,49,48,53,49,50,48,49,84,244,128,169,129,84,84,49,48,53,49,50,49,51,84,244,128,169,141,84,84,49,48,53,49,50,49,53,84,244,128,169,143,84,84,49,48,53,49,50,49,54,84,244,128,169,144,84,84,49,48,53,49,50,50,57,84,244,128,169,157,84,84,49,48,53,49,50,54,53,84,244,128,170,129,84,84,49,48,53,49,50,55,55,84,244,128,170,141,84,84,49,48,53,49,50,55,57,84,244,128,170,143,84,84,49,48,53,49,50,56,48,84,244,128,170,144,84,84,49,48,53,49,50,57,51,84,244,128,170,157,84,84,49,48,53,49,51,50,57,84,244,128,171,129,84,84,49,48,53,49,51,52,49,84,244,128,171,141,84,84,49,48,53,49,51,52,51,84,244,128,171,143,84,84,49,48,53,49,51,52,52,84,244,128,171,144,84,84,49,48,53,49,51,53,55,84,244,128,171,157,84,84,49,48,53,49,51,57,51,84,244,128,172,129,84,84,49,48,53,49,52,48,53,84,244,128,172,141,84,84,49,48,53,49,52,48,55,84,244,128,172,143,84,84,49,48,53,49,52,48,56,84,244,128,172,144,84,84,49,48,53,49,52,50,49,84,244,128,172,157,84,84,49,48,53,49,52,53,55,84,244,128,173,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19874 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19874_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19874_s.txt", Encoding.UTF8);

    public Test19874() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers7032abc4111d4702bce9d36696a0a648",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,49,57,52,48,53,84,243,160,157,173,84,84,57,49,57,52,48,54,84,243,160,157,174,84,84,57,49,57,52,48,55,84,243,160,157,175,84,84,57,49,57,52,48,56,84,243,160,157,176,84,84,57,49,57,52,48,57,84,243,160,157,177,84,84,57,49,57,52,49,48,84,243,160,157,178,84,84,57,49,57,52,49,49,84,243,160,157,179,84,84,57,49,57,52,49,50,84,243,160,157,180,84,84,57,49,57,52,49,51,84,243,160,157,181,84,84,57,49,57,52,49,52,84,243,160,157,182,84,84,57,49,57,52,49,53,84,243,160,157,183,84,84,57,49,57,52,49,54,84,243,160,157,184,84,84,57,49,57,52,49,55,84,243,160,157,185,84,84,57,49,57,52,49,56,84,243,160,157,186,84,84,57,49,57,52,49,57,84,243,160,157,187,84,84,57,49,57,52,50,48,84,243,160,157,188,84,84,57,49,57,52,50,49,84,243,160,157,189,84,84,57,49,57,52,50,50,84,243,160,157,190,84,84,57,49,57,52,50,51,84,243,160,157,191,84,84,57,49,57,52,50,53,84,243,160,158,129,84,84,57,49,57,52,51,55,84,243,160,158,141,84,84,57,49,57,52,51,57,84,243,160,158,143,84,84,57,49,57,52,52,48,84,243,160,158,144,84,84,57,49,57,52,53,51,84,243,160,158,157,84,84,57,49,57,52,56,57,84,243,160,159,129,84,84,57,49,57,53,48,49,84,243,160,159,141,84,84,57,49,57,53,48,51,84,243,160,159,143,84,84,57,49,57,53,48,52,84,243,160,159,144,84,84,57,49,57,53,49,55,84,243,160,159,157,84,84,57,49,57,53,53,51,84,243,160,160,129,84,84,57,49,57,53,54,53,84,243,160,160,141,84,84,57,49,57,53,54,55,84,243,160,160,143,84,84,57,49,57,53,54,56,84,243,160,160,144,84,84,57,49,57,53,56,49,84,243,160,160,157,84,84,57,49,57,54,49,55,84,243,160,161,129,84,84,57,49,57,54,50,57,84,243,160,161,141,84,84,57,49,57,54,51,49,84,243,160,161,143,84,84,57,49,57,54,51,50,84,243,160,161,144,84,84,57,49,57,54,52,53,84,243,160,161,157,84,84,57,49,57,54,56,49,84,243,160,162,129,84,84,57,49,57,54,57,51,84,243,160,162,141,84,84,57,49,57,54,57,53,84,243,160,162,143,84,84,57,49,57,54,57,54,84,243,160,162,144,84,84,57,49,57,55,48,57,84,243,160,162,157,84,84,57,49,57,55,52,53,84,243,160,163,129,84,84,57,49,57,55,53,55,84,243,160,163,141,84,84,57,49,57,55,53,57,84,243,160,163,143,84,84,57,49,57,55,54,48,84,243,160,163,144,84,84,57,49,57,55,55,51,84,243,160,163,157,84,84,57,49,57,56,48,57,84,243,160,164,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21855 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21855_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21855_s.txt", Encoding.UTF8);

    public Test21855() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers558523dcbea64a12818db33a6c48f8d9",
                        blob: "Blob1f9082326d7d48c39fe7fd30a0af694c",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 0,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20479 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20479_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20479_s.txt", Encoding.UTF8);

    public Test20479() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers3bfa703d74a140e499ecce701b962b8c",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,54,50,55,56,84,244,129,184,150,84,84,49,48,53,54,50,55,57,84,244,129,184,151,84,84,49,48,53,54,50,56,48,84,244,129,184,152,84,84,49,48,53,54,50,56,49,84,244,129,184,153,84,84,49,48,53,54,50,56,50,84,244,129,184,154,84,84,49,48,53,54,50,56,51,84,244,129,184,155,84,84,49,48,53,54,50,56,52,84,244,129,184,156,84,84,49,48,53,54,50,56,53,84,244,129,184,157,84,84,49,48,53,54,50,56,54,84,244,129,184,158,84,84,49,48,53,54,50,56,55,84,244,129,184,159,84,84,49,48,53,54,50,56,56,84,244,129,184,160,84,84,49,48,53,54,50,56,57,84,244,129,184,161,84,84,49,48,53,54,50,57,48,84,244,129,184,162,84,84,49,48,53,54,50,57,49,84,244,129,184,163,84,84,49,48,53,54,50,57,50,84,244,129,184,164,84,84,49,48,53,54,50,57,51,84,244,129,184,165,84,84,49,48,53,54,50,57,52,84,244,129,184,166,84,84,49,48,53,54,50,57,53,84,244,129,184,167,84,84,49,48,53,54,50,57,54,84,244,129,184,168,84,84,49,48,53,54,50,57,55,84,244,129,184,169,84,84,49,48,53,54,50,57,56,84,244,129,184,170,84,84,49,48,53,54,50,57,57,84,244,129,184,171,84,84,49,48,53,54,51,48,48,84,244,129,184,172,84,84,49,48,53,54,51,48,49,84,244,129,184,173,84,84,49,48,53,54,51,48,50,84,244,129,184,174,84,84,49,48,53,54,51,48,51,84,244,129,184,175,84,84,49,48,53,54,51,48,52,84,244,129,184,176,84,84,49,48,53,54,51,48,53,84,244,129,184,177,84,84,49,48,53,54,51,48,54,84,244,129,184,178,84,84,49,48,53,54,51,48,55,84,244,129,184,179,84,84,49,48,53,54,51,48,56,84,244,129,184,180,84,84,49,48,53,54,51,48,57,84,244,129,184,181,84,84,49,48,53,54,51,49,48,84,244,129,184,182,84,84,49,48,53,54,51,49,49,84,244,129,184,183,84,84,49,48,53,54,51,49,50,84,244,129,184,184,84,84,49,48,53,54,51,49,51,84,244,129,184,185,84,84,49,48,53,54,51,49,52,84,244,129,184,186,84,84,49,48,53,54,51,49,53,84,244,129,184,187,84,84,49,48,53,54,51,49,54,84,244,129,184,188,84,84,49,48,53,54,51,49,55,84,244,129,184,189,84,84,49,48,53,54,51,49,56,84,244,129,184,190,84,84,49,48,53,54,51,49,57,84,244,129,184,191,84,84,49,48,53,54,51,50,48,84,244,129,185,128,84,84,49,48,53,54,51,50,49,84,244,129,185,129,84,84,49,48,53,54,51,50,50,84,244,129,185,130,84,84,49,48,53,54,51,50,51,84,244,129,185,131,84,84,49,48,53,54,51,50,52,84,244,129,185,132,84,84,49,48,53,54,51,50,53,84,244,129,185,133,84,84,49,48,53,54,51,50,54,84,244,129,185,134,84,84,49,48,53,54,51,50,55,84,244,129,185,135,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20894 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20894_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20894_s.txt", Encoding.UTF8);

    public Test20894() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersdd41d3a5bb7f42709f7cec587f1a204a",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,52,51,54,57,84,244,141,167,177,84,84,49,49,48,52,51,55,48,84,244,141,167,178,84,84,49,49,48,52,51,55,49,84,244,141,167,179,84,84,49,49,48,52,51,55,50,84,244,141,167,180,84,84,49,49,48,52,51,55,51,84,244,141,167,181,84,84,49,49,48,52,51,55,52,84,244,141,167,182,84,84,49,49,48,52,51,55,53,84,244,141,167,183,84,84,49,49,48,52,51,55,54,84,244,141,167,184,84,84,49,49,48,52,51,55,55,84,244,141,167,185,84,84,49,49,48,52,51,55,56,84,244,141,167,186,84,84,49,49,48,52,51,55,57,84,244,141,167,187,84,84,49,49,48,52,51,56,48,84,244,141,167,188,84,84,49,49,48,52,51,56,49,84,244,141,167,189,84,84,49,49,48,52,51,56,50,84,244,141,167,190,84,84,49,49,48,52,51,56,51,84,244,141,167,191,84,84,49,49,48,52,51,56,52,84,244,141,168,128,84,84,49,49,48,52,51,56,53,84,244,141,168,129,84,84,49,49,48,52,51,56,54,84,244,141,168,130,84,84,49,49,48,52,51,56,55,84,244,141,168,131,84,84,49,49,48,52,51,56,56,84,244,141,168,132,84,84,49,49,48,52,51,56,57,84,244,141,168,133,84,84,49,49,48,52,51,57,48,84,244,141,168,134,84,84,49,49,48,52,51,57,49,84,244,141,168,135,84,84,49,49,48,52,51,57,50,84,244,141,168,136,84,84,49,49,48,52,51,57,51,84,244,141,168,137,84,84,49,49,48,52,51,57,52,84,244,141,168,138,84,84,49,49,48,52,51,57,53,84,244,141,168,139,84,84,49,49,48,52,51,57,54,84,244,141,168,140,84,84,49,49,48,52,51,57,55,84,244,141,168,141,84,84,49,49,48,52,51,57,56,84,244,141,168,142,84,84,49,49,48,52,51,57,57,84,244,141,168,143,84,84,49,49,48,52,52,48,48,84,244,141,168,144,84,84,49,49,48,52,52,48,49,84,244,141,168,145,84,84,49,49,48,52,52,48,50,84,244,141,168,146,84,84,49,49,48,52,52,48,51,84,244,141,168,147,84,84,49,49,48,52,52,48,52,84,244,141,168,148,84,84,49,49,48,52,52,48,53,84,244,141,168,149,84,84,49,49,48,52,52,48,54,84,244,141,168,150,84,84,49,49,48,52,52,48,55,84,244,141,168,151,84,84,49,49,48,52,52,48,56,84,244,141,168,152,84,84,49,49,48,52,52,48,57,84,244,141,168,153,84,84,49,49,48,52,52,49,48,84,244,141,168,154,84,84,49,49,48,52,52,49,49,84,244,141,168,155,84,84,49,49,48,52,52,49,50,84,244,141,168,156,84,84,49,49,48,52,52,49,51,84,244,141,168,157,84,84,49,49,48,52,52,49,52,84,244,141,168,158,84,84,49,49,48,52,52,49,53,84,244,141,168,159,84,84,49,49,48,52,52,49,54,84,244,141,168,160,84,84,49,49,48,52,52,49,55,84,244,141,168,161,84,84,49,49,48,52,52,49,56,84,244,141,168,162,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20286 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20286_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20286_s.txt", Encoding.UTF8);

    public Test20286() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers712afb35b54344eb8fa90647f752cd92",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,52,53,53,51,51,84,243,191,144,157,84,84,49,48,52,53,53,51,52,84,243,191,144,158,84,84,49,48,52,53,53,51,53,84,243,191,144,159,84,84,49,48,52,53,53,51,54,84,243,191,144,160,84,84,49,48,52,53,53,51,55,84,243,191,144,161,84,84,49,48,52,53,53,51,56,84,243,191,144,162,84,84,49,48,52,53,53,51,57,84,243,191,144,163,84,84,49,48,52,53,53,52,48,84,243,191,144,164,84,84,49,48,52,53,53,52,49,84,243,191,144,165,84,84,49,48,52,53,53,52,50,84,243,191,144,166,84,84,49,48,52,53,53,52,51,84,243,191,144,167,84,84,49,48,52,53,53,52,52,84,243,191,144,168,84,84,49,48,52,53,53,52,53,84,243,191,144,169,84,84,49,48,52,53,53,52,54,84,243,191,144,170,84,84,49,48,52,53,53,52,55,84,243,191,144,171,84,84,49,48,52,53,53,52,56,84,243,191,144,172,84,84,49,48,52,53,53,52,57,84,243,191,144,173,84,84,49,48,52,53,53,53,48,84,243,191,144,174,84,84,49,48,52,53,53,53,49,84,243,191,144,175,84,84,49,48,52,53,53,53,50,84,243,191,144,176,84,84,49,48,52,53,53,53,51,84,243,191,144,177,84,84,49,48,52,53,53,53,52,84,243,191,144,178,84,84,49,48,52,53,53,53,53,84,243,191,144,179,84,84,49,48,52,53,53,53,54,84,243,191,144,180,84,84,49,48,52,53,53,53,55,84,243,191,144,181,84,84,49,48,52,53,53,53,56,84,243,191,144,182,84,84,49,48,52,53,53,53,57,84,243,191,144,183,84,84,49,48,52,53,53,54,48,84,243,191,144,184,84,84,49,48,52,53,53,54,49,84,243,191,144,185,84,84,49,48,52,53,53,54,50,84,243,191,144,186,84,84,49,48,52,53,53,54,51,84,243,191,144,187,84,84,49,48,52,53,53,54,52,84,243,191,144,188,84,84,49,48,52,53,53,54,53,84,243,191,144,189,84,84,49,48,52,53,53,54,54,84,243,191,144,190,84,84,49,48,52,53,53,54,55,84,243,191,144,191,84,84,49,48,52,53,53,54,57,84,243,191,145,129,84,84,49,48,52,53,53,56,49,84,243,191,145,141,84,84,49,48,52,53,53,56,51,84,243,191,145,143,84,84,49,48,52,53,53,56,52,84,243,191,145,144,84,84,49,48,52,53,53,57,55,84,243,191,145,157,84,84,49,48,52,53,54,51,51,84,243,191,146,129,84,84,49,48,52,53,54,52,53,84,243,191,146,141,84,84,49,48,52,53,54,52,55,84,243,191,146,143,84,84,49,48,52,53,54,52,56,84,243,191,146,144,84,84,49,48,52,53,54,54,49,84,243,191,146,157,84,84,49,48,52,53,54,57,55,84,243,191,147,129,84,84,49,48,52,53,55,48,57,84,243,191,147,141,84,84,49,48,52,53,55,49,49,84,243,191,147,143,84,84,49,48,52,53,55,49,50,84,243,191,147,144,84,84,49,48,52,53,55,50,53,84,243,191,147,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21503 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21503_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21503_s.txt", Encoding.UTF8);

    public Test21503() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{74,63,210,172,73,195,135,118,7,125})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersec22c2bac5f94c15a10bfb479fcf597d",
                        blob: "Blobe0adb625d6c94812841ea7e5418f03ff",
                        blobType: "BlockBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "BlockBlob"),
                        body: body,
                        timeout: 30,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21856 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21856_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21856_s.txt", Encoding.UTF8);

    public Test21856() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers558523dcbea64a12818db33a6c48f8d9",
                        blob: "Blob1f9082326d7d48c39fe7fd30a0af694c",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 0,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20830 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20830_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20830_s.txt", Encoding.UTF8);

    public Test20830() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersf4b0dcea8f7b4ccf92e1f36b952ddf93",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,50,56,49,57,84,244,141,143,163,84,84,49,49,48,50,56,50,48,84,244,141,143,164,84,84,49,49,48,50,56,50,49,84,244,141,143,165,84,84,49,49,48,50,56,50,50,84,244,141,143,166,84,84,49,49,48,50,56,50,51,84,244,141,143,167,84,84,49,49,48,50,56,50,52,84,244,141,143,168,84,84,49,49,48,50,56,50,53,84,244,141,143,169,84,84,49,49,48,50,56,50,54,84,244,141,143,170,84,84,49,49,48,50,56,50,55,84,244,141,143,171,84,84,49,49,48,50,56,50,56,84,244,141,143,172,84,84,49,49,48,50,56,50,57,84,244,141,143,173,84,84,49,49,48,50,56,51,48,84,244,141,143,174,84,84,49,49,48,50,56,51,49,84,244,141,143,175,84,84,49,49,48,50,56,51,50,84,244,141,143,176,84,84,49,49,48,50,56,51,51,84,244,141,143,177,84,84,49,49,48,50,56,51,52,84,244,141,143,178,84,84,49,49,48,50,56,51,53,84,244,141,143,179,84,84,49,49,48,50,56,51,54,84,244,141,143,180,84,84,49,49,48,50,56,51,55,84,244,141,143,181,84,84,49,49,48,50,56,51,56,84,244,141,143,182,84,84,49,49,48,50,56,51,57,84,244,141,143,183,84,84,49,49,48,50,56,52,48,84,244,141,143,184,84,84,49,49,48,50,56,52,49,84,244,141,143,185,84,84,49,49,48,50,56,52,50,84,244,141,143,186,84,84,49,49,48,50,56,52,51,84,244,141,143,187,84,84,49,49,48,50,56,52,52,84,244,141,143,188,84,84,49,49,48,50,56,52,53,84,244,141,143,189,84,84,49,49,48,50,56,52,54,84,244,141,143,190,84,84,49,49,48,50,56,52,55,84,244,141,143,191,84,84,49,49,48,50,56,52,56,84,244,141,144,128,84,84,49,49,48,50,56,52,57,84,244,141,144,129,84,84,49,49,48,50,56,53,48,84,244,141,144,130,84,84,49,49,48,50,56,53,49,84,244,141,144,131,84,84,49,49,48,50,56,53,50,84,244,141,144,132,84,84,49,49,48,50,56,53,51,84,244,141,144,133,84,84,49,49,48,50,56,53,52,84,244,141,144,134,84,84,49,49,48,50,56,53,53,84,244,141,144,135,84,84,49,49,48,50,56,53,54,84,244,141,144,136,84,84,49,49,48,50,56,53,55,84,244,141,144,137,84,84,49,49,48,50,56,53,56,84,244,141,144,138,84,84,49,49,48,50,56,53,57,84,244,141,144,139,84,84,49,49,48,50,56,54,48,84,244,141,144,140,84,84,49,49,48,50,56,54,49,84,244,141,144,141,84,84,49,49,48,50,56,54,50,84,244,141,144,142,84,84,49,49,48,50,56,54,51,84,244,141,144,143,84,84,49,49,48,50,56,54,52,84,244,141,144,144,84,84,49,49,48,50,56,54,53,84,244,141,144,145,84,84,49,49,48,50,56,54,54,84,244,141,144,146,84,84,49,49,48,50,56,54,55,84,244,141,144,147,84,84,49,49,48,50,56,54,56,84,244,141,144,148,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20542 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20542_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20542_s.txt", Encoding.UTF8);

    public Test20542() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers169b02be047c4c76acbb586fdc8886c6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,54,50,55,51,52,84,244,131,157,142,84,84,49,48,54,50,55,51,53,84,244,131,157,143,84,84,49,48,54,50,55,51,54,84,244,131,157,144,84,84,49,48,54,50,55,51,55,84,244,131,157,145,84,84,49,48,54,50,55,51,56,84,244,131,157,146,84,84,49,48,54,50,55,51,57,84,244,131,157,147,84,84,49,48,54,50,55,52,48,84,244,131,157,148,84,84,49,48,54,50,55,52,49,84,244,131,157,149,84,84,49,48,54,50,55,52,50,84,244,131,157,150,84,84,49,48,54,50,55,52,51,84,244,131,157,151,84,84,49,48,54,50,55,52,52,84,244,131,157,152,84,84,49,48,54,50,55,52,53,84,244,131,157,153,84,84,49,48,54,50,55,52,54,84,244,131,157,154,84,84,49,48,54,50,55,52,55,84,244,131,157,155,84,84,49,48,54,50,55,52,56,84,244,131,157,156,84,84,49,48,54,50,55,52,57,84,244,131,157,157,84,84,49,48,54,50,55,53,48,84,244,131,157,158,84,84,49,48,54,50,55,53,49,84,244,131,157,159,84,84,49,48,54,50,55,53,50,84,244,131,157,160,84,84,49,48,54,50,55,53,51,84,244,131,157,161,84,84,49,48,54,50,55,53,52,84,244,131,157,162,84,84,49,48,54,50,55,53,53,84,244,131,157,163,84,84,49,48,54,50,55,53,54,84,244,131,157,164,84,84,49,48,54,50,55,53,55,84,244,131,157,165,84,84,49,48,54,50,55,53,56,84,244,131,157,166,84,84,49,48,54,50,55,53,57,84,244,131,157,167,84,84,49,48,54,50,55,54,48,84,244,131,157,168,84,84,49,48,54,50,55,54,49,84,244,131,157,169,84,84,49,48,54,50,55,54,50,84,244,131,157,170,84,84,49,48,54,50,55,54,51,84,244,131,157,171,84,84,49,48,54,50,55,54,52,84,244,131,157,172,84,84,49,48,54,50,55,54,53,84,244,131,157,173,84,84,49,48,54,50,55,54,54,84,244,131,157,174,84,84,49,48,54,50,55,54,55,84,244,131,157,175,84,84,49,48,54,50,55,54,56,84,244,131,157,176,84,84,49,48,54,50,55,54,57,84,244,131,157,177,84,84,49,48,54,50,55,55,48,84,244,131,157,178,84,84,49,48,54,50,55,55,49,84,244,131,157,179,84,84,49,48,54,50,55,55,50,84,244,131,157,180,84,84,49,48,54,50,55,55,51,84,244,131,157,181,84,84,49,48,54,50,55,55,52,84,244,131,157,182,84,84,49,48,54,50,55,55,53,84,244,131,157,183,84,84,49,48,54,50,55,55,54,84,244,131,157,184,84,84,49,48,54,50,55,55,55,84,244,131,157,185,84,84,49,48,54,50,55,55,56,84,244,131,157,186,84,84,49,48,54,50,55,55,57,84,244,131,157,187,84,84,49,48,54,50,55,56,48,84,244,131,157,188,84,84,49,48,54,50,55,56,49,84,244,131,157,189,84,84,49,48,54,50,55,56,50,84,244,131,157,190,84,84,49,48,54,50,55,56,51,84,244,131,157,191,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19937 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19937_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19937_s.txt", Encoding.UTF8);

    public Test19937() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersbf5ecfbea5a24d8a8188936c9be6fa20",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,57,49,51,50,50,84,243,178,129,154,84,84,57,57,49,51,50,51,84,243,178,129,155,84,84,57,57,49,51,50,52,84,243,178,129,156,84,84,57,57,49,51,50,53,84,243,178,129,157,84,84,57,57,49,51,50,54,84,243,178,129,158,84,84,57,57,49,51,50,55,84,243,178,129,159,84,84,57,57,49,51,50,56,84,243,178,129,160,84,84,57,57,49,51,50,57,84,243,178,129,161,84,84,57,57,49,51,51,48,84,243,178,129,162,84,84,57,57,49,51,51,49,84,243,178,129,163,84,84,57,57,49,51,51,50,84,243,178,129,164,84,84,57,57,49,51,51,51,84,243,178,129,165,84,84,57,57,49,51,51,52,84,243,178,129,166,84,84,57,57,49,51,51,53,84,243,178,129,167,84,84,57,57,49,51,51,54,84,243,178,129,168,84,84,57,57,49,51,51,55,84,243,178,129,169,84,84,57,57,49,51,51,56,84,243,178,129,170,84,84,57,57,49,51,51,57,84,243,178,129,171,84,84,57,57,49,51,52,48,84,243,178,129,172,84,84,57,57,49,51,52,49,84,243,178,129,173,84,84,57,57,49,51,52,50,84,243,178,129,174,84,84,57,57,49,51,52,51,84,243,178,129,175,84,84,57,57,49,51,52,52,84,243,178,129,176,84,84,57,57,49,51,52,53,84,243,178,129,177,84,84,57,57,49,51,52,54,84,243,178,129,178,84,84,57,57,49,51,52,55,84,243,178,129,179,84,84,57,57,49,51,52,56,84,243,178,129,180,84,84,57,57,49,51,52,57,84,243,178,129,181,84,84,57,57,49,51,53,48,84,243,178,129,182,84,84,57,57,49,51,53,49,84,243,178,129,183,84,84,57,57,49,51,53,50,84,243,178,129,184,84,84,57,57,49,51,53,51,84,243,178,129,185,84,84,57,57,49,51,53,52,84,243,178,129,186,84,84,57,57,49,51,53,53,84,243,178,129,187,84,84,57,57,49,51,53,54,84,243,178,129,188,84,84,57,57,49,51,53,55,84,243,178,129,189,84,84,57,57,49,51,53,56,84,243,178,129,190,84,84,57,57,49,51,53,57,84,243,178,129,191,84,84,57,57,49,51,54,49,84,243,178,130,129,84,84,57,57,49,51,55,51,84,243,178,130,141,84,84,57,57,49,51,55,53,84,243,178,130,143,84,84,57,57,49,51,55,54,84,243,178,130,144,84,84,57,57,49,51,56,57,84,243,178,130,157,84,84,57,57,49,52,50,53,84,243,178,131,129,84,84,57,57,49,52,51,55,84,243,178,131,141,84,84,57,57,49,52,51,57,84,243,178,131,143,84,84,57,57,49,52,52,48,84,243,178,131,144,84,84,57,57,49,52,53,51,84,243,178,131,157,84,84,57,57,49,52,56,57,84,243,178,132,129,84,84,57,57,49,53,48,49,84,243,178,132,141,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22587 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22587_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22587_s.txt", Encoding.UTF8);

    public Test22587() : base(recordedRequest, recordedResponse, "accounts8d43a048d26afcd")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048d26afcd",
                        container: "containersddd934ca569845dc89778f0bd55316f0",
                        blob: "Blobdca16ef185524da9bffa54eee12b4594",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20227 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20227_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20227_s.txt", Encoding.UTF8);

    public Test20227() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersca1800aaa567470781b999118df6ba97",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,51,55,48,48,55,84,243,189,139,143,84,84,49,48,51,55,48,48,56,84,243,189,139,144,84,84,49,48,51,55,48,50,49,84,243,189,139,157,84,84,49,48,51,55,48,53,55,84,243,189,140,129,84,84,49,48,51,55,48,54,57,84,243,189,140,141,84,84,49,48,51,55,48,55,49,84,243,189,140,143,84,84,49,48,51,55,48,55,50,84,243,189,140,144,84,84,49,48,51,55,48,56,53,84,243,189,140,157,84,84,49,48,51,55,49,50,48,84,243,189,141,128,84,84,49,48,51,55,49,50,49,84,243,189,141,129,84,84,49,48,51,55,49,50,50,84,243,189,141,130,84,84,49,48,51,55,49,50,51,84,243,189,141,131,84,84,49,48,51,55,49,50,52,84,243,189,141,132,84,84,49,48,51,55,49,50,53,84,243,189,141,133,84,84,49,48,51,55,49,50,54,84,243,189,141,134,84,84,49,48,51,55,49,50,55,84,243,189,141,135,84,84,49,48,51,55,49,50,56,84,243,189,141,136,84,84,49,48,51,55,49,50,57,84,243,189,141,137,84,84,49,48,51,55,49,51,48,84,243,189,141,138,84,84,49,48,51,55,49,51,49,84,243,189,141,139,84,84,49,48,51,55,49,51,50,84,243,189,141,140,84,84,49,48,51,55,49,51,51,84,243,189,141,141,84,84,49,48,51,55,49,51,52,84,243,189,141,142,84,84,49,48,51,55,49,51,53,84,243,189,141,143,84,84,49,48,51,55,49,51,54,84,243,189,141,144,84,84,49,48,51,55,49,51,55,84,243,189,141,145,84,84,49,48,51,55,49,51,56,84,243,189,141,146,84,84,49,48,51,55,49,51,57,84,243,189,141,147,84,84,49,48,51,55,49,52,48,84,243,189,141,148,84,84,49,48,51,55,49,52,49,84,243,189,141,149,84,84,49,48,51,55,49,52,50,84,243,189,141,150,84,84,49,48,51,55,49,52,51,84,243,189,141,151,84,84,49,48,51,55,49,52,52,84,243,189,141,152,84,84,49,48,51,55,49,52,53,84,243,189,141,153,84,84,49,48,51,55,49,52,54,84,243,189,141,154,84,84,49,48,51,55,49,52,55,84,243,189,141,155,84,84,49,48,51,55,49,52,56,84,243,189,141,156,84,84,49,48,51,55,49,52,57,84,243,189,141,157,84,84,49,48,51,55,49,53,48,84,243,189,141,158,84,84,49,48,51,55,49,53,49,84,243,189,141,159,84,84,49,48,51,55,49,53,50,84,243,189,141,160,84,84,49,48,51,55,49,53,51,84,243,189,141,161,84,84,49,48,51,55,49,53,52,84,243,189,141,162,84,84,49,48,51,55,49,53,53,84,243,189,141,163,84,84,49,48,51,55,49,53,54,84,243,189,141,164,84,84,49,48,51,55,49,53,55,84,243,189,141,165,84,84,49,48,51,55,49,53,56,84,243,189,141,166,84,84,49,48,51,55,49,53,57,84,243,189,141,167,84,84,49,48,51,55,49,54,48,84,243,189,141,168,84,84,49,48,51,55,49,54,49,84,243,189,141,169,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20739 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20739_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20739_s.txt", Encoding.UTF8);

    public Test20739() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersc5ae22b09f3f4a3eaff829adc5876203",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,57,51,56,51,55,84,244,139,131,141,84,84,49,48,57,51,56,51,57,84,244,139,131,143,84,84,49,48,57,51,56,52,48,84,244,139,131,144,84,84,49,48,57,51,56,53,51,84,244,139,131,157,84,84,49,48,57,51,56,56,57,84,244,139,132,129,84,84,49,48,57,51,57,48,49,84,244,139,132,141,84,84,49,48,57,51,57,48,51,84,244,139,132,143,84,84,49,48,57,51,57,48,52,84,244,139,132,144,84,84,49,48,57,51,57,49,55,84,244,139,132,157,84,84,49,48,57,51,57,53,51,84,244,139,133,129,84,84,49,48,57,51,57,54,53,84,244,139,133,141,84,84,49,48,57,51,57,54,55,84,244,139,133,143,84,84,49,48,57,51,57,54,56,84,244,139,133,144,84,84,49,48,57,51,57,56,49,84,244,139,133,157,84,84,49,48,57,52,48,49,55,84,244,139,134,129,84,84,49,48,57,52,48,50,57,84,244,139,134,141,84,84,49,48,57,52,48,51,49,84,244,139,134,143,84,84,49,48,57,52,48,51,50,84,244,139,134,144,84,84,49,48,57,52,48,52,53,84,244,139,134,157,84,84,49,48,57,52,48,56,49,84,244,139,135,129,84,84,49,48,57,52,48,57,51,84,244,139,135,141,84,84,49,48,57,52,48,57,53,84,244,139,135,143,84,84,49,48,57,52,48,57,54,84,244,139,135,144,84,84,49,48,57,52,49,48,57,84,244,139,135,157,84,84,49,48,57,52,49,52,53,84,244,139,136,129,84,84,49,48,57,52,49,53,55,84,244,139,136,141,84,84,49,48,57,52,49,53,57,84,244,139,136,143,84,84,49,48,57,52,49,54,48,84,244,139,136,144,84,84,49,48,57,52,49,55,51,84,244,139,136,157,84,84,49,48,57,52,50,48,57,84,244,139,137,129,84,84,49,48,57,52,50,50,49,84,244,139,137,141,84,84,49,48,57,52,50,50,51,84,244,139,137,143,84,84,49,48,57,52,50,50,52,84,244,139,137,144,84,84,49,48,57,52,50,51,55,84,244,139,137,157,84,84,49,48,57,52,50,55,51,84,244,139,138,129,84,84,49,48,57,52,50,56,53,84,244,139,138,141,84,84,49,48,57,52,50,56,55,84,244,139,138,143,84,84,49,48,57,52,50,56,56,84,244,139,138,144,84,84,49,48,57,52,51,48,49,84,244,139,138,157,84,84,49,48,57,52,51,51,55,84,244,139,139,129,84,84,49,48,57,52,51,52,57,84,244,139,139,141,84,84,49,48,57,52,51,53,49,84,244,139,139,143,84,84,49,48,57,52,51,53,50,84,244,139,139,144,84,84,49,48,57,52,51,54,53,84,244,139,139,157,84,84,49,48,57,52,52,48,49,84,244,139,140,129,84,84,49,48,57,52,52,49,51,84,244,139,140,141,84,84,49,48,57,52,52,49,53,84,244,139,140,143,84,84,49,48,57,52,52,49,54,84,244,139,140,144,84,84,49,48,57,52,52,50,57,84,244,139,140,157,84,84,49,48,57,52,52,54,52,84,244,139,141,128,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22588 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22588_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22588_s.txt", Encoding.UTF8);

    public Test22588() : base(recordedRequest, recordedResponse, "accounts8d43a048d26afcd")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048d26afcd",
                        container: "containersddd934ca569845dc89778f0bd55316f0",
                        blob: "Blob1f7b977bc16b4a6a942043da29c04bef",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19810 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19810_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19810_s.txt", Encoding.UTF8);

    public Test19810() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers3d1fce2fe43b489ca49e5d4066014499",
                        blob: Encoding.UTF8.GetString(new byte[]{84,53,56,48,48,48,84,238,138,144,84,84,53,56,48,49,51,84,238,138,157,84,84,53,56,48,52,57,84,238,139,129,84,84,53,56,48,54,49,84,238,139,141,84,84,53,56,48,54,51,84,238,139,143,84,84,53,56,48,54,52,84,238,139,144,84,84,53,56,48,55,55,84,238,139,157,84,84,53,56,49,49,51,84,238,140,129,84,84,53,56,49,50,53,84,238,140,141,84,84,53,56,49,50,55,84,238,140,143,84,84,53,56,49,50,56,84,238,140,144,84,84,53,56,49,52,49,84,238,140,157,84,84,53,56,49,55,54,84,238,141,128,84,84,53,56,49,55,55,84,238,141,129,84,84,53,56,49,55,56,84,238,141,130,84,84,53,56,49,55,57,84,238,141,131,84,84,53,56,49,56,48,84,238,141,132,84,84,53,56,49,56,49,84,238,141,133,84,84,53,56,49,56,50,84,238,141,134,84,84,53,56,49,56,51,84,238,141,135,84,84,53,56,49,56,52,84,238,141,136,84,84,53,56,49,56,53,84,238,141,137,84,84,53,56,49,56,54,84,238,141,138,84,84,53,56,49,56,55,84,238,141,139,84,84,53,56,49,56,56,84,238,141,140,84,84,53,56,49,56,57,84,238,141,141,84,84,53,56,49,57,48,84,238,141,142,84,84,53,56,49,57,49,84,238,141,143,84,84,53,56,49,57,50,84,238,141,144,84,84,53,56,49,57,51,84,238,141,145,84,84,53,56,49,57,52,84,238,141,146,84,84,53,56,49,57,53,84,238,141,147,84,84,53,56,49,57,54,84,238,141,148,84,84,53,56,49,57,55,84,238,141,149,84,84,53,56,49,57,56,84,238,141,150,84,84,53,56,49,57,57,84,238,141,151,84,84,53,56,50,48,48,84,238,141,152,84,84,53,56,50,48,49,84,238,141,153,84,84,53,56,50,48,50,84,238,141,154,84,84,53,56,50,48,51,84,238,141,155,84,84,53,56,50,48,52,84,238,141,156,84,84,53,56,50,48,53,84,238,141,157,84,84,53,56,50,48,54,84,238,141,158,84,84,53,56,50,48,55,84,238,141,159,84,84,53,56,50,48,56,84,238,141,160,84,84,53,56,50,48,57,84,238,141,161,84,84,53,56,50,49,48,84,238,141,162,84,84,53,56,50,49,49,84,238,141,163,84,84,53,56,50,49,50,84,238,141,164,84,84,53,56,50,49,51,84,238,141,165,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20959 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20959_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20959_s.txt", Encoding.UTF8);

    public Test20959() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersdf87e0f5374149afa792ac52b484870e",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,53,56,54,57,84,244,141,191,141,84,84,49,49,48,53,56,55,48,84,244,141,191,142,84,84,49,49,48,53,56,55,49,84,244,141,191,143,84,84,49,49,48,53,56,55,50,84,244,141,191,144,84,84,49,49,48,53,56,55,51,84,244,141,191,145,84,84,49,49,48,53,56,55,52,84,244,141,191,146,84,84,49,49,48,53,56,55,53,84,244,141,191,147,84,84,49,49,48,53,56,55,54,84,244,141,191,148,84,84,49,49,48,53,56,55,55,84,244,141,191,149,84,84,49,49,48,53,56,55,56,84,244,141,191,150,84,84,49,49,48,53,56,55,57,84,244,141,191,151,84,84,49,49,48,53,56,56,48,84,244,141,191,152,84,84,49,49,48,53,56,56,49,84,244,141,191,153,84,84,49,49,48,53,56,56,50,84,244,141,191,154,84,84,49,49,48,53,56,56,51,84,244,141,191,155,84,84,49,49,48,53,56,56,52,84,244,141,191,156,84,84,49,49,48,53,56,56,53,84,244,141,191,157,84,84,49,49,48,53,56,56,54,84,244,141,191,158,84,84,49,49,48,53,56,56,55,84,244,141,191,159,84,84,49,49,48,53,56,56,56,84,244,141,191,160,84,84,49,49,48,53,56,56,57,84,244,141,191,161,84,84,49,49,48,53,56,57,48,84,244,141,191,162,84,84,49,49,48,53,56,57,49,84,244,141,191,163,84,84,49,49,48,53,56,57,50,84,244,141,191,164,84,84,49,49,48,53,56,57,51,84,244,141,191,165,84,84,49,49,48,53,56,57,52,84,244,141,191,166,84,84,49,49,48,53,56,57,53,84,244,141,191,167,84,84,49,49,48,53,56,57,54,84,244,141,191,168,84,84,49,49,48,53,56,57,55,84,244,141,191,169,84,84,49,49,48,53,56,57,56,84,244,141,191,170,84,84,49,49,48,53,56,57,57,84,244,141,191,171,84,84,49,49,48,53,57,48,48,84,244,141,191,172,84,84,49,49,48,53,57,48,49,84,244,141,191,173,84,84,49,49,48,53,57,48,50,84,244,141,191,174,84,84,49,49,48,53,57,48,51,84,244,141,191,175,84,84,49,49,48,53,57,48,52,84,244,141,191,176,84,84,49,49,48,53,57,48,53,84,244,141,191,177,84,84,49,49,48,53,57,48,54,84,244,141,191,178,84,84,49,49,48,53,57,48,55,84,244,141,191,179,84,84,49,49,48,53,57,48,56,84,244,141,191,180,84,84,49,49,48,53,57,48,57,84,244,141,191,181,84,84,49,49,48,53,57,49,48,84,244,141,191,182,84,84,49,49,48,53,57,49,49,84,244,141,191,183,84,84,49,49,48,53,57,49,50,84,244,141,191,184,84,84,49,49,48,53,57,49,51,84,244,141,191,185,84,84,49,49,48,53,57,49,52,84,244,141,191,186,84,84,49,49,48,53,57,49,53,84,244,141,191,187,84,84,49,49,48,53,57,49,54,84,244,141,191,188,84,84,49,49,48,53,57,49,55,84,244,141,191,189,84,84,49,49,48,53,57,49,56,84,244,141,191,190,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20322 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20322_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20322_s.txt", Encoding.UTF8);

    public Test20322() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers412024b733e349978217e6093afed677",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,49,52,54,57,84,244,128,173,141,84,84,49,48,53,49,52,55,49,84,244,128,173,143,84,84,49,48,53,49,52,55,50,84,244,128,173,144,84,84,49,48,53,49,52,56,53,84,244,128,173,157,84,84,49,48,53,49,53,50,49,84,244,128,174,129,84,84,49,48,53,49,53,51,51,84,244,128,174,141,84,84,49,48,53,49,53,51,53,84,244,128,174,143,84,84,49,48,53,49,53,51,54,84,244,128,174,144,84,84,49,48,53,49,53,52,57,84,244,128,174,157,84,84,49,48,53,49,53,56,53,84,244,128,175,129,84,84,49,48,53,49,53,57,55,84,244,128,175,141,84,84,49,48,53,49,53,57,57,84,244,128,175,143,84,84,49,48,53,49,54,48,48,84,244,128,175,144,84,84,49,48,53,49,54,49,51,84,244,128,175,157,84,84,49,48,53,49,54,52,57,84,244,128,176,129,84,84,49,48,53,49,54,54,49,84,244,128,176,141,84,84,49,48,53,49,54,54,51,84,244,128,176,143,84,84,49,48,53,49,54,54,52,84,244,128,176,144,84,84,49,48,53,49,54,55,55,84,244,128,176,157,84,84,49,48,53,49,55,49,51,84,244,128,177,129,84,84,49,48,53,49,55,50,53,84,244,128,177,141,84,84,49,48,53,49,55,50,55,84,244,128,177,143,84,84,49,48,53,49,55,50,56,84,244,128,177,144,84,84,49,48,53,49,55,52,49,84,244,128,177,157,84,84,49,48,53,49,55,55,55,84,244,128,178,129,84,84,49,48,53,49,55,56,57,84,244,128,178,141,84,84,49,48,53,49,55,57,49,84,244,128,178,143,84,84,49,48,53,49,55,57,50,84,244,128,178,144,84,84,49,48,53,49,56,48,53,84,244,128,178,157,84,84,49,48,53,49,56,52,49,84,244,128,179,129,84,84,49,48,53,49,56,53,51,84,244,128,179,141,84,84,49,48,53,49,56,53,53,84,244,128,179,143,84,84,49,48,53,49,56,53,54,84,244,128,179,144,84,84,49,48,53,49,56,54,57,84,244,128,179,157,84,84,49,48,53,49,57,48,53,84,244,128,180,129,84,84,49,48,53,49,57,49,55,84,244,128,180,141,84,84,49,48,53,49,57,49,57,84,244,128,180,143,84,84,49,48,53,49,57,50,48,84,244,128,180,144,84,84,49,48,53,49,57,51,51,84,244,128,180,157,84,84,49,48,53,49,57,54,57,84,244,128,181,129,84,84,49,48,53,49,57,56,49,84,244,128,181,141,84,84,49,48,53,49,57,56,51,84,244,128,181,143,84,84,49,48,53,49,57,56,52,84,244,128,181,144,84,84,49,48,53,49,57,57,55,84,244,128,181,157,84,84,49,48,53,50,48,51,51,84,244,128,182,129,84,84,49,48,53,50,48,52,53,84,244,128,182,141,84,84,49,48,53,50,48,52,55,84,244,128,182,143,84,84,49,48,53,50,48,52,56,84,244,128,182,144,84,84,49,48,53,50,48,54,49,84,244,128,182,157,84,84,49,48,53,50,48,57,55,84,244,128,183,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20513 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20513_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20513_s.txt", Encoding.UTF8);

    public Test20513() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers3bfa703d74a140e499ecce701b962b8c",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,56,51,51,51,84,244,130,152,157,84,84,49,48,53,56,51,54,57,84,244,130,153,129,84,84,49,48,53,56,51,56,49,84,244,130,153,141,84,84,49,48,53,56,51,56,51,84,244,130,153,143,84,84,49,48,53,56,51,56,52,84,244,130,153,144,84,84,49,48,53,56,51,57,55,84,244,130,153,157,84,84,49,48,53,56,52,51,51,84,244,130,154,129,84,84,49,48,53,56,52,52,53,84,244,130,154,141,84,84,49,48,53,56,52,52,55,84,244,130,154,143,84,84,49,48,53,56,52,52,56,84,244,130,154,144,84,84,49,48,53,56,52,54,49,84,244,130,154,157,84,84,49,48,53,56,52,57,55,84,244,130,155,129,84,84,49,48,53,56,53,48,57,84,244,130,155,141,84,84,49,48,53,56,53,49,49,84,244,130,155,143,84,84,49,48,53,56,53,49,50,84,244,130,155,144,84,84,49,48,53,56,53,50,53,84,244,130,155,157,84,84,49,48,53,56,53,54,49,84,244,130,156,129,84,84,49,48,53,56,53,55,51,84,244,130,156,141,84,84,49,48,53,56,53,55,53,84,244,130,156,143,84,84,49,48,53,56,53,55,54,84,244,130,156,144,84,84,49,48,53,56,53,56,57,84,244,130,156,157,84,84,49,48,53,56,54,50,52,84,244,130,157,128,84,84,49,48,53,56,54,50,53,84,244,130,157,129,84,84,49,48,53,56,54,50,54,84,244,130,157,130,84,84,49,48,53,56,54,50,55,84,244,130,157,131,84,84,49,48,53,56,54,50,56,84,244,130,157,132,84,84,49,48,53,56,54,50,57,84,244,130,157,133,84,84,49,48,53,56,54,51,48,84,244,130,157,134,84,84,49,48,53,56,54,51,49,84,244,130,157,135,84,84,49,48,53,56,54,51,50,84,244,130,157,136,84,84,49,48,53,56,54,51,51,84,244,130,157,137,84,84,49,48,53,56,54,51,52,84,244,130,157,138,84,84,49,48,53,56,54,51,53,84,244,130,157,139,84,84,49,48,53,56,54,51,54,84,244,130,157,140,84,84,49,48,53,56,54,51,55,84,244,130,157,141,84,84,49,48,53,56,54,51,56,84,244,130,157,142,84,84,49,48,53,56,54,51,57,84,244,130,157,143,84,84,49,48,53,56,54,52,48,84,244,130,157,144,84,84,49,48,53,56,54,52,49,84,244,130,157,145,84,84,49,48,53,56,54,52,50,84,244,130,157,146,84,84,49,48,53,56,54,52,51,84,244,130,157,147,84,84,49,48,53,56,54,52,52,84,244,130,157,148,84,84,49,48,53,56,54,52,53,84,244,130,157,149,84,84,49,48,53,56,54,52,54,84,244,130,157,150,84,84,49,48,53,56,54,52,55,84,244,130,157,151,84,84,49,48,53,56,54,52,56,84,244,130,157,152,84,84,49,48,53,56,54,52,57,84,244,130,157,153,84,84,49,48,53,56,54,53,48,84,244,130,157,154,84,84,49,48,53,56,54,53,49,84,244,130,157,155,84,84,49,48,53,56,54,53,50,84,244,130,157,156,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21857 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21857_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21857_s.txt", Encoding.UTF8);

    public Test21857() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers558523dcbea64a12818db33a6c48f8d9",
                        blob: "Blob1f9082326d7d48c39fe7fd30a0af694c",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 0,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20767 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20767_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20767_s.txt", Encoding.UTF8);

    public Test20767() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersc5ae22b09f3f4a3eaff829adc5876203",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,57,56,53,57,54,84,244,140,141,164,84,84,49,48,57,56,53,57,55,84,244,140,141,165,84,84,49,48,57,56,53,57,56,84,244,140,141,166,84,84,49,48,57,56,53,57,57,84,244,140,141,167,84,84,49,48,57,56,54,48,48,84,244,140,141,168,84,84,49,48,57,56,54,48,49,84,244,140,141,169,84,84,49,48,57,56,54,48,50,84,244,140,141,170,84,84,49,48,57,56,54,48,51,84,244,140,141,171,84,84,49,48,57,56,54,48,52,84,244,140,141,172,84,84,49,48,57,56,54,48,53,84,244,140,141,173,84,84,49,48,57,56,54,48,54,84,244,140,141,174,84,84,49,48,57,56,54,48,55,84,244,140,141,175,84,84,49,48,57,56,54,48,56,84,244,140,141,176,84,84,49,48,57,56,54,48,57,84,244,140,141,177,84,84,49,48,57,56,54,49,48,84,244,140,141,178,84,84,49,48,57,56,54,49,49,84,244,140,141,179,84,84,49,48,57,56,54,49,50,84,244,140,141,180,84,84,49,48,57,56,54,49,51,84,244,140,141,181,84,84,49,48,57,56,54,49,52,84,244,140,141,182,84,84,49,48,57,56,54,49,53,84,244,140,141,183,84,84,49,48,57,56,54,49,54,84,244,140,141,184,84,84,49,48,57,56,54,49,55,84,244,140,141,185,84,84,49,48,57,56,54,49,56,84,244,140,141,186,84,84,49,48,57,56,54,49,57,84,244,140,141,187,84,84,49,48,57,56,54,50,48,84,244,140,141,188,84,84,49,48,57,56,54,50,49,84,244,140,141,189,84,84,49,48,57,56,54,50,50,84,244,140,141,190,84,84,49,48,57,56,54,50,51,84,244,140,141,191,84,84,49,48,57,56,54,50,53,84,244,140,142,129,84,84,49,48,57,56,54,51,55,84,244,140,142,141,84,84,49,48,57,56,54,51,57,84,244,140,142,143,84,84,49,48,57,56,54,52,48,84,244,140,142,144,84,84,49,48,57,56,54,53,51,84,244,140,142,157,84,84,49,48,57,56,54,56,56,84,244,140,143,128,84,84,49,48,57,56,54,56,57,84,244,140,143,129,84,84,49,48,57,56,54,57,48,84,244,140,143,130,84,84,49,48,57,56,54,57,49,84,244,140,143,131,84,84,49,48,57,56,54,57,50,84,244,140,143,132,84,84,49,48,57,56,54,57,51,84,244,140,143,133,84,84,49,48,57,56,54,57,52,84,244,140,143,134,84,84,49,48,57,56,54,57,53,84,244,140,143,135,84,84,49,48,57,56,54,57,54,84,244,140,143,136,84,84,49,48,57,56,54,57,55,84,244,140,143,137,84,84,49,48,57,56,54,57,56,84,244,140,143,138,84,84,49,48,57,56,54,57,57,84,244,140,143,139,84,84,49,48,57,56,55,48,48,84,244,140,143,140,84,84,49,48,57,56,55,48,49,84,244,140,143,141,84,84,49,48,57,56,55,48,50,84,244,140,143,142,84,84,49,48,57,56,55,48,51,84,244,140,143,143,84,84,49,48,57,56,55,48,52,84,244,140,143,144,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20576 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20576_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20576_s.txt", Encoding.UTF8);

    public Test20576() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers2997cf743a0f481c9f696984938aa742",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,54,56,54,48,57,84,244,132,185,129,84,84,49,48,54,56,54,50,49,84,244,132,185,141,84,84,49,48,54,56,54,50,51,84,244,132,185,143,84,84,49,48,54,56,54,50,52,84,244,132,185,144,84,84,49,48,54,56,54,51,55,84,244,132,185,157,84,84,49,48,54,56,54,55,51,84,244,132,186,129,84,84,49,48,54,56,54,56,53,84,244,132,186,141,84,84,49,48,54,56,54,56,55,84,244,132,186,143,84,84,49,48,54,56,54,56,56,84,244,132,186,144,84,84,49,48,54,56,55,48,49,84,244,132,186,157,84,84,49,48,54,56,55,51,55,84,244,132,187,129,84,84,49,48,54,56,55,52,57,84,244,132,187,141,84,84,49,48,54,56,55,53,49,84,244,132,187,143,84,84,49,48,54,56,55,53,50,84,244,132,187,144,84,84,49,48,54,56,55,54,53,84,244,132,187,157,84,84,49,48,54,56,56,48,49,84,244,132,188,129,84,84,49,48,54,56,56,49,51,84,244,132,188,141,84,84,49,48,54,56,56,49,53,84,244,132,188,143,84,84,49,48,54,56,56,49,54,84,244,132,188,144,84,84,49,48,54,56,56,50,57,84,244,132,188,157,84,84,49,48,54,56,56,54,53,84,244,132,189,129,84,84,49,48,54,56,56,55,55,84,244,132,189,141,84,84,49,48,54,56,56,55,57,84,244,132,189,143,84,84,49,48,54,56,56,56,48,84,244,132,189,144,84,84,49,48,54,56,56,57,51,84,244,132,189,157,84,84,49,48,54,56,57,50,57,84,244,132,190,129,84,84,49,48,54,56,57,52,49,84,244,132,190,141,84,84,49,48,54,56,57,52,51,84,244,132,190,143,84,84,49,48,54,56,57,52,52,84,244,132,190,144,84,84,49,48,54,56,57,53,55,84,244,132,190,157,84,84,49,48,54,56,57,57,51,84,244,132,191,129,84,84,49,48,54,57,48,48,53,84,244,132,191,141,84,84,49,48,54,57,48,48,55,84,244,132,191,143,84,84,49,48,54,57,48,48,56,84,244,132,191,144,84,84,49,48,54,57,48,50,49,84,244,132,191,157,84,84,49,48,54,57,48,53,55,84,244,133,128,129,84,84,49,48,54,57,48,54,57,84,244,133,128,141,84,84,49,48,54,57,48,55,49,84,244,133,128,143,84,84,49,48,54,57,48,55,50,84,244,133,128,144,84,84,49,48,54,57,48,56,53,84,244,133,128,157,84,84,49,48,54,57,49,50,48,84,244,133,129,128,84,84,49,48,54,57,49,50,49,84,244,133,129,129,84,84,49,48,54,57,49,50,50,84,244,133,129,130,84,84,49,48,54,57,49,50,51,84,244,133,129,131,84,84,49,48,54,57,49,50,52,84,244,133,129,132,84,84,49,48,54,57,49,50,53,84,244,133,129,133,84,84,49,48,54,57,49,50,54,84,244,133,129,134,84,84,49,48,54,57,49,50,55,84,244,133,129,135,84,84,49,48,54,57,49,50,56,84,244,133,129,136,84,84,49,48,54,57,49,50,57,84,244,133,129,137,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21151 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21151_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21151_s.txt", Encoding.UTF8);

    public Test21151() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers56d1c908d8f44b69abe6817b1847a0f6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,51,57,48,48,84,244,143,188,172,84,84,49,49,49,51,57,48,49,84,244,143,188,173,84,84,49,49,49,51,57,48,50,84,244,143,188,174,84,84,49,49,49,51,57,48,51,84,244,143,188,175,84,84,49,49,49,51,57,48,52,84,244,143,188,176,84,84,49,49,49,51,57,48,53,84,244,143,188,177,84,84,49,49,49,51,57,48,54,84,244,143,188,178,84,84,49,49,49,51,57,48,55,84,244,143,188,179,84,84,49,49,49,51,57,48,56,84,244,143,188,180,84,84,49,49,49,51,57,48,57,84,244,143,188,181,84,84,49,49,49,51,57,49,48,84,244,143,188,182,84,84,49,49,49,51,57,49,49,84,244,143,188,183,84,84,49,49,49,51,57,49,50,84,244,143,188,184,84,84,49,49,49,51,57,49,51,84,244,143,188,185,84,84,49,49,49,51,57,49,52,84,244,143,188,186,84,84,49,49,49,51,57,49,53,84,244,143,188,187,84,84,49,49,49,51,57,49,54,84,244,143,188,188,84,84,49,49,49,51,57,49,55,84,244,143,188,189,84,84,49,49,49,51,57,49,56,84,244,143,188,190,84,84,49,49,49,51,57,49,57,84,244,143,188,191,84,84,49,49,49,51,57,50,48,84,244,143,189,128,84,84,49,49,49,51,57,50,49,84,244,143,189,129,84,84,49,49,49,51,57,50,50,84,244,143,189,130,84,84,49,49,49,51,57,50,51,84,244,143,189,131,84,84,49,49,49,51,57,50,52,84,244,143,189,132,84,84,49,49,49,51,57,50,53,84,244,143,189,133,84,84,49,49,49,51,57,50,54,84,244,143,189,134,84,84,49,49,49,51,57,50,55,84,244,143,189,135,84,84,49,49,49,51,57,50,56,84,244,143,189,136,84,84,49,49,49,51,57,50,57,84,244,143,189,137,84,84,49,49,49,51,57,51,48,84,244,143,189,138,84,84,49,49,49,51,57,51,49,84,244,143,189,139,84,84,49,49,49,51,57,51,50,84,244,143,189,140,84,84,49,49,49,51,57,51,51,84,244,143,189,141,84,84,49,49,49,51,57,51,52,84,244,143,189,142,84,84,49,49,49,51,57,51,53,84,244,143,189,143,84,84,49,49,49,51,57,51,54,84,244,143,189,144,84,84,49,49,49,51,57,51,55,84,244,143,189,145,84,84,49,49,49,51,57,51,56,84,244,143,189,146,84,84,49,49,49,51,57,51,57,84,244,143,189,147,84,84,49,49,49,51,57,52,48,84,244,143,189,148,84,84,49,49,49,51,57,52,49,84,244,143,189,149,84,84,49,49,49,51,57,52,50,84,244,143,189,150,84,84,49,49,49,51,57,52,51,84,244,143,189,151,84,84,49,49,49,51,57,52,52,84,244,143,189,152,84,84,49,49,49,51,57,52,53,84,244,143,189,153,84,84,49,49,49,51,57,52,54,84,244,143,189,154,84,84,49,49,49,51,57,52,55,84,244,143,189,155,84,84,49,49,49,51,57,52,56,84,244,143,189,156,84,84,49,49,49,51,57,52,57,84,244,143,189,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20064 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20064_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20064_s.txt", Encoding.UTF8);

    public Test20064() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersb3c703c6e551430d9c914c24c3792dd5",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,49,49,49,52,57,84,243,182,183,141,84,84,49,48,49,49,49,53,49,84,243,182,183,143,84,84,49,48,49,49,49,53,50,84,243,182,183,144,84,84,49,48,49,49,49,54,53,84,243,182,183,157,84,84,49,48,49,49,50,48,49,84,243,182,184,129,84,84,49,48,49,49,50,49,51,84,243,182,184,141,84,84,49,48,49,49,50,49,53,84,243,182,184,143,84,84,49,48,49,49,50,49,54,84,243,182,184,144,84,84,49,48,49,49,50,50,57,84,243,182,184,157,84,84,49,48,49,49,50,54,53,84,243,182,185,129,84,84,49,48,49,49,50,55,55,84,243,182,185,141,84,84,49,48,49,49,50,55,57,84,243,182,185,143,84,84,49,48,49,49,50,56,48,84,243,182,185,144,84,84,49,48,49,49,50,57,51,84,243,182,185,157,84,84,49,48,49,49,51,50,57,84,243,182,186,129,84,84,49,48,49,49,51,52,49,84,243,182,186,141,84,84,49,48,49,49,51,52,51,84,243,182,186,143,84,84,49,48,49,49,51,52,52,84,243,182,186,144,84,84,49,48,49,49,51,53,55,84,243,182,186,157,84,84,49,48,49,49,51,57,51,84,243,182,187,129,84,84,49,48,49,49,52,48,53,84,243,182,187,141,84,84,49,48,49,49,52,48,55,84,243,182,187,143,84,84,49,48,49,49,52,48,56,84,243,182,187,144,84,84,49,48,49,49,52,50,49,84,243,182,187,157,84,84,49,48,49,49,52,53,55,84,243,182,188,129,84,84,49,48,49,49,52,54,57,84,243,182,188,141,84,84,49,48,49,49,52,55,49,84,243,182,188,143,84,84,49,48,49,49,52,55,50,84,243,182,188,144,84,84,49,48,49,49,52,56,53,84,243,182,188,157,84,84,49,48,49,49,53,50,49,84,243,182,189,129,84,84,49,48,49,49,53,51,51,84,243,182,189,141,84,84,49,48,49,49,53,51,53,84,243,182,189,143,84,84,49,48,49,49,53,51,54,84,243,182,189,144,84,84,49,48,49,49,53,52,57,84,243,182,189,157,84,84,49,48,49,49,53,56,53,84,243,182,190,129,84,84,49,48,49,49,53,57,55,84,243,182,190,141,84,84,49,48,49,49,53,57,57,84,243,182,190,143,84,84,49,48,49,49,54,48,48,84,243,182,190,144,84,84,49,48,49,49,54,49,51,84,243,182,190,157,84,84,49,48,49,49,54,52,57,84,243,182,191,129,84,84,49,48,49,49,54,54,49,84,243,182,191,141,84,84,49,48,49,49,54,54,51,84,243,182,191,143,84,84,49,48,49,49,54,54,52,84,243,182,191,144,84,84,49,48,49,49,54,55,55,84,243,182,191,157,84,84,49,48,49,49,55,49,51,84,243,183,128,129,84,84,49,48,49,49,55,50,53,84,243,183,128,141,84,84,49,48,49,49,55,50,55,84,243,183,128,143,84,84,49,48,49,49,55,50,56,84,243,183,128,144,84,84,49,48,49,49,55,52,49,84,243,183,128,157,84,84,49,48,49,49,55,55,54,84,243,183,129,128,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20098 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20098_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20098_s.txt", Encoding.UTF8);

    public Test20098() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers02552a2396c44255a61dd19b9714b3b6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,49,54,54,53,55,84,243,184,141,145,84,84,49,48,49,54,54,53,56,84,243,184,141,146,84,84,49,48,49,54,54,53,57,84,243,184,141,147,84,84,49,48,49,54,54,54,48,84,243,184,141,148,84,84,49,48,49,54,54,54,49,84,243,184,141,149,84,84,49,48,49,54,54,54,50,84,243,184,141,150,84,84,49,48,49,54,54,54,51,84,243,184,141,151,84,84,49,48,49,54,54,54,52,84,243,184,141,152,84,84,49,48,49,54,54,54,53,84,243,184,141,153,84,84,49,48,49,54,54,54,54,84,243,184,141,154,84,84,49,48,49,54,54,54,55,84,243,184,141,155,84,84,49,48,49,54,54,54,56,84,243,184,141,156,84,84,49,48,49,54,54,54,57,84,243,184,141,157,84,84,49,48,49,54,54,55,48,84,243,184,141,158,84,84,49,48,49,54,54,55,49,84,243,184,141,159,84,84,49,48,49,54,54,55,50,84,243,184,141,160,84,84,49,48,49,54,54,55,51,84,243,184,141,161,84,84,49,48,49,54,54,55,52,84,243,184,141,162,84,84,49,48,49,54,54,55,53,84,243,184,141,163,84,84,49,48,49,54,54,55,54,84,243,184,141,164,84,84,49,48,49,54,54,55,55,84,243,184,141,165,84,84,49,48,49,54,54,55,56,84,243,184,141,166,84,84,49,48,49,54,54,55,57,84,243,184,141,167,84,84,49,48,49,54,54,56,48,84,243,184,141,168,84,84,49,48,49,54,54,56,49,84,243,184,141,169,84,84,49,48,49,54,54,56,50,84,243,184,141,170,84,84,49,48,49,54,54,56,51,84,243,184,141,171,84,84,49,48,49,54,54,56,52,84,243,184,141,172,84,84,49,48,49,54,54,56,53,84,243,184,141,173,84,84,49,48,49,54,54,56,54,84,243,184,141,174,84,84,49,48,49,54,54,56,55,84,243,184,141,175,84,84,49,48,49,54,54,56,56,84,243,184,141,176,84,84,49,48,49,54,54,56,57,84,243,184,141,177,84,84,49,48,49,54,54,57,48,84,243,184,141,178,84,84,49,48,49,54,54,57,49,84,243,184,141,179,84,84,49,48,49,54,54,57,50,84,243,184,141,180,84,84,49,48,49,54,54,57,51,84,243,184,141,181,84,84,49,48,49,54,54,57,52,84,243,184,141,182,84,84,49,48,49,54,54,57,53,84,243,184,141,183,84,84,49,48,49,54,54,57,54,84,243,184,141,184,84,84,49,48,49,54,54,57,55,84,243,184,141,185,84,84,49,48,49,54,54,57,56,84,243,184,141,186,84,84,49,48,49,54,54,57,57,84,243,184,141,187,84,84,49,48,49,54,55,48,48,84,243,184,141,188,84,84,49,48,49,54,55,48,49,84,243,184,141,189,84,84,49,48,49,54,55,48,50,84,243,184,141,190,84,84,49,48,49,54,55,48,51,84,243,184,141,191,84,84,49,48,49,54,55,48,53,84,243,184,142,129,84,84,49,48,49,54,55,49,55,84,243,184,142,141,84,84,49,48,49,54,55,49,57,84,243,184,142,143,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20610 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20610_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20610_s.txt", Encoding.UTF8);

    public Test20610() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers5f5b393ed8e742338d6031fb2e225092",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,55,51,54,55,55,84,244,134,136,141,84,84,49,48,55,51,54,55,57,84,244,134,136,143,84,84,49,48,55,51,54,56,48,84,244,134,136,144,84,84,49,48,55,51,54,57,51,84,244,134,136,157,84,84,49,48,55,51,55,50,57,84,244,134,137,129,84,84,49,48,55,51,55,52,49,84,244,134,137,141,84,84,49,48,55,51,55,52,51,84,244,134,137,143,84,84,49,48,55,51,55,52,52,84,244,134,137,144,84,84,49,48,55,51,55,53,55,84,244,134,137,157,84,84,49,48,55,51,55,57,51,84,244,134,138,129,84,84,49,48,55,51,56,48,53,84,244,134,138,141,84,84,49,48,55,51,56,48,55,84,244,134,138,143,84,84,49,48,55,51,56,48,56,84,244,134,138,144,84,84,49,48,55,51,56,50,49,84,244,134,138,157,84,84,49,48,55,51,56,53,55,84,244,134,139,129,84,84,49,48,55,51,56,54,57,84,244,134,139,141,84,84,49,48,55,51,56,55,49,84,244,134,139,143,84,84,49,48,55,51,56,55,50,84,244,134,139,144,84,84,49,48,55,51,56,56,53,84,244,134,139,157,84,84,49,48,55,51,57,50,49,84,244,134,140,129,84,84,49,48,55,51,57,51,51,84,244,134,140,141,84,84,49,48,55,51,57,51,53,84,244,134,140,143,84,84,49,48,55,51,57,51,54,84,244,134,140,144,84,84,49,48,55,51,57,52,57,84,244,134,140,157,84,84,49,48,55,51,57,56,52,84,244,134,141,128,84,84,49,48,55,51,57,56,53,84,244,134,141,129,84,84,49,48,55,51,57,56,54,84,244,134,141,130,84,84,49,48,55,51,57,56,55,84,244,134,141,131,84,84,49,48,55,51,57,56,56,84,244,134,141,132,84,84,49,48,55,51,57,56,57,84,244,134,141,133,84,84,49,48,55,51,57,57,48,84,244,134,141,134,84,84,49,48,55,51,57,57,49,84,244,134,141,135,84,84,49,48,55,51,57,57,50,84,244,134,141,136,84,84,49,48,55,51,57,57,51,84,244,134,141,137,84,84,49,48,55,51,57,57,52,84,244,134,141,138,84,84,49,48,55,51,57,57,53,84,244,134,141,139,84,84,49,48,55,51,57,57,54,84,244,134,141,140,84,84,49,48,55,51,57,57,55,84,244,134,141,141,84,84,49,48,55,51,57,57,56,84,244,134,141,142,84,84,49,48,55,51,57,57,57,84,244,134,141,143,84,84,49,48,55,52,48,48,48,84,244,134,141,144,84,84,49,48,55,52,48,48,49,84,244,134,141,145,84,84,49,48,55,52,48,48,50,84,244,134,141,146,84,84,49,48,55,52,48,48,51,84,244,134,141,147,84,84,49,48,55,52,48,48,52,84,244,134,141,148,84,84,49,48,55,52,48,48,53,84,244,134,141,149,84,84,49,48,55,52,48,48,54,84,244,134,141,150,84,84,49,48,55,52,48,48,55,84,244,134,141,151,84,84,49,48,55,52,48,48,56,84,244,134,141,152,84,84,49,48,55,52,48,48,57,84,244,134,141,153,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22651 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22651_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22651_s.txt", Encoding.UTF8);

    public Test22651() : base(recordedRequest, recordedResponse, "accounts8d43a048e2beca5")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048e2beca5",
                        container: "containers3974e1da6923423a9845f2ce644df77d",
                        blob: "Bloba23df7da98044caa96d91bcacd04ff74",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20384 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20384_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20384_s.txt", Encoding.UTF8);

    public Test20384() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers319eca44915441a6b60a6025f5eab2bd",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,52,48,55,56,84,244,129,149,190,84,84,49,48,53,52,48,55,57,84,244,129,149,191,84,84,49,48,53,52,48,56,48,84,244,129,150,128,84,84,49,48,53,52,48,56,49,84,244,129,150,129,84,84,49,48,53,52,48,56,50,84,244,129,150,130,84,84,49,48,53,52,48,56,51,84,244,129,150,131,84,84,49,48,53,52,48,56,52,84,244,129,150,132,84,84,49,48,53,52,48,56,53,84,244,129,150,133,84,84,49,48,53,52,48,56,54,84,244,129,150,134,84,84,49,48,53,52,48,56,55,84,244,129,150,135,84,84,49,48,53,52,48,56,56,84,244,129,150,136,84,84,49,48,53,52,48,56,57,84,244,129,150,137,84,84,49,48,53,52,48,57,48,84,244,129,150,138,84,84,49,48,53,52,48,57,49,84,244,129,150,139,84,84,49,48,53,52,48,57,50,84,244,129,150,140,84,84,49,48,53,52,48,57,51,84,244,129,150,141,84,84,49,48,53,52,48,57,52,84,244,129,150,142,84,84,49,48,53,52,48,57,53,84,244,129,150,143,84,84,49,48,53,52,48,57,54,84,244,129,150,144,84,84,49,48,53,52,48,57,55,84,244,129,150,145,84,84,49,48,53,52,48,57,56,84,244,129,150,146,84,84,49,48,53,52,48,57,57,84,244,129,150,147,84,84,49,48,53,52,49,48,48,84,244,129,150,148,84,84,49,48,53,52,49,48,49,84,244,129,150,149,84,84,49,48,53,52,49,48,50,84,244,129,150,150,84,84,49,48,53,52,49,48,51,84,244,129,150,151,84,84,49,48,53,52,49,48,52,84,244,129,150,152,84,84,49,48,53,52,49,48,53,84,244,129,150,153,84,84,49,48,53,52,49,48,54,84,244,129,150,154,84,84,49,48,53,52,49,48,55,84,244,129,150,155,84,84,49,48,53,52,49,48,56,84,244,129,150,156,84,84,49,48,53,52,49,48,57,84,244,129,150,157,84,84,49,48,53,52,49,49,48,84,244,129,150,158,84,84,49,48,53,52,49,49,49,84,244,129,150,159,84,84,49,48,53,52,49,49,50,84,244,129,150,160,84,84,49,48,53,52,49,49,51,84,244,129,150,161,84,84,49,48,53,52,49,49,52,84,244,129,150,162,84,84,49,48,53,52,49,49,53,84,244,129,150,163,84,84,49,48,53,52,49,49,54,84,244,129,150,164,84,84,49,48,53,52,49,49,55,84,244,129,150,165,84,84,49,48,53,52,49,49,56,84,244,129,150,166,84,84,49,48,53,52,49,49,57,84,244,129,150,167,84,84,49,48,53,52,49,50,48,84,244,129,150,168,84,84,49,48,53,52,49,50,49,84,244,129,150,169,84,84,49,48,53,52,49,50,50,84,244,129,150,170,84,84,49,48,53,52,49,50,51,84,244,129,150,171,84,84,49,48,53,52,49,50,52,84,244,129,150,172,84,84,49,48,53,52,49,50,53,84,244,129,150,173,84,84,49,48,53,52,49,50,54,84,244,129,150,174,84,84,49,48,53,52,49,50,55,84,244,129,150,175,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22589 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22589_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22589_s.txt", Encoding.UTF8);

    public Test22589() : base(recordedRequest, recordedResponse, "accounts8d43a048d26afcd")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048d26afcd",
                        container: "containersddd934ca569845dc89778f0bd55316f0",
                        blob: "Blob148b9686aa554937940c03841b1f2c9c",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22779 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22779_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22779_s.txt", Encoding.UTF8);

    public Test22779() : base(recordedRequest, recordedResponse, "accounts8d43a0490823d21")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a0490823d21",
                        container: "containers0bd48f2ce8374f57b3f3c61b5595b35b",
                        blob: "Blob4b01bf9d2c0b44b2b815992b51a55ede",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22780 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22780_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22780_s.txt", Encoding.UTF8);

    public Test22780() : base(recordedRequest, recordedResponse, "accounts8d43a0490823d21")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a0490823d21",
                        container: "containers0bd48f2ce8374f57b3f3c61b5595b35b",
                        blob: "Blob31ed30b406ff4c8fbeca16222fa4559a",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22654 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22654_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22654_s.txt", Encoding.UTF8);

    public Test22654() : base(recordedRequest, recordedResponse, "accounts8d43a048e7a3443")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048e7a3443",
                        container: "containersbecf1410dd244aaf81535f0fd5cee12d",
                        blob: "Blob344dc60a5157479b99d092b3738066a8",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20671 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20671_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20671_s.txt", Encoding.UTF8);

    public Test20671() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers9df780a74f2549dda8f9f337dadb7946",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,56,50,52,51,49,84,244,136,144,191,84,84,49,48,56,50,52,51,51,84,244,136,145,129,84,84,49,48,56,50,52,52,53,84,244,136,145,141,84,84,49,48,56,50,52,52,55,84,244,136,145,143,84,84,49,48,56,50,52,52,56,84,244,136,145,144,84,84,49,48,56,50,52,54,49,84,244,136,145,157,84,84,49,48,56,50,52,57,55,84,244,136,146,129,84,84,49,48,56,50,53,48,57,84,244,136,146,141,84,84,49,48,56,50,53,49,49,84,244,136,146,143,84,84,49,48,56,50,53,49,50,84,244,136,146,144,84,84,49,48,56,50,53,50,53,84,244,136,146,157,84,84,49,48,56,50,53,54,49,84,244,136,147,129,84,84,49,48,56,50,53,55,51,84,244,136,147,141,84,84,49,48,56,50,53,55,53,84,244,136,147,143,84,84,49,48,56,50,53,55,54,84,244,136,147,144,84,84,49,48,56,50,53,56,57,84,244,136,147,157,84,84,49,48,56,50,54,50,53,84,244,136,148,129,84,84,49,48,56,50,54,51,55,84,244,136,148,141,84,84,49,48,56,50,54,51,57,84,244,136,148,143,84,84,49,48,56,50,54,52,48,84,244,136,148,144,84,84,49,48,56,50,54,53,51,84,244,136,148,157,84,84,49,48,56,50,54,56,57,84,244,136,149,129,84,84,49,48,56,50,55,48,49,84,244,136,149,141,84,84,49,48,56,50,55,48,51,84,244,136,149,143,84,84,49,48,56,50,55,48,52,84,244,136,149,144,84,84,49,48,56,50,55,49,55,84,244,136,149,157,84,84,49,48,56,50,55,53,51,84,244,136,150,129,84,84,49,48,56,50,55,54,53,84,244,136,150,141,84,84,49,48,56,50,55,54,55,84,244,136,150,143,84,84,49,48,56,50,55,54,56,84,244,136,150,144,84,84,49,48,56,50,55,56,49,84,244,136,150,157,84,84,49,48,56,50,56,49,55,84,244,136,151,129,84,84,49,48,56,50,56,50,57,84,244,136,151,141,84,84,49,48,56,50,56,51,49,84,244,136,151,143,84,84,49,48,56,50,56,51,50,84,244,136,151,144,84,84,49,48,56,50,56,52,53,84,244,136,151,157,84,84,49,48,56,50,56,56,49,84,244,136,152,129,84,84,49,48,56,50,56,57,51,84,244,136,152,141,84,84,49,48,56,50,56,57,53,84,244,136,152,143,84,84,49,48,56,50,56,57,54,84,244,136,152,144,84,84,49,48,56,50,57,48,57,84,244,136,152,157,84,84,49,48,56,50,57,52,53,84,244,136,153,129,84,84,49,48,56,50,57,53,55,84,244,136,153,141,84,84,49,48,56,50,57,53,57,84,244,136,153,143,84,84,49,48,56,50,57,54,48,84,244,136,153,144,84,84,49,48,56,50,57,55,51,84,244,136,153,157,84,84,49,48,56,51,48,48,57,84,244,136,154,129,84,84,49,48,56,51,48,50,49,84,244,136,154,141,84,84,49,48,56,51,48,50,51,84,244,136,154,143,84,84,49,48,56,51,48,50,52,84,244,136,154,144,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22590 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22590_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22590_s.txt", Encoding.UTF8);

    public Test22590() : base(recordedRequest, recordedResponse, "accounts8d43a048d26afcd")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048d26afcd",
                        container: "containersddd934ca569845dc89778f0bd55316f0",
                        blob: "Blobf21cf741be8c42b08e5e5b2225a3a392",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21026 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21026_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21026_s.txt", Encoding.UTF8);

    public Test21026() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersd35ea9f156764511b97173ebc769448f",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,48,57,53,48,84,244,143,142,166,84,84,49,49,49,48,57,53,49,84,244,143,142,167,84,84,49,49,49,48,57,53,50,84,244,143,142,168,84,84,49,49,49,48,57,53,51,84,244,143,142,169,84,84,49,49,49,48,57,53,52,84,244,143,142,170,84,84,49,49,49,48,57,53,53,84,244,143,142,171,84,84,49,49,49,48,57,53,54,84,244,143,142,172,84,84,49,49,49,48,57,53,55,84,244,143,142,173,84,84,49,49,49,48,57,53,56,84,244,143,142,174,84,84,49,49,49,48,57,53,57,84,244,143,142,175,84,84,49,49,49,48,57,54,48,84,244,143,142,176,84,84,49,49,49,48,57,54,49,84,244,143,142,177,84,84,49,49,49,48,57,54,50,84,244,143,142,178,84,84,49,49,49,48,57,54,51,84,244,143,142,179,84,84,49,49,49,48,57,54,52,84,244,143,142,180,84,84,49,49,49,48,57,54,53,84,244,143,142,181,84,84,49,49,49,48,57,54,54,84,244,143,142,182,84,84,49,49,49,48,57,54,55,84,244,143,142,183,84,84,49,49,49,48,57,54,56,84,244,143,142,184,84,84,49,49,49,48,57,54,57,84,244,143,142,185,84,84,49,49,49,48,57,55,48,84,244,143,142,186,84,84,49,49,49,48,57,55,49,84,244,143,142,187,84,84,49,49,49,48,57,55,50,84,244,143,142,188,84,84,49,49,49,48,57,55,51,84,244,143,142,189,84,84,49,49,49,48,57,55,52,84,244,143,142,190,84,84,49,49,49,48,57,55,53,84,244,143,142,191,84,84,49,49,49,48,57,55,54,84,244,143,143,128,84,84,49,49,49,48,57,55,55,84,244,143,143,129,84,84,49,49,49,48,57,55,56,84,244,143,143,130,84,84,49,49,49,48,57,55,57,84,244,143,143,131,84,84,49,49,49,48,57,56,48,84,244,143,143,132,84,84,49,49,49,48,57,56,49,84,244,143,143,133,84,84,49,49,49,48,57,56,50,84,244,143,143,134,84,84,49,49,49,48,57,56,51,84,244,143,143,135,84,84,49,49,49,48,57,56,52,84,244,143,143,136,84,84,49,49,49,48,57,56,53,84,244,143,143,137,84,84,49,49,49,48,57,56,54,84,244,143,143,138,84,84,49,49,49,48,57,56,55,84,244,143,143,139,84,84,49,49,49,48,57,56,56,84,244,143,143,140,84,84,49,49,49,48,57,56,57,84,244,143,143,141,84,84,49,49,49,48,57,57,48,84,244,143,143,142,84,84,49,49,49,48,57,57,49,84,244,143,143,143,84,84,49,49,49,48,57,57,50,84,244,143,143,144,84,84,49,49,49,48,57,57,51,84,244,143,143,145,84,84,49,49,49,48,57,57,52,84,244,143,143,146,84,84,49,49,49,48,57,57,53,84,244,143,143,147,84,84,49,49,49,48,57,57,54,84,244,143,143,148,84,84,49,49,49,48,57,57,55,84,244,143,143,149,84,84,49,49,49,48,57,57,56,84,244,143,143,150,84,84,49,49,49,48,57,57,57,84,244,143,143,151,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20481 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20481_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20481_s.txt", Encoding.UTF8);

    public Test20481() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers3bfa703d74a140e499ecce701b962b8c",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,54,51,50,56,84,244,129,185,136,84,84,49,48,53,54,51,50,57,84,244,129,185,137,84,84,49,48,53,54,51,51,48,84,244,129,185,138,84,84,49,48,53,54,51,51,49,84,244,129,185,139,84,84,49,48,53,54,51,51,50,84,244,129,185,140,84,84,49,48,53,54,51,51,51,84,244,129,185,141,84,84,49,48,53,54,51,51,52,84,244,129,185,142,84,84,49,48,53,54,51,51,53,84,244,129,185,143,84,84,49,48,53,54,51,51,54,84,244,129,185,144,84,84,49,48,53,54,51,51,55,84,244,129,185,145,84,84,49,48,53,54,51,51,56,84,244,129,185,146,84,84,49,48,53,54,51,51,57,84,244,129,185,147,84,84,49,48,53,54,51,52,48,84,244,129,185,148,84,84,49,48,53,54,51,52,49,84,244,129,185,149,84,84,49,48,53,54,51,52,50,84,244,129,185,150,84,84,49,48,53,54,51,52,51,84,244,129,185,151,84,84,49,48,53,54,51,52,52,84,244,129,185,152,84,84,49,48,53,54,51,52,53,84,244,129,185,153,84,84,49,48,53,54,51,52,54,84,244,129,185,154,84,84,49,48,53,54,51,52,55,84,244,129,185,155,84,84,49,48,53,54,51,52,56,84,244,129,185,156,84,84,49,48,53,54,51,52,57,84,244,129,185,157,84,84,49,48,53,54,51,53,48,84,244,129,185,158,84,84,49,48,53,54,51,53,49,84,244,129,185,159,84,84,49,48,53,54,51,53,50,84,244,129,185,160,84,84,49,48,53,54,51,53,51,84,244,129,185,161,84,84,49,48,53,54,51,53,52,84,244,129,185,162,84,84,49,48,53,54,51,53,53,84,244,129,185,163,84,84,49,48,53,54,51,53,54,84,244,129,185,164,84,84,49,48,53,54,51,53,55,84,244,129,185,165,84,84,49,48,53,54,51,53,56,84,244,129,185,166,84,84,49,48,53,54,51,53,57,84,244,129,185,167,84,84,49,48,53,54,51,54,48,84,244,129,185,168,84,84,49,48,53,54,51,54,49,84,244,129,185,169,84,84,49,48,53,54,51,54,50,84,244,129,185,170,84,84,49,48,53,54,51,54,51,84,244,129,185,171,84,84,49,48,53,54,51,54,52,84,244,129,185,172,84,84,49,48,53,54,51,54,53,84,244,129,185,173,84,84,49,48,53,54,51,54,54,84,244,129,185,174,84,84,49,48,53,54,51,54,55,84,244,129,185,175,84,84,49,48,53,54,51,54,56,84,244,129,185,176,84,84,49,48,53,54,51,54,57,84,244,129,185,177,84,84,49,48,53,54,51,55,48,84,244,129,185,178,84,84,49,48,53,54,51,55,49,84,244,129,185,179,84,84,49,48,53,54,51,55,50,84,244,129,185,180,84,84,49,48,53,54,51,55,51,84,244,129,185,181,84,84,49,48,53,54,51,55,52,84,244,129,185,182,84,84,49,48,53,54,51,55,53,84,244,129,185,183,84,84,49,48,53,54,51,55,54,84,244,129,185,184,84,84,49,48,53,54,51,55,55,84,244,129,185,185,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21509 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21509_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21509_s.txt", Encoding.UTF8);

    public Test21509() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers61e5c0013e5b441d9064da60bf4fca90",
                        blob: "Blob769dfc3a499e4681baeda136395eb8db",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        leaseId: "fc9cac09-433a-4112-b00c-1f4e2f6a58da",
                        xMsBlobContentLength: 0,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22591 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22591_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22591_s.txt", Encoding.UTF8);

    public Test22591() : base(recordedRequest, recordedResponse, "accounts8d43a048d26afcd")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048d26afcd",
                        container: "containersddd934ca569845dc89778f0bd55316f0",
                        blob: "Blob88100b9aafd24972be5ecd4c5cd89d9e",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22304 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22304_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22304_s.txt", Encoding.UTF8);

    public Test22304() : base(recordedRequest, recordedResponse, "accounts8d43a0488ba7423")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a0488ba7423",
                        container: "containers521b7ad78ace481d8f6d8a2254848910",
                        blob: "Blobd54e23c25cc049b18fd603fb866ae92c",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 805888,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19876 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19876_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19876_s.txt", Encoding.UTF8);

    public Test19876() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers7032abc4111d4702bce9d36696a0a648",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,49,57,56,50,49,84,243,160,164,141,84,84,57,49,57,56,50,51,84,243,160,164,143,84,84,57,49,57,56,50,52,84,243,160,164,144,84,84,57,49,57,56,51,55,84,243,160,164,157,84,84,57,49,57,56,55,51,84,243,160,165,129,84,84,57,49,57,56,56,53,84,243,160,165,141,84,84,57,49,57,56,56,55,84,243,160,165,143,84,84,57,49,57,56,56,56,84,243,160,165,144,84,84,57,49,57,57,48,49,84,243,160,165,157,84,84,57,49,57,57,51,55,84,243,160,166,129,84,84,57,49,57,57,52,57,84,243,160,166,141,84,84,57,49,57,57,53,49,84,243,160,166,143,84,84,57,49,57,57,53,50,84,243,160,166,144,84,84,57,49,57,57,54,53,84,243,160,166,157,84,84,57,50,48,48,48,49,84,243,160,167,129,84,84,57,50,48,48,49,51,84,243,160,167,141,84,84,57,50,48,48,49,53,84,243,160,167,143,84,84,57,50,48,48,49,54,84,243,160,167,144,84,84,57,50,48,48,50,57,84,243,160,167,157,84,84,57,50,48,48,54,53,84,243,160,168,129,84,84,57,50,48,48,55,55,84,243,160,168,141,84,84,57,50,48,48,55,57,84,243,160,168,143,84,84,57,50,48,48,56,48,84,243,160,168,144,84,84,57,50,48,48,57,51,84,243,160,168,157,84,84,57,50,48,49,50,57,84,243,160,169,129,84,84,57,50,48,49,52,49,84,243,160,169,141,84,84,57,50,48,49,52,51,84,243,160,169,143,84,84,57,50,48,49,52,52,84,243,160,169,144,84,84,57,50,48,49,53,55,84,243,160,169,157,84,84,57,50,48,49,57,51,84,243,160,170,129,84,84,57,50,48,50,48,53,84,243,160,170,141,84,84,57,50,48,50,48,55,84,243,160,170,143,84,84,57,50,48,50,48,56,84,243,160,170,144,84,84,57,50,48,50,50,49,84,243,160,170,157,84,84,57,50,48,50,53,55,84,243,160,171,129,84,84,57,50,48,50,54,57,84,243,160,171,141,84,84,57,50,48,50,55,49,84,243,160,171,143,84,84,57,50,48,50,55,50,84,243,160,171,144,84,84,57,50,48,50,56,53,84,243,160,171,157,84,84,57,50,48,51,50,49,84,243,160,172,129,84,84,57,50,48,51,51,51,84,243,160,172,141,84,84,57,50,48,51,51,53,84,243,160,172,143,84,84,57,50,48,51,51,54,84,243,160,172,144,84,84,57,50,48,51,52,57,84,243,160,172,157,84,84,57,50,48,51,56,53,84,243,160,173,129,84,84,57,50,48,51,57,55,84,243,160,173,141,84,84,57,50,48,51,57,57,84,243,160,173,143,84,84,57,50,48,52,48,48,84,243,160,173,144,84,84,57,50,48,52,49,51,84,243,160,173,157,84,84,57,50,48,52,52,57,84,243,160,174,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20417 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20417_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20417_s.txt", Encoding.UTF8);

    public Test20417() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers7f83ba854dc4459da9078f97f691d28c",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,52,56,50,56,84,244,129,161,172,84,84,49,48,53,52,56,50,57,84,244,129,161,173,84,84,49,48,53,52,56,51,48,84,244,129,161,174,84,84,49,48,53,52,56,51,49,84,244,129,161,175,84,84,49,48,53,52,56,51,50,84,244,129,161,176,84,84,49,48,53,52,56,51,51,84,244,129,161,177,84,84,49,48,53,52,56,51,52,84,244,129,161,178,84,84,49,48,53,52,56,51,53,84,244,129,161,179,84,84,49,48,53,52,56,51,54,84,244,129,161,180,84,84,49,48,53,52,56,51,55,84,244,129,161,181,84,84,49,48,53,52,56,51,56,84,244,129,161,182,84,84,49,48,53,52,56,51,57,84,244,129,161,183,84,84,49,48,53,52,56,52,48,84,244,129,161,184,84,84,49,48,53,52,56,52,49,84,244,129,161,185,84,84,49,48,53,52,56,52,50,84,244,129,161,186,84,84,49,48,53,52,56,52,51,84,244,129,161,187,84,84,49,48,53,52,56,52,52,84,244,129,161,188,84,84,49,48,53,52,56,52,53,84,244,129,161,189,84,84,49,48,53,52,56,52,54,84,244,129,161,190,84,84,49,48,53,52,56,52,55,84,244,129,161,191,84,84,49,48,53,52,56,52,56,84,244,129,162,128,84,84,49,48,53,52,56,52,57,84,244,129,162,129,84,84,49,48,53,52,56,53,48,84,244,129,162,130,84,84,49,48,53,52,56,53,49,84,244,129,162,131,84,84,49,48,53,52,56,53,50,84,244,129,162,132,84,84,49,48,53,52,56,53,51,84,244,129,162,133,84,84,49,48,53,52,56,53,52,84,244,129,162,134,84,84,49,48,53,52,56,53,53,84,244,129,162,135,84,84,49,48,53,52,56,53,54,84,244,129,162,136,84,84,49,48,53,52,56,53,55,84,244,129,162,137,84,84,49,48,53,52,56,53,56,84,244,129,162,138,84,84,49,48,53,52,56,53,57,84,244,129,162,139,84,84,49,48,53,52,56,54,48,84,244,129,162,140,84,84,49,48,53,52,56,54,49,84,244,129,162,141,84,84,49,48,53,52,56,54,50,84,244,129,162,142,84,84,49,48,53,52,56,54,51,84,244,129,162,143,84,84,49,48,53,52,56,54,52,84,244,129,162,144,84,84,49,48,53,52,56,54,53,84,244,129,162,145,84,84,49,48,53,52,56,54,54,84,244,129,162,146,84,84,49,48,53,52,56,54,55,84,244,129,162,147,84,84,49,48,53,52,56,54,56,84,244,129,162,148,84,84,49,48,53,52,56,54,57,84,244,129,162,149,84,84,49,48,53,52,56,55,48,84,244,129,162,150,84,84,49,48,53,52,56,55,49,84,244,129,162,151,84,84,49,48,53,52,56,55,50,84,244,129,162,152,84,84,49,48,53,52,56,55,51,84,244,129,162,153,84,84,49,48,53,52,56,55,52,84,244,129,162,154,84,84,49,48,53,52,56,55,53,84,244,129,162,155,84,84,49,48,53,52,56,55,54,84,244,129,162,156,84,84,49,48,53,52,56,55,55,84,244,129,162,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20832 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20832_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20832_s.txt", Encoding.UTF8);

    public Test20832() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersf4b0dcea8f7b4ccf92e1f36b952ddf93",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,50,56,54,57,84,244,141,144,149,84,84,49,49,48,50,56,55,48,84,244,141,144,150,84,84,49,49,48,50,56,55,49,84,244,141,144,151,84,84,49,49,48,50,56,55,50,84,244,141,144,152,84,84,49,49,48,50,56,55,51,84,244,141,144,153,84,84,49,49,48,50,56,55,52,84,244,141,144,154,84,84,49,49,48,50,56,55,53,84,244,141,144,155,84,84,49,49,48,50,56,55,54,84,244,141,144,156,84,84,49,49,48,50,56,55,55,84,244,141,144,157,84,84,49,49,48,50,56,55,56,84,244,141,144,158,84,84,49,49,48,50,56,55,57,84,244,141,144,159,84,84,49,49,48,50,56,56,48,84,244,141,144,160,84,84,49,49,48,50,56,56,49,84,244,141,144,161,84,84,49,49,48,50,56,56,50,84,244,141,144,162,84,84,49,49,48,50,56,56,51,84,244,141,144,163,84,84,49,49,48,50,56,56,52,84,244,141,144,164,84,84,49,49,48,50,56,56,53,84,244,141,144,165,84,84,49,49,48,50,56,56,54,84,244,141,144,166,84,84,49,49,48,50,56,56,55,84,244,141,144,167,84,84,49,49,48,50,56,56,56,84,244,141,144,168,84,84,49,49,48,50,56,56,57,84,244,141,144,169,84,84,49,49,48,50,56,57,48,84,244,141,144,170,84,84,49,49,48,50,56,57,49,84,244,141,144,171,84,84,49,49,48,50,56,57,50,84,244,141,144,172,84,84,49,49,48,50,56,57,51,84,244,141,144,173,84,84,49,49,48,50,56,57,52,84,244,141,144,174,84,84,49,49,48,50,56,57,53,84,244,141,144,175,84,84,49,49,48,50,56,57,54,84,244,141,144,176,84,84,49,49,48,50,56,57,55,84,244,141,144,177,84,84,49,49,48,50,56,57,56,84,244,141,144,178,84,84,49,49,48,50,56,57,57,84,244,141,144,179,84,84,49,49,48,50,57,48,48,84,244,141,144,180,84,84,49,49,48,50,57,48,49,84,244,141,144,181,84,84,49,49,48,50,57,48,50,84,244,141,144,182,84,84,49,49,48,50,57,48,51,84,244,141,144,183,84,84,49,49,48,50,57,48,52,84,244,141,144,184,84,84,49,49,48,50,57,48,53,84,244,141,144,185,84,84,49,49,48,50,57,48,54,84,244,141,144,186,84,84,49,49,48,50,57,48,55,84,244,141,144,187,84,84,49,49,48,50,57,48,56,84,244,141,144,188,84,84,49,49,48,50,57,48,57,84,244,141,144,189,84,84,49,49,48,50,57,49,48,84,244,141,144,190,84,84,49,49,48,50,57,49,49,84,244,141,144,191,84,84,49,49,48,50,57,49,50,84,244,141,145,128,84,84,49,49,48,50,57,49,51,84,244,141,145,129,84,84,49,49,48,50,57,49,52,84,244,141,145,130,84,84,49,49,48,50,57,49,53,84,244,141,145,131,84,84,49,49,48,50,57,49,54,84,244,141,145,132,84,84,49,49,48,50,57,49,55,84,244,141,145,133,84,84,49,49,48,50,57,49,56,84,244,141,145,134,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22781 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22781_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22781_s.txt", Encoding.UTF8);

    public Test22781() : base(recordedRequest, recordedResponse, "accounts8d43a0490823d21")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a0490823d21",
                        container: "containers0bd48f2ce8374f57b3f3c61b5595b35b",
                        blob: "Blobec65787f8b044057819a9b869e213b6c",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20896 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20896_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20896_s.txt", Encoding.UTF8);

    public Test20896() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersdd41d3a5bb7f42709f7cec587f1a204a",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,52,52,49,57,84,244,141,168,163,84,84,49,49,48,52,52,50,48,84,244,141,168,164,84,84,49,49,48,52,52,50,49,84,244,141,168,165,84,84,49,49,48,52,52,50,50,84,244,141,168,166,84,84,49,49,48,52,52,50,51,84,244,141,168,167,84,84,49,49,48,52,52,50,52,84,244,141,168,168,84,84,49,49,48,52,52,50,53,84,244,141,168,169,84,84,49,49,48,52,52,50,54,84,244,141,168,170,84,84,49,49,48,52,52,50,55,84,244,141,168,171,84,84,49,49,48,52,52,50,56,84,244,141,168,172,84,84,49,49,48,52,52,50,57,84,244,141,168,173,84,84,49,49,48,52,52,51,48,84,244,141,168,174,84,84,49,49,48,52,52,51,49,84,244,141,168,175,84,84,49,49,48,52,52,51,50,84,244,141,168,176,84,84,49,49,48,52,52,51,51,84,244,141,168,177,84,84,49,49,48,52,52,51,52,84,244,141,168,178,84,84,49,49,48,52,52,51,53,84,244,141,168,179,84,84,49,49,48,52,52,51,54,84,244,141,168,180,84,84,49,49,48,52,52,51,55,84,244,141,168,181,84,84,49,49,48,52,52,51,56,84,244,141,168,182,84,84,49,49,48,52,52,51,57,84,244,141,168,183,84,84,49,49,48,52,52,52,48,84,244,141,168,184,84,84,49,49,48,52,52,52,49,84,244,141,168,185,84,84,49,49,48,52,52,52,50,84,244,141,168,186,84,84,49,49,48,52,52,52,51,84,244,141,168,187,84,84,49,49,48,52,52,52,52,84,244,141,168,188,84,84,49,49,48,52,52,52,53,84,244,141,168,189,84,84,49,49,48,52,52,52,54,84,244,141,168,190,84,84,49,49,48,52,52,52,55,84,244,141,168,191,84,84,49,49,48,52,52,52,56,84,244,141,169,128,84,84,49,49,48,52,52,52,57,84,244,141,169,129,84,84,49,49,48,52,52,53,48,84,244,141,169,130,84,84,49,49,48,52,52,53,49,84,244,141,169,131,84,84,49,49,48,52,52,53,50,84,244,141,169,132,84,84,49,49,48,52,52,53,51,84,244,141,169,133,84,84,49,49,48,52,52,53,52,84,244,141,169,134,84,84,49,49,48,52,52,53,53,84,244,141,169,135,84,84,49,49,48,52,52,53,54,84,244,141,169,136,84,84,49,49,48,52,52,53,55,84,244,141,169,137,84,84,49,49,48,52,52,53,56,84,244,141,169,138,84,84,49,49,48,52,52,53,57,84,244,141,169,139,84,84,49,49,48,52,52,54,48,84,244,141,169,140,84,84,49,49,48,52,52,54,49,84,244,141,169,141,84,84,49,49,48,52,52,54,50,84,244,141,169,142,84,84,49,49,48,52,52,54,51,84,244,141,169,143,84,84,49,49,48,52,52,54,52,84,244,141,169,144,84,84,49,49,48,52,52,54,53,84,244,141,169,145,84,84,49,49,48,52,52,54,54,84,244,141,169,146,84,84,49,49,48,52,52,54,55,84,244,141,169,147,84,84,49,49,48,52,52,54,56,84,244,141,169,148,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22592 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22592_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22592_s.txt", Encoding.UTF8);

    public Test22592() : base(recordedRequest, recordedResponse, "accounts8d43a048d26afcd")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048d26afcd",
                        container: "containersddd934ca569845dc89778f0bd55316f0",
                        blob: "Blob06a50c7169fd423e9f67b2eee520e535",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22782 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22782_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22782_s.txt", Encoding.UTF8);

    public Test22782() : base(recordedRequest, recordedResponse, "accounts8d43a0490823d21")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a0490823d21",
                        container: "containers0bd48f2ce8374f57b3f3c61b5595b35b",
                        blob: "Blobbd76d1711ad247118dbd03e346f2f9c3",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20229 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20229_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20229_s.txt", Encoding.UTF8);

    public Test20229() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersca1800aaa567470781b999118df6ba97",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,51,55,49,54,50,84,243,189,141,170,84,84,49,48,51,55,49,54,51,84,243,189,141,171,84,84,49,48,51,55,49,54,52,84,243,189,141,172,84,84,49,48,51,55,49,54,53,84,243,189,141,173,84,84,49,48,51,55,49,54,54,84,243,189,141,174,84,84,49,48,51,55,49,54,55,84,243,189,141,175,84,84,49,48,51,55,49,54,56,84,243,189,141,176,84,84,49,48,51,55,49,54,57,84,243,189,141,177,84,84,49,48,51,55,49,55,48,84,243,189,141,178,84,84,49,48,51,55,49,55,49,84,243,189,141,179,84,84,49,48,51,55,49,55,50,84,243,189,141,180,84,84,49,48,51,55,49,55,51,84,243,189,141,181,84,84,49,48,51,55,49,55,52,84,243,189,141,182,84,84,49,48,51,55,49,55,53,84,243,189,141,183,84,84,49,48,51,55,49,55,54,84,243,189,141,184,84,84,49,48,51,55,49,55,55,84,243,189,141,185,84,84,49,48,51,55,49,55,56,84,243,189,141,186,84,84,49,48,51,55,49,55,57,84,243,189,141,187,84,84,49,48,51,55,49,56,48,84,243,189,141,188,84,84,49,48,51,55,49,56,49,84,243,189,141,189,84,84,49,48,51,55,49,56,50,84,243,189,141,190,84,84,49,48,51,55,49,56,51,84,243,189,141,191,84,84,49,48,51,55,49,56,53,84,243,189,142,129,84,84,49,48,51,55,49,57,55,84,243,189,142,141,84,84,49,48,51,55,49,57,57,84,243,189,142,143,84,84,49,48,51,55,50,48,48,84,243,189,142,144,84,84,49,48,51,55,50,49,51,84,243,189,142,157,84,84,49,48,51,55,50,52,56,84,243,189,143,128,84,84,49,48,51,55,50,52,57,84,243,189,143,129,84,84,49,48,51,55,50,53,48,84,243,189,143,130,84,84,49,48,51,55,50,53,49,84,243,189,143,131,84,84,49,48,51,55,50,53,50,84,243,189,143,132,84,84,49,48,51,55,50,53,51,84,243,189,143,133,84,84,49,48,51,55,50,53,52,84,243,189,143,134,84,84,49,48,51,55,50,53,53,84,243,189,143,135,84,84,49,48,51,55,50,53,54,84,243,189,143,136,84,84,49,48,51,55,50,53,55,84,243,189,143,137,84,84,49,48,51,55,50,53,56,84,243,189,143,138,84,84,49,48,51,55,50,53,57,84,243,189,143,139,84,84,49,48,51,55,50,54,48,84,243,189,143,140,84,84,49,48,51,55,50,54,49,84,243,189,143,141,84,84,49,48,51,55,50,54,50,84,243,189,143,142,84,84,49,48,51,55,50,54,51,84,243,189,143,143,84,84,49,48,51,55,50,54,52,84,243,189,143,144,84,84,49,48,51,55,50,54,53,84,243,189,143,145,84,84,49,48,51,55,50,54,54,84,243,189,143,146,84,84,49,48,51,55,50,54,55,84,243,189,143,147,84,84,49,48,51,55,50,54,56,84,243,189,143,148,84,84,49,48,51,55,50,54,57,84,243,189,143,149,84,84,49,48,51,55,50,55,48,84,243,189,143,150,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22593 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22593_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22593_s.txt", Encoding.UTF8);

    public Test22593() : base(recordedRequest, recordedResponse, "accounts8d43a048d26afcd")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048d26afcd",
                        container: "containersddd934ca569845dc89778f0bd55316f0",
                        blob: "Blobba71b790195b4af492ab3b456a393a68",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20288 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20288_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20288_s.txt", Encoding.UTF8);

    public Test20288() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers712afb35b54344eb8fa90647f752cd92",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,52,53,55,54,49,84,243,191,148,129,84,84,49,48,52,53,55,55,51,84,243,191,148,141,84,84,49,48,52,53,55,55,53,84,243,191,148,143,84,84,49,48,52,53,55,55,54,84,243,191,148,144,84,84,49,48,52,53,55,56,57,84,243,191,148,157,84,84,49,48,52,53,56,50,53,84,243,191,149,129,84,84,49,48,52,53,56,51,55,84,243,191,149,141,84,84,49,48,52,53,56,51,57,84,243,191,149,143,84,84,49,48,52,53,56,52,48,84,243,191,149,144,84,84,49,48,52,53,56,53,51,84,243,191,149,157,84,84,49,48,52,53,56,56,57,84,243,191,150,129,84,84,49,48,52,53,57,48,49,84,243,191,150,141,84,84,49,48,52,53,57,48,51,84,243,191,150,143,84,84,49,48,52,53,57,48,52,84,243,191,150,144,84,84,49,48,52,53,57,49,55,84,243,191,150,157,84,84,49,48,52,53,57,53,51,84,243,191,151,129,84,84,49,48,52,53,57,54,53,84,243,191,151,141,84,84,49,48,52,53,57,54,55,84,243,191,151,143,84,84,49,48,52,53,57,54,56,84,243,191,151,144,84,84,49,48,52,53,57,56,49,84,243,191,151,157,84,84,49,48,52,54,48,49,55,84,243,191,152,129,84,84,49,48,52,54,48,50,57,84,243,191,152,141,84,84,49,48,52,54,48,51,49,84,243,191,152,143,84,84,49,48,52,54,48,51,50,84,243,191,152,144,84,84,49,48,52,54,48,52,53,84,243,191,152,157,84,84,49,48,52,54,48,56,49,84,243,191,153,129,84,84,49,48,52,54,48,57,51,84,243,191,153,141,84,84,49,48,52,54,48,57,53,84,243,191,153,143,84,84,49,48,52,54,48,57,54,84,243,191,153,144,84,84,49,48,52,54,49,48,57,84,243,191,153,157,84,84,49,48,52,54,49,52,53,84,243,191,154,129,84,84,49,48,52,54,49,53,55,84,243,191,154,141,84,84,49,48,52,54,49,53,57,84,243,191,154,143,84,84,49,48,52,54,49,54,48,84,243,191,154,144,84,84,49,48,52,54,49,55,51,84,243,191,154,157,84,84,49,48,52,54,50,48,57,84,243,191,155,129,84,84,49,48,52,54,50,50,49,84,243,191,155,141,84,84,49,48,52,54,50,50,51,84,243,191,155,143,84,84,49,48,52,54,50,50,52,84,243,191,155,144,84,84,49,48,52,54,50,51,55,84,243,191,155,157,84,84,49,48,52,54,50,55,51,84,243,191,156,129,84,84,49,48,52,54,50,56,53,84,243,191,156,141,84,84,49,48,52,54,50,56,55,84,243,191,156,143,84,84,49,48,52,54,50,56,56,84,243,191,156,144,84,84,49,48,52,54,51,48,49,84,243,191,156,157,84,84,49,48,52,54,51,51,54,84,243,191,157,128,84,84,49,48,52,54,51,51,55,84,243,191,157,129,84,84,49,48,52,54,51,51,56,84,243,191,157,130,84,84,49,48,52,54,51,51,57,84,243,191,157,131,84,84,49,48,52,54,51,52,48,84,243,191,157,132,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20161 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20161_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20161_s.txt", Encoding.UTF8);

    public Test20161() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers4f3362aed9424bd2bfac6751ee820ab9",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,50,53,56,56,54,84,243,186,157,158,84,84,49,48,50,53,56,56,55,84,243,186,157,159,84,84,49,48,50,53,56,56,56,84,243,186,157,160,84,84,49,48,50,53,56,56,57,84,243,186,157,161,84,84,49,48,50,53,56,57,48,84,243,186,157,162,84,84,49,48,50,53,56,57,49,84,243,186,157,163,84,84,49,48,50,53,56,57,50,84,243,186,157,164,84,84,49,48,50,53,56,57,51,84,243,186,157,165,84,84,49,48,50,53,56,57,52,84,243,186,157,166,84,84,49,48,50,53,56,57,53,84,243,186,157,167,84,84,49,48,50,53,56,57,54,84,243,186,157,168,84,84,49,48,50,53,56,57,55,84,243,186,157,169,84,84,49,48,50,53,56,57,56,84,243,186,157,170,84,84,49,48,50,53,56,57,57,84,243,186,157,171,84,84,49,48,50,53,57,48,48,84,243,186,157,172,84,84,49,48,50,53,57,48,49,84,243,186,157,173,84,84,49,48,50,53,57,48,50,84,243,186,157,174,84,84,49,48,50,53,57,48,51,84,243,186,157,175,84,84,49,48,50,53,57,48,52,84,243,186,157,176,84,84,49,48,50,53,57,48,53,84,243,186,157,177,84,84,49,48,50,53,57,48,54,84,243,186,157,178,84,84,49,48,50,53,57,48,55,84,243,186,157,179,84,84,49,48,50,53,57,48,56,84,243,186,157,180,84,84,49,48,50,53,57,48,57,84,243,186,157,181,84,84,49,48,50,53,57,49,48,84,243,186,157,182,84,84,49,48,50,53,57,49,49,84,243,186,157,183,84,84,49,48,50,53,57,49,50,84,243,186,157,184,84,84,49,48,50,53,57,49,51,84,243,186,157,185,84,84,49,48,50,53,57,49,52,84,243,186,157,186,84,84,49,48,50,53,57,49,53,84,243,186,157,187,84,84,49,48,50,53,57,49,54,84,243,186,157,188,84,84,49,48,50,53,57,49,55,84,243,186,157,189,84,84,49,48,50,53,57,49,56,84,243,186,157,190,84,84,49,48,50,53,57,49,57,84,243,186,157,191,84,84,49,48,50,53,57,50,49,84,243,186,158,129,84,84,49,48,50,53,57,51,51,84,243,186,158,141,84,84,49,48,50,53,57,51,53,84,243,186,158,143,84,84,49,48,50,53,57,51,54,84,243,186,158,144,84,84,49,48,50,53,57,52,57,84,243,186,158,157,84,84,49,48,50,53,57,56,53,84,243,186,159,129,84,84,49,48,50,53,57,57,55,84,243,186,159,141,84,84,49,48,50,53,57,57,57,84,243,186,159,143,84,84,49,48,50,54,48,48,48,84,243,186,159,144,84,84,49,48,50,54,48,49,51,84,243,186,159,157,84,84,49,48,50,54,48,52,57,84,243,186,160,129,84,84,49,48,50,54,48,54,49,84,243,186,160,141,84,84,49,48,50,54,48,54,51,84,243,186,160,143,84,84,49,48,50,54,48,54,52,84,243,186,160,144,84,84,49,48,50,54,48,55,55,84,243,186,160,157,84,84,49,48,50,54,49,49,51,84,243,186,161,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19939 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19939_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19939_s.txt", Encoding.UTF8);

    public Test19939() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersbf5ecfbea5a24d8a8188936c9be6fa20",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,57,49,53,48,51,84,243,178,132,143,84,84,57,57,49,53,48,52,84,243,178,132,144,84,84,57,57,49,53,49,55,84,243,178,132,157,84,84,57,57,49,53,53,51,84,243,178,133,129,84,84,57,57,49,53,54,53,84,243,178,133,141,84,84,57,57,49,53,54,55,84,243,178,133,143,84,84,57,57,49,53,54,56,84,243,178,133,144,84,84,57,57,49,53,56,49,84,243,178,133,157,84,84,57,57,49,54,49,55,84,243,178,134,129,84,84,57,57,49,54,50,57,84,243,178,134,141,84,84,57,57,49,54,51,49,84,243,178,134,143,84,84,57,57,49,54,51,50,84,243,178,134,144,84,84,57,57,49,54,52,53,84,243,178,134,157,84,84,57,57,49,54,56,49,84,243,178,135,129,84,84,57,57,49,54,57,51,84,243,178,135,141,84,84,57,57,49,54,57,53,84,243,178,135,143,84,84,57,57,49,54,57,54,84,243,178,135,144,84,84,57,57,49,55,48,57,84,243,178,135,157,84,84,57,57,49,55,52,53,84,243,178,136,129,84,84,57,57,49,55,53,55,84,243,178,136,141,84,84,57,57,49,55,53,57,84,243,178,136,143,84,84,57,57,49,55,54,48,84,243,178,136,144,84,84,57,57,49,55,55,51,84,243,178,136,157,84,84,57,57,49,56,48,57,84,243,178,137,129,84,84,57,57,49,56,50,49,84,243,178,137,141,84,84,57,57,49,56,50,51,84,243,178,137,143,84,84,57,57,49,56,50,52,84,243,178,137,144,84,84,57,57,49,56,51,55,84,243,178,137,157,84,84,57,57,49,56,55,51,84,243,178,138,129,84,84,57,57,49,56,56,53,84,243,178,138,141,84,84,57,57,49,56,56,55,84,243,178,138,143,84,84,57,57,49,56,56,56,84,243,178,138,144,84,84,57,57,49,57,48,49,84,243,178,138,157,84,84,57,57,49,57,51,55,84,243,178,139,129,84,84,57,57,49,57,52,57,84,243,178,139,141,84,84,57,57,49,57,53,49,84,243,178,139,143,84,84,57,57,49,57,53,50,84,243,178,139,144,84,84,57,57,49,57,54,53,84,243,178,139,157,84,84,57,57,50,48,48,49,84,243,178,140,129,84,84,57,57,50,48,49,51,84,243,178,140,141,84,84,57,57,50,48,49,53,84,243,178,140,143,84,84,57,57,50,48,49,54,84,243,178,140,144,84,84,57,57,50,48,50,57,84,243,178,140,157,84,84,57,57,50,48,54,52,84,243,178,141,128,84,84,57,57,50,48,54,53,84,243,178,141,129,84,84,57,57,50,48,54,54,84,243,178,141,130,84,84,57,57,50,48,54,55,84,243,178,141,131,84,84,57,57,50,48,54,56,84,243,178,141,132,84,84,57,57,50,48,54,57,84,243,178,141,133,84,84,57,57,50,48,55,48,84,243,178,141,134,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21088 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21088_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21088_s.txt", Encoding.UTF8);

    public Test21088() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers79aa3dd90e344ebe9466f3cb0c56378a",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,50,52,48,48,84,244,143,165,144,84,84,49,49,49,50,52,48,49,84,244,143,165,145,84,84,49,49,49,50,52,48,50,84,244,143,165,146,84,84,49,49,49,50,52,48,51,84,244,143,165,147,84,84,49,49,49,50,52,48,52,84,244,143,165,148,84,84,49,49,49,50,52,48,53,84,244,143,165,149,84,84,49,49,49,50,52,48,54,84,244,143,165,150,84,84,49,49,49,50,52,48,55,84,244,143,165,151,84,84,49,49,49,50,52,48,56,84,244,143,165,152,84,84,49,49,49,50,52,48,57,84,244,143,165,153,84,84,49,49,49,50,52,49,48,84,244,143,165,154,84,84,49,49,49,50,52,49,49,84,244,143,165,155,84,84,49,49,49,50,52,49,50,84,244,143,165,156,84,84,49,49,49,50,52,49,51,84,244,143,165,157,84,84,49,49,49,50,52,49,52,84,244,143,165,158,84,84,49,49,49,50,52,49,53,84,244,143,165,159,84,84,49,49,49,50,52,49,54,84,244,143,165,160,84,84,49,49,49,50,52,49,55,84,244,143,165,161,84,84,49,49,49,50,52,49,56,84,244,143,165,162,84,84,49,49,49,50,52,49,57,84,244,143,165,163,84,84,49,49,49,50,52,50,48,84,244,143,165,164,84,84,49,49,49,50,52,50,49,84,244,143,165,165,84,84,49,49,49,50,52,50,50,84,244,143,165,166,84,84,49,49,49,50,52,50,51,84,244,143,165,167,84,84,49,49,49,50,52,50,52,84,244,143,165,168,84,84,49,49,49,50,52,50,53,84,244,143,165,169,84,84,49,49,49,50,52,50,54,84,244,143,165,170,84,84,49,49,49,50,52,50,55,84,244,143,165,171,84,84,49,49,49,50,52,50,56,84,244,143,165,172,84,84,49,49,49,50,52,50,57,84,244,143,165,173,84,84,49,49,49,50,52,51,48,84,244,143,165,174,84,84,49,49,49,50,52,51,49,84,244,143,165,175,84,84,49,49,49,50,52,51,50,84,244,143,165,176,84,84,49,49,49,50,52,51,51,84,244,143,165,177,84,84,49,49,49,50,52,51,52,84,244,143,165,178,84,84,49,49,49,50,52,51,53,84,244,143,165,179,84,84,49,49,49,50,52,51,54,84,244,143,165,180,84,84,49,49,49,50,52,51,55,84,244,143,165,181,84,84,49,49,49,50,52,51,56,84,244,143,165,182,84,84,49,49,49,50,52,51,57,84,244,143,165,183,84,84,49,49,49,50,52,52,48,84,244,143,165,184,84,84,49,49,49,50,52,52,49,84,244,143,165,185,84,84,49,49,49,50,52,52,50,84,244,143,165,186,84,84,49,49,49,50,52,52,51,84,244,143,165,187,84,84,49,49,49,50,52,52,52,84,244,143,165,188,84,84,49,49,49,50,52,52,53,84,244,143,165,189,84,84,49,49,49,50,52,52,54,84,244,143,165,190,84,84,49,49,49,50,52,52,55,84,244,143,165,191,84,84,49,49,49,50,52,52,56,84,244,143,166,128,84,84,49,49,49,50,52,52,57,84,244,143,166,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20001 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20001_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20001_s.txt", Encoding.UTF8);

    public Test20001() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersc5d3e7c5509046d2aa3f8bb095571b82",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,48,48,56,57,55,84,243,180,151,129,84,84,49,48,48,48,57,48,57,84,243,180,151,141,84,84,49,48,48,48,57,49,49,84,243,180,151,143,84,84,49,48,48,48,57,49,50,84,243,180,151,144,84,84,49,48,48,48,57,50,53,84,243,180,151,157,84,84,49,48,48,48,57,54,49,84,243,180,152,129,84,84,49,48,48,48,57,55,51,84,243,180,152,141,84,84,49,48,48,48,57,55,53,84,243,180,152,143,84,84,49,48,48,48,57,55,54,84,243,180,152,144,84,84,49,48,48,48,57,56,57,84,243,180,152,157,84,84,49,48,48,49,48,50,53,84,243,180,153,129,84,84,49,48,48,49,48,51,55,84,243,180,153,141,84,84,49,48,48,49,48,51,57,84,243,180,153,143,84,84,49,48,48,49,48,52,48,84,243,180,153,144,84,84,49,48,48,49,48,53,51,84,243,180,153,157,84,84,49,48,48,49,48,56,57,84,243,180,154,129,84,84,49,48,48,49,49,48,49,84,243,180,154,141,84,84,49,48,48,49,49,48,51,84,243,180,154,143,84,84,49,48,48,49,49,48,52,84,243,180,154,144,84,84,49,48,48,49,49,49,55,84,243,180,154,157,84,84,49,48,48,49,49,53,51,84,243,180,155,129,84,84,49,48,48,49,49,54,53,84,243,180,155,141,84,84,49,48,48,49,49,54,55,84,243,180,155,143,84,84,49,48,48,49,49,54,56,84,243,180,155,144,84,84,49,48,48,49,49,56,49,84,243,180,155,157,84,84,49,48,48,49,50,49,55,84,243,180,156,129,84,84,49,48,48,49,50,50,57,84,243,180,156,141,84,84,49,48,48,49,50,51,49,84,243,180,156,143,84,84,49,48,48,49,50,51,50,84,243,180,156,144,84,84,49,48,48,49,50,52,53,84,243,180,156,157,84,84,49,48,48,49,50,56,48,84,243,180,157,128,84,84,49,48,48,49,50,56,49,84,243,180,157,129,84,84,49,48,48,49,50,56,50,84,243,180,157,130,84,84,49,48,48,49,50,56,51,84,243,180,157,131,84,84,49,48,48,49,50,56,52,84,243,180,157,132,84,84,49,48,48,49,50,56,53,84,243,180,157,133,84,84,49,48,48,49,50,56,54,84,243,180,157,134,84,84,49,48,48,49,50,56,55,84,243,180,157,135,84,84,49,48,48,49,50,56,56,84,243,180,157,136,84,84,49,48,48,49,50,56,57,84,243,180,157,137,84,84,49,48,48,49,50,57,48,84,243,180,157,138,84,84,49,48,48,49,50,57,49,84,243,180,157,139,84,84,49,48,48,49,50,57,50,84,243,180,157,140,84,84,49,48,48,49,50,57,51,84,243,180,157,141,84,84,49,48,48,49,50,57,52,84,243,180,157,142,84,84,49,48,48,49,50,57,53,84,243,180,157,143,84,84,49,48,48,49,50,57,54,84,243,180,157,144,84,84,49,48,48,49,50,57,55,84,243,180,157,145,84,84,49,48,48,49,50,57,56,84,243,180,157,146,84,84,49,48,48,49,50,57,57,84,243,180,157,147,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20324 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20324_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20324_s.txt", Encoding.UTF8);

    public Test20324() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers412024b733e349978217e6093afed677",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,50,49,48,57,84,244,128,183,141,84,84,49,48,53,50,49,49,49,84,244,128,183,143,84,84,49,48,53,50,49,49,50,84,244,128,183,144,84,84,49,48,53,50,49,50,53,84,244,128,183,157,84,84,49,48,53,50,49,54,49,84,244,128,184,129,84,84,49,48,53,50,49,55,51,84,244,128,184,141,84,84,49,48,53,50,49,55,53,84,244,128,184,143,84,84,49,48,53,50,49,55,54,84,244,128,184,144,84,84,49,48,53,50,49,56,57,84,244,128,184,157,84,84,49,48,53,50,50,50,53,84,244,128,185,129,84,84,49,48,53,50,50,51,55,84,244,128,185,141,84,84,49,48,53,50,50,51,57,84,244,128,185,143,84,84,49,48,53,50,50,52,48,84,244,128,185,144,84,84,49,48,53,50,50,53,51,84,244,128,185,157,84,84,49,48,53,50,50,56,57,84,244,128,186,129,84,84,49,48,53,50,51,48,49,84,244,128,186,141,84,84,49,48,53,50,51,48,51,84,244,128,186,143,84,84,49,48,53,50,51,48,52,84,244,128,186,144,84,84,49,48,53,50,51,49,55,84,244,128,186,157,84,84,49,48,53,50,51,53,51,84,244,128,187,129,84,84,49,48,53,50,51,54,53,84,244,128,187,141,84,84,49,48,53,50,51,54,55,84,244,128,187,143,84,84,49,48,53,50,51,54,56,84,244,128,187,144,84,84,49,48,53,50,51,56,49,84,244,128,187,157,84,84,49,48,53,50,52,49,55,84,244,128,188,129,84,84,49,48,53,50,52,50,57,84,244,128,188,141,84,84,49,48,53,50,52,51,49,84,244,128,188,143,84,84,49,48,53,50,52,51,50,84,244,128,188,144,84,84,49,48,53,50,52,52,53,84,244,128,188,157,84,84,49,48,53,50,52,56,49,84,244,128,189,129,84,84,49,48,53,50,52,57,51,84,244,128,189,141,84,84,49,48,53,50,52,57,53,84,244,128,189,143,84,84,49,48,53,50,52,57,54,84,244,128,189,144,84,84,49,48,53,50,53,48,57,84,244,128,189,157,84,84,49,48,53,50,53,52,53,84,244,128,190,129,84,84,49,48,53,50,53,53,55,84,244,128,190,141,84,84,49,48,53,50,53,53,57,84,244,128,190,143,84,84,49,48,53,50,53,54,48,84,244,128,190,144,84,84,49,48,53,50,53,55,51,84,244,128,190,157,84,84,49,48,53,50,54,48,57,84,244,128,191,129,84,84,49,48,53,50,54,50,49,84,244,128,191,141,84,84,49,48,53,50,54,50,51,84,244,128,191,143,84,84,49,48,53,50,54,50,52,84,244,128,191,144,84,84,49,48,53,50,54,51,55,84,244,128,191,157,84,84,49,48,53,50,54,55,50,84,244,129,128,128,84,84,49,48,53,50,54,55,51,84,244,129,128,129,84,84,49,48,53,50,54,55,52,84,244,129,128,130,84,84,49,48,53,50,54,55,53,84,244,129,128,131,84,84,49,48,53,50,54,55,54,84,244,129,128,132,84,84,49,48,53,50,54,55,55,84,244,129,128,133,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22657 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22657_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22657_s.txt", Encoding.UTF8);

    public Test22657() : base(recordedRequest, recordedResponse, "accounts8d43a048e8c83e4")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048e8c83e4",
                        container: "containersbea3d64d90dc421081b7d8975fc30d8f",
                        blob: "Blobdd576d39a0f0407daf520818e47e5369",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20741 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20741_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20741_s.txt", Encoding.UTF8);

    public Test20741() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersc5ae22b09f3f4a3eaff829adc5876203",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,57,52,52,54,53,84,244,139,141,129,84,84,49,48,57,52,52,54,54,84,244,139,141,130,84,84,49,48,57,52,52,54,55,84,244,139,141,131,84,84,49,48,57,52,52,54,56,84,244,139,141,132,84,84,49,48,57,52,52,54,57,84,244,139,141,133,84,84,49,48,57,52,52,55,48,84,244,139,141,134,84,84,49,48,57,52,52,55,49,84,244,139,141,135,84,84,49,48,57,52,52,55,50,84,244,139,141,136,84,84,49,48,57,52,52,55,51,84,244,139,141,137,84,84,49,48,57,52,52,55,52,84,244,139,141,138,84,84,49,48,57,52,52,55,53,84,244,139,141,139,84,84,49,48,57,52,52,55,54,84,244,139,141,140,84,84,49,48,57,52,52,55,55,84,244,139,141,141,84,84,49,48,57,52,52,55,56,84,244,139,141,142,84,84,49,48,57,52,52,55,57,84,244,139,141,143,84,84,49,48,57,52,52,56,48,84,244,139,141,144,84,84,49,48,57,52,52,56,49,84,244,139,141,145,84,84,49,48,57,52,52,56,50,84,244,139,141,146,84,84,49,48,57,52,52,56,51,84,244,139,141,147,84,84,49,48,57,52,52,56,52,84,244,139,141,148,84,84,49,48,57,52,52,56,53,84,244,139,141,149,84,84,49,48,57,52,52,56,54,84,244,139,141,150,84,84,49,48,57,52,52,56,55,84,244,139,141,151,84,84,49,48,57,52,52,56,56,84,244,139,141,152,84,84,49,48,57,52,52,56,57,84,244,139,141,153,84,84,49,48,57,52,52,57,48,84,244,139,141,154,84,84,49,48,57,52,52,57,49,84,244,139,141,155,84,84,49,48,57,52,52,57,50,84,244,139,141,156,84,84,49,48,57,52,52,57,51,84,244,139,141,157,84,84,49,48,57,52,52,57,52,84,244,139,141,158,84,84,49,48,57,52,52,57,53,84,244,139,141,159,84,84,49,48,57,52,52,57,54,84,244,139,141,160,84,84,49,48,57,52,52,57,55,84,244,139,141,161,84,84,49,48,57,52,52,57,56,84,244,139,141,162,84,84,49,48,57,52,52,57,57,84,244,139,141,163,84,84,49,48,57,52,53,48,48,84,244,139,141,164,84,84,49,48,57,52,53,48,49,84,244,139,141,165,84,84,49,48,57,52,53,48,50,84,244,139,141,166,84,84,49,48,57,52,53,48,51,84,244,139,141,167,84,84,49,48,57,52,53,48,52,84,244,139,141,168,84,84,49,48,57,52,53,48,53,84,244,139,141,169,84,84,49,48,57,52,53,48,54,84,244,139,141,170,84,84,49,48,57,52,53,48,55,84,244,139,141,171,84,84,49,48,57,52,53,48,56,84,244,139,141,172,84,84,49,48,57,52,53,48,57,84,244,139,141,173,84,84,49,48,57,52,53,49,48,84,244,139,141,174,84,84,49,48,57,52,53,49,49,84,244,139,141,175,84,84,49,48,57,52,53,49,50,84,244,139,141,176,84,84,49,48,57,52,53,49,51,84,244,139,141,177,84,84,49,48,57,52,53,49,52,84,244,139,141,178,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20612 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20612_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20612_s.txt", Encoding.UTF8);

    public Test20612() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers5f5b393ed8e742338d6031fb2e225092",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,55,52,48,49,48,84,244,134,141,154,84,84,49,48,55,52,48,49,49,84,244,134,141,155,84,84,49,48,55,52,48,49,50,84,244,134,141,156,84,84,49,48,55,52,48,49,51,84,244,134,141,157,84,84,49,48,55,52,48,49,52,84,244,134,141,158,84,84,49,48,55,52,48,49,53,84,244,134,141,159,84,84,49,48,55,52,48,49,54,84,244,134,141,160,84,84,49,48,55,52,48,49,55,84,244,134,141,161,84,84,49,48,55,52,48,49,56,84,244,134,141,162,84,84,49,48,55,52,48,49,57,84,244,134,141,163,84,84,49,48,55,52,48,50,48,84,244,134,141,164,84,84,49,48,55,52,48,50,49,84,244,134,141,165,84,84,49,48,55,52,48,50,50,84,244,134,141,166,84,84,49,48,55,52,48,50,51,84,244,134,141,167,84,84,49,48,55,52,48,50,52,84,244,134,141,168,84,84,49,48,55,52,48,50,53,84,244,134,141,169,84,84,49,48,55,52,48,50,54,84,244,134,141,170,84,84,49,48,55,52,48,50,55,84,244,134,141,171,84,84,49,48,55,52,48,50,56,84,244,134,141,172,84,84,49,48,55,52,48,50,57,84,244,134,141,173,84,84,49,48,55,52,48,51,48,84,244,134,141,174,84,84,49,48,55,52,48,51,49,84,244,134,141,175,84,84,49,48,55,52,48,51,50,84,244,134,141,176,84,84,49,48,55,52,48,51,51,84,244,134,141,177,84,84,49,48,55,52,48,51,52,84,244,134,141,178,84,84,49,48,55,52,48,51,53,84,244,134,141,179,84,84,49,48,55,52,48,51,54,84,244,134,141,180,84,84,49,48,55,52,48,51,55,84,244,134,141,181,84,84,49,48,55,52,48,51,56,84,244,134,141,182,84,84,49,48,55,52,48,51,57,84,244,134,141,183,84,84,49,48,55,52,48,52,48,84,244,134,141,184,84,84,49,48,55,52,48,52,49,84,244,134,141,185,84,84,49,48,55,52,48,52,50,84,244,134,141,186,84,84,49,48,55,52,48,52,51,84,244,134,141,187,84,84,49,48,55,52,48,52,52,84,244,134,141,188,84,84,49,48,55,52,48,52,53,84,244,134,141,189,84,84,49,48,55,52,48,52,54,84,244,134,141,190,84,84,49,48,55,52,48,52,55,84,244,134,141,191,84,84,49,48,55,52,48,52,57,84,244,134,142,129,84,84,49,48,55,52,48,54,49,84,244,134,142,141,84,84,49,48,55,52,48,54,51,84,244,134,142,143,84,84,49,48,55,52,48,54,52,84,244,134,142,144,84,84,49,48,55,52,48,55,55,84,244,134,142,157,84,84,49,48,55,52,49,49,50,84,244,134,143,128,84,84,49,48,55,52,49,49,51,84,244,134,143,129,84,84,49,48,55,52,49,49,52,84,244,134,143,130,84,84,49,48,55,52,49,49,53,84,244,134,143,131,84,84,49,48,55,52,49,49,54,84,244,134,143,132,84,84,49,48,55,52,49,49,55,84,244,134,143,133,84,84,49,48,55,52,49,49,56,84,244,134,143,134,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20578 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20578_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20578_s.txt", Encoding.UTF8);

    public Test20578() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers2997cf743a0f481c9f696984938aa742",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,54,57,49,51,48,84,244,133,129,138,84,84,49,48,54,57,49,51,49,84,244,133,129,139,84,84,49,48,54,57,49,51,50,84,244,133,129,140,84,84,49,48,54,57,49,51,51,84,244,133,129,141,84,84,49,48,54,57,49,51,52,84,244,133,129,142,84,84,49,48,54,57,49,51,53,84,244,133,129,143,84,84,49,48,54,57,49,51,54,84,244,133,129,144,84,84,49,48,54,57,49,51,55,84,244,133,129,145,84,84,49,48,54,57,49,51,56,84,244,133,129,146,84,84,49,48,54,57,49,51,57,84,244,133,129,147,84,84,49,48,54,57,49,52,48,84,244,133,129,148,84,84,49,48,54,57,49,52,49,84,244,133,129,149,84,84,49,48,54,57,49,52,50,84,244,133,129,150,84,84,49,48,54,57,49,52,51,84,244,133,129,151,84,84,49,48,54,57,49,52,52,84,244,133,129,152,84,84,49,48,54,57,49,52,53,84,244,133,129,153,84,84,49,48,54,57,49,52,54,84,244,133,129,154,84,84,49,48,54,57,49,52,55,84,244,133,129,155,84,84,49,48,54,57,49,52,56,84,244,133,129,156,84,84,49,48,54,57,49,52,57,84,244,133,129,157,84,84,49,48,54,57,49,53,48,84,244,133,129,158,84,84,49,48,54,57,49,53,49,84,244,133,129,159,84,84,49,48,54,57,49,53,50,84,244,133,129,160,84,84,49,48,54,57,49,53,51,84,244,133,129,161,84,84,49,48,54,57,49,53,52,84,244,133,129,162,84,84,49,48,54,57,49,53,53,84,244,133,129,163,84,84,49,48,54,57,49,53,54,84,244,133,129,164,84,84,49,48,54,57,49,53,55,84,244,133,129,165,84,84,49,48,54,57,49,53,56,84,244,133,129,166,84,84,49,48,54,57,49,53,57,84,244,133,129,167,84,84,49,48,54,57,49,54,48,84,244,133,129,168,84,84,49,48,54,57,49,54,49,84,244,133,129,169,84,84,49,48,54,57,49,54,50,84,244,133,129,170,84,84,49,48,54,57,49,54,51,84,244,133,129,171,84,84,49,48,54,57,49,54,52,84,244,133,129,172,84,84,49,48,54,57,49,54,53,84,244,133,129,173,84,84,49,48,54,57,49,54,54,84,244,133,129,174,84,84,49,48,54,57,49,54,55,84,244,133,129,175,84,84,49,48,54,57,49,54,56,84,244,133,129,176,84,84,49,48,54,57,49,54,57,84,244,133,129,177,84,84,49,48,54,57,49,55,48,84,244,133,129,178,84,84,49,48,54,57,49,55,49,84,244,133,129,179,84,84,49,48,54,57,49,55,50,84,244,133,129,180,84,84,49,48,54,57,49,55,51,84,244,133,129,181,84,84,49,48,54,57,49,55,52,84,244,133,129,182,84,84,49,48,54,57,49,55,53,84,244,133,129,183,84,84,49,48,54,57,49,55,54,84,244,133,129,184,84,84,49,48,54,57,49,55,55,84,244,133,129,185,84,84,49,48,54,57,49,55,56,84,244,133,129,186,84,84,49,48,54,57,49,55,57,84,244,133,129,187,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22594 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22594_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22594_s.txt", Encoding.UTF8);

    public Test22594() : base(recordedRequest, recordedResponse, "accounts8d43a048d26afcd")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048d26afcd",
                        container: "containersddd934ca569845dc89778f0bd55316f0",
                        blob: "Blobda85966f656c4b448231bb372e0a6774",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21861 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21861_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21861_s.txt", Encoding.UTF8);

    public Test21861() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers52d2dfd99ab440aa9bce1e46dbff0e59",
                        blob: "Blob37b17d51493c4d1b8e33373d66d47d9d",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 0,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20834 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20834_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20834_s.txt", Encoding.UTF8);

    public Test20834() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersf4b0dcea8f7b4ccf92e1f36b952ddf93",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,50,57,49,57,84,244,141,145,135,84,84,49,49,48,50,57,50,48,84,244,141,145,136,84,84,49,49,48,50,57,50,49,84,244,141,145,137,84,84,49,49,48,50,57,50,50,84,244,141,145,138,84,84,49,49,48,50,57,50,51,84,244,141,145,139,84,84,49,49,48,50,57,50,52,84,244,141,145,140,84,84,49,49,48,50,57,50,53,84,244,141,145,141,84,84,49,49,48,50,57,50,54,84,244,141,145,142,84,84,49,49,48,50,57,50,55,84,244,141,145,143,84,84,49,49,48,50,57,50,56,84,244,141,145,144,84,84,49,49,48,50,57,50,57,84,244,141,145,145,84,84,49,49,48,50,57,51,48,84,244,141,145,146,84,84,49,49,48,50,57,51,49,84,244,141,145,147,84,84,49,49,48,50,57,51,50,84,244,141,145,148,84,84,49,49,48,50,57,51,51,84,244,141,145,149,84,84,49,49,48,50,57,51,52,84,244,141,145,150,84,84,49,49,48,50,57,51,53,84,244,141,145,151,84,84,49,49,48,50,57,51,54,84,244,141,145,152,84,84,49,49,48,50,57,51,55,84,244,141,145,153,84,84,49,49,48,50,57,51,56,84,244,141,145,154,84,84,49,49,48,50,57,51,57,84,244,141,145,155,84,84,49,49,48,50,57,52,48,84,244,141,145,156,84,84,49,49,48,50,57,52,49,84,244,141,145,157,84,84,49,49,48,50,57,52,50,84,244,141,145,158,84,84,49,49,48,50,57,52,51,84,244,141,145,159,84,84,49,49,48,50,57,52,52,84,244,141,145,160,84,84,49,49,48,50,57,52,53,84,244,141,145,161,84,84,49,49,48,50,57,52,54,84,244,141,145,162,84,84,49,49,48,50,57,52,55,84,244,141,145,163,84,84,49,49,48,50,57,52,56,84,244,141,145,164,84,84,49,49,48,50,57,52,57,84,244,141,145,165,84,84,49,49,48,50,57,53,48,84,244,141,145,166,84,84,49,49,48,50,57,53,49,84,244,141,145,167,84,84,49,49,48,50,57,53,50,84,244,141,145,168,84,84,49,49,48,50,57,53,51,84,244,141,145,169,84,84,49,49,48,50,57,53,52,84,244,141,145,170,84,84,49,49,48,50,57,53,53,84,244,141,145,171,84,84,49,49,48,50,57,53,54,84,244,141,145,172,84,84,49,49,48,50,57,53,55,84,244,141,145,173,84,84,49,49,48,50,57,53,56,84,244,141,145,174,84,84,49,49,48,50,57,53,57,84,244,141,145,175,84,84,49,49,48,50,57,54,48,84,244,141,145,176,84,84,49,49,48,50,57,54,49,84,244,141,145,177,84,84,49,49,48,50,57,54,50,84,244,141,145,178,84,84,49,49,48,50,57,54,51,84,244,141,145,179,84,84,49,49,48,50,57,54,52,84,244,141,145,180,84,84,49,49,48,50,57,54,53,84,244,141,145,181,84,84,49,49,48,50,57,54,54,84,244,141,145,182,84,84,49,49,48,50,57,54,55,84,244,141,145,183,84,84,49,49,48,50,57,54,56,84,244,141,145,184,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21153 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21153_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21153_s.txt", Encoding.UTF8);

    public Test21153() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers56d1c908d8f44b69abe6817b1847a0f6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,51,57,53,48,84,244,143,189,158,84,84,49,49,49,51,57,53,49,84,244,143,189,159,84,84,49,49,49,51,57,53,50,84,244,143,189,160,84,84,49,49,49,51,57,53,51,84,244,143,189,161,84,84,49,49,49,51,57,53,52,84,244,143,189,162,84,84,49,49,49,51,57,53,53,84,244,143,189,163,84,84,49,49,49,51,57,53,54,84,244,143,189,164,84,84,49,49,49,51,57,53,55,84,244,143,189,165,84,84,49,49,49,51,57,53,56,84,244,143,189,166,84,84,49,49,49,51,57,53,57,84,244,143,189,167,84,84,49,49,49,51,57,54,48,84,244,143,189,168,84,84,49,49,49,51,57,54,49,84,244,143,189,169,84,84,49,49,49,51,57,54,50,84,244,143,189,170,84,84,49,49,49,51,57,54,51,84,244,143,189,171,84,84,49,49,49,51,57,54,52,84,244,143,189,172,84,84,49,49,49,51,57,54,53,84,244,143,189,173,84,84,49,49,49,51,57,54,54,84,244,143,189,174,84,84,49,49,49,51,57,54,55,84,244,143,189,175,84,84,49,49,49,51,57,54,56,84,244,143,189,176,84,84,49,49,49,51,57,54,57,84,244,143,189,177,84,84,49,49,49,51,57,55,48,84,244,143,189,178,84,84,49,49,49,51,57,55,49,84,244,143,189,179,84,84,49,49,49,51,57,55,50,84,244,143,189,180,84,84,49,49,49,51,57,55,51,84,244,143,189,181,84,84,49,49,49,51,57,55,52,84,244,143,189,182,84,84,49,49,49,51,57,55,53,84,244,143,189,183,84,84,49,49,49,51,57,55,54,84,244,143,189,184,84,84,49,49,49,51,57,55,55,84,244,143,189,185,84,84,49,49,49,51,57,55,56,84,244,143,189,186,84,84,49,49,49,51,57,55,57,84,244,143,189,187,84,84,49,49,49,51,57,56,48,84,244,143,189,188,84,84,49,49,49,51,57,56,49,84,244,143,189,189,84,84,49,49,49,51,57,56,50,84,244,143,189,190,84,84,49,49,49,51,57,56,51,84,244,143,189,191,84,84,49,49,49,51,57,56,52,84,244,143,190,128,84,84,49,49,49,51,57,56,53,84,244,143,190,129,84,84,49,49,49,51,57,56,54,84,244,143,190,130,84,84,49,49,49,51,57,56,55,84,244,143,190,131,84,84,49,49,49,51,57,56,56,84,244,143,190,132,84,84,49,49,49,51,57,56,57,84,244,143,190,133,84,84,49,49,49,51,57,57,48,84,244,143,190,134,84,84,49,49,49,51,57,57,49,84,244,143,190,135,84,84,49,49,49,51,57,57,50,84,244,143,190,136,84,84,49,49,49,51,57,57,51,84,244,143,190,137,84,84,49,49,49,51,57,57,52,84,244,143,190,138,84,84,49,49,49,51,57,57,53,84,244,143,190,139,84,84,49,49,49,51,57,57,54,84,244,143,190,140,84,84,49,49,49,51,57,57,55,84,244,143,190,141,84,84,49,49,49,51,57,57,56,84,244,143,190,142,84,84,49,49,49,51,57,57,57,84,244,143,190,143,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22783 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22783_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22783_s.txt", Encoding.UTF8);

    public Test22783() : base(recordedRequest, recordedResponse, "accounts8d43a0490823d21")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a0490823d21",
                        container: "containers0bd48f2ce8374f57b3f3c61b5595b35b",
                        blob: "Blob4159bfcd556543be9717e557824e74b4",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20066 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20066_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20066_s.txt", Encoding.UTF8);

    public Test20066() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersb3c703c6e551430d9c914c24c3792dd5",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,49,49,55,55,55,84,243,183,129,129,84,84,49,48,49,49,55,55,56,84,243,183,129,130,84,84,49,48,49,49,55,55,57,84,243,183,129,131,84,84,49,48,49,49,55,56,48,84,243,183,129,132,84,84,49,48,49,49,55,56,49,84,243,183,129,133,84,84,49,48,49,49,55,56,50,84,243,183,129,134,84,84,49,48,49,49,55,56,51,84,243,183,129,135,84,84,49,48,49,49,55,56,52,84,243,183,129,136,84,84,49,48,49,49,55,56,53,84,243,183,129,137,84,84,49,48,49,49,55,56,54,84,243,183,129,138,84,84,49,48,49,49,55,56,55,84,243,183,129,139,84,84,49,48,49,49,55,56,56,84,243,183,129,140,84,84,49,48,49,49,55,56,57,84,243,183,129,141,84,84,49,48,49,49,55,57,48,84,243,183,129,142,84,84,49,48,49,49,55,57,49,84,243,183,129,143,84,84,49,48,49,49,55,57,50,84,243,183,129,144,84,84,49,48,49,49,55,57,51,84,243,183,129,145,84,84,49,48,49,49,55,57,52,84,243,183,129,146,84,84,49,48,49,49,55,57,53,84,243,183,129,147,84,84,49,48,49,49,55,57,54,84,243,183,129,148,84,84,49,48,49,49,55,57,55,84,243,183,129,149,84,84,49,48,49,49,55,57,56,84,243,183,129,150,84,84,49,48,49,49,55,57,57,84,243,183,129,151,84,84,49,48,49,49,56,48,48,84,243,183,129,152,84,84,49,48,49,49,56,48,49,84,243,183,129,153,84,84,49,48,49,49,56,48,50,84,243,183,129,154,84,84,49,48,49,49,56,48,51,84,243,183,129,155,84,84,49,48,49,49,56,48,52,84,243,183,129,156,84,84,49,48,49,49,56,48,53,84,243,183,129,157,84,84,49,48,49,49,56,48,54,84,243,183,129,158,84,84,49,48,49,49,56,48,55,84,243,183,129,159,84,84,49,48,49,49,56,48,56,84,243,183,129,160,84,84,49,48,49,49,56,48,57,84,243,183,129,161,84,84,49,48,49,49,56,49,48,84,243,183,129,162,84,84,49,48,49,49,56,49,49,84,243,183,129,163,84,84,49,48,49,49,56,49,50,84,243,183,129,164,84,84,49,48,49,49,56,49,51,84,243,183,129,165,84,84,49,48,49,49,56,49,52,84,243,183,129,166,84,84,49,48,49,49,56,49,53,84,243,183,129,167,84,84,49,48,49,49,56,49,54,84,243,183,129,168,84,84,49,48,49,49,56,49,55,84,243,183,129,169,84,84,49,48,49,49,56,49,56,84,243,183,129,170,84,84,49,48,49,49,56,49,57,84,243,183,129,171,84,84,49,48,49,49,56,50,48,84,243,183,129,172,84,84,49,48,49,49,56,50,49,84,243,183,129,173,84,84,49,48,49,49,56,50,50,84,243,183,129,174,84,84,49,48,49,49,56,50,51,84,243,183,129,175,84,84,49,48,49,49,56,50,52,84,243,183,129,176,84,84,49,48,49,49,56,50,53,84,243,183,129,177,84,84,49,48,49,49,56,50,54,84,243,183,129,178,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19812 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19812_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19812_s.txt", Encoding.UTF8);

    public Test19812() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers3d1fce2fe43b489ca49e5d4066014499",
                        blob: Encoding.UTF8.GetString(new byte[]{84,53,56,50,49,52,84,238,141,166,84,84,53,56,50,49,53,84,238,141,167,84,84,53,56,50,49,54,84,238,141,168,84,84,53,56,50,49,55,84,238,141,169,84,84,53,56,50,49,56,84,238,141,170,84,84,53,56,50,49,57,84,238,141,171,84,84,53,56,50,50,48,84,238,141,172,84,84,53,56,50,50,49,84,238,141,173,84,84,53,56,50,50,50,84,238,141,174,84,84,53,56,50,50,51,84,238,141,175,84,84,53,56,50,50,52,84,238,141,176,84,84,53,56,50,50,53,84,238,141,177,84,84,53,56,50,50,54,84,238,141,178,84,84,53,56,50,50,55,84,238,141,179,84,84,53,56,50,50,56,84,238,141,180,84,84,53,56,50,50,57,84,238,141,181,84,84,53,56,50,51,48,84,238,141,182,84,84,53,56,50,51,49,84,238,141,183,84,84,53,56,50,51,50,84,238,141,184,84,84,53,56,50,51,51,84,238,141,185,84,84,53,56,50,51,52,84,238,141,186,84,84,53,56,50,51,53,84,238,141,187,84,84,53,56,50,51,54,84,238,141,188,84,84,53,56,50,51,55,84,238,141,189,84,84,53,56,50,51,56,84,238,141,190,84,84,53,56,50,51,57,84,238,141,191,84,84,53,56,50,52,49,84,238,142,129,84,84,53,56,50,53,51,84,238,142,141,84,84,53,56,50,53,53,84,238,142,143,84,84,53,56,50,53,54,84,238,142,144,84,84,53,56,50,54,57,84,238,142,157,84,84,53,56,51,48,52,84,238,143,128,84,84,53,56,51,48,53,84,238,143,129,84,84,53,56,51,48,54,84,238,143,130,84,84,53,56,51,48,55,84,238,143,131,84,84,53,56,51,48,56,84,238,143,132,84,84,53,56,51,48,57,84,238,143,133,84,84,53,56,51,49,48,84,238,143,134,84,84,53,56,51,49,49,84,238,143,135,84,84,53,56,51,49,50,84,238,143,136,84,84,53,56,51,49,51,84,238,143,137,84,84,53,56,51,49,52,84,238,143,138,84,84,53,56,51,49,53,84,238,143,139,84,84,53,56,51,49,54,84,238,143,140,84,84,53,56,51,49,55,84,238,143,141,84,84,53,56,51,49,56,84,238,143,142,84,84,53,56,51,49,57,84,238,143,143,84,84,53,56,51,50,48,84,238,143,144,84,84,53,56,51,50,49,84,238,143,145,84,84,53,56,51,50,50,84,238,143,146,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20515 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20515_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20515_s.txt", Encoding.UTF8);

    public Test20515() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers3bfa703d74a140e499ecce701b962b8c",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,56,54,53,51,84,244,130,157,157,84,84,49,48,53,56,54,53,52,84,244,130,157,158,84,84,49,48,53,56,54,53,53,84,244,130,157,159,84,84,49,48,53,56,54,53,54,84,244,130,157,160,84,84,49,48,53,56,54,53,55,84,244,130,157,161,84,84,49,48,53,56,54,53,56,84,244,130,157,162,84,84,49,48,53,56,54,53,57,84,244,130,157,163,84,84,49,48,53,56,54,54,48,84,244,130,157,164,84,84,49,48,53,56,54,54,49,84,244,130,157,165,84,84,49,48,53,56,54,54,50,84,244,130,157,166,84,84,49,48,53,56,54,54,51,84,244,130,157,167,84,84,49,48,53,56,54,54,52,84,244,130,157,168,84,84,49,48,53,56,54,54,53,84,244,130,157,169,84,84,49,48,53,56,54,54,54,84,244,130,157,170,84,84,49,48,53,56,54,54,55,84,244,130,157,171,84,84,49,48,53,56,54,54,56,84,244,130,157,172,84,84,49,48,53,56,54,54,57,84,244,130,157,173,84,84,49,48,53,56,54,55,48,84,244,130,157,174,84,84,49,48,53,56,54,55,49,84,244,130,157,175,84,84,49,48,53,56,54,55,50,84,244,130,157,176,84,84,49,48,53,56,54,55,51,84,244,130,157,177,84,84,49,48,53,56,54,55,52,84,244,130,157,178,84,84,49,48,53,56,54,55,53,84,244,130,157,179,84,84,49,48,53,56,54,55,54,84,244,130,157,180,84,84,49,48,53,56,54,55,55,84,244,130,157,181,84,84,49,48,53,56,54,55,56,84,244,130,157,182,84,84,49,48,53,56,54,55,57,84,244,130,157,183,84,84,49,48,53,56,54,56,48,84,244,130,157,184,84,84,49,48,53,56,54,56,49,84,244,130,157,185,84,84,49,48,53,56,54,56,50,84,244,130,157,186,84,84,49,48,53,56,54,56,51,84,244,130,157,187,84,84,49,48,53,56,54,56,52,84,244,130,157,188,84,84,49,48,53,56,54,56,53,84,244,130,157,189,84,84,49,48,53,56,54,56,54,84,244,130,157,190,84,84,49,48,53,56,54,56,55,84,244,130,157,191,84,84,49,48,53,56,54,56,57,84,244,130,158,129,84,84,49,48,53,56,55,48,49,84,244,130,158,141,84,84,49,48,53,56,55,48,51,84,244,130,158,143,84,84,49,48,53,56,55,48,52,84,244,130,158,144,84,84,49,48,53,56,55,49,55,84,244,130,158,157,84,84,49,48,53,56,55,53,51,84,244,130,159,129,84,84,49,48,53,56,55,54,53,84,244,130,159,141,84,84,49,48,53,56,55,54,55,84,244,130,159,143,84,84,49,48,53,56,55,54,56,84,244,130,159,144,84,84,49,48,53,56,55,56,49,84,244,130,159,157,84,84,49,48,53,56,56,49,55,84,244,130,160,129,84,84,49,48,53,56,56,50,57,84,244,130,160,141,84,84,49,48,53,56,56,51,49,84,244,130,160,143,84,84,49,48,53,56,56,51,50,84,244,130,160,144,84,84,49,48,53,56,56,52,53,84,244,130,160,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20100 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20100_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20100_s.txt", Encoding.UTF8);

    public Test20100() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers02552a2396c44255a61dd19b9714b3b6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,49,54,55,50,48,84,243,184,142,144,84,84,49,48,49,54,55,51,51,84,243,184,142,157,84,84,49,48,49,54,55,54,56,84,243,184,143,128,84,84,49,48,49,54,55,54,57,84,243,184,143,129,84,84,49,48,49,54,55,55,48,84,243,184,143,130,84,84,49,48,49,54,55,55,49,84,243,184,143,131,84,84,49,48,49,54,55,55,50,84,243,184,143,132,84,84,49,48,49,54,55,55,51,84,243,184,143,133,84,84,49,48,49,54,55,55,52,84,243,184,143,134,84,84,49,48,49,54,55,55,53,84,243,184,143,135,84,84,49,48,49,54,55,55,54,84,243,184,143,136,84,84,49,48,49,54,55,55,55,84,243,184,143,137,84,84,49,48,49,54,55,55,56,84,243,184,143,138,84,84,49,48,49,54,55,55,57,84,243,184,143,139,84,84,49,48,49,54,55,56,48,84,243,184,143,140,84,84,49,48,49,54,55,56,49,84,243,184,143,141,84,84,49,48,49,54,55,56,50,84,243,184,143,142,84,84,49,48,49,54,55,56,51,84,243,184,143,143,84,84,49,48,49,54,55,56,52,84,243,184,143,144,84,84,49,48,49,54,55,56,53,84,243,184,143,145,84,84,49,48,49,54,55,56,54,84,243,184,143,146,84,84,49,48,49,54,55,56,55,84,243,184,143,147,84,84,49,48,49,54,55,56,56,84,243,184,143,148,84,84,49,48,49,54,55,56,57,84,243,184,143,149,84,84,49,48,49,54,55,57,48,84,243,184,143,150,84,84,49,48,49,54,55,57,49,84,243,184,143,151,84,84,49,48,49,54,55,57,50,84,243,184,143,152,84,84,49,48,49,54,55,57,51,84,243,184,143,153,84,84,49,48,49,54,55,57,52,84,243,184,143,154,84,84,49,48,49,54,55,57,53,84,243,184,143,155,84,84,49,48,49,54,55,57,54,84,243,184,143,156,84,84,49,48,49,54,55,57,55,84,243,184,143,157,84,84,49,48,49,54,55,57,56,84,243,184,143,158,84,84,49,48,49,54,55,57,57,84,243,184,143,159,84,84,49,48,49,54,56,48,48,84,243,184,143,160,84,84,49,48,49,54,56,48,49,84,243,184,143,161,84,84,49,48,49,54,56,48,50,84,243,184,143,162,84,84,49,48,49,54,56,48,51,84,243,184,143,163,84,84,49,48,49,54,56,48,52,84,243,184,143,164,84,84,49,48,49,54,56,48,53,84,243,184,143,165,84,84,49,48,49,54,56,48,54,84,243,184,143,166,84,84,49,48,49,54,56,48,55,84,243,184,143,167,84,84,49,48,49,54,56,48,56,84,243,184,143,168,84,84,49,48,49,54,56,48,57,84,243,184,143,169,84,84,49,48,49,54,56,49,48,84,243,184,143,170,84,84,49,48,49,54,56,49,49,84,243,184,143,171,84,84,49,48,49,54,56,49,50,84,243,184,143,172,84,84,49,48,49,54,56,49,51,84,243,184,143,173,84,84,49,48,49,54,56,49,52,84,243,184,143,174,84,84,49,48,49,54,56,49,53,84,243,184,143,175,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20961 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20961_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20961_s.txt", Encoding.UTF8);

    public Test20961() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersdf87e0f5374149afa792ac52b484870e",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,53,57,49,57,84,244,141,191,191,84,84,49,49,48,53,57,50,49,84,244,142,128,129,84,84,49,49,48,53,57,51,51,84,244,142,128,141,84,84,49,49,48,53,57,51,53,84,244,142,128,143,84,84,49,49,48,53,57,51,54,84,244,142,128,144,84,84,49,49,48,53,57,52,57,84,244,142,128,157,84,84,49,49,48,53,57,56,52,84,244,142,129,128,84,84,49,49,48,53,57,56,53,84,244,142,129,129,84,84,49,49,48,53,57,56,54,84,244,142,129,130,84,84,49,49,48,53,57,56,55,84,244,142,129,131,84,84,49,49,48,53,57,56,56,84,244,142,129,132,84,84,49,49,48,53,57,56,57,84,244,142,129,133,84,84,49,49,48,53,57,57,48,84,244,142,129,134,84,84,49,49,48,53,57,57,49,84,244,142,129,135,84,84,49,49,48,53,57,57,50,84,244,142,129,136,84,84,49,49,48,53,57,57,51,84,244,142,129,137,84,84,49,49,48,53,57,57,52,84,244,142,129,138,84,84,49,49,48,53,57,57,53,84,244,142,129,139,84,84,49,49,48,53,57,57,54,84,244,142,129,140,84,84,49,49,48,53,57,57,55,84,244,142,129,141,84,84,49,49,48,53,57,57,56,84,244,142,129,142,84,84,49,49,48,53,57,57,57,84,244,142,129,143,84,84,49,49,48,54,48,48,48,84,244,142,129,144,84,84,49,49,48,54,48,48,49,84,244,142,129,145,84,84,49,49,48,54,48,48,50,84,244,142,129,146,84,84,49,49,48,54,48,48,51,84,244,142,129,147,84,84,49,49,48,54,48,48,52,84,244,142,129,148,84,84,49,49,48,54,48,48,53,84,244,142,129,149,84,84,49,49,48,54,48,48,54,84,244,142,129,150,84,84,49,49,48,54,48,48,55,84,244,142,129,151,84,84,49,49,48,54,48,48,56,84,244,142,129,152,84,84,49,49,48,54,48,48,57,84,244,142,129,153,84,84,49,49,48,54,48,49,48,84,244,142,129,154,84,84,49,49,48,54,48,49,49,84,244,142,129,155,84,84,49,49,48,54,48,49,50,84,244,142,129,156,84,84,49,49,48,54,48,49,51,84,244,142,129,157,84,84,49,49,48,54,48,49,52,84,244,142,129,158,84,84,49,49,48,54,48,49,53,84,244,142,129,159,84,84,49,49,48,54,48,49,54,84,244,142,129,160,84,84,49,49,48,54,48,49,55,84,244,142,129,161,84,84,49,49,48,54,48,49,56,84,244,142,129,162,84,84,49,49,48,54,48,49,57,84,244,142,129,163,84,84,49,49,48,54,48,50,48,84,244,142,129,164,84,84,49,49,48,54,48,50,49,84,244,142,129,165,84,84,49,49,48,54,48,50,50,84,244,142,129,166,84,84,49,49,48,54,48,50,51,84,244,142,129,167,84,84,49,49,48,54,48,50,52,84,244,142,129,168,84,84,49,49,48,54,48,50,53,84,244,142,129,169,84,84,49,49,48,54,48,50,54,84,244,142,129,170,84,84,49,49,48,54,48,50,55,84,244,142,129,171,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22307 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22307_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22307_s.txt", Encoding.UTF8);

    public Test22307() : base(recordedRequest, recordedResponse, "accounts8d43a0488c74565")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a0488c74565",
                        container: "containers4dd24e5d70a14b66980e4e38d7ab36f0",
                        blob: "Blob0ed9a30d86eb44108a1b0ddb7ead2fb8",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 145408,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22595 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22595_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22595_s.txt", Encoding.UTF8);

    public Test22595() : base(recordedRequest, recordedResponse, "accounts8d43a048d26afcd")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048d26afcd",
                        container: "containersddd934ca569845dc89778f0bd55316f0",
                        blob: "Blobb0a9532d23074a20b0fd9aaeadd65b4a",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22784 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22784_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22784_s.txt", Encoding.UTF8);

    public Test22784() : base(recordedRequest, recordedResponse, "accounts8d43a0490823d21")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a0490823d21",
                        container: "containers0bd48f2ce8374f57b3f3c61b5595b35b",
                        blob: "Blob9395bf929b6b4bf0ae6e3ec283d5bb60",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19878 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19878_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19878_s.txt", Encoding.UTF8);

    public Test19878() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers7032abc4111d4702bce9d36696a0a648",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,50,48,52,54,49,84,243,160,174,141,84,84,57,50,48,52,54,51,84,243,160,174,143,84,84,57,50,48,52,54,52,84,243,160,174,144,84,84,57,50,48,52,55,55,84,243,160,174,157,84,84,57,50,48,53,49,51,84,243,160,175,129,84,84,57,50,48,53,50,53,84,243,160,175,141,84,84,57,50,48,53,50,55,84,243,160,175,143,84,84,57,50,48,53,50,56,84,243,160,175,144,84,84,57,50,48,53,52,49,84,243,160,175,157,84,84,57,50,48,53,55,55,84,243,160,176,129,84,84,57,50,48,53,56,57,84,243,160,176,141,84,84,57,50,48,53,57,49,84,243,160,176,143,84,84,57,50,48,53,57,50,84,243,160,176,144,84,84,57,50,48,54,48,53,84,243,160,176,157,84,84,57,50,48,54,52,49,84,243,160,177,129,84,84,57,50,48,54,53,51,84,243,160,177,141,84,84,57,50,48,54,53,53,84,243,160,177,143,84,84,57,50,48,54,53,54,84,243,160,177,144,84,84,57,50,48,54,54,57,84,243,160,177,157,84,84,57,50,48,55,48,53,84,243,160,178,129,84,84,57,50,48,55,49,55,84,243,160,178,141,84,84,57,50,48,55,49,57,84,243,160,178,143,84,84,57,50,48,55,50,48,84,243,160,178,144,84,84,57,50,48,55,51,51,84,243,160,178,157,84,84,57,50,48,55,54,57,84,243,160,179,129,84,84,57,50,48,55,56,49,84,243,160,179,141,84,84,57,50,48,55,56,51,84,243,160,179,143,84,84,57,50,48,55,56,52,84,243,160,179,144,84,84,57,50,48,55,57,55,84,243,160,179,157,84,84,57,50,48,56,51,51,84,243,160,180,129,84,84,57,50,48,56,52,53,84,243,160,180,141,84,84,57,50,48,56,52,55,84,243,160,180,143,84,84,57,50,48,56,52,56,84,243,160,180,144,84,84,57,50,48,56,54,49,84,243,160,180,157,84,84,57,50,48,56,57,55,84,243,160,181,129,84,84,57,50,48,57,48,57,84,243,160,181,141,84,84,57,50,48,57,49,49,84,243,160,181,143,84,84,57,50,48,57,49,50,84,243,160,181,144,84,84,57,50,48,57,50,53,84,243,160,181,157,84,84,57,50,48,57,54,49,84,243,160,182,129,84,84,57,50,48,57,55,51,84,243,160,182,141,84,84,57,50,48,57,55,53,84,243,160,182,143,84,84,57,50,48,57,55,54,84,243,160,182,144,84,84,57,50,48,57,56,57,84,243,160,182,157,84,84,57,50,49,48,50,53,84,243,160,183,129,84,84,57,50,49,48,51,55,84,243,160,183,141,84,84,57,50,49,48,51,57,84,243,160,183,143,84,84,57,50,49,48,52,48,84,243,160,183,144,84,84,57,50,49,48,53,51,84,243,160,183,157,84,84,57,50,49,48,56,57,84,243,160,184,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20419 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20419_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20419_s.txt", Encoding.UTF8);

    public Test20419() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers7f83ba854dc4459da9078f97f691d28c",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,52,56,55,56,84,244,129,162,158,84,84,49,48,53,52,56,55,57,84,244,129,162,159,84,84,49,48,53,52,56,56,48,84,244,129,162,160,84,84,49,48,53,52,56,56,49,84,244,129,162,161,84,84,49,48,53,52,56,56,50,84,244,129,162,162,84,84,49,48,53,52,56,56,51,84,244,129,162,163,84,84,49,48,53,52,56,56,52,84,244,129,162,164,84,84,49,48,53,52,56,56,53,84,244,129,162,165,84,84,49,48,53,52,56,56,54,84,244,129,162,166,84,84,49,48,53,52,56,56,55,84,244,129,162,167,84,84,49,48,53,52,56,56,56,84,244,129,162,168,84,84,49,48,53,52,56,56,57,84,244,129,162,169,84,84,49,48,53,52,56,57,48,84,244,129,162,170,84,84,49,48,53,52,56,57,49,84,244,129,162,171,84,84,49,48,53,52,56,57,50,84,244,129,162,172,84,84,49,48,53,52,56,57,51,84,244,129,162,173,84,84,49,48,53,52,56,57,52,84,244,129,162,174,84,84,49,48,53,52,56,57,53,84,244,129,162,175,84,84,49,48,53,52,56,57,54,84,244,129,162,176,84,84,49,48,53,52,56,57,55,84,244,129,162,177,84,84,49,48,53,52,56,57,56,84,244,129,162,178,84,84,49,48,53,52,56,57,57,84,244,129,162,179,84,84,49,48,53,52,57,48,48,84,244,129,162,180,84,84,49,48,53,52,57,48,49,84,244,129,162,181,84,84,49,48,53,52,57,48,50,84,244,129,162,182,84,84,49,48,53,52,57,48,51,84,244,129,162,183,84,84,49,48,53,52,57,48,52,84,244,129,162,184,84,84,49,48,53,52,57,48,53,84,244,129,162,185,84,84,49,48,53,52,57,48,54,84,244,129,162,186,84,84,49,48,53,52,57,48,55,84,244,129,162,187,84,84,49,48,53,52,57,48,56,84,244,129,162,188,84,84,49,48,53,52,57,48,57,84,244,129,162,189,84,84,49,48,53,52,57,49,48,84,244,129,162,190,84,84,49,48,53,52,57,49,49,84,244,129,162,191,84,84,49,48,53,52,57,49,50,84,244,129,163,128,84,84,49,48,53,52,57,49,51,84,244,129,163,129,84,84,49,48,53,52,57,49,52,84,244,129,163,130,84,84,49,48,53,52,57,49,53,84,244,129,163,131,84,84,49,48,53,52,57,49,54,84,244,129,163,132,84,84,49,48,53,52,57,49,55,84,244,129,163,133,84,84,49,48,53,52,57,49,56,84,244,129,163,134,84,84,49,48,53,52,57,49,57,84,244,129,163,135,84,84,49,48,53,52,57,50,48,84,244,129,163,136,84,84,49,48,53,52,57,50,49,84,244,129,163,137,84,84,49,48,53,52,57,50,50,84,244,129,163,138,84,84,49,48,53,52,57,50,51,84,244,129,163,139,84,84,49,48,53,52,57,50,52,84,244,129,163,140,84,84,49,48,53,52,57,50,53,84,244,129,163,141,84,84,49,48,53,52,57,50,54,84,244,129,163,142,84,84,49,48,53,52,57,50,55,84,244,129,163,143,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20673 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20673_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20673_s.txt", Encoding.UTF8);

    public Test20673() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers9df780a74f2549dda8f9f337dadb7946",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,56,51,48,51,55,84,244,136,154,157,84,84,49,48,56,51,48,55,51,84,244,136,155,129,84,84,49,48,56,51,48,56,53,84,244,136,155,141,84,84,49,48,56,51,48,56,55,84,244,136,155,143,84,84,49,48,56,51,48,56,56,84,244,136,155,144,84,84,49,48,56,51,49,48,49,84,244,136,155,157,84,84,49,48,56,51,49,51,55,84,244,136,156,129,84,84,49,48,56,51,49,52,57,84,244,136,156,141,84,84,49,48,56,51,49,53,49,84,244,136,156,143,84,84,49,48,56,51,49,53,50,84,244,136,156,144,84,84,49,48,56,51,49,54,53,84,244,136,156,157,84,84,49,48,56,51,50,48,48,84,244,136,157,128,84,84,49,48,56,51,50,48,49,84,244,136,157,129,84,84,49,48,56,51,50,48,50,84,244,136,157,130,84,84,49,48,56,51,50,48,51,84,244,136,157,131,84,84,49,48,56,51,50,48,52,84,244,136,157,132,84,84,49,48,56,51,50,48,53,84,244,136,157,133,84,84,49,48,56,51,50,48,54,84,244,136,157,134,84,84,49,48,56,51,50,48,55,84,244,136,157,135,84,84,49,48,56,51,50,48,56,84,244,136,157,136,84,84,49,48,56,51,50,48,57,84,244,136,157,137,84,84,49,48,56,51,50,49,48,84,244,136,157,138,84,84,49,48,56,51,50,49,49,84,244,136,157,139,84,84,49,48,56,51,50,49,50,84,244,136,157,140,84,84,49,48,56,51,50,49,51,84,244,136,157,141,84,84,49,48,56,51,50,49,52,84,244,136,157,142,84,84,49,48,56,51,50,49,53,84,244,136,157,143,84,84,49,48,56,51,50,49,54,84,244,136,157,144,84,84,49,48,56,51,50,49,55,84,244,136,157,145,84,84,49,48,56,51,50,49,56,84,244,136,157,146,84,84,49,48,56,51,50,49,57,84,244,136,157,147,84,84,49,48,56,51,50,50,48,84,244,136,157,148,84,84,49,48,56,51,50,50,49,84,244,136,157,149,84,84,49,48,56,51,50,50,50,84,244,136,157,150,84,84,49,48,56,51,50,50,51,84,244,136,157,151,84,84,49,48,56,51,50,50,52,84,244,136,157,152,84,84,49,48,56,51,50,50,53,84,244,136,157,153,84,84,49,48,56,51,50,50,54,84,244,136,157,154,84,84,49,48,56,51,50,50,55,84,244,136,157,155,84,84,49,48,56,51,50,50,56,84,244,136,157,156,84,84,49,48,56,51,50,50,57,84,244,136,157,157,84,84,49,48,56,51,50,51,48,84,244,136,157,158,84,84,49,48,56,51,50,51,49,84,244,136,157,159,84,84,49,48,56,51,50,51,50,84,244,136,157,160,84,84,49,48,56,51,50,51,51,84,244,136,157,161,84,84,49,48,56,51,50,51,52,84,244,136,157,162,84,84,49,48,56,51,50,51,53,84,244,136,157,163,84,84,49,48,56,51,50,51,54,84,244,136,157,164,84,84,49,48,56,51,50,51,55,84,244,136,157,165,84,84,49,48,56,51,50,51,56,84,244,136,157,166,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20769 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20769_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20769_s.txt", Encoding.UTF8);

    public Test20769() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersc5ae22b09f3f4a3eaff829adc5876203",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,57,56,55,48,53,84,244,140,143,145,84,84,49,48,57,56,55,48,54,84,244,140,143,146,84,84,49,48,57,56,55,48,55,84,244,140,143,147,84,84,49,48,57,56,55,48,56,84,244,140,143,148,84,84,49,48,57,56,55,48,57,84,244,140,143,149,84,84,49,48,57,56,55,49,48,84,244,140,143,150,84,84,49,48,57,56,55,49,49,84,244,140,143,151,84,84,49,48,57,56,55,49,50,84,244,140,143,152,84,84,49,48,57,56,55,49,51,84,244,140,143,153,84,84,49,48,57,56,55,49,52,84,244,140,143,154,84,84,49,48,57,56,55,49,53,84,244,140,143,155,84,84,49,48,57,56,55,49,54,84,244,140,143,156,84,84,49,48,57,56,55,49,55,84,244,140,143,157,84,84,49,48,57,56,55,49,56,84,244,140,143,158,84,84,49,48,57,56,55,49,57,84,244,140,143,159,84,84,49,48,57,56,55,50,48,84,244,140,143,160,84,84,49,48,57,56,55,50,49,84,244,140,143,161,84,84,49,48,57,56,55,50,50,84,244,140,143,162,84,84,49,48,57,56,55,50,51,84,244,140,143,163,84,84,49,48,57,56,55,50,52,84,244,140,143,164,84,84,49,48,57,56,55,50,53,84,244,140,143,165,84,84,49,48,57,56,55,50,54,84,244,140,143,166,84,84,49,48,57,56,55,50,55,84,244,140,143,167,84,84,49,48,57,56,55,50,56,84,244,140,143,168,84,84,49,48,57,56,55,50,57,84,244,140,143,169,84,84,49,48,57,56,55,51,48,84,244,140,143,170,84,84,49,48,57,56,55,51,49,84,244,140,143,171,84,84,49,48,57,56,55,51,50,84,244,140,143,172,84,84,49,48,57,56,55,51,51,84,244,140,143,173,84,84,49,48,57,56,55,51,52,84,244,140,143,174,84,84,49,48,57,56,55,51,53,84,244,140,143,175,84,84,49,48,57,56,55,51,54,84,244,140,143,176,84,84,49,48,57,56,55,51,55,84,244,140,143,177,84,84,49,48,57,56,55,51,56,84,244,140,143,178,84,84,49,48,57,56,55,51,57,84,244,140,143,179,84,84,49,48,57,56,55,52,48,84,244,140,143,180,84,84,49,48,57,56,55,52,49,84,244,140,143,181,84,84,49,48,57,56,55,52,50,84,244,140,143,182,84,84,49,48,57,56,55,52,51,84,244,140,143,183,84,84,49,48,57,56,55,52,52,84,244,140,143,184,84,84,49,48,57,56,55,52,53,84,244,140,143,185,84,84,49,48,57,56,55,52,54,84,244,140,143,186,84,84,49,48,57,56,55,52,55,84,244,140,143,187,84,84,49,48,57,56,55,52,56,84,244,140,143,188,84,84,49,48,57,56,55,52,57,84,244,140,143,189,84,84,49,48,57,56,55,53,48,84,244,140,143,190,84,84,49,48,57,56,55,53,49,84,244,140,143,191,84,84,49,48,57,56,55,53,50,84,244,140,144,128,84,84,49,48,57,56,55,53,51,84,244,140,144,129,84,84,49,48,57,56,55,53,52,84,244,140,144,130,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20386 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20386_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20386_s.txt", Encoding.UTF8);

    public Test20386() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers319eca44915441a6b60a6025f5eab2bd",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,52,49,50,56,84,244,129,150,176,84,84,49,48,53,52,49,50,57,84,244,129,150,177,84,84,49,48,53,52,49,51,48,84,244,129,150,178,84,84,49,48,53,52,49,51,49,84,244,129,150,179,84,84,49,48,53,52,49,51,50,84,244,129,150,180,84,84,49,48,53,52,49,51,51,84,244,129,150,181,84,84,49,48,53,52,49,51,52,84,244,129,150,182,84,84,49,48,53,52,49,51,53,84,244,129,150,183,84,84,49,48,53,52,49,51,54,84,244,129,150,184,84,84,49,48,53,52,49,51,55,84,244,129,150,185,84,84,49,48,53,52,49,51,56,84,244,129,150,186,84,84,49,48,53,52,49,51,57,84,244,129,150,187,84,84,49,48,53,52,49,52,48,84,244,129,150,188,84,84,49,48,53,52,49,52,49,84,244,129,150,189,84,84,49,48,53,52,49,52,50,84,244,129,150,190,84,84,49,48,53,52,49,52,51,84,244,129,150,191,84,84,49,48,53,52,49,52,52,84,244,129,151,128,84,84,49,48,53,52,49,52,53,84,244,129,151,129,84,84,49,48,53,52,49,52,54,84,244,129,151,130,84,84,49,48,53,52,49,52,55,84,244,129,151,131,84,84,49,48,53,52,49,52,56,84,244,129,151,132,84,84,49,48,53,52,49,52,57,84,244,129,151,133,84,84,49,48,53,52,49,53,48,84,244,129,151,134,84,84,49,48,53,52,49,53,49,84,244,129,151,135,84,84,49,48,53,52,49,53,50,84,244,129,151,136,84,84,49,48,53,52,49,53,51,84,244,129,151,137,84,84,49,48,53,52,49,53,52,84,244,129,151,138,84,84,49,48,53,52,49,53,53,84,244,129,151,139,84,84,49,48,53,52,49,53,54,84,244,129,151,140,84,84,49,48,53,52,49,53,55,84,244,129,151,141,84,84,49,48,53,52,49,53,56,84,244,129,151,142,84,84,49,48,53,52,49,53,57,84,244,129,151,143,84,84,49,48,53,52,49,54,48,84,244,129,151,144,84,84,49,48,53,52,49,54,49,84,244,129,151,145,84,84,49,48,53,52,49,54,50,84,244,129,151,146,84,84,49,48,53,52,49,54,51,84,244,129,151,147,84,84,49,48,53,52,49,54,52,84,244,129,151,148,84,84,49,48,53,52,49,54,53,84,244,129,151,149,84,84,49,48,53,52,49,54,54,84,244,129,151,150,84,84,49,48,53,52,49,54,55,84,244,129,151,151,84,84,49,48,53,52,49,54,56,84,244,129,151,152,84,84,49,48,53,52,49,54,57,84,244,129,151,153,84,84,49,48,53,52,49,55,48,84,244,129,151,154,84,84,49,48,53,52,49,55,49,84,244,129,151,155,84,84,49,48,53,52,49,55,50,84,244,129,151,156,84,84,49,48,53,52,49,55,51,84,244,129,151,157,84,84,49,48,53,52,49,55,52,84,244,129,151,158,84,84,49,48,53,52,49,55,53,84,244,129,151,159,84,84,49,48,53,52,49,55,54,84,244,129,151,160,84,84,49,48,53,52,49,55,55,84,244,129,151,161,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22660 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22660_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22660_s.txt", Encoding.UTF8);

    public Test22660() : base(recordedRequest, recordedResponse, "accounts8d43a048e9e5e5e")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048e9e5e5e",
                        container: "containers658c934922b945a58395827fbd3c8f55",
                        blob: "Blobd18bc87851794c53a31d4cf5f8cdd00d",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20483 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20483_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20483_s.txt", Encoding.UTF8);

    public Test20483() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers3bfa703d74a140e499ecce701b962b8c",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,54,51,55,56,84,244,129,185,186,84,84,49,48,53,54,51,55,57,84,244,129,185,187,84,84,49,48,53,54,51,56,48,84,244,129,185,188,84,84,49,48,53,54,51,56,49,84,244,129,185,189,84,84,49,48,53,54,51,56,50,84,244,129,185,190,84,84,49,48,53,54,51,56,51,84,244,129,185,191,84,84,49,48,53,54,51,56,52,84,244,129,186,128,84,84,49,48,53,54,51,56,53,84,244,129,186,129,84,84,49,48,53,54,51,56,54,84,244,129,186,130,84,84,49,48,53,54,51,56,55,84,244,129,186,131,84,84,49,48,53,54,51,56,56,84,244,129,186,132,84,84,49,48,53,54,51,56,57,84,244,129,186,133,84,84,49,48,53,54,51,57,48,84,244,129,186,134,84,84,49,48,53,54,51,57,49,84,244,129,186,135,84,84,49,48,53,54,51,57,50,84,244,129,186,136,84,84,49,48,53,54,51,57,51,84,244,129,186,137,84,84,49,48,53,54,51,57,52,84,244,129,186,138,84,84,49,48,53,54,51,57,53,84,244,129,186,139,84,84,49,48,53,54,51,57,54,84,244,129,186,140,84,84,49,48,53,54,51,57,55,84,244,129,186,141,84,84,49,48,53,54,51,57,56,84,244,129,186,142,84,84,49,48,53,54,51,57,57,84,244,129,186,143,84,84,49,48,53,54,52,48,48,84,244,129,186,144,84,84,49,48,53,54,52,48,49,84,244,129,186,145,84,84,49,48,53,54,52,48,50,84,244,129,186,146,84,84,49,48,53,54,52,48,51,84,244,129,186,147,84,84,49,48,53,54,52,48,52,84,244,129,186,148,84,84,49,48,53,54,52,48,53,84,244,129,186,149,84,84,49,48,53,54,52,48,54,84,244,129,186,150,84,84,49,48,53,54,52,48,55,84,244,129,186,151,84,84,49,48,53,54,52,48,56,84,244,129,186,152,84,84,49,48,53,54,52,48,57,84,244,129,186,153,84,84,49,48,53,54,52,49,48,84,244,129,186,154,84,84,49,48,53,54,52,49,49,84,244,129,186,155,84,84,49,48,53,54,52,49,50,84,244,129,186,156,84,84,49,48,53,54,52,49,51,84,244,129,186,157,84,84,49,48,53,54,52,49,52,84,244,129,186,158,84,84,49,48,53,54,52,49,53,84,244,129,186,159,84,84,49,48,53,54,52,49,54,84,244,129,186,160,84,84,49,48,53,54,52,49,55,84,244,129,186,161,84,84,49,48,53,54,52,49,56,84,244,129,186,162,84,84,49,48,53,54,52,49,57,84,244,129,186,163,84,84,49,48,53,54,52,50,48,84,244,129,186,164,84,84,49,48,53,54,52,50,49,84,244,129,186,165,84,84,49,48,53,54,52,50,50,84,244,129,186,166,84,84,49,48,53,54,52,50,51,84,244,129,186,167,84,84,49,48,53,54,52,50,52,84,244,129,186,168,84,84,49,48,53,54,52,50,53,84,244,129,186,169,84,84,49,48,53,54,52,50,54,84,244,129,186,170,84,84,49,48,53,54,52,50,55,84,244,129,186,171,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21514 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21514_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21514_s.txt", Encoding.UTF8);

    public Test21514() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersda25b918eb704fe6b086ae43660ac0be",
                        blob: "Blob2b9d3528e6ce4a638b833e5e117659a8",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        ifNoneMatch: "\"0x8D43A03EE03578B\"",
                        xMsBlobContentLength: 0,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22785 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22785_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22785_s.txt", Encoding.UTF8);

    public Test22785() : base(recordedRequest, recordedResponse, "accounts8d43a0490823d21")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a0490823d21",
                        container: "containers0bd48f2ce8374f57b3f3c61b5595b35b",
                        blob: "Blob7f3b06d7e968470c9304a368af1b967f",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20068 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20068_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20068_s.txt", Encoding.UTF8);

    public Test20068() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersb3c703c6e551430d9c914c24c3792dd5",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,49,49,56,50,55,84,243,183,129,179,84,84,49,48,49,49,56,50,56,84,243,183,129,180,84,84,49,48,49,49,56,50,57,84,243,183,129,181,84,84,49,48,49,49,56,51,48,84,243,183,129,182,84,84,49,48,49,49,56,51,49,84,243,183,129,183,84,84,49,48,49,49,56,51,50,84,243,183,129,184,84,84,49,48,49,49,56,51,51,84,243,183,129,185,84,84,49,48,49,49,56,51,52,84,243,183,129,186,84,84,49,48,49,49,56,51,53,84,243,183,129,187,84,84,49,48,49,49,56,51,54,84,243,183,129,188,84,84,49,48,49,49,56,51,55,84,243,183,129,189,84,84,49,48,49,49,56,51,56,84,243,183,129,190,84,84,49,48,49,49,56,51,57,84,243,183,129,191,84,84,49,48,49,49,56,52,49,84,243,183,130,129,84,84,49,48,49,49,56,53,51,84,243,183,130,141,84,84,49,48,49,49,56,53,53,84,243,183,130,143,84,84,49,48,49,49,56,53,54,84,243,183,130,144,84,84,49,48,49,49,56,54,57,84,243,183,130,157,84,84,49,48,49,49,57,48,53,84,243,183,131,129,84,84,49,48,49,49,57,49,55,84,243,183,131,141,84,84,49,48,49,49,57,49,57,84,243,183,131,143,84,84,49,48,49,49,57,50,48,84,243,183,131,144,84,84,49,48,49,49,57,51,51,84,243,183,131,157,84,84,49,48,49,49,57,54,57,84,243,183,132,129,84,84,49,48,49,49,57,56,49,84,243,183,132,141,84,84,49,48,49,49,57,56,51,84,243,183,132,143,84,84,49,48,49,49,57,56,52,84,243,183,132,144,84,84,49,48,49,49,57,57,55,84,243,183,132,157,84,84,49,48,49,50,48,51,51,84,243,183,133,129,84,84,49,48,49,50,48,52,53,84,243,183,133,141,84,84,49,48,49,50,48,52,55,84,243,183,133,143,84,84,49,48,49,50,48,52,56,84,243,183,133,144,84,84,49,48,49,50,48,54,49,84,243,183,133,157,84,84,49,48,49,50,48,57,55,84,243,183,134,129,84,84,49,48,49,50,49,48,57,84,243,183,134,141,84,84,49,48,49,50,49,49,49,84,243,183,134,143,84,84,49,48,49,50,49,49,50,84,243,183,134,144,84,84,49,48,49,50,49,50,53,84,243,183,134,157,84,84,49,48,49,50,49,54,49,84,243,183,135,129,84,84,49,48,49,50,49,55,51,84,243,183,135,141,84,84,49,48,49,50,49,55,53,84,243,183,135,143,84,84,49,48,49,50,49,55,54,84,243,183,135,144,84,84,49,48,49,50,49,56,57,84,243,183,135,157,84,84,49,48,49,50,50,50,53,84,243,183,136,129,84,84,49,48,49,50,50,51,55,84,243,183,136,141,84,84,49,48,49,50,50,51,57,84,243,183,136,143,84,84,49,48,49,50,50,52,48,84,243,183,136,144,84,84,49,48,49,50,50,53,51,84,243,183,136,157,84,84,49,48,49,50,50,56,57,84,243,183,137,129,84,84,49,48,49,50,51,48,49,84,243,183,137,141,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19493 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19493_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19493_s.txt", Encoding.UTF8);

    public Test19493() : base(recordedRequest, recordedResponse, "accounts8d43a024a0ff30a")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a024a0ff30a",
                        container: "foo",
                        blob: "bar",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19880 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19880_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19880_s.txt", Encoding.UTF8);

    public Test19880() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers7032abc4111d4702bce9d36696a0a648",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,50,49,49,48,49,84,243,160,184,141,84,84,57,50,49,49,48,51,84,243,160,184,143,84,84,57,50,49,49,48,52,84,243,160,184,144,84,84,57,50,49,49,49,55,84,243,160,184,157,84,84,57,50,49,49,53,51,84,243,160,185,129,84,84,57,50,49,49,54,53,84,243,160,185,141,84,84,57,50,49,49,54,55,84,243,160,185,143,84,84,57,50,49,49,54,56,84,243,160,185,144,84,84,57,50,49,49,56,49,84,243,160,185,157,84,84,57,50,49,50,49,55,84,243,160,186,129,84,84,57,50,49,50,50,57,84,243,160,186,141,84,84,57,50,49,50,51,49,84,243,160,186,143,84,84,57,50,49,50,51,50,84,243,160,186,144,84,84,57,50,49,50,52,53,84,243,160,186,157,84,84,57,50,49,50,56,49,84,243,160,187,129,84,84,57,50,49,50,57,51,84,243,160,187,141,84,84,57,50,49,50,57,53,84,243,160,187,143,84,84,57,50,49,50,57,54,84,243,160,187,144,84,84,57,50,49,51,48,57,84,243,160,187,157,84,84,57,50,49,51,52,53,84,243,160,188,129,84,84,57,50,49,51,53,55,84,243,160,188,141,84,84,57,50,49,51,53,57,84,243,160,188,143,84,84,57,50,49,51,54,48,84,243,160,188,144,84,84,57,50,49,51,55,51,84,243,160,188,157,84,84,57,50,49,52,48,57,84,243,160,189,129,84,84,57,50,49,52,50,49,84,243,160,189,141,84,84,57,50,49,52,50,51,84,243,160,189,143,84,84,57,50,49,52,50,52,84,243,160,189,144,84,84,57,50,49,52,51,55,84,243,160,189,157,84,84,57,50,49,52,55,51,84,243,160,190,129,84,84,57,50,49,52,56,53,84,243,160,190,141,84,84,57,50,49,52,56,55,84,243,160,190,143,84,84,57,50,49,52,56,56,84,243,160,190,144,84,84,57,50,49,53,48,49,84,243,160,190,157,84,84,57,50,49,53,51,55,84,243,160,191,129,84,84,57,50,49,53,52,57,84,243,160,191,141,84,84,57,50,49,53,53,49,84,243,160,191,143,84,84,57,50,49,53,53,50,84,243,160,191,144,84,84,57,50,49,53,54,53,84,243,160,191,157,84,84,57,56,51,48,52,49,84,243,176,128,129,84,84,57,56,51,48,53,51,84,243,176,128,141,84,84,57,56,51,48,53,53,84,243,176,128,143,84,84,57,56,51,48,53,54,84,243,176,128,144,84,84,57,56,51,48,54,57,84,243,176,128,157,84,84,57,56,51,49,48,52,84,243,176,129,128,84,84,57,56,51,49,48,53,84,243,176,129,129,84,84,57,56,51,49,48,54,84,243,176,129,130,84,84,57,56,51,49,48,55,84,243,176,129,131,84,84,57,56,51,49,48,56,84,243,176,129,132,84,84,57,56,51,49,48,57,84,243,176,129,133,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19941 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19941_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19941_s.txt", Encoding.UTF8);

    public Test19941() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersbf5ecfbea5a24d8a8188936c9be6fa20",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,57,50,48,55,49,84,243,178,141,135,84,84,57,57,50,48,55,50,84,243,178,141,136,84,84,57,57,50,48,55,51,84,243,178,141,137,84,84,57,57,50,48,55,52,84,243,178,141,138,84,84,57,57,50,48,55,53,84,243,178,141,139,84,84,57,57,50,48,55,54,84,243,178,141,140,84,84,57,57,50,48,55,55,84,243,178,141,141,84,84,57,57,50,48,55,56,84,243,178,141,142,84,84,57,57,50,48,55,57,84,243,178,141,143,84,84,57,57,50,48,56,48,84,243,178,141,144,84,84,57,57,50,48,56,49,84,243,178,141,145,84,84,57,57,50,48,56,50,84,243,178,141,146,84,84,57,57,50,48,56,51,84,243,178,141,147,84,84,57,57,50,48,56,52,84,243,178,141,148,84,84,57,57,50,48,56,53,84,243,178,141,149,84,84,57,57,50,48,56,54,84,243,178,141,150,84,84,57,57,50,48,56,55,84,243,178,141,151,84,84,57,57,50,48,56,56,84,243,178,141,152,84,84,57,57,50,48,56,57,84,243,178,141,153,84,84,57,57,50,48,57,48,84,243,178,141,154,84,84,57,57,50,48,57,49,84,243,178,141,155,84,84,57,57,50,48,57,50,84,243,178,141,156,84,84,57,57,50,48,57,51,84,243,178,141,157,84,84,57,57,50,48,57,52,84,243,178,141,158,84,84,57,57,50,48,57,53,84,243,178,141,159,84,84,57,57,50,48,57,54,84,243,178,141,160,84,84,57,57,50,48,57,55,84,243,178,141,161,84,84,57,57,50,48,57,56,84,243,178,141,162,84,84,57,57,50,48,57,57,84,243,178,141,163,84,84,57,57,50,49,48,48,84,243,178,141,164,84,84,57,57,50,49,48,49,84,243,178,141,165,84,84,57,57,50,49,48,50,84,243,178,141,166,84,84,57,57,50,49,48,51,84,243,178,141,167,84,84,57,57,50,49,48,52,84,243,178,141,168,84,84,57,57,50,49,48,53,84,243,178,141,169,84,84,57,57,50,49,48,54,84,243,178,141,170,84,84,57,57,50,49,48,55,84,243,178,141,171,84,84,57,57,50,49,48,56,84,243,178,141,172,84,84,57,57,50,49,48,57,84,243,178,141,173,84,84,57,57,50,49,49,48,84,243,178,141,174,84,84,57,57,50,49,49,49,84,243,178,141,175,84,84,57,57,50,49,49,50,84,243,178,141,176,84,84,57,57,50,49,49,51,84,243,178,141,177,84,84,57,57,50,49,49,52,84,243,178,141,178,84,84,57,57,50,49,49,53,84,243,178,141,179,84,84,57,57,50,49,49,54,84,243,178,141,180,84,84,57,57,50,49,49,55,84,243,178,141,181,84,84,57,57,50,49,49,56,84,243,178,141,182,84,84,57,57,50,49,49,57,84,243,178,141,183,84,84,57,57,50,49,50,48,84,243,178,141,184,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20544 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20544_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20544_s.txt", Encoding.UTF8);

    public Test20544() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers169b02be047c4c76acbb586fdc8886c6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,54,50,55,56,53,84,244,131,158,129,84,84,49,48,54,50,55,57,55,84,244,131,158,141,84,84,49,48,54,50,55,57,57,84,244,131,158,143,84,84,49,48,54,50,56,48,48,84,244,131,158,144,84,84,49,48,54,50,56,49,51,84,244,131,158,157,84,84,49,48,54,50,56,52,57,84,244,131,159,129,84,84,49,48,54,50,56,54,49,84,244,131,159,141,84,84,49,48,54,50,56,54,51,84,244,131,159,143,84,84,49,48,54,50,56,54,52,84,244,131,159,144,84,84,49,48,54,50,56,55,55,84,244,131,159,157,84,84,49,48,54,50,57,49,51,84,244,131,160,129,84,84,49,48,54,50,57,50,53,84,244,131,160,141,84,84,49,48,54,50,57,50,55,84,244,131,160,143,84,84,49,48,54,50,57,50,56,84,244,131,160,144,84,84,49,48,54,50,57,52,49,84,244,131,160,157,84,84,49,48,54,50,57,55,55,84,244,131,161,129,84,84,49,48,54,50,57,56,57,84,244,131,161,141,84,84,49,48,54,50,57,57,49,84,244,131,161,143,84,84,49,48,54,50,57,57,50,84,244,131,161,144,84,84,49,48,54,51,48,48,53,84,244,131,161,157,84,84,49,48,54,51,48,52,49,84,244,131,162,129,84,84,49,48,54,51,48,53,51,84,244,131,162,141,84,84,49,48,54,51,48,53,53,84,244,131,162,143,84,84,49,48,54,51,48,53,54,84,244,131,162,144,84,84,49,48,54,51,48,54,57,84,244,131,162,157,84,84,49,48,54,51,49,48,53,84,244,131,163,129,84,84,49,48,54,51,49,49,55,84,244,131,163,141,84,84,49,48,54,51,49,49,57,84,244,131,163,143,84,84,49,48,54,51,49,50,48,84,244,131,163,144,84,84,49,48,54,51,49,51,51,84,244,131,163,157,84,84,49,48,54,51,49,54,57,84,244,131,164,129,84,84,49,48,54,51,49,56,49,84,244,131,164,141,84,84,49,48,54,51,49,56,51,84,244,131,164,143,84,84,49,48,54,51,49,56,52,84,244,131,164,144,84,84,49,48,54,51,49,57,55,84,244,131,164,157,84,84,49,48,54,51,50,51,51,84,244,131,165,129,84,84,49,48,54,51,50,52,53,84,244,131,165,141,84,84,49,48,54,51,50,52,55,84,244,131,165,143,84,84,49,48,54,51,50,52,56,84,244,131,165,144,84,84,49,48,54,51,50,54,49,84,244,131,165,157,84,84,49,48,54,51,50,57,55,84,244,131,166,129,84,84,49,48,54,51,51,48,57,84,244,131,166,141,84,84,49,48,54,51,51,49,49,84,244,131,166,143,84,84,49,48,54,51,51,49,50,84,244,131,166,144,84,84,49,48,54,51,51,50,53,84,244,131,166,157,84,84,49,48,54,51,51,54,49,84,244,131,167,129,84,84,49,48,54,51,51,55,51,84,244,131,167,141,84,84,49,48,54,51,51,55,53,84,244,131,167,143,84,84,49,48,54,51,51,55,54,84,244,131,167,144,84,84,49,48,54,51,51,56,57,84,244,131,167,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20231 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20231_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20231_s.txt", Encoding.UTF8);

    public Test20231() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersca1800aaa567470781b999118df6ba97",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,51,55,50,55,49,84,243,189,143,151,84,84,49,48,51,55,50,55,50,84,243,189,143,152,84,84,49,48,51,55,50,55,51,84,243,189,143,153,84,84,49,48,51,55,50,55,52,84,243,189,143,154,84,84,49,48,51,55,50,55,53,84,243,189,143,155,84,84,49,48,51,55,50,55,54,84,243,189,143,156,84,84,49,48,51,55,50,55,55,84,243,189,143,157,84,84,49,48,51,55,50,55,56,84,243,189,143,158,84,84,49,48,51,55,50,55,57,84,243,189,143,159,84,84,49,48,51,55,50,56,48,84,243,189,143,160,84,84,49,48,51,55,50,56,49,84,243,189,143,161,84,84,49,48,51,55,50,56,50,84,243,189,143,162,84,84,49,48,51,55,50,56,51,84,243,189,143,163,84,84,49,48,51,55,50,56,52,84,243,189,143,164,84,84,49,48,51,55,50,56,53,84,243,189,143,165,84,84,49,48,51,55,50,56,54,84,243,189,143,166,84,84,49,48,51,55,50,56,55,84,243,189,143,167,84,84,49,48,51,55,50,56,56,84,243,189,143,168,84,84,49,48,51,55,50,56,57,84,243,189,143,169,84,84,49,48,51,55,50,57,48,84,243,189,143,170,84,84,49,48,51,55,50,57,49,84,243,189,143,171,84,84,49,48,51,55,50,57,50,84,243,189,143,172,84,84,49,48,51,55,50,57,51,84,243,189,143,173,84,84,49,48,51,55,50,57,52,84,243,189,143,174,84,84,49,48,51,55,50,57,53,84,243,189,143,175,84,84,49,48,51,55,50,57,54,84,243,189,143,176,84,84,49,48,51,55,50,57,55,84,243,189,143,177,84,84,49,48,51,55,50,57,56,84,243,189,143,178,84,84,49,48,51,55,50,57,57,84,243,189,143,179,84,84,49,48,51,55,51,48,48,84,243,189,143,180,84,84,49,48,51,55,51,48,49,84,243,189,143,181,84,84,49,48,51,55,51,48,50,84,243,189,143,182,84,84,49,48,51,55,51,48,51,84,243,189,143,183,84,84,49,48,51,55,51,48,52,84,243,189,143,184,84,84,49,48,51,55,51,48,53,84,243,189,143,185,84,84,49,48,51,55,51,48,54,84,243,189,143,186,84,84,49,48,51,55,51,48,55,84,243,189,143,187,84,84,49,48,51,55,51,48,56,84,243,189,143,188,84,84,49,48,51,55,51,48,57,84,243,189,143,189,84,84,49,48,51,55,51,49,48,84,243,189,143,190,84,84,49,48,51,55,51,49,49,84,243,189,143,191,84,84,49,48,51,55,51,49,50,84,243,189,144,128,84,84,49,48,51,55,51,49,51,84,243,189,144,129,84,84,49,48,51,55,51,49,52,84,243,189,144,130,84,84,49,48,51,55,51,49,53,84,243,189,144,131,84,84,49,48,51,55,51,49,54,84,243,189,144,132,84,84,49,48,51,55,51,49,55,84,243,189,144,133,84,84,49,48,51,55,51,49,56,84,243,189,144,134,84,84,49,48,51,55,51,49,57,84,243,189,144,135,84,84,49,48,51,55,51,50,48,84,243,189,144,136,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20003 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20003_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20003_s.txt", Encoding.UTF8);

    public Test20003() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersc5d3e7c5509046d2aa3f8bb095571b82",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,48,49,51,48,48,84,243,180,157,148,84,84,49,48,48,49,51,48,49,84,243,180,157,149,84,84,49,48,48,49,51,48,50,84,243,180,157,150,84,84,49,48,48,49,51,48,51,84,243,180,157,151,84,84,49,48,48,49,51,48,52,84,243,180,157,152,84,84,49,48,48,49,51,48,53,84,243,180,157,153,84,84,49,48,48,49,51,48,54,84,243,180,157,154,84,84,49,48,48,49,51,48,55,84,243,180,157,155,84,84,49,48,48,49,51,48,56,84,243,180,157,156,84,84,49,48,48,49,51,48,57,84,243,180,157,157,84,84,49,48,48,49,51,49,48,84,243,180,157,158,84,84,49,48,48,49,51,49,49,84,243,180,157,159,84,84,49,48,48,49,51,49,50,84,243,180,157,160,84,84,49,48,48,49,51,49,51,84,243,180,157,161,84,84,49,48,48,49,51,49,52,84,243,180,157,162,84,84,49,48,48,49,51,49,53,84,243,180,157,163,84,84,49,48,48,49,51,49,54,84,243,180,157,164,84,84,49,48,48,49,51,49,55,84,243,180,157,165,84,84,49,48,48,49,51,49,56,84,243,180,157,166,84,84,49,48,48,49,51,49,57,84,243,180,157,167,84,84,49,48,48,49,51,50,48,84,243,180,157,168,84,84,49,48,48,49,51,50,49,84,243,180,157,169,84,84,49,48,48,49,51,50,50,84,243,180,157,170,84,84,49,48,48,49,51,50,51,84,243,180,157,171,84,84,49,48,48,49,51,50,52,84,243,180,157,172,84,84,49,48,48,49,51,50,53,84,243,180,157,173,84,84,49,48,48,49,51,50,54,84,243,180,157,174,84,84,49,48,48,49,51,50,55,84,243,180,157,175,84,84,49,48,48,49,51,50,56,84,243,180,157,176,84,84,49,48,48,49,51,50,57,84,243,180,157,177,84,84,49,48,48,49,51,51,48,84,243,180,157,178,84,84,49,48,48,49,51,51,49,84,243,180,157,179,84,84,49,48,48,49,51,51,50,84,243,180,157,180,84,84,49,48,48,49,51,51,51,84,243,180,157,181,84,84,49,48,48,49,51,51,52,84,243,180,157,182,84,84,49,48,48,49,51,51,53,84,243,180,157,183,84,84,49,48,48,49,51,51,54,84,243,180,157,184,84,84,49,48,48,49,51,51,55,84,243,180,157,185,84,84,49,48,48,49,51,51,56,84,243,180,157,186,84,84,49,48,48,49,51,51,57,84,243,180,157,187,84,84,49,48,48,49,51,52,48,84,243,180,157,188,84,84,49,48,48,49,51,52,49,84,243,180,157,189,84,84,49,48,48,49,51,52,50,84,243,180,157,190,84,84,49,48,48,49,51,52,51,84,243,180,157,191,84,84,49,48,48,49,51,52,53,84,243,180,158,129,84,84,49,48,48,49,51,53,55,84,243,180,158,141,84,84,49,48,48,49,51,53,57,84,243,180,158,143,84,84,49,48,48,49,51,54,48,84,243,180,158,144,84,84,49,48,48,49,51,55,51,84,243,180,158,157,84,84,49,48,48,49,52,48,57,84,243,180,159,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20898 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20898_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20898_s.txt", Encoding.UTF8);

    public Test20898() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersdd41d3a5bb7f42709f7cec587f1a204a",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,52,52,54,57,84,244,141,169,149,84,84,49,49,48,52,52,55,48,84,244,141,169,150,84,84,49,49,48,52,52,55,49,84,244,141,169,151,84,84,49,49,48,52,52,55,50,84,244,141,169,152,84,84,49,49,48,52,52,55,51,84,244,141,169,153,84,84,49,49,48,52,52,55,52,84,244,141,169,154,84,84,49,49,48,52,52,55,53,84,244,141,169,155,84,84,49,49,48,52,52,55,54,84,244,141,169,156,84,84,49,49,48,52,52,55,55,84,244,141,169,157,84,84,49,49,48,52,52,55,56,84,244,141,169,158,84,84,49,49,48,52,52,55,57,84,244,141,169,159,84,84,49,49,48,52,52,56,48,84,244,141,169,160,84,84,49,49,48,52,52,56,49,84,244,141,169,161,84,84,49,49,48,52,52,56,50,84,244,141,169,162,84,84,49,49,48,52,52,56,51,84,244,141,169,163,84,84,49,49,48,52,52,56,52,84,244,141,169,164,84,84,49,49,48,52,52,56,53,84,244,141,169,165,84,84,49,49,48,52,52,56,54,84,244,141,169,166,84,84,49,49,48,52,52,56,55,84,244,141,169,167,84,84,49,49,48,52,52,56,56,84,244,141,169,168,84,84,49,49,48,52,52,56,57,84,244,141,169,169,84,84,49,49,48,52,52,57,48,84,244,141,169,170,84,84,49,49,48,52,52,57,49,84,244,141,169,171,84,84,49,49,48,52,52,57,50,84,244,141,169,172,84,84,49,49,48,52,52,57,51,84,244,141,169,173,84,84,49,49,48,52,52,57,52,84,244,141,169,174,84,84,49,49,48,52,52,57,53,84,244,141,169,175,84,84,49,49,48,52,52,57,54,84,244,141,169,176,84,84,49,49,48,52,52,57,55,84,244,141,169,177,84,84,49,49,48,52,52,57,56,84,244,141,169,178,84,84,49,49,48,52,52,57,57,84,244,141,169,179,84,84,49,49,48,52,53,48,48,84,244,141,169,180,84,84,49,49,48,52,53,48,49,84,244,141,169,181,84,84,49,49,48,52,53,48,50,84,244,141,169,182,84,84,49,49,48,52,53,48,51,84,244,141,169,183,84,84,49,49,48,52,53,48,52,84,244,141,169,184,84,84,49,49,48,52,53,48,53,84,244,141,169,185,84,84,49,49,48,52,53,48,54,84,244,141,169,186,84,84,49,49,48,52,53,48,55,84,244,141,169,187,84,84,49,49,48,52,53,48,56,84,244,141,169,188,84,84,49,49,48,52,53,48,57,84,244,141,169,189,84,84,49,49,48,52,53,49,48,84,244,141,169,190,84,84,49,49,48,52,53,49,49,84,244,141,169,191,84,84,49,49,48,52,53,49,50,84,244,141,170,128,84,84,49,49,48,52,53,49,51,84,244,141,170,129,84,84,49,49,48,52,53,49,52,84,244,141,170,130,84,84,49,49,48,52,53,49,53,84,244,141,170,131,84,84,49,49,48,52,53,49,54,84,244,141,170,132,84,84,49,49,48,52,53,49,55,84,244,141,170,133,84,84,49,49,48,52,53,49,56,84,244,141,170,134,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20421 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20421_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20421_s.txt", Encoding.UTF8);

    public Test20421() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers7f83ba854dc4459da9078f97f691d28c",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,52,57,50,56,84,244,129,163,144,84,84,49,48,53,52,57,50,57,84,244,129,163,145,84,84,49,48,53,52,57,51,48,84,244,129,163,146,84,84,49,48,53,52,57,51,49,84,244,129,163,147,84,84,49,48,53,52,57,51,50,84,244,129,163,148,84,84,49,48,53,52,57,51,51,84,244,129,163,149,84,84,49,48,53,52,57,51,52,84,244,129,163,150,84,84,49,48,53,52,57,51,53,84,244,129,163,151,84,84,49,48,53,52,57,51,54,84,244,129,163,152,84,84,49,48,53,52,57,51,55,84,244,129,163,153,84,84,49,48,53,52,57,51,56,84,244,129,163,154,84,84,49,48,53,52,57,51,57,84,244,129,163,155,84,84,49,48,53,52,57,52,48,84,244,129,163,156,84,84,49,48,53,52,57,52,49,84,244,129,163,157,84,84,49,48,53,52,57,52,50,84,244,129,163,158,84,84,49,48,53,52,57,52,51,84,244,129,163,159,84,84,49,48,53,52,57,52,52,84,244,129,163,160,84,84,49,48,53,52,57,52,53,84,244,129,163,161,84,84,49,48,53,52,57,52,54,84,244,129,163,162,84,84,49,48,53,52,57,52,55,84,244,129,163,163,84,84,49,48,53,52,57,52,56,84,244,129,163,164,84,84,49,48,53,52,57,52,57,84,244,129,163,165,84,84,49,48,53,52,57,53,48,84,244,129,163,166,84,84,49,48,53,52,57,53,49,84,244,129,163,167,84,84,49,48,53,52,57,53,50,84,244,129,163,168,84,84,49,48,53,52,57,53,51,84,244,129,163,169,84,84,49,48,53,52,57,53,52,84,244,129,163,170,84,84,49,48,53,52,57,53,53,84,244,129,163,171,84,84,49,48,53,52,57,53,54,84,244,129,163,172,84,84,49,48,53,52,57,53,55,84,244,129,163,173,84,84,49,48,53,52,57,53,56,84,244,129,163,174,84,84,49,48,53,52,57,53,57,84,244,129,163,175,84,84,49,48,53,52,57,54,48,84,244,129,163,176,84,84,49,48,53,52,57,54,49,84,244,129,163,177,84,84,49,48,53,52,57,54,50,84,244,129,163,178,84,84,49,48,53,52,57,54,51,84,244,129,163,179,84,84,49,48,53,52,57,54,52,84,244,129,163,180,84,84,49,48,53,52,57,54,53,84,244,129,163,181,84,84,49,48,53,52,57,54,54,84,244,129,163,182,84,84,49,48,53,52,57,54,55,84,244,129,163,183,84,84,49,48,53,52,57,54,56,84,244,129,163,184,84,84,49,48,53,52,57,54,57,84,244,129,163,185,84,84,49,48,53,52,57,55,48,84,244,129,163,186,84,84,49,48,53,52,57,55,49,84,244,129,163,187,84,84,49,48,53,52,57,55,50,84,244,129,163,188,84,84,49,48,53,52,57,55,51,84,244,129,163,189,84,84,49,48,53,52,57,55,52,84,244,129,163,190,84,84,49,48,53,52,57,55,53,84,244,129,163,191,84,84,49,48,53,52,57,55,54,84,244,129,164,128,84,84,49,48,53,52,57,55,55,84,244,129,164,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22786 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22786_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22786_s.txt", Encoding.UTF8);

    public Test22786() : base(recordedRequest, recordedResponse, "accounts8d43a0490823d21")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a0490823d21",
                        container: "containers0bd48f2ce8374f57b3f3c61b5595b35b",
                        blob: "Blobab0bfaa75e7a4e03b3daa2f9a1e40aae",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20102 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20102_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20102_s.txt", Encoding.UTF8);

    public Test20102() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers02552a2396c44255a61dd19b9714b3b6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,49,54,56,49,54,84,243,184,143,176,84,84,49,48,49,54,56,49,55,84,243,184,143,177,84,84,49,48,49,54,56,49,56,84,243,184,143,178,84,84,49,48,49,54,56,49,57,84,243,184,143,179,84,84,49,48,49,54,56,50,48,84,243,184,143,180,84,84,49,48,49,54,56,50,49,84,243,184,143,181,84,84,49,48,49,54,56,50,50,84,243,184,143,182,84,84,49,48,49,54,56,50,51,84,243,184,143,183,84,84,49,48,49,54,56,50,52,84,243,184,143,184,84,84,49,48,49,54,56,50,53,84,243,184,143,185,84,84,49,48,49,54,56,50,54,84,243,184,143,186,84,84,49,48,49,54,56,50,55,84,243,184,143,187,84,84,49,48,49,54,56,50,56,84,243,184,143,188,84,84,49,48,49,54,56,50,57,84,243,184,143,189,84,84,49,48,49,54,56,51,48,84,243,184,143,190,84,84,49,48,49,54,56,51,49,84,243,184,143,191,84,84,49,48,49,54,56,51,50,84,243,184,144,128,84,84,49,48,49,54,56,51,51,84,243,184,144,129,84,84,49,48,49,54,56,51,52,84,243,184,144,130,84,84,49,48,49,54,56,51,53,84,243,184,144,131,84,84,49,48,49,54,56,51,54,84,243,184,144,132,84,84,49,48,49,54,56,51,55,84,243,184,144,133,84,84,49,48,49,54,56,51,56,84,243,184,144,134,84,84,49,48,49,54,56,51,57,84,243,184,144,135,84,84,49,48,49,54,56,52,48,84,243,184,144,136,84,84,49,48,49,54,56,52,49,84,243,184,144,137,84,84,49,48,49,54,56,52,50,84,243,184,144,138,84,84,49,48,49,54,56,52,51,84,243,184,144,139,84,84,49,48,49,54,56,52,52,84,243,184,144,140,84,84,49,48,49,54,56,52,53,84,243,184,144,141,84,84,49,48,49,54,56,52,54,84,243,184,144,142,84,84,49,48,49,54,56,52,55,84,243,184,144,143,84,84,49,48,49,54,56,52,56,84,243,184,144,144,84,84,49,48,49,54,56,52,57,84,243,184,144,145,84,84,49,48,49,54,56,53,48,84,243,184,144,146,84,84,49,48,49,54,56,53,49,84,243,184,144,147,84,84,49,48,49,54,56,53,50,84,243,184,144,148,84,84,49,48,49,54,56,53,51,84,243,184,144,149,84,84,49,48,49,54,56,53,52,84,243,184,144,150,84,84,49,48,49,54,56,53,53,84,243,184,144,151,84,84,49,48,49,54,56,53,54,84,243,184,144,152,84,84,49,48,49,54,56,53,55,84,243,184,144,153,84,84,49,48,49,54,56,53,56,84,243,184,144,154,84,84,49,48,49,54,56,53,57,84,243,184,144,155,84,84,49,48,49,54,56,54,48,84,243,184,144,156,84,84,49,48,49,54,56,54,49,84,243,184,144,157,84,84,49,48,49,54,56,54,50,84,243,184,144,158,84,84,49,48,49,54,56,54,51,84,243,184,144,159,84,84,49,48,49,54,56,54,52,84,243,184,144,160,84,84,49,48,49,54,56,54,53,84,243,184,144,161,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21028 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21028_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21028_s.txt", Encoding.UTF8);

    public Test21028() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersd35ea9f156764511b97173ebc769448f",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,49,48,48,48,84,244,143,143,152,84,84,49,49,49,49,48,48,49,84,244,143,143,153,84,84,49,49,49,49,48,48,50,84,244,143,143,154,84,84,49,49,49,49,48,48,51,84,244,143,143,155,84,84,49,49,49,49,48,48,52,84,244,143,143,156,84,84,49,49,49,49,48,48,53,84,244,143,143,157,84,84,49,49,49,49,48,48,54,84,244,143,143,158,84,84,49,49,49,49,48,48,55,84,244,143,143,159,84,84,49,49,49,49,48,48,56,84,244,143,143,160,84,84,49,49,49,49,48,48,57,84,244,143,143,161,84,84,49,49,49,49,48,49,48,84,244,143,143,162,84,84,49,49,49,49,48,49,49,84,244,143,143,163,84,84,49,49,49,49,48,49,50,84,244,143,143,164,84,84,49,49,49,49,48,49,51,84,244,143,143,165,84,84,49,49,49,49,48,49,52,84,244,143,143,166,84,84,49,49,49,49,48,49,53,84,244,143,143,167,84,84,49,49,49,49,48,49,54,84,244,143,143,168,84,84,49,49,49,49,48,49,55,84,244,143,143,169,84,84,49,49,49,49,48,49,56,84,244,143,143,170,84,84,49,49,49,49,48,49,57,84,244,143,143,171,84,84,49,49,49,49,48,50,48,84,244,143,143,172,84,84,49,49,49,49,48,50,49,84,244,143,143,173,84,84,49,49,49,49,48,50,50,84,244,143,143,174,84,84,49,49,49,49,48,50,51,84,244,143,143,175,84,84,49,49,49,49,48,50,52,84,244,143,143,176,84,84,49,49,49,49,48,50,53,84,244,143,143,177,84,84,49,49,49,49,48,50,54,84,244,143,143,178,84,84,49,49,49,49,48,50,55,84,244,143,143,179,84,84,49,49,49,49,48,50,56,84,244,143,143,180,84,84,49,49,49,49,48,50,57,84,244,143,143,181,84,84,49,49,49,49,48,51,48,84,244,143,143,182,84,84,49,49,49,49,48,51,49,84,244,143,143,183,84,84,49,49,49,49,48,51,50,84,244,143,143,184,84,84,49,49,49,49,48,51,51,84,244,143,143,185,84,84,49,49,49,49,48,51,52,84,244,143,143,186,84,84,49,49,49,49,48,51,53,84,244,143,143,187,84,84,49,49,49,49,48,51,54,84,244,143,143,188,84,84,49,49,49,49,48,51,55,84,244,143,143,189,84,84,49,49,49,49,48,51,56,84,244,143,143,190,84,84,49,49,49,49,48,51,57,84,244,143,143,191,84,84,49,49,49,49,48,52,48,84,244,143,144,128,84,84,49,49,49,49,48,52,49,84,244,143,144,129,84,84,49,49,49,49,48,52,50,84,244,143,144,130,84,84,49,49,49,49,48,52,51,84,244,143,144,131,84,84,49,49,49,49,48,52,52,84,244,143,144,132,84,84,49,49,49,49,48,52,53,84,244,143,144,133,84,84,49,49,49,49,48,52,54,84,244,143,144,134,84,84,49,49,49,49,48,52,55,84,244,143,144,135,84,84,49,49,49,49,48,52,56,84,244,143,144,136,84,84,49,49,49,49,48,52,57,84,244,143,144,137,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20743 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20743_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20743_s.txt", Encoding.UTF8);

    public Test20743() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersc5ae22b09f3f4a3eaff829adc5876203",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,57,52,53,49,53,84,244,139,141,179,84,84,49,48,57,52,53,49,54,84,244,139,141,180,84,84,49,48,57,52,53,49,55,84,244,139,141,181,84,84,49,48,57,52,53,49,56,84,244,139,141,182,84,84,49,48,57,52,53,49,57,84,244,139,141,183,84,84,49,48,57,52,53,50,48,84,244,139,141,184,84,84,49,48,57,52,53,50,49,84,244,139,141,185,84,84,49,48,57,52,53,50,50,84,244,139,141,186,84,84,49,48,57,52,53,50,51,84,244,139,141,187,84,84,49,48,57,52,53,50,52,84,244,139,141,188,84,84,49,48,57,52,53,50,53,84,244,139,141,189,84,84,49,48,57,52,53,50,54,84,244,139,141,190,84,84,49,48,57,52,53,50,55,84,244,139,141,191,84,84,49,48,57,52,53,50,57,84,244,139,142,129,84,84,49,48,57,52,53,52,49,84,244,139,142,141,84,84,49,48,57,52,53,52,51,84,244,139,142,143,84,84,49,48,57,52,53,52,52,84,244,139,142,144,84,84,49,48,57,52,53,53,55,84,244,139,142,157,84,84,49,48,57,52,53,57,50,84,244,139,143,128,84,84,49,48,57,52,53,57,51,84,244,139,143,129,84,84,49,48,57,52,53,57,52,84,244,139,143,130,84,84,49,48,57,52,53,57,53,84,244,139,143,131,84,84,49,48,57,52,53,57,54,84,244,139,143,132,84,84,49,48,57,52,53,57,55,84,244,139,143,133,84,84,49,48,57,52,53,57,56,84,244,139,143,134,84,84,49,48,57,52,53,57,57,84,244,139,143,135,84,84,49,48,57,52,54,48,48,84,244,139,143,136,84,84,49,48,57,52,54,48,49,84,244,139,143,137,84,84,49,48,57,52,54,48,50,84,244,139,143,138,84,84,49,48,57,52,54,48,51,84,244,139,143,139,84,84,49,48,57,52,54,48,52,84,244,139,143,140,84,84,49,48,57,52,54,48,53,84,244,139,143,141,84,84,49,48,57,52,54,48,54,84,244,139,143,142,84,84,49,48,57,52,54,48,55,84,244,139,143,143,84,84,49,48,57,52,54,48,56,84,244,139,143,144,84,84,49,48,57,52,54,48,57,84,244,139,143,145,84,84,49,48,57,52,54,49,48,84,244,139,143,146,84,84,49,48,57,52,54,49,49,84,244,139,143,147,84,84,49,48,57,52,54,49,50,84,244,139,143,148,84,84,49,48,57,52,54,49,51,84,244,139,143,149,84,84,49,48,57,52,54,49,52,84,244,139,143,150,84,84,49,48,57,52,54,49,53,84,244,139,143,151,84,84,49,48,57,52,54,49,54,84,244,139,143,152,84,84,49,48,57,52,54,49,55,84,244,139,143,153,84,84,49,48,57,52,54,49,56,84,244,139,143,154,84,84,49,48,57,52,54,49,57,84,244,139,143,155,84,84,49,48,57,52,54,50,48,84,244,139,143,156,84,84,49,48,57,52,54,50,49,84,244,139,143,157,84,84,49,48,57,52,54,50,50,84,244,139,143,158,84,84,49,48,57,52,54,50,51,84,244,139,143,159,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22310 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22310_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22310_s.txt", Encoding.UTF8);

    public Test22310() : base(recordedRequest, recordedResponse, "accounts8d43a0488d32c58")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a0488d32c58",
                        container: "containersaeffac2a32f1453eaeb1e0da90f5b54c",
                        blob: "Blob7bf6a6b4cb414b38ba66159d652339c4",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 704000,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22787 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22787_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22787_s.txt", Encoding.UTF8);

    public Test22787() : base(recordedRequest, recordedResponse, "accounts8d43a0490823d21")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a0490823d21",
                        container: "containers0bd48f2ce8374f57b3f3c61b5595b35b",
                        blob: "Blobffaa9a126b664bbe930a52e500eb2651",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20614 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20614_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20614_s.txt", Encoding.UTF8);

    public Test20614() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers5f5b393ed8e742338d6031fb2e225092",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,55,52,49,49,57,84,244,134,143,135,84,84,49,48,55,52,49,50,48,84,244,134,143,136,84,84,49,48,55,52,49,50,49,84,244,134,143,137,84,84,49,48,55,52,49,50,50,84,244,134,143,138,84,84,49,48,55,52,49,50,51,84,244,134,143,139,84,84,49,48,55,52,49,50,52,84,244,134,143,140,84,84,49,48,55,52,49,50,53,84,244,134,143,141,84,84,49,48,55,52,49,50,54,84,244,134,143,142,84,84,49,48,55,52,49,50,55,84,244,134,143,143,84,84,49,48,55,52,49,50,56,84,244,134,143,144,84,84,49,48,55,52,49,50,57,84,244,134,143,145,84,84,49,48,55,52,49,51,48,84,244,134,143,146,84,84,49,48,55,52,49,51,49,84,244,134,143,147,84,84,49,48,55,52,49,51,50,84,244,134,143,148,84,84,49,48,55,52,49,51,51,84,244,134,143,149,84,84,49,48,55,52,49,51,52,84,244,134,143,150,84,84,49,48,55,52,49,51,53,84,244,134,143,151,84,84,49,48,55,52,49,51,54,84,244,134,143,152,84,84,49,48,55,52,49,51,55,84,244,134,143,153,84,84,49,48,55,52,49,51,56,84,244,134,143,154,84,84,49,48,55,52,49,51,57,84,244,134,143,155,84,84,49,48,55,52,49,52,48,84,244,134,143,156,84,84,49,48,55,52,49,52,49,84,244,134,143,157,84,84,49,48,55,52,49,52,50,84,244,134,143,158,84,84,49,48,55,52,49,52,51,84,244,134,143,159,84,84,49,48,55,52,49,52,52,84,244,134,143,160,84,84,49,48,55,52,49,52,53,84,244,134,143,161,84,84,49,48,55,52,49,52,54,84,244,134,143,162,84,84,49,48,55,52,49,52,55,84,244,134,143,163,84,84,49,48,55,52,49,52,56,84,244,134,143,164,84,84,49,48,55,52,49,52,57,84,244,134,143,165,84,84,49,48,55,52,49,53,48,84,244,134,143,166,84,84,49,48,55,52,49,53,49,84,244,134,143,167,84,84,49,48,55,52,49,53,50,84,244,134,143,168,84,84,49,48,55,52,49,53,51,84,244,134,143,169,84,84,49,48,55,52,49,53,52,84,244,134,143,170,84,84,49,48,55,52,49,53,53,84,244,134,143,171,84,84,49,48,55,52,49,53,54,84,244,134,143,172,84,84,49,48,55,52,49,53,55,84,244,134,143,173,84,84,49,48,55,52,49,53,56,84,244,134,143,174,84,84,49,48,55,52,49,53,57,84,244,134,143,175,84,84,49,48,55,52,49,54,48,84,244,134,143,176,84,84,49,48,55,52,49,54,49,84,244,134,143,177,84,84,49,48,55,52,49,54,50,84,244,134,143,178,84,84,49,48,55,52,49,54,51,84,244,134,143,179,84,84,49,48,55,52,49,54,52,84,244,134,143,180,84,84,49,48,55,52,49,54,53,84,244,134,143,181,84,84,49,48,55,52,49,54,54,84,244,134,143,182,84,84,49,48,55,52,49,54,55,84,244,134,143,183,84,84,49,48,55,52,49,54,56,84,244,134,143,184,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20290 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20290_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20290_s.txt", Encoding.UTF8);

    public Test20290() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers712afb35b54344eb8fa90647f752cd92",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,52,54,51,52,49,84,243,191,157,133,84,84,49,48,52,54,51,52,50,84,243,191,157,134,84,84,49,48,52,54,51,52,51,84,243,191,157,135,84,84,49,48,52,54,51,52,52,84,243,191,157,136,84,84,49,48,52,54,51,52,53,84,243,191,157,137,84,84,49,48,52,54,51,52,54,84,243,191,157,138,84,84,49,48,52,54,51,52,55,84,243,191,157,139,84,84,49,48,52,54,51,52,56,84,243,191,157,140,84,84,49,48,52,54,51,52,57,84,243,191,157,141,84,84,49,48,52,54,51,53,48,84,243,191,157,142,84,84,49,48,52,54,51,53,49,84,243,191,157,143,84,84,49,48,52,54,51,53,50,84,243,191,157,144,84,84,49,48,52,54,51,53,51,84,243,191,157,145,84,84,49,48,52,54,51,53,52,84,243,191,157,146,84,84,49,48,52,54,51,53,53,84,243,191,157,147,84,84,49,48,52,54,51,53,54,84,243,191,157,148,84,84,49,48,52,54,51,53,55,84,243,191,157,149,84,84,49,48,52,54,51,53,56,84,243,191,157,150,84,84,49,48,52,54,51,53,57,84,243,191,157,151,84,84,49,48,52,54,51,54,48,84,243,191,157,152,84,84,49,48,52,54,51,54,49,84,243,191,157,153,84,84,49,48,52,54,51,54,50,84,243,191,157,154,84,84,49,48,52,54,51,54,51,84,243,191,157,155,84,84,49,48,52,54,51,54,52,84,243,191,157,156,84,84,49,48,52,54,51,54,53,84,243,191,157,157,84,84,49,48,52,54,51,54,54,84,243,191,157,158,84,84,49,48,52,54,51,54,55,84,243,191,157,159,84,84,49,48,52,54,51,54,56,84,243,191,157,160,84,84,49,48,52,54,51,54,57,84,243,191,157,161,84,84,49,48,52,54,51,55,48,84,243,191,157,162,84,84,49,48,52,54,51,55,49,84,243,191,157,163,84,84,49,48,52,54,51,55,50,84,243,191,157,164,84,84,49,48,52,54,51,55,51,84,243,191,157,165,84,84,49,48,52,54,51,55,52,84,243,191,157,166,84,84,49,48,52,54,51,55,53,84,243,191,157,167,84,84,49,48,52,54,51,55,54,84,243,191,157,168,84,84,49,48,52,54,51,55,55,84,243,191,157,169,84,84,49,48,52,54,51,55,56,84,243,191,157,170,84,84,49,48,52,54,51,55,57,84,243,191,157,171,84,84,49,48,52,54,51,56,48,84,243,191,157,172,84,84,49,48,52,54,51,56,49,84,243,191,157,173,84,84,49,48,52,54,51,56,50,84,243,191,157,174,84,84,49,48,52,54,51,56,51,84,243,191,157,175,84,84,49,48,52,54,51,56,52,84,243,191,157,176,84,84,49,48,52,54,51,56,53,84,243,191,157,177,84,84,49,48,52,54,51,56,54,84,243,191,157,178,84,84,49,48,52,54,51,56,55,84,243,191,157,179,84,84,49,48,52,54,51,56,56,84,243,191,157,180,84,84,49,48,52,54,51,56,57,84,243,191,157,181,84,84,49,48,52,54,51,57,48,84,243,191,157,182,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20580 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20580_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20580_s.txt", Encoding.UTF8);

    public Test20580() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers2997cf743a0f481c9f696984938aa742",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,54,57,49,56,48,84,244,133,129,188,84,84,49,48,54,57,49,56,49,84,244,133,129,189,84,84,49,48,54,57,49,56,50,84,244,133,129,190,84,84,49,48,54,57,49,56,51,84,244,133,129,191,84,84,49,48,54,57,49,56,53,84,244,133,130,129,84,84,49,48,54,57,49,57,55,84,244,133,130,141,84,84,49,48,54,57,49,57,57,84,244,133,130,143,84,84,49,48,54,57,50,48,48,84,244,133,130,144,84,84,49,48,54,57,50,49,51,84,244,133,130,157,84,84,49,48,54,57,50,52,57,84,244,133,131,129,84,84,49,48,54,57,50,54,49,84,244,133,131,141,84,84,49,48,54,57,50,54,51,84,244,133,131,143,84,84,49,48,54,57,50,54,52,84,244,133,131,144,84,84,49,48,54,57,50,55,55,84,244,133,131,157,84,84,49,48,54,57,51,49,51,84,244,133,132,129,84,84,49,48,54,57,51,50,53,84,244,133,132,141,84,84,49,48,54,57,51,50,55,84,244,133,132,143,84,84,49,48,54,57,51,50,56,84,244,133,132,144,84,84,49,48,54,57,51,52,49,84,244,133,132,157,84,84,49,48,54,57,51,55,55,84,244,133,133,129,84,84,49,48,54,57,51,56,57,84,244,133,133,141,84,84,49,48,54,57,51,57,49,84,244,133,133,143,84,84,49,48,54,57,51,57,50,84,244,133,133,144,84,84,49,48,54,57,52,48,53,84,244,133,133,157,84,84,49,48,54,57,52,52,49,84,244,133,134,129,84,84,49,48,54,57,52,53,51,84,244,133,134,141,84,84,49,48,54,57,52,53,53,84,244,133,134,143,84,84,49,48,54,57,52,53,54,84,244,133,134,144,84,84,49,48,54,57,52,54,57,84,244,133,134,157,84,84,49,48,54,57,53,48,53,84,244,133,135,129,84,84,49,48,54,57,53,49,55,84,244,133,135,141,84,84,49,48,54,57,53,49,57,84,244,133,135,143,84,84,49,48,54,57,53,50,48,84,244,133,135,144,84,84,49,48,54,57,53,51,51,84,244,133,135,157,84,84,49,48,54,57,53,54,57,84,244,133,136,129,84,84,49,48,54,57,53,56,49,84,244,133,136,141,84,84,49,48,54,57,53,56,51,84,244,133,136,143,84,84,49,48,54,57,53,56,52,84,244,133,136,144,84,84,49,48,54,57,53,57,55,84,244,133,136,157,84,84,49,48,54,57,54,51,51,84,244,133,137,129,84,84,49,48,54,57,54,52,53,84,244,133,137,141,84,84,49,48,54,57,54,52,55,84,244,133,137,143,84,84,49,48,54,57,54,52,56,84,244,133,137,144,84,84,49,48,54,57,54,54,49,84,244,133,137,157,84,84,49,48,54,57,54,57,55,84,244,133,138,129,84,84,49,48,54,57,55,48,57,84,244,133,138,141,84,84,49,48,54,57,55,49,49,84,244,133,138,143,84,84,49,48,54,57,55,49,50,84,244,133,138,144,84,84,49,48,54,57,55,50,53,84,244,133,138,157,84,84,49,48,54,57,55,54,49,84,244,133,139,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19882 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19882_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19882_s.txt", Encoding.UTF8);

    public Test19882() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers7032abc4111d4702bce9d36696a0a648",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,56,51,49,49,48,84,243,176,129,134,84,84,57,56,51,49,49,49,84,243,176,129,135,84,84,57,56,51,49,49,50,84,243,176,129,136,84,84,57,56,51,49,49,51,84,243,176,129,137,84,84,57,56,51,49,49,52,84,243,176,129,138,84,84,57,56,51,49,49,53,84,243,176,129,139,84,84,57,56,51,49,49,54,84,243,176,129,140,84,84,57,56,51,49,49,55,84,243,176,129,141,84,84,57,56,51,49,49,56,84,243,176,129,142,84,84,57,56,51,49,49,57,84,243,176,129,143,84,84,57,56,51,49,50,48,84,243,176,129,144,84,84,57,56,51,49,50,49,84,243,176,129,145,84,84,57,56,51,49,50,50,84,243,176,129,146,84,84,57,56,51,49,50,51,84,243,176,129,147,84,84,57,56,51,49,50,52,84,243,176,129,148,84,84,57,56,51,49,50,53,84,243,176,129,149,84,84,57,56,51,49,50,54,84,243,176,129,150,84,84,57,56,51,49,50,55,84,243,176,129,151,84,84,57,56,51,49,50,56,84,243,176,129,152,84,84,57,56,51,49,50,57,84,243,176,129,153,84,84,57,56,51,49,51,48,84,243,176,129,154,84,84,57,56,51,49,51,49,84,243,176,129,155,84,84,57,56,51,49,51,50,84,243,176,129,156,84,84,57,56,51,49,51,51,84,243,176,129,157,84,84,57,56,51,49,51,52,84,243,176,129,158,84,84,57,56,51,49,51,53,84,243,176,129,159,84,84,57,56,51,49,51,54,84,243,176,129,160,84,84,57,56,51,49,51,55,84,243,176,129,161,84,84,57,56,51,49,51,56,84,243,176,129,162,84,84,57,56,51,49,51,57,84,243,176,129,163,84,84,57,56,51,49,52,48,84,243,176,129,164,84,84,57,56,51,49,52,49,84,243,176,129,165,84,84,57,56,51,49,52,50,84,243,176,129,166,84,84,57,56,51,49,52,51,84,243,176,129,167,84,84,57,56,51,49,52,52,84,243,176,129,168,84,84,57,56,51,49,52,53,84,243,176,129,169,84,84,57,56,51,49,52,54,84,243,176,129,170,84,84,57,56,51,49,52,55,84,243,176,129,171,84,84,57,56,51,49,52,56,84,243,176,129,172,84,84,57,56,51,49,52,57,84,243,176,129,173,84,84,57,56,51,49,53,48,84,243,176,129,174,84,84,57,56,51,49,53,49,84,243,176,129,175,84,84,57,56,51,49,53,50,84,243,176,129,176,84,84,57,56,51,49,53,51,84,243,176,129,177,84,84,57,56,51,49,53,52,84,243,176,129,178,84,84,57,56,51,49,53,53,84,243,176,129,179,84,84,57,56,51,49,53,54,84,243,176,129,180,84,84,57,56,51,49,53,55,84,243,176,129,181,84,84,57,56,51,49,53,56,84,243,176,129,182,84,84,57,56,51,49,53,57,84,243,176,129,183,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22663 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22663_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22663_s.txt", Encoding.UTF8);

    public Test22663() : base(recordedRequest, recordedResponse, "accounts8d43a048eafeaa2")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048eafeaa2",
                        container: "containersfda91612c94345c5b9bbebd2af435187",
                        blob: "Blob07202b3345ac4c22b669ea6de0e14bfc",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20163 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20163_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20163_s.txt", Encoding.UTF8);

    public Test20163() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers4f3362aed9424bd2bfac6751ee820ab9",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,50,54,49,50,53,84,243,186,161,141,84,84,49,48,50,54,49,50,55,84,243,186,161,143,84,84,49,48,50,54,49,50,56,84,243,186,161,144,84,84,49,48,50,54,49,52,49,84,243,186,161,157,84,84,49,48,50,54,49,55,55,84,243,186,162,129,84,84,49,48,50,54,49,56,57,84,243,186,162,141,84,84,49,48,50,54,49,57,49,84,243,186,162,143,84,84,49,48,50,54,49,57,50,84,243,186,162,144,84,84,49,48,50,54,50,48,53,84,243,186,162,157,84,84,49,48,50,54,50,52,49,84,243,186,163,129,84,84,49,48,50,54,50,53,51,84,243,186,163,141,84,84,49,48,50,54,50,53,53,84,243,186,163,143,84,84,49,48,50,54,50,53,54,84,243,186,163,144,84,84,49,48,50,54,50,54,57,84,243,186,163,157,84,84,49,48,50,54,51,48,53,84,243,186,164,129,84,84,49,48,50,54,51,49,55,84,243,186,164,141,84,84,49,48,50,54,51,49,57,84,243,186,164,143,84,84,49,48,50,54,51,50,48,84,243,186,164,144,84,84,49,48,50,54,51,51,51,84,243,186,164,157,84,84,49,48,50,54,51,54,57,84,243,186,165,129,84,84,49,48,50,54,51,56,49,84,243,186,165,141,84,84,49,48,50,54,51,56,51,84,243,186,165,143,84,84,49,48,50,54,51,56,52,84,243,186,165,144,84,84,49,48,50,54,51,57,55,84,243,186,165,157,84,84,49,48,50,54,52,51,51,84,243,186,166,129,84,84,49,48,50,54,52,52,53,84,243,186,166,141,84,84,49,48,50,54,52,52,55,84,243,186,166,143,84,84,49,48,50,54,52,52,56,84,243,186,166,144,84,84,49,48,50,54,52,54,49,84,243,186,166,157,84,84,49,48,50,54,52,57,55,84,243,186,167,129,84,84,49,48,50,54,53,48,57,84,243,186,167,141,84,84,49,48,50,54,53,49,49,84,243,186,167,143,84,84,49,48,50,54,53,49,50,84,243,186,167,144,84,84,49,48,50,54,53,50,53,84,243,186,167,157,84,84,49,48,50,54,53,54,49,84,243,186,168,129,84,84,49,48,50,54,53,55,51,84,243,186,168,141,84,84,49,48,50,54,53,55,53,84,243,186,168,143,84,84,49,48,50,54,53,55,54,84,243,186,168,144,84,84,49,48,50,54,53,56,57,84,243,186,168,157,84,84,49,48,50,54,54,50,53,84,243,186,169,129,84,84,49,48,50,54,54,51,55,84,243,186,169,141,84,84,49,48,50,54,54,51,57,84,243,186,169,143,84,84,49,48,50,54,54,52,48,84,243,186,169,144,84,84,49,48,50,54,54,53,51,84,243,186,169,157,84,84,49,48,50,54,54,56,57,84,243,186,170,129,84,84,49,48,50,54,55,48,49,84,243,186,170,141,84,84,49,48,50,54,55,48,51,84,243,186,170,143,84,84,49,48,50,54,55,48,52,84,243,186,170,144,84,84,49,48,50,54,55,49,55,84,243,186,170,157,84,84,49,48,50,54,55,53,51,84,243,186,171,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21090 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21090_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21090_s.txt", Encoding.UTF8);

    public Test21090() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers79aa3dd90e344ebe9466f3cb0c56378a",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,50,52,53,48,84,244,143,166,130,84,84,49,49,49,50,52,53,49,84,244,143,166,131,84,84,49,49,49,50,52,53,50,84,244,143,166,132,84,84,49,49,49,50,52,53,51,84,244,143,166,133,84,84,49,49,49,50,52,53,52,84,244,143,166,134,84,84,49,49,49,50,52,53,53,84,244,143,166,135,84,84,49,49,49,50,52,53,54,84,244,143,166,136,84,84,49,49,49,50,52,53,55,84,244,143,166,137,84,84,49,49,49,50,52,53,56,84,244,143,166,138,84,84,49,49,49,50,52,53,57,84,244,143,166,139,84,84,49,49,49,50,52,54,48,84,244,143,166,140,84,84,49,49,49,50,52,54,49,84,244,143,166,141,84,84,49,49,49,50,52,54,50,84,244,143,166,142,84,84,49,49,49,50,52,54,51,84,244,143,166,143,84,84,49,49,49,50,52,54,52,84,244,143,166,144,84,84,49,49,49,50,52,54,53,84,244,143,166,145,84,84,49,49,49,50,52,54,54,84,244,143,166,146,84,84,49,49,49,50,52,54,55,84,244,143,166,147,84,84,49,49,49,50,52,54,56,84,244,143,166,148,84,84,49,49,49,50,52,54,57,84,244,143,166,149,84,84,49,49,49,50,52,55,48,84,244,143,166,150,84,84,49,49,49,50,52,55,49,84,244,143,166,151,84,84,49,49,49,50,52,55,50,84,244,143,166,152,84,84,49,49,49,50,52,55,51,84,244,143,166,153,84,84,49,49,49,50,52,55,52,84,244,143,166,154,84,84,49,49,49,50,52,55,53,84,244,143,166,155,84,84,49,49,49,50,52,55,54,84,244,143,166,156,84,84,49,49,49,50,52,55,55,84,244,143,166,157,84,84,49,49,49,50,52,55,56,84,244,143,166,158,84,84,49,49,49,50,52,55,57,84,244,143,166,159,84,84,49,49,49,50,52,56,48,84,244,143,166,160,84,84,49,49,49,50,52,56,49,84,244,143,166,161,84,84,49,49,49,50,52,56,50,84,244,143,166,162,84,84,49,49,49,50,52,56,51,84,244,143,166,163,84,84,49,49,49,50,52,56,52,84,244,143,166,164,84,84,49,49,49,50,52,56,53,84,244,143,166,165,84,84,49,49,49,50,52,56,54,84,244,143,166,166,84,84,49,49,49,50,52,56,55,84,244,143,166,167,84,84,49,49,49,50,52,56,56,84,244,143,166,168,84,84,49,49,49,50,52,56,57,84,244,143,166,169,84,84,49,49,49,50,52,57,48,84,244,143,166,170,84,84,49,49,49,50,52,57,49,84,244,143,166,171,84,84,49,49,49,50,52,57,50,84,244,143,166,172,84,84,49,49,49,50,52,57,51,84,244,143,166,173,84,84,49,49,49,50,52,57,52,84,244,143,166,174,84,84,49,49,49,50,52,57,53,84,244,143,166,175,84,84,49,49,49,50,52,57,54,84,244,143,166,176,84,84,49,49,49,50,52,57,55,84,244,143,166,177,84,84,49,49,49,50,52,57,56,84,244,143,166,178,84,84,49,49,49,50,52,57,57,84,244,143,166,179,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20517 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20517_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20517_s.txt", Encoding.UTF8);

    public Test20517() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers3bfa703d74a140e499ecce701b962b8c",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,56,56,56,49,84,244,130,161,129,84,84,49,48,53,56,56,57,51,84,244,130,161,141,84,84,49,48,53,56,56,57,53,84,244,130,161,143,84,84,49,48,53,56,56,57,54,84,244,130,161,144,84,84,49,48,53,56,57,48,57,84,244,130,161,157,84,84,49,48,53,56,57,52,53,84,244,130,162,129,84,84,49,48,53,56,57,53,55,84,244,130,162,141,84,84,49,48,53,56,57,53,57,84,244,130,162,143,84,84,49,48,53,56,57,54,48,84,244,130,162,144,84,84,49,48,53,56,57,55,51,84,244,130,162,157,84,84,49,48,53,57,48,48,57,84,244,130,163,129,84,84,49,48,53,57,48,50,49,84,244,130,163,141,84,84,49,48,53,57,48,50,51,84,244,130,163,143,84,84,49,48,53,57,48,50,52,84,244,130,163,144,84,84,49,48,53,57,48,51,55,84,244,130,163,157,84,84,49,48,53,57,48,55,51,84,244,130,164,129,84,84,49,48,53,57,48,56,53,84,244,130,164,141,84,84,49,48,53,57,48,56,55,84,244,130,164,143,84,84,49,48,53,57,48,56,56,84,244,130,164,144,84,84,49,48,53,57,49,48,49,84,244,130,164,157,84,84,49,48,53,57,49,51,55,84,244,130,165,129,84,84,49,48,53,57,49,52,57,84,244,130,165,141,84,84,49,48,53,57,49,53,49,84,244,130,165,143,84,84,49,48,53,57,49,53,50,84,244,130,165,144,84,84,49,48,53,57,49,54,53,84,244,130,165,157,84,84,49,48,53,57,50,48,49,84,244,130,166,129,84,84,49,48,53,57,50,49,51,84,244,130,166,141,84,84,49,48,53,57,50,49,53,84,244,130,166,143,84,84,49,48,53,57,50,49,54,84,244,130,166,144,84,84,49,48,53,57,50,50,57,84,244,130,166,157,84,84,49,48,53,57,50,54,53,84,244,130,167,129,84,84,49,48,53,57,50,55,55,84,244,130,167,141,84,84,49,48,53,57,50,55,57,84,244,130,167,143,84,84,49,48,53,57,50,56,48,84,244,130,167,144,84,84,49,48,53,57,50,57,51,84,244,130,167,157,84,84,49,48,53,57,51,50,57,84,244,130,168,129,84,84,49,48,53,57,51,52,49,84,244,130,168,141,84,84,49,48,53,57,51,52,51,84,244,130,168,143,84,84,49,48,53,57,51,52,52,84,244,130,168,144,84,84,49,48,53,57,51,53,55,84,244,130,168,157,84,84,49,48,53,57,51,57,51,84,244,130,169,129,84,84,49,48,53,57,52,48,53,84,244,130,169,141,84,84,49,48,53,57,52,48,55,84,244,130,169,143,84,84,49,48,53,57,52,48,56,84,244,130,169,144,84,84,49,48,53,57,52,50,49,84,244,130,169,157,84,84,49,48,53,57,52,53,55,84,244,130,170,129,84,84,49,48,53,57,52,54,57,84,244,130,170,141,84,84,49,48,53,57,52,55,49,84,244,130,170,143,84,84,49,48,53,57,52,55,50,84,244,130,170,144,84,84,49,48,53,57,52,56,53,84,244,130,170,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20104 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20104_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20104_s.txt", Encoding.UTF8);

    public Test20104() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers02552a2396c44255a61dd19b9714b3b6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,49,54,56,54,54,84,243,184,144,162,84,84,49,48,49,54,56,54,55,84,243,184,144,163,84,84,49,48,49,54,56,54,56,84,243,184,144,164,84,84,49,48,49,54,56,54,57,84,243,184,144,165,84,84,49,48,49,54,56,55,48,84,243,184,144,166,84,84,49,48,49,54,56,55,49,84,243,184,144,167,84,84,49,48,49,54,56,55,50,84,243,184,144,168,84,84,49,48,49,54,56,55,51,84,243,184,144,169,84,84,49,48,49,54,56,55,52,84,243,184,144,170,84,84,49,48,49,54,56,55,53,84,243,184,144,171,84,84,49,48,49,54,56,55,54,84,243,184,144,172,84,84,49,48,49,54,56,55,55,84,243,184,144,173,84,84,49,48,49,54,56,55,56,84,243,184,144,174,84,84,49,48,49,54,56,55,57,84,243,184,144,175,84,84,49,48,49,54,56,56,48,84,243,184,144,176,84,84,49,48,49,54,56,56,49,84,243,184,144,177,84,84,49,48,49,54,56,56,50,84,243,184,144,178,84,84,49,48,49,54,56,56,51,84,243,184,144,179,84,84,49,48,49,54,56,56,52,84,243,184,144,180,84,84,49,48,49,54,56,56,53,84,243,184,144,181,84,84,49,48,49,54,56,56,54,84,243,184,144,182,84,84,49,48,49,54,56,56,55,84,243,184,144,183,84,84,49,48,49,54,56,56,56,84,243,184,144,184,84,84,49,48,49,54,56,56,57,84,243,184,144,185,84,84,49,48,49,54,56,57,48,84,243,184,144,186,84,84,49,48,49,54,56,57,49,84,243,184,144,187,84,84,49,48,49,54,56,57,50,84,243,184,144,188,84,84,49,48,49,54,56,57,51,84,243,184,144,189,84,84,49,48,49,54,56,57,52,84,243,184,144,190,84,84,49,48,49,54,56,57,53,84,243,184,144,191,84,84,49,48,49,54,56,57,55,84,243,184,145,129,84,84,49,48,49,54,57,48,57,84,243,184,145,141,84,84,49,48,49,54,57,49,49,84,243,184,145,143,84,84,49,48,49,54,57,49,50,84,243,184,145,144,84,84,49,48,49,54,57,50,53,84,243,184,145,157,84,84,49,48,49,54,57,54,49,84,243,184,146,129,84,84,49,48,49,54,57,55,51,84,243,184,146,141,84,84,49,48,49,54,57,55,53,84,243,184,146,143,84,84,49,48,49,54,57,55,54,84,243,184,146,144,84,84,49,48,49,54,57,56,57,84,243,184,146,157,84,84,49,48,49,55,48,50,53,84,243,184,147,129,84,84,49,48,49,55,48,51,55,84,243,184,147,141,84,84,49,48,49,55,48,51,57,84,243,184,147,143,84,84,49,48,49,55,48,52,48,84,243,184,147,144,84,84,49,48,49,55,48,53,51,84,243,184,147,157,84,84,49,48,49,55,48,56,57,84,243,184,148,129,84,84,49,48,49,55,49,48,49,84,243,184,148,141,84,84,49,48,49,55,49,48,51,84,243,184,148,143,84,84,49,48,49,55,49,48,52,84,243,184,148,144,84,84,49,48,49,55,49,49,55,84,243,184,148,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20836 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20836_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20836_s.txt", Encoding.UTF8);

    public Test20836() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersf4b0dcea8f7b4ccf92e1f36b952ddf93",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,50,57,54,57,84,244,141,145,185,84,84,49,49,48,50,57,55,48,84,244,141,145,186,84,84,49,49,48,50,57,55,49,84,244,141,145,187,84,84,49,49,48,50,57,55,50,84,244,141,145,188,84,84,49,49,48,50,57,55,51,84,244,141,145,189,84,84,49,49,48,50,57,55,52,84,244,141,145,190,84,84,49,49,48,50,57,55,53,84,244,141,145,191,84,84,49,49,48,50,57,55,54,84,244,141,146,128,84,84,49,49,48,50,57,55,55,84,244,141,146,129,84,84,49,49,48,50,57,55,56,84,244,141,146,130,84,84,49,49,48,50,57,55,57,84,244,141,146,131,84,84,49,49,48,50,57,56,48,84,244,141,146,132,84,84,49,49,48,50,57,56,49,84,244,141,146,133,84,84,49,49,48,50,57,56,50,84,244,141,146,134,84,84,49,49,48,50,57,56,51,84,244,141,146,135,84,84,49,49,48,50,57,56,52,84,244,141,146,136,84,84,49,49,48,50,57,56,53,84,244,141,146,137,84,84,49,49,48,50,57,56,54,84,244,141,146,138,84,84,49,49,48,50,57,56,55,84,244,141,146,139,84,84,49,49,48,50,57,56,56,84,244,141,146,140,84,84,49,49,48,50,57,56,57,84,244,141,146,141,84,84,49,49,48,50,57,57,48,84,244,141,146,142,84,84,49,49,48,50,57,57,49,84,244,141,146,143,84,84,49,49,48,50,57,57,50,84,244,141,146,144,84,84,49,49,48,50,57,57,51,84,244,141,146,145,84,84,49,49,48,50,57,57,52,84,244,141,146,146,84,84,49,49,48,50,57,57,53,84,244,141,146,147,84,84,49,49,48,50,57,57,54,84,244,141,146,148,84,84,49,49,48,50,57,57,55,84,244,141,146,149,84,84,49,49,48,50,57,57,56,84,244,141,146,150,84,84,49,49,48,50,57,57,57,84,244,141,146,151,84,84,49,49,48,51,48,48,48,84,244,141,146,152,84,84,49,49,48,51,48,48,49,84,244,141,146,153,84,84,49,49,48,51,48,48,50,84,244,141,146,154,84,84,49,49,48,51,48,48,51,84,244,141,146,155,84,84,49,49,48,51,48,48,52,84,244,141,146,156,84,84,49,49,48,51,48,48,53,84,244,141,146,157,84,84,49,49,48,51,48,48,54,84,244,141,146,158,84,84,49,49,48,51,48,48,55,84,244,141,146,159,84,84,49,49,48,51,48,48,56,84,244,141,146,160,84,84,49,49,48,51,48,48,57,84,244,141,146,161,84,84,49,49,48,51,48,49,48,84,244,141,146,162,84,84,49,49,48,51,48,49,49,84,244,141,146,163,84,84,49,49,48,51,48,49,50,84,244,141,146,164,84,84,49,49,48,51,48,49,51,84,244,141,146,165,84,84,49,49,48,51,48,49,52,84,244,141,146,166,84,84,49,49,48,51,48,49,53,84,244,141,146,167,84,84,49,49,48,51,48,49,54,84,244,141,146,168,84,84,49,49,48,51,48,49,55,84,244,141,146,169,84,84,49,49,48,51,48,49,56,84,244,141,146,170,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20771 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20771_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20771_s.txt", Encoding.UTF8);

    public Test20771() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersc5ae22b09f3f4a3eaff829adc5876203",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,57,56,55,53,53,84,244,140,144,131,84,84,49,48,57,56,55,53,54,84,244,140,144,132,84,84,49,48,57,56,55,53,55,84,244,140,144,133,84,84,49,48,57,56,55,53,56,84,244,140,144,134,84,84,49,48,57,56,55,53,57,84,244,140,144,135,84,84,49,48,57,56,55,54,48,84,244,140,144,136,84,84,49,48,57,56,55,54,49,84,244,140,144,137,84,84,49,48,57,56,55,54,50,84,244,140,144,138,84,84,49,48,57,56,55,54,51,84,244,140,144,139,84,84,49,48,57,56,55,54,52,84,244,140,144,140,84,84,49,48,57,56,55,54,53,84,244,140,144,141,84,84,49,48,57,56,55,54,54,84,244,140,144,142,84,84,49,48,57,56,55,54,55,84,244,140,144,143,84,84,49,48,57,56,55,54,56,84,244,140,144,144,84,84,49,48,57,56,55,54,57,84,244,140,144,145,84,84,49,48,57,56,55,55,48,84,244,140,144,146,84,84,49,48,57,56,55,55,49,84,244,140,144,147,84,84,49,48,57,56,55,55,50,84,244,140,144,148,84,84,49,48,57,56,55,55,51,84,244,140,144,149,84,84,49,48,57,56,55,55,52,84,244,140,144,150,84,84,49,48,57,56,55,55,53,84,244,140,144,151,84,84,49,48,57,56,55,55,54,84,244,140,144,152,84,84,49,48,57,56,55,55,55,84,244,140,144,153,84,84,49,48,57,56,55,55,56,84,244,140,144,154,84,84,49,48,57,56,55,55,57,84,244,140,144,155,84,84,49,48,57,56,55,56,48,84,244,140,144,156,84,84,49,48,57,56,55,56,49,84,244,140,144,157,84,84,49,48,57,56,55,56,50,84,244,140,144,158,84,84,49,48,57,56,55,56,51,84,244,140,144,159,84,84,49,48,57,56,55,56,52,84,244,140,144,160,84,84,49,48,57,56,55,56,53,84,244,140,144,161,84,84,49,48,57,56,55,56,54,84,244,140,144,162,84,84,49,48,57,56,55,56,55,84,244,140,144,163,84,84,49,48,57,56,55,56,56,84,244,140,144,164,84,84,49,48,57,56,55,56,57,84,244,140,144,165,84,84,49,48,57,56,55,57,48,84,244,140,144,166,84,84,49,48,57,56,55,57,49,84,244,140,144,167,84,84,49,48,57,56,55,57,50,84,244,140,144,168,84,84,49,48,57,56,55,57,51,84,244,140,144,169,84,84,49,48,57,56,55,57,52,84,244,140,144,170,84,84,49,48,57,56,55,57,53,84,244,140,144,171,84,84,49,48,57,56,55,57,54,84,244,140,144,172,84,84,49,48,57,56,55,57,55,84,244,140,144,173,84,84,49,48,57,56,55,57,56,84,244,140,144,174,84,84,49,48,57,56,55,57,57,84,244,140,144,175,84,84,49,48,57,56,56,48,48,84,244,140,144,176,84,84,49,48,57,56,56,48,49,84,244,140,144,177,84,84,49,48,57,56,56,48,50,84,244,140,144,178,84,84,49,48,57,56,56,48,51,84,244,140,144,179,84,84,49,48,57,56,56,48,52,84,244,140,144,180,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21155 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21155_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21155_s.txt", Encoding.UTF8);

    public Test21155() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers56d1c908d8f44b69abe6817b1847a0f6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,52,48,48,48,84,244,143,190,144,84,84,49,49,49,52,48,48,49,84,244,143,190,145,84,84,49,49,49,52,48,48,50,84,244,143,190,146,84,84,49,49,49,52,48,48,51,84,244,143,190,147,84,84,49,49,49,52,48,48,52,84,244,143,190,148,84,84,49,49,49,52,48,48,53,84,244,143,190,149,84,84,49,49,49,52,48,48,54,84,244,143,190,150,84,84,49,49,49,52,48,48,55,84,244,143,190,151,84,84,49,49,49,52,48,48,56,84,244,143,190,152,84,84,49,49,49,52,48,48,57,84,244,143,190,153,84,84,49,49,49,52,48,49,48,84,244,143,190,154,84,84,49,49,49,52,48,49,49,84,244,143,190,155,84,84,49,49,49,52,48,49,50,84,244,143,190,156,84,84,49,49,49,52,48,49,51,84,244,143,190,157,84,84,49,49,49,52,48,49,52,84,244,143,190,158,84,84,49,49,49,52,48,49,53,84,244,143,190,159,84,84,49,49,49,52,48,49,54,84,244,143,190,160,84,84,49,49,49,52,48,49,55,84,244,143,190,161,84,84,49,49,49,52,48,49,56,84,244,143,190,162,84,84,49,49,49,52,48,49,57,84,244,143,190,163,84,84,49,49,49,52,48,50,48,84,244,143,190,164,84,84,49,49,49,52,48,50,49,84,244,143,190,165,84,84,49,49,49,52,48,50,50,84,244,143,190,166,84,84,49,49,49,52,48,50,51,84,244,143,190,167,84,84,49,49,49,52,48,50,52,84,244,143,190,168,84,84,49,49,49,52,48,50,53,84,244,143,190,169,84,84,49,49,49,52,48,50,54,84,244,143,190,170,84,84,49,49,49,52,48,50,55,84,244,143,190,171,84,84,49,49,49,52,48,50,56,84,244,143,190,172,84,84,49,49,49,52,48,50,57,84,244,143,190,173,84,84,49,49,49,52,48,51,48,84,244,143,190,174,84,84,49,49,49,52,48,51,49,84,244,143,190,175,84,84,49,49,49,52,48,51,50,84,244,143,190,176,84,84,49,49,49,52,48,51,51,84,244,143,190,177,84,84,49,49,49,52,48,51,52,84,244,143,190,178,84,84,49,49,49,52,48,51,53,84,244,143,190,179,84,84,49,49,49,52,48,51,54,84,244,143,190,180,84,84,49,49,49,52,48,51,55,84,244,143,190,181,84,84,49,49,49,52,48,51,56,84,244,143,190,182,84,84,49,49,49,52,48,51,57,84,244,143,190,183,84,84,49,49,49,52,48,52,48,84,244,143,190,184,84,84,49,49,49,52,48,52,49,84,244,143,190,185,84,84,49,49,49,52,48,52,50,84,244,143,190,186,84,84,49,49,49,52,48,52,51,84,244,143,190,187,84,84,49,49,49,52,48,52,52,84,244,143,190,188,84,84,49,49,49,52,48,52,53,84,244,143,190,189,84,84,49,49,49,52,48,52,54,84,244,143,190,190,84,84,49,49,49,52,48,52,55,84,244,143,190,191,84,84,49,49,49,52,48,52,56,84,244,143,191,128,84,84,49,49,49,52,48,52,57,84,244,143,191,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20326 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20326_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20326_s.txt", Encoding.UTF8);

    public Test20326() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers412024b733e349978217e6093afed677",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,50,54,55,56,84,244,129,128,134,84,84,49,48,53,50,54,55,57,84,244,129,128,135,84,84,49,48,53,50,54,56,48,84,244,129,128,136,84,84,49,48,53,50,54,56,49,84,244,129,128,137,84,84,49,48,53,50,54,56,50,84,244,129,128,138,84,84,49,48,53,50,54,56,51,84,244,129,128,139,84,84,49,48,53,50,54,56,52,84,244,129,128,140,84,84,49,48,53,50,54,56,53,84,244,129,128,141,84,84,49,48,53,50,54,56,54,84,244,129,128,142,84,84,49,48,53,50,54,56,55,84,244,129,128,143,84,84,49,48,53,50,54,56,56,84,244,129,128,144,84,84,49,48,53,50,54,56,57,84,244,129,128,145,84,84,49,48,53,50,54,57,48,84,244,129,128,146,84,84,49,48,53,50,54,57,49,84,244,129,128,147,84,84,49,48,53,50,54,57,50,84,244,129,128,148,84,84,49,48,53,50,54,57,51,84,244,129,128,149,84,84,49,48,53,50,54,57,52,84,244,129,128,150,84,84,49,48,53,50,54,57,53,84,244,129,128,151,84,84,49,48,53,50,54,57,54,84,244,129,128,152,84,84,49,48,53,50,54,57,55,84,244,129,128,153,84,84,49,48,53,50,54,57,56,84,244,129,128,154,84,84,49,48,53,50,54,57,57,84,244,129,128,155,84,84,49,48,53,50,55,48,48,84,244,129,128,156,84,84,49,48,53,50,55,48,49,84,244,129,128,157,84,84,49,48,53,50,55,48,50,84,244,129,128,158,84,84,49,48,53,50,55,48,51,84,244,129,128,159,84,84,49,48,53,50,55,48,52,84,244,129,128,160,84,84,49,48,53,50,55,48,53,84,244,129,128,161,84,84,49,48,53,50,55,48,54,84,244,129,128,162,84,84,49,48,53,50,55,48,55,84,244,129,128,163,84,84,49,48,53,50,55,48,56,84,244,129,128,164,84,84,49,48,53,50,55,48,57,84,244,129,128,165,84,84,49,48,53,50,55,49,48,84,244,129,128,166,84,84,49,48,53,50,55,49,49,84,244,129,128,167,84,84,49,48,53,50,55,49,50,84,244,129,128,168,84,84,49,48,53,50,55,49,51,84,244,129,128,169,84,84,49,48,53,50,55,49,52,84,244,129,128,170,84,84,49,48,53,50,55,49,53,84,244,129,128,171,84,84,49,48,53,50,55,49,54,84,244,129,128,172,84,84,49,48,53,50,55,49,55,84,244,129,128,173,84,84,49,48,53,50,55,49,56,84,244,129,128,174,84,84,49,48,53,50,55,49,57,84,244,129,128,175,84,84,49,48,53,50,55,50,48,84,244,129,128,176,84,84,49,48,53,50,55,50,49,84,244,129,128,177,84,84,49,48,53,50,55,50,50,84,244,129,128,178,84,84,49,48,53,50,55,50,51,84,244,129,128,179,84,84,49,48,53,50,55,50,52,84,244,129,128,180,84,84,49,48,53,50,55,50,53,84,244,129,128,181,84,84,49,48,53,50,55,50,54,84,244,129,128,182,84,84,49,48,53,50,55,50,55,84,244,129,128,183,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20675 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20675_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20675_s.txt", Encoding.UTF8);

    public Test20675() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers9df780a74f2549dda8f9f337dadb7946",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,56,51,50,51,57,84,244,136,157,167,84,84,49,48,56,51,50,52,48,84,244,136,157,168,84,84,49,48,56,51,50,52,49,84,244,136,157,169,84,84,49,48,56,51,50,52,50,84,244,136,157,170,84,84,49,48,56,51,50,52,51,84,244,136,157,171,84,84,49,48,56,51,50,52,52,84,244,136,157,172,84,84,49,48,56,51,50,52,53,84,244,136,157,173,84,84,49,48,56,51,50,52,54,84,244,136,157,174,84,84,49,48,56,51,50,52,55,84,244,136,157,175,84,84,49,48,56,51,50,52,56,84,244,136,157,176,84,84,49,48,56,51,50,52,57,84,244,136,157,177,84,84,49,48,56,51,50,53,48,84,244,136,157,178,84,84,49,48,56,51,50,53,49,84,244,136,157,179,84,84,49,48,56,51,50,53,50,84,244,136,157,180,84,84,49,48,56,51,50,53,51,84,244,136,157,181,84,84,49,48,56,51,50,53,52,84,244,136,157,182,84,84,49,48,56,51,50,53,53,84,244,136,157,183,84,84,49,48,56,51,50,53,54,84,244,136,157,184,84,84,49,48,56,51,50,53,55,84,244,136,157,185,84,84,49,48,56,51,50,53,56,84,244,136,157,186,84,84,49,48,56,51,50,53,57,84,244,136,157,187,84,84,49,48,56,51,50,54,48,84,244,136,157,188,84,84,49,48,56,51,50,54,49,84,244,136,157,189,84,84,49,48,56,51,50,54,50,84,244,136,157,190,84,84,49,48,56,51,50,54,51,84,244,136,157,191,84,84,49,48,56,51,50,54,53,84,244,136,158,129,84,84,49,48,56,51,50,55,55,84,244,136,158,141,84,84,49,48,56,51,50,55,57,84,244,136,158,143,84,84,49,48,56,51,50,56,48,84,244,136,158,144,84,84,49,48,56,51,50,57,51,84,244,136,158,157,84,84,49,48,56,51,51,50,57,84,244,136,159,129,84,84,49,48,56,51,51,52,49,84,244,136,159,141,84,84,49,48,56,51,51,52,51,84,244,136,159,143,84,84,49,48,56,51,51,52,52,84,244,136,159,144,84,84,49,48,56,51,51,53,55,84,244,136,159,157,84,84,49,48,56,51,51,57,51,84,244,136,160,129,84,84,49,48,56,51,52,48,53,84,244,136,160,141,84,84,49,48,56,51,52,48,55,84,244,136,160,143,84,84,49,48,56,51,52,48,56,84,244,136,160,144,84,84,49,48,56,51,52,50,49,84,244,136,160,157,84,84,49,48,56,51,52,53,55,84,244,136,161,129,84,84,49,48,56,51,52,54,57,84,244,136,161,141,84,84,49,48,56,51,52,55,49,84,244,136,161,143,84,84,49,48,56,51,52,55,50,84,244,136,161,144,84,84,49,48,56,51,52,56,53,84,244,136,161,157,84,84,49,48,56,51,53,50,49,84,244,136,162,129,84,84,49,48,56,51,53,51,51,84,244,136,162,141,84,84,49,48,56,51,53,51,53,84,244,136,162,143,84,84,49,48,56,51,53,51,54,84,244,136,162,144,84,84,49,48,56,51,53,52,57,84,244,136,162,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20388 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20388_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20388_s.txt", Encoding.UTF8);

    public Test20388() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers319eca44915441a6b60a6025f5eab2bd",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,52,49,55,56,84,244,129,151,162,84,84,49,48,53,52,49,55,57,84,244,129,151,163,84,84,49,48,53,52,49,56,48,84,244,129,151,164,84,84,49,48,53,52,49,56,49,84,244,129,151,165,84,84,49,48,53,52,49,56,50,84,244,129,151,166,84,84,49,48,53,52,49,56,51,84,244,129,151,167,84,84,49,48,53,52,49,56,52,84,244,129,151,168,84,84,49,48,53,52,49,56,53,84,244,129,151,169,84,84,49,48,53,52,49,56,54,84,244,129,151,170,84,84,49,48,53,52,49,56,55,84,244,129,151,171,84,84,49,48,53,52,49,56,56,84,244,129,151,172,84,84,49,48,53,52,49,56,57,84,244,129,151,173,84,84,49,48,53,52,49,57,48,84,244,129,151,174,84,84,49,48,53,52,49,57,49,84,244,129,151,175,84,84,49,48,53,52,49,57,50,84,244,129,151,176,84,84,49,48,53,52,49,57,51,84,244,129,151,177,84,84,49,48,53,52,49,57,52,84,244,129,151,178,84,84,49,48,53,52,49,57,53,84,244,129,151,179,84,84,49,48,53,52,49,57,54,84,244,129,151,180,84,84,49,48,53,52,49,57,55,84,244,129,151,181,84,84,49,48,53,52,49,57,56,84,244,129,151,182,84,84,49,48,53,52,49,57,57,84,244,129,151,183,84,84,49,48,53,52,50,48,48,84,244,129,151,184,84,84,49,48,53,52,50,48,49,84,244,129,151,185,84,84,49,48,53,52,50,48,50,84,244,129,151,186,84,84,49,48,53,52,50,48,51,84,244,129,151,187,84,84,49,48,53,52,50,48,52,84,244,129,151,188,84,84,49,48,53,52,50,48,53,84,244,129,151,189,84,84,49,48,53,52,50,48,54,84,244,129,151,190,84,84,49,48,53,52,50,48,55,84,244,129,151,191,84,84,49,48,53,52,50,48,56,84,244,129,152,128,84,84,49,48,53,52,50,48,57,84,244,129,152,129,84,84,49,48,53,52,50,49,48,84,244,129,152,130,84,84,49,48,53,52,50,49,49,84,244,129,152,131,84,84,49,48,53,52,50,49,50,84,244,129,152,132,84,84,49,48,53,52,50,49,51,84,244,129,152,133,84,84,49,48,53,52,50,49,52,84,244,129,152,134,84,84,49,48,53,52,50,49,53,84,244,129,152,135,84,84,49,48,53,52,50,49,54,84,244,129,152,136,84,84,49,48,53,52,50,49,55,84,244,129,152,137,84,84,49,48,53,52,50,49,56,84,244,129,152,138,84,84,49,48,53,52,50,49,57,84,244,129,152,139,84,84,49,48,53,52,50,50,48,84,244,129,152,140,84,84,49,48,53,52,50,50,49,84,244,129,152,141,84,84,49,48,53,52,50,50,50,84,244,129,152,142,84,84,49,48,53,52,50,50,51,84,244,129,152,143,84,84,49,48,53,52,50,50,52,84,244,129,152,144,84,84,49,48,53,52,50,50,53,84,244,129,152,145,84,84,49,48,53,52,50,50,54,84,244,129,152,146,84,84,49,48,53,52,50,50,55,84,244,129,152,147,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20963 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20963_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20963_s.txt", Encoding.UTF8);

    public Test20963() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersdf87e0f5374149afa792ac52b484870e",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,54,48,50,56,84,244,142,129,172,84,84,49,49,48,54,48,50,57,84,244,142,129,173,84,84,49,49,48,54,48,51,48,84,244,142,129,174,84,84,49,49,48,54,48,51,49,84,244,142,129,175,84,84,49,49,48,54,48,51,50,84,244,142,129,176,84,84,49,49,48,54,48,51,51,84,244,142,129,177,84,84,49,49,48,54,48,51,52,84,244,142,129,178,84,84,49,49,48,54,48,51,53,84,244,142,129,179,84,84,49,49,48,54,48,51,54,84,244,142,129,180,84,84,49,49,48,54,48,51,55,84,244,142,129,181,84,84,49,49,48,54,48,51,56,84,244,142,129,182,84,84,49,49,48,54,48,51,57,84,244,142,129,183,84,84,49,49,48,54,48,52,48,84,244,142,129,184,84,84,49,49,48,54,48,52,49,84,244,142,129,185,84,84,49,49,48,54,48,52,50,84,244,142,129,186,84,84,49,49,48,54,48,52,51,84,244,142,129,187,84,84,49,49,48,54,48,52,52,84,244,142,129,188,84,84,49,49,48,54,48,52,53,84,244,142,129,189,84,84,49,49,48,54,48,52,54,84,244,142,129,190,84,84,49,49,48,54,48,52,55,84,244,142,129,191,84,84,49,49,48,54,48,52,57,84,244,142,130,129,84,84,49,49,48,54,48,54,49,84,244,142,130,141,84,84,49,49,48,54,48,54,51,84,244,142,130,143,84,84,49,49,48,54,48,54,52,84,244,142,130,144,84,84,49,49,48,54,48,55,55,84,244,142,130,157,84,84,49,49,48,54,49,49,51,84,244,142,131,129,84,84,49,49,48,54,49,50,53,84,244,142,131,141,84,84,49,49,48,54,49,50,55,84,244,142,131,143,84,84,49,49,48,54,49,50,56,84,244,142,131,144,84,84,49,49,48,54,49,52,49,84,244,142,131,157,84,84,49,49,48,54,49,55,55,84,244,142,132,129,84,84,49,49,48,54,49,56,57,84,244,142,132,141,84,84,49,49,48,54,49,57,49,84,244,142,132,143,84,84,49,49,48,54,49,57,50,84,244,142,132,144,84,84,49,49,48,54,50,48,53,84,244,142,132,157,84,84,49,49,48,54,50,52,49,84,244,142,133,129,84,84,49,49,48,54,50,53,51,84,244,142,133,141,84,84,49,49,48,54,50,53,53,84,244,142,133,143,84,84,49,49,48,54,50,53,54,84,244,142,133,144,84,84,49,49,48,54,50,54,57,84,244,142,133,157,84,84,49,49,48,54,51,48,53,84,244,142,134,129,84,84,49,49,48,54,51,49,55,84,244,142,134,141,84,84,49,49,48,54,51,49,57,84,244,142,134,143,84,84,49,49,48,54,51,50,48,84,244,142,134,144,84,84,49,49,48,54,51,51,51,84,244,142,134,157,84,84,49,49,48,54,51,54,57,84,244,142,135,129,84,84,49,49,48,54,51,56,49,84,244,142,135,141,84,84,49,49,48,54,51,56,51,84,244,142,135,143,84,84,49,49,48,54,51,56,52,84,244,142,135,144,84,84,49,49,48,54,51,57,55,84,244,142,135,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19814 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19814_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19814_s.txt", Encoding.UTF8);

    public Test19814() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers3d1fce2fe43b489ca49e5d4066014499",
                        blob: Encoding.UTF8.GetString(new byte[]{84,53,56,51,50,51,84,238,143,147,84,84,53,56,51,50,52,84,238,143,148,84,84,53,56,51,50,53,84,238,143,149,84,84,53,56,51,50,54,84,238,143,150,84,84,53,56,51,50,55,84,238,143,151,84,84,53,56,51,50,56,84,238,143,152,84,84,53,56,51,50,57,84,238,143,153,84,84,53,56,51,51,48,84,238,143,154,84,84,53,56,51,51,49,84,238,143,155,84,84,53,56,51,51,50,84,238,143,156,84,84,53,56,51,51,51,84,238,143,157,84,84,53,56,51,51,52,84,238,143,158,84,84,53,56,51,51,53,84,238,143,159,84,84,53,56,51,51,54,84,238,143,160,84,84,53,56,51,51,55,84,238,143,161,84,84,53,56,51,51,56,84,238,143,162,84,84,53,56,51,51,57,84,238,143,163,84,84,53,56,51,52,48,84,238,143,164,84,84,53,56,51,52,49,84,238,143,165,84,84,53,56,51,52,50,84,238,143,166,84,84,53,56,51,52,51,84,238,143,167,84,84,53,56,51,52,52,84,238,143,168,84,84,53,56,51,52,53,84,238,143,169,84,84,53,56,51,52,54,84,238,143,170,84,84,53,56,51,52,55,84,238,143,171,84,84,53,56,51,52,56,84,238,143,172,84,84,53,56,51,52,57,84,238,143,173,84,84,53,56,51,53,48,84,238,143,174,84,84,53,56,51,53,49,84,238,143,175,84,84,53,56,51,53,50,84,238,143,176,84,84,53,56,51,53,51,84,238,143,177,84,84,53,56,51,53,52,84,238,143,178,84,84,53,56,51,53,53,84,238,143,179,84,84,53,56,51,53,54,84,238,143,180,84,84,53,56,51,53,55,84,238,143,181,84,84,53,56,51,53,56,84,238,143,182,84,84,53,56,51,53,57,84,238,143,183,84,84,53,56,51,54,48,84,238,143,184,84,84,53,56,51,54,49,84,238,143,185,84,84,53,56,51,54,50,84,238,143,186,84,84,53,56,51,54,51,84,238,143,187,84,84,53,56,51,54,52,84,238,143,188,84,84,53,56,51,54,53,84,238,143,189,84,84,53,56,51,54,54,84,238,143,190,84,84,53,56,51,54,55,84,238,143,191,84,84,53,56,51,54,56,84,238,144,128,84,84,53,56,51,54,57,84,238,144,129,84,84,53,56,51,55,48,84,238,144,130,84,84,53,56,51,55,49,84,238,144,131,84,84,53,56,51,55,50,84,238,144,132,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22788 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22788_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22788_s.txt", Encoding.UTF8);

    public Test22788() : base(recordedRequest, recordedResponse, "accounts8d43a0490823d21")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a0490823d21",
                        container: "containers0bd48f2ce8374f57b3f3c61b5595b35b",
                        blob: "Blob08d2e1b170594a19b2786bac8103fe3d",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21519 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21519_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21519_s.txt", Encoding.UTF8);

    public Test21519() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers68298e8fc0d4450688eb48867b656cf0",
                        blob: "Blob95eed03a0a714066a7be615c5dca09e6",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        ifMatches: "\"0x8D43A03EE15A731\"",
                        xMsBlobContentLength: 0,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22789 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22789_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22789_s.txt", Encoding.UTF8);

    public Test22789() : base(recordedRequest, recordedResponse, "accounts8d43a0490823d21")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a0490823d21",
                        container: "containers0bd48f2ce8374f57b3f3c61b5595b35b",
                        blob: "Blob07bf964adc9a4ceb956333d26e35776b",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20485 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20485_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20485_s.txt", Encoding.UTF8);

    public Test20485() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers3bfa703d74a140e499ecce701b962b8c",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,54,52,50,56,84,244,129,186,172,84,84,49,48,53,54,52,50,57,84,244,129,186,173,84,84,49,48,53,54,52,51,48,84,244,129,186,174,84,84,49,48,53,54,52,51,49,84,244,129,186,175,84,84,49,48,53,54,52,51,50,84,244,129,186,176,84,84,49,48,53,54,52,51,51,84,244,129,186,177,84,84,49,48,53,54,52,51,52,84,244,129,186,178,84,84,49,48,53,54,52,51,53,84,244,129,186,179,84,84,49,48,53,54,52,51,54,84,244,129,186,180,84,84,49,48,53,54,52,51,55,84,244,129,186,181,84,84,49,48,53,54,52,51,56,84,244,129,186,182,84,84,49,48,53,54,52,51,57,84,244,129,186,183,84,84,49,48,53,54,52,52,48,84,244,129,186,184,84,84,49,48,53,54,52,52,49,84,244,129,186,185,84,84,49,48,53,54,52,52,50,84,244,129,186,186,84,84,49,48,53,54,52,52,51,84,244,129,186,187,84,84,49,48,53,54,52,52,52,84,244,129,186,188,84,84,49,48,53,54,52,52,53,84,244,129,186,189,84,84,49,48,53,54,52,52,54,84,244,129,186,190,84,84,49,48,53,54,52,52,55,84,244,129,186,191,84,84,49,48,53,54,52,52,56,84,244,129,187,128,84,84,49,48,53,54,52,52,57,84,244,129,187,129,84,84,49,48,53,54,52,53,48,84,244,129,187,130,84,84,49,48,53,54,52,53,49,84,244,129,187,131,84,84,49,48,53,54,52,53,50,84,244,129,187,132,84,84,49,48,53,54,52,53,51,84,244,129,187,133,84,84,49,48,53,54,52,53,52,84,244,129,187,134,84,84,49,48,53,54,52,53,53,84,244,129,187,135,84,84,49,48,53,54,52,53,54,84,244,129,187,136,84,84,49,48,53,54,52,53,55,84,244,129,187,137,84,84,49,48,53,54,52,53,56,84,244,129,187,138,84,84,49,48,53,54,52,53,57,84,244,129,187,139,84,84,49,48,53,54,52,54,48,84,244,129,187,140,84,84,49,48,53,54,52,54,49,84,244,129,187,141,84,84,49,48,53,54,52,54,50,84,244,129,187,142,84,84,49,48,53,54,52,54,51,84,244,129,187,143,84,84,49,48,53,54,52,54,52,84,244,129,187,144,84,84,49,48,53,54,52,54,53,84,244,129,187,145,84,84,49,48,53,54,52,54,54,84,244,129,187,146,84,84,49,48,53,54,52,54,55,84,244,129,187,147,84,84,49,48,53,54,52,54,56,84,244,129,187,148,84,84,49,48,53,54,52,54,57,84,244,129,187,149,84,84,49,48,53,54,52,55,48,84,244,129,187,150,84,84,49,48,53,54,52,55,49,84,244,129,187,151,84,84,49,48,53,54,52,55,50,84,244,129,187,152,84,84,49,48,53,54,52,55,51,84,244,129,187,153,84,84,49,48,53,54,52,55,52,84,244,129,187,154,84,84,49,48,53,54,52,55,53,84,244,129,187,155,84,84,49,48,53,54,52,55,54,84,244,129,187,156,84,84,49,48,53,54,52,55,55,84,244,129,187,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20005 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20005_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20005_s.txt", Encoding.UTF8);

    public Test20005() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersc5d3e7c5509046d2aa3f8bb095571b82",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,48,49,52,50,49,84,243,180,159,141,84,84,49,48,48,49,52,50,51,84,243,180,159,143,84,84,49,48,48,49,52,50,52,84,243,180,159,144,84,84,49,48,48,49,52,51,55,84,243,180,159,157,84,84,49,48,48,49,52,55,51,84,243,180,160,129,84,84,49,48,48,49,52,56,53,84,243,180,160,141,84,84,49,48,48,49,52,56,55,84,243,180,160,143,84,84,49,48,48,49,52,56,56,84,243,180,160,144,84,84,49,48,48,49,53,48,49,84,243,180,160,157,84,84,49,48,48,49,53,51,55,84,243,180,161,129,84,84,49,48,48,49,53,52,57,84,243,180,161,141,84,84,49,48,48,49,53,53,49,84,243,180,161,143,84,84,49,48,48,49,53,53,50,84,243,180,161,144,84,84,49,48,48,49,53,54,53,84,243,180,161,157,84,84,49,48,48,49,54,48,49,84,243,180,162,129,84,84,49,48,48,49,54,49,51,84,243,180,162,141,84,84,49,48,48,49,54,49,53,84,243,180,162,143,84,84,49,48,48,49,54,49,54,84,243,180,162,144,84,84,49,48,48,49,54,50,57,84,243,180,162,157,84,84,49,48,48,49,54,54,53,84,243,180,163,129,84,84,49,48,48,49,54,55,55,84,243,180,163,141,84,84,49,48,48,49,54,55,57,84,243,180,163,143,84,84,49,48,48,49,54,56,48,84,243,180,163,144,84,84,49,48,48,49,54,57,51,84,243,180,163,157,84,84,49,48,48,49,55,50,57,84,243,180,164,129,84,84,49,48,48,49,55,52,49,84,243,180,164,141,84,84,49,48,48,49,55,52,51,84,243,180,164,143,84,84,49,48,48,49,55,52,52,84,243,180,164,144,84,84,49,48,48,49,55,53,55,84,243,180,164,157,84,84,49,48,48,49,55,57,51,84,243,180,165,129,84,84,49,48,48,49,56,48,53,84,243,180,165,141,84,84,49,48,48,49,56,48,55,84,243,180,165,143,84,84,49,48,48,49,56,48,56,84,243,180,165,144,84,84,49,48,48,49,56,50,49,84,243,180,165,157,84,84,49,48,48,49,56,53,55,84,243,180,166,129,84,84,49,48,48,49,56,54,57,84,243,180,166,141,84,84,49,48,48,49,56,55,49,84,243,180,166,143,84,84,49,48,48,49,56,55,50,84,243,180,166,144,84,84,49,48,48,49,56,56,53,84,243,180,166,157,84,84,49,48,48,49,57,50,49,84,243,180,167,129,84,84,49,48,48,49,57,51,51,84,243,180,167,141,84,84,49,48,48,49,57,51,53,84,243,180,167,143,84,84,49,48,48,49,57,51,54,84,243,180,167,144,84,84,49,48,48,49,57,52,57,84,243,180,167,157,84,84,49,48,48,49,57,56,53,84,243,180,168,129,84,84,49,48,48,49,57,57,55,84,243,180,168,141,84,84,49,48,48,49,57,57,57,84,243,180,168,143,84,84,49,48,48,50,48,48,48,84,243,180,168,144,84,84,49,48,48,50,48,49,51,84,243,180,168,157,84,84,49,48,48,50,48,52,57,84,243,180,169,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20106 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20106_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20106_s.txt", Encoding.UTF8);

    public Test20106() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers02552a2396c44255a61dd19b9714b3b6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,49,55,49,53,51,84,243,184,149,129,84,84,49,48,49,55,49,54,53,84,243,184,149,141,84,84,49,48,49,55,49,54,55,84,243,184,149,143,84,84,49,48,49,55,49,54,56,84,243,184,149,144,84,84,49,48,49,55,49,56,49,84,243,184,149,157,84,84,49,48,49,55,50,49,55,84,243,184,150,129,84,84,49,48,49,55,50,50,57,84,243,184,150,141,84,84,49,48,49,55,50,51,49,84,243,184,150,143,84,84,49,48,49,55,50,51,50,84,243,184,150,144,84,84,49,48,49,55,50,52,53,84,243,184,150,157,84,84,49,48,49,55,50,56,49,84,243,184,151,129,84,84,49,48,49,55,50,57,51,84,243,184,151,141,84,84,49,48,49,55,50,57,53,84,243,184,151,143,84,84,49,48,49,55,50,57,54,84,243,184,151,144,84,84,49,48,49,55,51,48,57,84,243,184,151,157,84,84,49,48,49,55,51,52,53,84,243,184,152,129,84,84,49,48,49,55,51,53,55,84,243,184,152,141,84,84,49,48,49,55,51,53,57,84,243,184,152,143,84,84,49,48,49,55,51,54,48,84,243,184,152,144,84,84,49,48,49,55,51,55,51,84,243,184,152,157,84,84,49,48,49,55,52,48,57,84,243,184,153,129,84,84,49,48,49,55,52,50,49,84,243,184,153,141,84,84,49,48,49,55,52,50,51,84,243,184,153,143,84,84,49,48,49,55,52,50,52,84,243,184,153,144,84,84,49,48,49,55,52,51,55,84,243,184,153,157,84,84,49,48,49,55,52,55,51,84,243,184,154,129,84,84,49,48,49,55,52,56,53,84,243,184,154,141,84,84,49,48,49,55,52,56,55,84,243,184,154,143,84,84,49,48,49,55,52,56,56,84,243,184,154,144,84,84,49,48,49,55,53,48,49,84,243,184,154,157,84,84,49,48,49,55,53,51,55,84,243,184,155,129,84,84,49,48,49,55,53,52,57,84,243,184,155,141,84,84,49,48,49,55,53,53,49,84,243,184,155,143,84,84,49,48,49,55,53,53,50,84,243,184,155,144,84,84,49,48,49,55,53,54,53,84,243,184,155,157,84,84,49,48,49,55,54,48,49,84,243,184,156,129,84,84,49,48,49,55,54,49,51,84,243,184,156,141,84,84,49,48,49,55,54,49,53,84,243,184,156,143,84,84,49,48,49,55,54,49,54,84,243,184,156,144,84,84,49,48,49,55,54,50,57,84,243,184,156,157,84,84,49,48,49,55,54,54,52,84,243,184,157,128,84,84,49,48,49,55,54,54,53,84,243,184,157,129,84,84,49,48,49,55,54,54,54,84,243,184,157,130,84,84,49,48,49,55,54,54,55,84,243,184,157,131,84,84,49,48,49,55,54,54,56,84,243,184,157,132,84,84,49,48,49,55,54,54,57,84,243,184,157,133,84,84,49,48,49,55,54,55,48,84,243,184,157,134,84,84,49,48,49,55,54,55,49,84,243,184,157,135,84,84,49,48,49,55,54,55,50,84,243,184,157,136,84,84,49,48,49,55,54,55,51,84,243,184,157,137,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20582 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20582_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20582_s.txt", Encoding.UTF8);

    public Test20582() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers2997cf743a0f481c9f696984938aa742",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,54,57,55,55,51,84,244,133,139,141,84,84,49,48,54,57,55,55,53,84,244,133,139,143,84,84,49,48,54,57,55,55,54,84,244,133,139,144,84,84,49,48,54,57,55,56,57,84,244,133,139,157,84,84,49,48,54,57,56,50,53,84,244,133,140,129,84,84,49,48,54,57,56,51,55,84,244,133,140,141,84,84,49,48,54,57,56,51,57,84,244,133,140,143,84,84,49,48,54,57,56,52,48,84,244,133,140,144,84,84,49,48,54,57,56,53,51,84,244,133,140,157,84,84,49,48,54,57,56,56,56,84,244,133,141,128,84,84,49,48,54,57,56,56,57,84,244,133,141,129,84,84,49,48,54,57,56,57,48,84,244,133,141,130,84,84,49,48,54,57,56,57,49,84,244,133,141,131,84,84,49,48,54,57,56,57,50,84,244,133,141,132,84,84,49,48,54,57,56,57,51,84,244,133,141,133,84,84,49,48,54,57,56,57,52,84,244,133,141,134,84,84,49,48,54,57,56,57,53,84,244,133,141,135,84,84,49,48,54,57,56,57,54,84,244,133,141,136,84,84,49,48,54,57,56,57,55,84,244,133,141,137,84,84,49,48,54,57,56,57,56,84,244,133,141,138,84,84,49,48,54,57,56,57,57,84,244,133,141,139,84,84,49,48,54,57,57,48,48,84,244,133,141,140,84,84,49,48,54,57,57,48,49,84,244,133,141,141,84,84,49,48,54,57,57,48,50,84,244,133,141,142,84,84,49,48,54,57,57,48,51,84,244,133,141,143,84,84,49,48,54,57,57,48,52,84,244,133,141,144,84,84,49,48,54,57,57,48,53,84,244,133,141,145,84,84,49,48,54,57,57,48,54,84,244,133,141,146,84,84,49,48,54,57,57,48,55,84,244,133,141,147,84,84,49,48,54,57,57,48,56,84,244,133,141,148,84,84,49,48,54,57,57,48,57,84,244,133,141,149,84,84,49,48,54,57,57,49,48,84,244,133,141,150,84,84,49,48,54,57,57,49,49,84,244,133,141,151,84,84,49,48,54,57,57,49,50,84,244,133,141,152,84,84,49,48,54,57,57,49,51,84,244,133,141,153,84,84,49,48,54,57,57,49,52,84,244,133,141,154,84,84,49,48,54,57,57,49,53,84,244,133,141,155,84,84,49,48,54,57,57,49,54,84,244,133,141,156,84,84,49,48,54,57,57,49,55,84,244,133,141,157,84,84,49,48,54,57,57,49,56,84,244,133,141,158,84,84,49,48,54,57,57,49,57,84,244,133,141,159,84,84,49,48,54,57,57,50,48,84,244,133,141,160,84,84,49,48,54,57,57,50,49,84,244,133,141,161,84,84,49,48,54,57,57,50,50,84,244,133,141,162,84,84,49,48,54,57,57,50,51,84,244,133,141,163,84,84,49,48,54,57,57,50,52,84,244,133,141,164,84,84,49,48,54,57,57,50,53,84,244,133,141,165,84,84,49,48,54,57,57,50,54,84,244,133,141,166,84,84,49,48,54,57,57,50,55,84,244,133,141,167,84,84,49,48,54,57,57,50,56,84,244,133,141,168,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19943 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19943_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19943_s.txt", Encoding.UTF8);

    public Test19943() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersbf5ecfbea5a24d8a8188936c9be6fa20",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,57,50,49,50,49,84,243,178,141,185,84,84,57,57,50,49,50,50,84,243,178,141,186,84,84,57,57,50,49,50,51,84,243,178,141,187,84,84,57,57,50,49,50,52,84,243,178,141,188,84,84,57,57,50,49,50,53,84,243,178,141,189,84,84,57,57,50,49,50,54,84,243,178,141,190,84,84,57,57,50,49,50,55,84,243,178,141,191,84,84,57,57,50,49,50,57,84,243,178,142,129,84,84,57,57,50,49,52,49,84,243,178,142,141,84,84,57,57,50,49,52,51,84,243,178,142,143,84,84,57,57,50,49,52,52,84,243,178,142,144,84,84,57,57,50,49,53,55,84,243,178,142,157,84,84,57,57,50,49,57,50,84,243,178,143,128,84,84,57,57,50,49,57,51,84,243,178,143,129,84,84,57,57,50,49,57,52,84,243,178,143,130,84,84,57,57,50,49,57,53,84,243,178,143,131,84,84,57,57,50,49,57,54,84,243,178,143,132,84,84,57,57,50,49,57,55,84,243,178,143,133,84,84,57,57,50,49,57,56,84,243,178,143,134,84,84,57,57,50,49,57,57,84,243,178,143,135,84,84,57,57,50,50,48,48,84,243,178,143,136,84,84,57,57,50,50,48,49,84,243,178,143,137,84,84,57,57,50,50,48,50,84,243,178,143,138,84,84,57,57,50,50,48,51,84,243,178,143,139,84,84,57,57,50,50,48,52,84,243,178,143,140,84,84,57,57,50,50,48,53,84,243,178,143,141,84,84,57,57,50,50,48,54,84,243,178,143,142,84,84,57,57,50,50,48,55,84,243,178,143,143,84,84,57,57,50,50,48,56,84,243,178,143,144,84,84,57,57,50,50,48,57,84,243,178,143,145,84,84,57,57,50,50,49,48,84,243,178,143,146,84,84,57,57,50,50,49,49,84,243,178,143,147,84,84,57,57,50,50,49,50,84,243,178,143,148,84,84,57,57,50,50,49,51,84,243,178,143,149,84,84,57,57,50,50,49,52,84,243,178,143,150,84,84,57,57,50,50,49,53,84,243,178,143,151,84,84,57,57,50,50,49,54,84,243,178,143,152,84,84,57,57,50,50,49,55,84,243,178,143,153,84,84,57,57,50,50,49,56,84,243,178,143,154,84,84,57,57,50,50,49,57,84,243,178,143,155,84,84,57,57,50,50,50,48,84,243,178,143,156,84,84,57,57,50,50,50,49,84,243,178,143,157,84,84,57,57,50,50,50,50,84,243,178,143,158,84,84,57,57,50,50,50,51,84,243,178,143,159,84,84,57,57,50,50,50,52,84,243,178,143,160,84,84,57,57,50,50,50,53,84,243,178,143,161,84,84,57,57,50,50,50,54,84,243,178,143,162,84,84,57,57,50,50,50,55,84,243,178,143,163,84,84,57,57,50,50,50,56,84,243,178,143,164,84,84,57,57,50,50,50,57,84,243,178,143,165,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22790 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22790_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22790_s.txt", Encoding.UTF8);

    public Test22790() : base(recordedRequest, recordedResponse, "accounts8d43a0490823d21")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a0490823d21",
                        container: "containers0bd48f2ce8374f57b3f3c61b5595b35b",
                        blob: "Blob184bc6dc858941fc91d161c68dde6cd8",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21520 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21520_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21520_s.txt", Encoding.UTF8);

    public Test21520() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers68298e8fc0d4450688eb48867b656cf0",
                        blob: "Blobf40438a9f8b445f6b40f2ade87c462a9",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        ifMatches: "*",
                        xMsBlobContentLength: 0,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19495 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19495_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19495_s.txt", Encoding.UTF8);

    public Test19495() : base(recordedRequest, recordedResponse, "accounts8d43a024a0ff30a")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a024a0ff30a",
                        container: "foo",
                        blob: "bar",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20233 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20233_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20233_s.txt", Encoding.UTF8);

    public Test20233() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersca1800aaa567470781b999118df6ba97",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,51,55,51,50,49,84,243,189,144,137,84,84,49,48,51,55,51,50,50,84,243,189,144,138,84,84,49,48,51,55,51,50,51,84,243,189,144,139,84,84,49,48,51,55,51,50,52,84,243,189,144,140,84,84,49,48,51,55,51,50,53,84,243,189,144,141,84,84,49,48,51,55,51,50,54,84,243,189,144,142,84,84,49,48,51,55,51,50,55,84,243,189,144,143,84,84,49,48,51,55,51,50,56,84,243,189,144,144,84,84,49,48,51,55,51,50,57,84,243,189,144,145,84,84,49,48,51,55,51,51,48,84,243,189,144,146,84,84,49,48,51,55,51,51,49,84,243,189,144,147,84,84,49,48,51,55,51,51,50,84,243,189,144,148,84,84,49,48,51,55,51,51,51,84,243,189,144,149,84,84,49,48,51,55,51,51,52,84,243,189,144,150,84,84,49,48,51,55,51,51,53,84,243,189,144,151,84,84,49,48,51,55,51,51,54,84,243,189,144,152,84,84,49,48,51,55,51,51,55,84,243,189,144,153,84,84,49,48,51,55,51,51,56,84,243,189,144,154,84,84,49,48,51,55,51,51,57,84,243,189,144,155,84,84,49,48,51,55,51,52,48,84,243,189,144,156,84,84,49,48,51,55,51,52,49,84,243,189,144,157,84,84,49,48,51,55,51,52,50,84,243,189,144,158,84,84,49,48,51,55,51,52,51,84,243,189,144,159,84,84,49,48,51,55,51,52,52,84,243,189,144,160,84,84,49,48,51,55,51,52,53,84,243,189,144,161,84,84,49,48,51,55,51,52,54,84,243,189,144,162,84,84,49,48,51,55,51,52,55,84,243,189,144,163,84,84,49,48,51,55,51,52,56,84,243,189,144,164,84,84,49,48,51,55,51,52,57,84,243,189,144,165,84,84,49,48,51,55,51,53,48,84,243,189,144,166,84,84,49,48,51,55,51,53,49,84,243,189,144,167,84,84,49,48,51,55,51,53,50,84,243,189,144,168,84,84,49,48,51,55,51,53,51,84,243,189,144,169,84,84,49,48,51,55,51,53,52,84,243,189,144,170,84,84,49,48,51,55,51,53,53,84,243,189,144,171,84,84,49,48,51,55,51,53,54,84,243,189,144,172,84,84,49,48,51,55,51,53,55,84,243,189,144,173,84,84,49,48,51,55,51,53,56,84,243,189,144,174,84,84,49,48,51,55,51,53,57,84,243,189,144,175,84,84,49,48,51,55,51,54,48,84,243,189,144,176,84,84,49,48,51,55,51,54,49,84,243,189,144,177,84,84,49,48,51,55,51,54,50,84,243,189,144,178,84,84,49,48,51,55,51,54,51,84,243,189,144,179,84,84,49,48,51,55,51,54,52,84,243,189,144,180,84,84,49,48,51,55,51,54,53,84,243,189,144,181,84,84,49,48,51,55,51,54,54,84,243,189,144,182,84,84,49,48,51,55,51,54,55,84,243,189,144,183,84,84,49,48,51,55,51,54,56,84,243,189,144,184,84,84,49,48,51,55,51,54,57,84,243,189,144,185,84,84,49,48,51,55,51,55,48,84,243,189,144,186,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20070 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20070_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20070_s.txt", Encoding.UTF8);

    public Test20070() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersb3c703c6e551430d9c914c24c3792dd5",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,49,50,51,48,51,84,243,183,137,143,84,84,49,48,49,50,51,48,52,84,243,183,137,144,84,84,49,48,49,50,51,49,55,84,243,183,137,157,84,84,49,48,49,50,51,53,51,84,243,183,138,129,84,84,49,48,49,50,51,54,53,84,243,183,138,141,84,84,49,48,49,50,51,54,55,84,243,183,138,143,84,84,49,48,49,50,51,54,56,84,243,183,138,144,84,84,49,48,49,50,51,56,49,84,243,183,138,157,84,84,49,48,49,50,52,49,55,84,243,183,139,129,84,84,49,48,49,50,52,50,57,84,243,183,139,141,84,84,49,48,49,50,52,51,49,84,243,183,139,143,84,84,49,48,49,50,52,51,50,84,243,183,139,144,84,84,49,48,49,50,52,52,53,84,243,183,139,157,84,84,49,48,49,50,52,56,49,84,243,183,140,129,84,84,49,48,49,50,52,57,51,84,243,183,140,141,84,84,49,48,49,50,52,57,53,84,243,183,140,143,84,84,49,48,49,50,52,57,54,84,243,183,140,144,84,84,49,48,49,50,53,48,57,84,243,183,140,157,84,84,49,48,49,50,53,52,52,84,243,183,141,128,84,84,49,48,49,50,53,52,53,84,243,183,141,129,84,84,49,48,49,50,53,52,54,84,243,183,141,130,84,84,49,48,49,50,53,52,55,84,243,183,141,131,84,84,49,48,49,50,53,52,56,84,243,183,141,132,84,84,49,48,49,50,53,52,57,84,243,183,141,133,84,84,49,48,49,50,53,53,48,84,243,183,141,134,84,84,49,48,49,50,53,53,49,84,243,183,141,135,84,84,49,48,49,50,53,53,50,84,243,183,141,136,84,84,49,48,49,50,53,53,51,84,243,183,141,137,84,84,49,48,49,50,53,53,52,84,243,183,141,138,84,84,49,48,49,50,53,53,53,84,243,183,141,139,84,84,49,48,49,50,53,53,54,84,243,183,141,140,84,84,49,48,49,50,53,53,55,84,243,183,141,141,84,84,49,48,49,50,53,53,56,84,243,183,141,142,84,84,49,48,49,50,53,53,57,84,243,183,141,143,84,84,49,48,49,50,53,54,48,84,243,183,141,144,84,84,49,48,49,50,53,54,49,84,243,183,141,145,84,84,49,48,49,50,53,54,50,84,243,183,141,146,84,84,49,48,49,50,53,54,51,84,243,183,141,147,84,84,49,48,49,50,53,54,52,84,243,183,141,148,84,84,49,48,49,50,53,54,53,84,243,183,141,149,84,84,49,48,49,50,53,54,54,84,243,183,141,150,84,84,49,48,49,50,53,54,55,84,243,183,141,151,84,84,49,48,49,50,53,54,56,84,243,183,141,152,84,84,49,48,49,50,53,54,57,84,243,183,141,153,84,84,49,48,49,50,53,55,48,84,243,183,141,154,84,84,49,48,49,50,53,55,49,84,243,183,141,155,84,84,49,48,49,50,53,55,50,84,243,183,141,156,84,84,49,48,49,50,53,55,51,84,243,183,141,157,84,84,49,48,49,50,53,55,52,84,243,183,141,158,84,84,49,48,49,50,53,55,53,84,243,183,141,159,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20546 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20546_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20546_s.txt", Encoding.UTF8);

    public Test20546() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers169b02be047c4c76acbb586fdc8886c6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,54,51,52,50,53,84,244,131,168,129,84,84,49,48,54,51,52,51,55,84,244,131,168,141,84,84,49,48,54,51,52,51,57,84,244,131,168,143,84,84,49,48,54,51,52,52,48,84,244,131,168,144,84,84,49,48,54,51,52,53,51,84,244,131,168,157,84,84,49,48,54,51,52,56,57,84,244,131,169,129,84,84,49,48,54,51,53,48,49,84,244,131,169,141,84,84,49,48,54,51,53,48,51,84,244,131,169,143,84,84,49,48,54,51,53,48,52,84,244,131,169,144,84,84,49,48,54,51,53,49,55,84,244,131,169,157,84,84,49,48,54,51,53,53,51,84,244,131,170,129,84,84,49,48,54,51,53,54,53,84,244,131,170,141,84,84,49,48,54,51,53,54,55,84,244,131,170,143,84,84,49,48,54,51,53,54,56,84,244,131,170,144,84,84,49,48,54,51,53,56,49,84,244,131,170,157,84,84,49,48,54,51,54,49,55,84,244,131,171,129,84,84,49,48,54,51,54,50,57,84,244,131,171,141,84,84,49,48,54,51,54,51,49,84,244,131,171,143,84,84,49,48,54,51,54,51,50,84,244,131,171,144,84,84,49,48,54,51,54,52,53,84,244,131,171,157,84,84,49,48,54,51,54,56,49,84,244,131,172,129,84,84,49,48,54,51,54,57,51,84,244,131,172,141,84,84,49,48,54,51,54,57,53,84,244,131,172,143,84,84,49,48,54,51,54,57,54,84,244,131,172,144,84,84,49,48,54,51,55,48,57,84,244,131,172,157,84,84,49,48,54,51,55,52,53,84,244,131,173,129,84,84,49,48,54,51,55,53,55,84,244,131,173,141,84,84,49,48,54,51,55,53,57,84,244,131,173,143,84,84,49,48,54,51,55,54,48,84,244,131,173,144,84,84,49,48,54,51,55,55,51,84,244,131,173,157,84,84,49,48,54,51,56,48,57,84,244,131,174,129,84,84,49,48,54,51,56,50,49,84,244,131,174,141,84,84,49,48,54,51,56,50,51,84,244,131,174,143,84,84,49,48,54,51,56,50,52,84,244,131,174,144,84,84,49,48,54,51,56,51,55,84,244,131,174,157,84,84,49,48,54,51,56,55,51,84,244,131,175,129,84,84,49,48,54,51,56,56,53,84,244,131,175,141,84,84,49,48,54,51,56,56,55,84,244,131,175,143,84,84,49,48,54,51,56,56,56,84,244,131,175,144,84,84,49,48,54,51,57,48,49,84,244,131,175,157,84,84,49,48,54,51,57,51,55,84,244,131,176,129,84,84,49,48,54,51,57,52,57,84,244,131,176,141,84,84,49,48,54,51,57,53,49,84,244,131,176,143,84,84,49,48,54,51,57,53,50,84,244,131,176,144,84,84,49,48,54,51,57,54,53,84,244,131,176,157,84,84,49,48,54,52,48,48,49,84,244,131,177,129,84,84,49,48,54,52,48,49,51,84,244,131,177,141,84,84,49,48,54,52,48,49,53,84,244,131,177,143,84,84,49,48,54,52,48,49,54,84,244,131,177,144,84,84,49,48,54,52,48,50,57,84,244,131,177,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20745 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20745_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20745_s.txt", Encoding.UTF8);

    public Test20745() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersc5ae22b09f3f4a3eaff829adc5876203",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,57,52,54,50,52,84,244,139,143,160,84,84,49,48,57,52,54,50,53,84,244,139,143,161,84,84,49,48,57,52,54,50,54,84,244,139,143,162,84,84,49,48,57,52,54,50,55,84,244,139,143,163,84,84,49,48,57,52,54,50,56,84,244,139,143,164,84,84,49,48,57,52,54,50,57,84,244,139,143,165,84,84,49,48,57,52,54,51,48,84,244,139,143,166,84,84,49,48,57,52,54,51,49,84,244,139,143,167,84,84,49,48,57,52,54,51,50,84,244,139,143,168,84,84,49,48,57,52,54,51,51,84,244,139,143,169,84,84,49,48,57,52,54,51,52,84,244,139,143,170,84,84,49,48,57,52,54,51,53,84,244,139,143,171,84,84,49,48,57,52,54,51,54,84,244,139,143,172,84,84,49,48,57,52,54,51,55,84,244,139,143,173,84,84,49,48,57,52,54,51,56,84,244,139,143,174,84,84,49,48,57,52,54,51,57,84,244,139,143,175,84,84,49,48,57,52,54,52,48,84,244,139,143,176,84,84,49,48,57,52,54,52,49,84,244,139,143,177,84,84,49,48,57,52,54,52,50,84,244,139,143,178,84,84,49,48,57,52,54,52,51,84,244,139,143,179,84,84,49,48,57,52,54,52,52,84,244,139,143,180,84,84,49,48,57,52,54,52,53,84,244,139,143,181,84,84,49,48,57,52,54,52,54,84,244,139,143,182,84,84,49,48,57,52,54,52,55,84,244,139,143,183,84,84,49,48,57,52,54,52,56,84,244,139,143,184,84,84,49,48,57,52,54,52,57,84,244,139,143,185,84,84,49,48,57,52,54,53,48,84,244,139,143,186,84,84,49,48,57,52,54,53,49,84,244,139,143,187,84,84,49,48,57,52,54,53,50,84,244,139,143,188,84,84,49,48,57,52,54,53,51,84,244,139,143,189,84,84,49,48,57,52,54,53,52,84,244,139,143,190,84,84,49,48,57,52,54,53,53,84,244,139,143,191,84,84,49,48,57,52,54,53,54,84,244,139,144,128,84,84,49,48,57,52,54,53,55,84,244,139,144,129,84,84,49,48,57,52,54,53,56,84,244,139,144,130,84,84,49,48,57,52,54,53,57,84,244,139,144,131,84,84,49,48,57,52,54,54,48,84,244,139,144,132,84,84,49,48,57,52,54,54,49,84,244,139,144,133,84,84,49,48,57,52,54,54,50,84,244,139,144,134,84,84,49,48,57,52,54,54,51,84,244,139,144,135,84,84,49,48,57,52,54,54,52,84,244,139,144,136,84,84,49,48,57,52,54,54,53,84,244,139,144,137,84,84,49,48,57,52,54,54,54,84,244,139,144,138,84,84,49,48,57,52,54,54,55,84,244,139,144,139,84,84,49,48,57,52,54,54,56,84,244,139,144,140,84,84,49,48,57,52,54,54,57,84,244,139,144,141,84,84,49,48,57,52,54,55,48,84,244,139,144,142,84,84,49,48,57,52,54,55,49,84,244,139,144,143,84,84,49,48,57,52,54,55,50,84,244,139,144,144,84,84,49,48,57,52,54,55,51,84,244,139,144,145,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20007 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20007_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20007_s.txt", Encoding.UTF8);

    public Test20007() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersc5d3e7c5509046d2aa3f8bb095571b82",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,48,50,48,54,49,84,243,180,169,141,84,84,49,48,48,50,48,54,51,84,243,180,169,143,84,84,49,48,48,50,48,54,52,84,243,180,169,144,84,84,49,48,48,50,48,55,55,84,243,180,169,157,84,84,49,48,48,50,49,49,51,84,243,180,170,129,84,84,49,48,48,50,49,50,53,84,243,180,170,141,84,84,49,48,48,50,49,50,55,84,243,180,170,143,84,84,49,48,48,50,49,50,56,84,243,180,170,144,84,84,49,48,48,50,49,52,49,84,243,180,170,157,84,84,49,48,48,50,49,55,55,84,243,180,171,129,84,84,49,48,48,50,49,56,57,84,243,180,171,141,84,84,49,48,48,50,49,57,49,84,243,180,171,143,84,84,49,48,48,50,49,57,50,84,243,180,171,144,84,84,49,48,48,50,50,48,53,84,243,180,171,157,84,84,49,48,48,50,50,52,49,84,243,180,172,129,84,84,49,48,48,50,50,53,51,84,243,180,172,141,84,84,49,48,48,50,50,53,53,84,243,180,172,143,84,84,49,48,48,50,50,53,54,84,243,180,172,144,84,84,49,48,48,50,50,54,57,84,243,180,172,157,84,84,49,48,48,50,51,48,53,84,243,180,173,129,84,84,49,48,48,50,51,49,55,84,243,180,173,141,84,84,49,48,48,50,51,49,57,84,243,180,173,143,84,84,49,48,48,50,51,50,48,84,243,180,173,144,84,84,49,48,48,50,51,51,51,84,243,180,173,157,84,84,49,48,48,50,51,54,57,84,243,180,174,129,84,84,49,48,48,50,51,56,49,84,243,180,174,141,84,84,49,48,48,50,51,56,51,84,243,180,174,143,84,84,49,48,48,50,51,56,52,84,243,180,174,144,84,84,49,48,48,50,51,57,55,84,243,180,174,157,84,84,49,48,48,50,52,51,51,84,243,180,175,129,84,84,49,48,48,50,52,52,53,84,243,180,175,141,84,84,49,48,48,50,52,52,55,84,243,180,175,143,84,84,49,48,48,50,52,52,56,84,243,180,175,144,84,84,49,48,48,50,52,54,49,84,243,180,175,157,84,84,49,48,48,50,52,57,55,84,243,180,176,129,84,84,49,48,48,50,53,48,57,84,243,180,176,141,84,84,49,48,48,50,53,49,49,84,243,180,176,143,84,84,49,48,48,50,53,49,50,84,243,180,176,144,84,84,49,48,48,50,53,50,53,84,243,180,176,157,84,84,49,48,48,50,53,54,49,84,243,180,177,129,84,84,49,48,48,50,53,55,51,84,243,180,177,141,84,84,49,48,48,50,53,55,53,84,243,180,177,143,84,84,49,48,48,50,53,55,54,84,243,180,177,144,84,84,49,48,48,50,53,56,57,84,243,180,177,157,84,84,49,48,48,50,54,50,53,84,243,180,178,129,84,84,49,48,48,50,54,51,55,84,243,180,178,141,84,84,49,48,48,50,54,51,57,84,243,180,178,143,84,84,49,48,48,50,54,52,48,84,243,180,178,144,84,84,49,48,48,50,54,53,51,84,243,180,178,157,84,84,49,48,48,50,54,56,57,84,243,180,179,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20165 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20165_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20165_s.txt", Encoding.UTF8);

    public Test20165() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers4f3362aed9424bd2bfac6751ee820ab9",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,50,54,55,54,53,84,243,186,171,141,84,84,49,48,50,54,55,54,55,84,243,186,171,143,84,84,49,48,50,54,55,54,56,84,243,186,171,144,84,84,49,48,50,54,55,56,49,84,243,186,171,157,84,84,49,48,50,54,56,49,55,84,243,186,172,129,84,84,49,48,50,54,56,50,57,84,243,186,172,141,84,84,49,48,50,54,56,51,49,84,243,186,172,143,84,84,49,48,50,54,56,51,50,84,243,186,172,144,84,84,49,48,50,54,56,52,53,84,243,186,172,157,84,84,49,48,50,54,56,56,49,84,243,186,173,129,84,84,49,48,50,54,56,57,51,84,243,186,173,141,84,84,49,48,50,54,56,57,53,84,243,186,173,143,84,84,49,48,50,54,56,57,54,84,243,186,173,144,84,84,49,48,50,54,57,48,57,84,243,186,173,157,84,84,49,48,50,54,57,52,53,84,243,186,174,129,84,84,49,48,50,54,57,53,55,84,243,186,174,141,84,84,49,48,50,54,57,53,57,84,243,186,174,143,84,84,49,48,50,54,57,54,48,84,243,186,174,144,84,84,49,48,50,54,57,55,51,84,243,186,174,157,84,84,49,48,50,55,48,48,57,84,243,186,175,129,84,84,49,48,50,55,48,50,49,84,243,186,175,141,84,84,49,48,50,55,48,50,51,84,243,186,175,143,84,84,49,48,50,55,48,50,52,84,243,186,175,144,84,84,49,48,50,55,48,51,55,84,243,186,175,157,84,84,49,48,50,55,48,55,51,84,243,186,176,129,84,84,49,48,50,55,48,56,53,84,243,186,176,141,84,84,49,48,50,55,48,56,55,84,243,186,176,143,84,84,49,48,50,55,48,56,56,84,243,186,176,144,84,84,49,48,50,55,49,48,49,84,243,186,176,157,84,84,49,48,50,55,49,51,55,84,243,186,177,129,84,84,49,48,50,55,49,52,57,84,243,186,177,141,84,84,49,48,50,55,49,53,49,84,243,186,177,143,84,84,49,48,50,55,49,53,50,84,243,186,177,144,84,84,49,48,50,55,49,54,53,84,243,186,177,157,84,84,49,48,50,55,50,48,49,84,243,186,178,129,84,84,49,48,50,55,50,49,51,84,243,186,178,141,84,84,49,48,50,55,50,49,53,84,243,186,178,143,84,84,49,48,50,55,50,49,54,84,243,186,178,144,84,84,49,48,50,55,50,50,57,84,243,186,178,157,84,84,49,48,50,55,50,54,53,84,243,186,179,129,84,84,49,48,50,55,50,55,55,84,243,186,179,141,84,84,49,48,50,55,50,55,57,84,243,186,179,143,84,84,49,48,50,55,50,56,48,84,243,186,179,144,84,84,49,48,50,55,50,57,51,84,243,186,179,157,84,84,49,48,50,55,51,50,57,84,243,186,180,129,84,84,49,48,50,55,51,52,49,84,243,186,180,141,84,84,49,48,50,55,51,52,51,84,243,186,180,143,84,84,49,48,50,55,51,52,52,84,243,186,180,144,84,84,49,48,50,55,51,53,55,84,243,186,180,157,84,84,49,48,50,55,51,57,51,84,243,186,181,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22791 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22791_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22791_s.txt", Encoding.UTF8);

    public Test22791() : base(recordedRequest, recordedResponse, "accounts8d43a0490823d21")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a0490823d21",
                        container: "containers0bd48f2ce8374f57b3f3c61b5595b35b",
                        blob: "Blobc57a67f2b3c0474099e5167f1c284e0e",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20423 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20423_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20423_s.txt", Encoding.UTF8);

    public Test20423() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers7f83ba854dc4459da9078f97f691d28c",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,52,57,55,56,84,244,129,164,130,84,84,49,48,53,52,57,55,57,84,244,129,164,131,84,84,49,48,53,52,57,56,48,84,244,129,164,132,84,84,49,48,53,52,57,56,49,84,244,129,164,133,84,84,49,48,53,52,57,56,50,84,244,129,164,134,84,84,49,48,53,52,57,56,51,84,244,129,164,135,84,84,49,48,53,52,57,56,52,84,244,129,164,136,84,84,49,48,53,52,57,56,53,84,244,129,164,137,84,84,49,48,53,52,57,56,54,84,244,129,164,138,84,84,49,48,53,52,57,56,55,84,244,129,164,139,84,84,49,48,53,52,57,56,56,84,244,129,164,140,84,84,49,48,53,52,57,56,57,84,244,129,164,141,84,84,49,48,53,52,57,57,48,84,244,129,164,142,84,84,49,48,53,52,57,57,49,84,244,129,164,143,84,84,49,48,53,52,57,57,50,84,244,129,164,144,84,84,49,48,53,52,57,57,51,84,244,129,164,145,84,84,49,48,53,52,57,57,52,84,244,129,164,146,84,84,49,48,53,52,57,57,53,84,244,129,164,147,84,84,49,48,53,52,57,57,54,84,244,129,164,148,84,84,49,48,53,52,57,57,55,84,244,129,164,149,84,84,49,48,53,52,57,57,56,84,244,129,164,150,84,84,49,48,53,52,57,57,57,84,244,129,164,151,84,84,49,48,53,53,48,48,48,84,244,129,164,152,84,84,49,48,53,53,48,48,49,84,244,129,164,153,84,84,49,48,53,53,48,48,50,84,244,129,164,154,84,84,49,48,53,53,48,48,51,84,244,129,164,155,84,84,49,48,53,53,48,48,52,84,244,129,164,156,84,84,49,48,53,53,48,48,53,84,244,129,164,157,84,84,49,48,53,53,48,48,54,84,244,129,164,158,84,84,49,48,53,53,48,48,55,84,244,129,164,159,84,84,49,48,53,53,48,48,56,84,244,129,164,160,84,84,49,48,53,53,48,48,57,84,244,129,164,161,84,84,49,48,53,53,48,49,48,84,244,129,164,162,84,84,49,48,53,53,48,49,49,84,244,129,164,163,84,84,49,48,53,53,48,49,50,84,244,129,164,164,84,84,49,48,53,53,48,49,51,84,244,129,164,165,84,84,49,48,53,53,48,49,52,84,244,129,164,166,84,84,49,48,53,53,48,49,53,84,244,129,164,167,84,84,49,48,53,53,48,49,54,84,244,129,164,168,84,84,49,48,53,53,48,49,55,84,244,129,164,169,84,84,49,48,53,53,48,49,56,84,244,129,164,170,84,84,49,48,53,53,48,49,57,84,244,129,164,171,84,84,49,48,53,53,48,50,48,84,244,129,164,172,84,84,49,48,53,53,48,50,49,84,244,129,164,173,84,84,49,48,53,53,48,50,50,84,244,129,164,174,84,84,49,48,53,53,48,50,51,84,244,129,164,175,84,84,49,48,53,53,48,50,52,84,244,129,164,176,84,84,49,48,53,53,48,50,53,84,244,129,164,177,84,84,49,48,53,53,48,50,54,84,244,129,164,178,84,84,49,48,53,53,48,50,55,84,244,129,164,179,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22792 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22792_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22792_s.txt", Encoding.UTF8);

    public Test22792() : base(recordedRequest, recordedResponse, "accounts8d43a0490823d21")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a0490823d21",
                        container: "containers0bd48f2ce8374f57b3f3c61b5595b35b",
                        blob: "Blob9eaab4c1a74446da90bf773d7ee98a88",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19886 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19886_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19886_s.txt", Encoding.UTF8);

    public Test19886() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersf0a96ab3064046f8a2fc77e6e3ebae9e",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,56,51,49,54,48,84,243,176,129,184,84,84,57,56,51,49,54,49,84,243,176,129,185,84,84,57,56,51,49,54,50,84,243,176,129,186,84,84,57,56,51,49,54,51,84,243,176,129,187,84,84,57,56,51,49,54,52,84,243,176,129,188,84,84,57,56,51,49,54,53,84,243,176,129,189,84,84,57,56,51,49,54,54,84,243,176,129,190,84,84,57,56,51,49,54,55,84,243,176,129,191,84,84,57,56,51,49,54,57,84,243,176,130,129,84,84,57,56,51,49,56,49,84,243,176,130,141,84,84,57,56,51,49,56,51,84,243,176,130,143,84,84,57,56,51,49,56,52,84,243,176,130,144,84,84,57,56,51,49,57,55,84,243,176,130,157,84,84,57,56,51,50,51,51,84,243,176,131,129,84,84,57,56,51,50,52,53,84,243,176,131,141,84,84,57,56,51,50,52,55,84,243,176,131,143,84,84,57,56,51,50,52,56,84,243,176,131,144,84,84,57,56,51,50,54,49,84,243,176,131,157,84,84,57,56,51,50,57,55,84,243,176,132,129,84,84,57,56,51,51,48,57,84,243,176,132,141,84,84,57,56,51,51,49,49,84,243,176,132,143,84,84,57,56,51,51,49,50,84,243,176,132,144,84,84,57,56,51,51,50,53,84,243,176,132,157,84,84,57,56,51,51,54,49,84,243,176,133,129,84,84,57,56,51,51,55,51,84,243,176,133,141,84,84,57,56,51,51,55,53,84,243,176,133,143,84,84,57,56,51,51,55,54,84,243,176,133,144,84,84,57,56,51,51,56,57,84,243,176,133,157,84,84,57,56,51,52,50,53,84,243,176,134,129,84,84,57,56,51,52,51,55,84,243,176,134,141,84,84,57,56,51,52,51,57,84,243,176,134,143,84,84,57,56,51,52,52,48,84,243,176,134,144,84,84,57,56,51,52,53,51,84,243,176,134,157,84,84,57,56,51,52,56,57,84,243,176,135,129,84,84,57,56,51,53,48,49,84,243,176,135,141,84,84,57,56,51,53,48,51,84,243,176,135,143,84,84,57,56,51,53,48,52,84,243,176,135,144,84,84,57,56,51,53,49,55,84,243,176,135,157,84,84,57,56,51,53,53,51,84,243,176,136,129,84,84,57,56,51,53,54,53,84,243,176,136,141,84,84,57,56,51,53,54,55,84,243,176,136,143,84,84,57,56,51,53,54,56,84,243,176,136,144,84,84,57,56,51,53,56,49,84,243,176,136,157,84,84,57,56,51,54,49,55,84,243,176,137,129,84,84,57,56,51,54,50,57,84,243,176,137,141,84,84,57,56,51,54,51,49,84,243,176,137,143,84,84,57,56,51,54,51,50,84,243,176,137,144,84,84,57,56,51,54,52,53,84,243,176,137,157,84,84,57,56,51,54,56,49,84,243,176,138,129,84,84,57,56,51,54,57,51,84,243,176,138,141,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19816 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19816_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19816_s.txt", Encoding.UTF8);

    public Test19816() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers3d1fce2fe43b489ca49e5d4066014499",
                        blob: Encoding.UTF8.GetString(new byte[]{84,53,56,51,55,51,84,238,144,133,84,84,53,56,51,55,52,84,238,144,134,84,84,53,56,51,55,53,84,238,144,135,84,84,53,56,51,55,54,84,238,144,136,84,84,53,56,51,55,55,84,238,144,137,84,84,53,56,51,55,56,84,238,144,138,84,84,53,56,51,55,57,84,238,144,139,84,84,53,56,51,56,48,84,238,144,140,84,84,53,56,51,56,49,84,238,144,141,84,84,53,56,51,56,50,84,238,144,142,84,84,53,56,51,56,51,84,238,144,143,84,84,53,56,51,56,52,84,238,144,144,84,84,53,56,51,56,53,84,238,144,145,84,84,53,56,51,56,54,84,238,144,146,84,84,53,56,51,56,55,84,238,144,147,84,84,53,56,51,56,56,84,238,144,148,84,84,53,56,51,56,57,84,238,144,149,84,84,53,56,51,57,48,84,238,144,150,84,84,53,56,51,57,49,84,238,144,151,84,84,53,56,51,57,50,84,238,144,152,84,84,53,56,51,57,51,84,238,144,153,84,84,53,56,51,57,52,84,238,144,154,84,84,53,56,51,57,53,84,238,144,155,84,84,53,56,51,57,54,84,238,144,156,84,84,53,56,51,57,55,84,238,144,157,84,84,53,56,51,57,56,84,238,144,158,84,84,53,56,51,57,57,84,238,144,159,84,84,53,56,52,48,48,84,238,144,160,84,84,53,56,52,48,49,84,238,144,161,84,84,53,56,52,48,50,84,238,144,162,84,84,53,56,52,48,51,84,238,144,163,84,84,53,56,52,48,52,84,238,144,164,84,84,53,56,52,48,53,84,238,144,165,84,84,53,56,52,48,54,84,238,144,166,84,84,53,56,52,48,55,84,238,144,167,84,84,53,56,52,48,56,84,238,144,168,84,84,53,56,52,48,57,84,238,144,169,84,84,53,56,52,49,48,84,238,144,170,84,84,53,56,52,49,49,84,238,144,171,84,84,53,56,52,49,50,84,238,144,172,84,84,53,56,52,49,51,84,238,144,173,84,84,53,56,52,49,52,84,238,144,174,84,84,53,56,52,49,53,84,238,144,175,84,84,53,56,52,49,54,84,238,144,176,84,84,53,56,52,49,55,84,238,144,177,84,84,53,56,52,49,56,84,238,144,178,84,84,53,56,52,49,57,84,238,144,179,84,84,53,56,52,50,48,84,238,144,180,84,84,53,56,52,50,49,84,238,144,181,84,84,53,56,52,50,50,84,238,144,182,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20586 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20586_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20586_s.txt", Encoding.UTF8);

    public Test20586() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers2997cf743a0f481c9f696984938aa742",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,54,57,57,50,57,84,244,133,141,169,84,84,49,48,54,57,57,51,48,84,244,133,141,170,84,84,49,48,54,57,57,51,49,84,244,133,141,171,84,84,49,48,54,57,57,51,50,84,244,133,141,172,84,84,49,48,54,57,57,51,51,84,244,133,141,173,84,84,49,48,54,57,57,51,52,84,244,133,141,174,84,84,49,48,54,57,57,51,53,84,244,133,141,175,84,84,49,48,54,57,57,51,54,84,244,133,141,176,84,84,49,48,54,57,57,51,55,84,244,133,141,177,84,84,49,48,54,57,57,51,56,84,244,133,141,178,84,84,49,48,54,57,57,51,57,84,244,133,141,179,84,84,49,48,54,57,57,52,48,84,244,133,141,180,84,84,49,48,54,57,57,52,49,84,244,133,141,181,84,84,49,48,54,57,57,52,50,84,244,133,141,182,84,84,49,48,54,57,57,52,51,84,244,133,141,183,84,84,49,48,54,57,57,52,52,84,244,133,141,184,84,84,49,48,54,57,57,52,53,84,244,133,141,185,84,84,49,48,54,57,57,52,54,84,244,133,141,186,84,84,49,48,54,57,57,52,55,84,244,133,141,187,84,84,49,48,54,57,57,52,56,84,244,133,141,188,84,84,49,48,54,57,57,52,57,84,244,133,141,189,84,84,49,48,54,57,57,53,48,84,244,133,141,190,84,84,49,48,54,57,57,53,49,84,244,133,141,191,84,84,49,48,54,57,57,53,51,84,244,133,142,129,84,84,49,48,54,57,57,54,53,84,244,133,142,141,84,84,49,48,54,57,57,54,55,84,244,133,142,143,84,84,49,48,54,57,57,54,56,84,244,133,142,144,84,84,49,48,54,57,57,56,49,84,244,133,142,157,84,84,49,48,55,48,48,49,54,84,244,133,143,128,84,84,49,48,55,48,48,49,55,84,244,133,143,129,84,84,49,48,55,48,48,49,56,84,244,133,143,130,84,84,49,48,55,48,48,49,57,84,244,133,143,131,84,84,49,48,55,48,48,50,48,84,244,133,143,132,84,84,49,48,55,48,48,50,49,84,244,133,143,133,84,84,49,48,55,48,48,50,50,84,244,133,143,134,84,84,49,48,55,48,48,50,51,84,244,133,143,135,84,84,49,48,55,48,48,50,52,84,244,133,143,136,84,84,49,48,55,48,48,50,53,84,244,133,143,137,84,84,49,48,55,48,48,50,54,84,244,133,143,138,84,84,49,48,55,48,48,50,55,84,244,133,143,139,84,84,49,48,55,48,48,50,56,84,244,133,143,140,84,84,49,48,55,48,48,50,57,84,244,133,143,141,84,84,49,48,55,48,48,51,48,84,244,133,143,142,84,84,49,48,55,48,48,51,49,84,244,133,143,143,84,84,49,48,55,48,48,51,50,84,244,133,143,144,84,84,49,48,55,48,48,51,51,84,244,133,143,145,84,84,49,48,55,48,48,51,52,84,244,133,143,146,84,84,49,48,55,48,48,51,53,84,244,133,143,147,84,84,49,48,55,48,48,51,54,84,244,133,143,148,84,84,49,48,55,48,48,51,55,84,244,133,143,149,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19945 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19945_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19945_s.txt", Encoding.UTF8);

    public Test19945() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersbf5ecfbea5a24d8a8188936c9be6fa20",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,57,50,50,51,48,84,243,178,143,166,84,84,57,57,50,50,51,49,84,243,178,143,167,84,84,57,57,50,50,51,50,84,243,178,143,168,84,84,57,57,50,50,51,51,84,243,178,143,169,84,84,57,57,50,50,51,52,84,243,178,143,170,84,84,57,57,50,50,51,53,84,243,178,143,171,84,84,57,57,50,50,51,54,84,243,178,143,172,84,84,57,57,50,50,51,55,84,243,178,143,173,84,84,57,57,50,50,51,56,84,243,178,143,174,84,84,57,57,50,50,51,57,84,243,178,143,175,84,84,57,57,50,50,52,48,84,243,178,143,176,84,84,57,57,50,50,52,49,84,243,178,143,177,84,84,57,57,50,50,52,50,84,243,178,143,178,84,84,57,57,50,50,52,51,84,243,178,143,179,84,84,57,57,50,50,52,52,84,243,178,143,180,84,84,57,57,50,50,52,53,84,243,178,143,181,84,84,57,57,50,50,52,54,84,243,178,143,182,84,84,57,57,50,50,52,55,84,243,178,143,183,84,84,57,57,50,50,52,56,84,243,178,143,184,84,84,57,57,50,50,52,57,84,243,178,143,185,84,84,57,57,50,50,53,48,84,243,178,143,186,84,84,57,57,50,50,53,49,84,243,178,143,187,84,84,57,57,50,50,53,50,84,243,178,143,188,84,84,57,57,50,50,53,51,84,243,178,143,189,84,84,57,57,50,50,53,52,84,243,178,143,190,84,84,57,57,50,50,53,53,84,243,178,143,191,84,84,57,57,50,50,53,54,84,243,178,144,128,84,84,57,57,50,50,53,55,84,243,178,144,129,84,84,57,57,50,50,53,56,84,243,178,144,130,84,84,57,57,50,50,53,57,84,243,178,144,131,84,84,57,57,50,50,54,48,84,243,178,144,132,84,84,57,57,50,50,54,49,84,243,178,144,133,84,84,57,57,50,50,54,50,84,243,178,144,134,84,84,57,57,50,50,54,51,84,243,178,144,135,84,84,57,57,50,50,54,52,84,243,178,144,136,84,84,57,57,50,50,54,53,84,243,178,144,137,84,84,57,57,50,50,54,54,84,243,178,144,138,84,84,57,57,50,50,54,55,84,243,178,144,139,84,84,57,57,50,50,54,56,84,243,178,144,140,84,84,57,57,50,50,54,57,84,243,178,144,141,84,84,57,57,50,50,55,48,84,243,178,144,142,84,84,57,57,50,50,55,49,84,243,178,144,143,84,84,57,57,50,50,55,50,84,243,178,144,144,84,84,57,57,50,50,55,51,84,243,178,144,145,84,84,57,57,50,50,55,52,84,243,178,144,146,84,84,57,57,50,50,55,53,84,243,178,144,147,84,84,57,57,50,50,55,54,84,243,178,144,148,84,84,57,57,50,50,55,55,84,243,178,144,149,84,84,57,57,50,50,55,56,84,243,178,144,150,84,84,57,57,50,50,55,57,84,243,178,144,151,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20677 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20677_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20677_s.txt", Encoding.UTF8);

    public Test20677() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers9df780a74f2549dda8f9f337dadb7946",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,56,51,53,56,53,84,244,136,163,129,84,84,49,48,56,51,53,57,55,84,244,136,163,141,84,84,49,48,56,51,53,57,57,84,244,136,163,143,84,84,49,48,56,51,54,48,48,84,244,136,163,144,84,84,49,48,56,51,54,49,51,84,244,136,163,157,84,84,49,48,56,51,54,52,57,84,244,136,164,129,84,84,49,48,56,51,54,54,49,84,244,136,164,141,84,84,49,48,56,51,54,54,51,84,244,136,164,143,84,84,49,48,56,51,54,54,52,84,244,136,164,144,84,84,49,48,56,51,54,55,55,84,244,136,164,157,84,84,49,48,56,51,55,49,51,84,244,136,165,129,84,84,49,48,56,51,55,50,53,84,244,136,165,141,84,84,49,48,56,51,55,50,55,84,244,136,165,143,84,84,49,48,56,51,55,50,56,84,244,136,165,144,84,84,49,48,56,51,55,52,49,84,244,136,165,157,84,84,49,48,56,51,55,55,55,84,244,136,166,129,84,84,49,48,56,51,55,56,57,84,244,136,166,141,84,84,49,48,56,51,55,57,49,84,244,136,166,143,84,84,49,48,56,51,55,57,50,84,244,136,166,144,84,84,49,48,56,51,56,48,53,84,244,136,166,157,84,84,49,48,56,51,56,52,49,84,244,136,167,129,84,84,49,48,56,51,56,53,51,84,244,136,167,141,84,84,49,48,56,51,56,53,53,84,244,136,167,143,84,84,49,48,56,51,56,53,54,84,244,136,167,144,84,84,49,48,56,51,56,54,57,84,244,136,167,157,84,84,49,48,56,51,57,48,53,84,244,136,168,129,84,84,49,48,56,51,57,49,55,84,244,136,168,141,84,84,49,48,56,51,57,49,57,84,244,136,168,143,84,84,49,48,56,51,57,50,48,84,244,136,168,144,84,84,49,48,56,51,57,51,51,84,244,136,168,157,84,84,49,48,56,51,57,54,57,84,244,136,169,129,84,84,49,48,56,51,57,56,49,84,244,136,169,141,84,84,49,48,56,51,57,56,51,84,244,136,169,143,84,84,49,48,56,51,57,56,52,84,244,136,169,144,84,84,49,48,56,51,57,57,55,84,244,136,169,157,84,84,49,48,56,52,48,51,51,84,244,136,170,129,84,84,49,48,56,52,48,52,53,84,244,136,170,141,84,84,49,48,56,52,48,52,55,84,244,136,170,143,84,84,49,48,56,52,48,52,56,84,244,136,170,144,84,84,49,48,56,52,48,54,49,84,244,136,170,157,84,84,49,48,56,52,48,57,55,84,244,136,171,129,84,84,49,48,56,52,49,48,57,84,244,136,171,141,84,84,49,48,56,52,49,49,49,84,244,136,171,143,84,84,49,48,56,52,49,49,50,84,244,136,171,144,84,84,49,48,56,52,49,50,53,84,244,136,171,157,84,84,49,48,56,52,49,54,49,84,244,136,172,129,84,84,49,48,56,52,49,55,51,84,244,136,172,141,84,84,49,48,56,52,49,55,53,84,244,136,172,143,84,84,49,48,56,52,49,55,54,84,244,136,172,144,84,84,49,48,56,52,49,56,57,84,244,136,172,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21092 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21092_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21092_s.txt", Encoding.UTF8);

    public Test21092() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers79aa3dd90e344ebe9466f3cb0c56378a",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,50,53,48,48,84,244,143,166,180,84,84,49,49,49,50,53,48,49,84,244,143,166,181,84,84,49,49,49,50,53,48,50,84,244,143,166,182,84,84,49,49,49,50,53,48,51,84,244,143,166,183,84,84,49,49,49,50,53,48,52,84,244,143,166,184,84,84,49,49,49,50,53,48,53,84,244,143,166,185,84,84,49,49,49,50,53,48,54,84,244,143,166,186,84,84,49,49,49,50,53,48,55,84,244,143,166,187,84,84,49,49,49,50,53,48,56,84,244,143,166,188,84,84,49,49,49,50,53,48,57,84,244,143,166,189,84,84,49,49,49,50,53,49,48,84,244,143,166,190,84,84,49,49,49,50,53,49,49,84,244,143,166,191,84,84,49,49,49,50,53,49,50,84,244,143,167,128,84,84,49,49,49,50,53,49,51,84,244,143,167,129,84,84,49,49,49,50,53,49,52,84,244,143,167,130,84,84,49,49,49,50,53,49,53,84,244,143,167,131,84,84,49,49,49,50,53,49,54,84,244,143,167,132,84,84,49,49,49,50,53,49,55,84,244,143,167,133,84,84,49,49,49,50,53,49,56,84,244,143,167,134,84,84,49,49,49,50,53,49,57,84,244,143,167,135,84,84,49,49,49,50,53,50,48,84,244,143,167,136,84,84,49,49,49,50,53,50,49,84,244,143,167,137,84,84,49,49,49,50,53,50,50,84,244,143,167,138,84,84,49,49,49,50,53,50,51,84,244,143,167,139,84,84,49,49,49,50,53,50,52,84,244,143,167,140,84,84,49,49,49,50,53,50,53,84,244,143,167,141,84,84,49,49,49,50,53,50,54,84,244,143,167,142,84,84,49,49,49,50,53,50,55,84,244,143,167,143,84,84,49,49,49,50,53,50,56,84,244,143,167,144,84,84,49,49,49,50,53,50,57,84,244,143,167,145,84,84,49,49,49,50,53,51,48,84,244,143,167,146,84,84,49,49,49,50,53,51,49,84,244,143,167,147,84,84,49,49,49,50,53,51,50,84,244,143,167,148,84,84,49,49,49,50,53,51,51,84,244,143,167,149,84,84,49,49,49,50,53,51,52,84,244,143,167,150,84,84,49,49,49,50,53,51,53,84,244,143,167,151,84,84,49,49,49,50,53,51,54,84,244,143,167,152,84,84,49,49,49,50,53,51,55,84,244,143,167,153,84,84,49,49,49,50,53,51,56,84,244,143,167,154,84,84,49,49,49,50,53,51,57,84,244,143,167,155,84,84,49,49,49,50,53,52,48,84,244,143,167,156,84,84,49,49,49,50,53,52,49,84,244,143,167,157,84,84,49,49,49,50,53,52,50,84,244,143,167,158,84,84,49,49,49,50,53,52,51,84,244,143,167,159,84,84,49,49,49,50,53,52,52,84,244,143,167,160,84,84,49,49,49,50,53,52,53,84,244,143,167,161,84,84,49,49,49,50,53,52,54,84,244,143,167,162,84,84,49,49,49,50,53,52,55,84,244,143,167,163,84,84,49,49,49,50,53,52,56,84,244,143,167,164,84,84,49,49,49,50,53,52,57,84,244,143,167,165,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20548 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20548_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20548_s.txt", Encoding.UTF8);

    public Test20548() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers169b02be047c4c76acbb586fdc8886c6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,54,52,48,54,53,84,244,131,178,129,84,84,49,48,54,52,48,55,55,84,244,131,178,141,84,84,49,48,54,52,48,55,57,84,244,131,178,143,84,84,49,48,54,52,48,56,48,84,244,131,178,144,84,84,49,48,54,52,48,57,51,84,244,131,178,157,84,84,49,48,54,52,49,50,57,84,244,131,179,129,84,84,49,48,54,52,49,52,49,84,244,131,179,141,84,84,49,48,54,52,49,52,51,84,244,131,179,143,84,84,49,48,54,52,49,52,52,84,244,131,179,144,84,84,49,48,54,52,49,53,55,84,244,131,179,157,84,84,49,48,54,52,49,57,51,84,244,131,180,129,84,84,49,48,54,52,50,48,53,84,244,131,180,141,84,84,49,48,54,52,50,48,55,84,244,131,180,143,84,84,49,48,54,52,50,48,56,84,244,131,180,144,84,84,49,48,54,52,50,50,49,84,244,131,180,157,84,84,49,48,54,52,50,53,55,84,244,131,181,129,84,84,49,48,54,52,50,54,57,84,244,131,181,141,84,84,49,48,54,52,50,55,49,84,244,131,181,143,84,84,49,48,54,52,50,55,50,84,244,131,181,144,84,84,49,48,54,52,50,56,53,84,244,131,181,157,84,84,49,48,54,52,51,50,49,84,244,131,182,129,84,84,49,48,54,52,51,51,51,84,244,131,182,141,84,84,49,48,54,52,51,51,53,84,244,131,182,143,84,84,49,48,54,52,51,51,54,84,244,131,182,144,84,84,49,48,54,52,51,52,57,84,244,131,182,157,84,84,49,48,54,52,51,56,53,84,244,131,183,129,84,84,49,48,54,52,51,57,55,84,244,131,183,141,84,84,49,48,54,52,51,57,57,84,244,131,183,143,84,84,49,48,54,52,52,48,48,84,244,131,183,144,84,84,49,48,54,52,52,49,51,84,244,131,183,157,84,84,49,48,54,52,52,52,57,84,244,131,184,129,84,84,49,48,54,52,52,54,49,84,244,131,184,141,84,84,49,48,54,52,52,54,51,84,244,131,184,143,84,84,49,48,54,52,52,54,52,84,244,131,184,144,84,84,49,48,54,52,52,55,55,84,244,131,184,157,84,84,49,48,54,52,53,49,51,84,244,131,185,129,84,84,49,48,54,52,53,50,53,84,244,131,185,141,84,84,49,48,54,52,53,50,55,84,244,131,185,143,84,84,49,48,54,52,53,50,56,84,244,131,185,144,84,84,49,48,54,52,53,52,49,84,244,131,185,157,84,84,49,48,54,52,53,55,55,84,244,131,186,129,84,84,49,48,54,52,53,56,57,84,244,131,186,141,84,84,49,48,54,52,53,57,49,84,244,131,186,143,84,84,49,48,54,52,53,57,50,84,244,131,186,144,84,84,49,48,54,52,54,48,53,84,244,131,186,157,84,84,49,48,54,52,54,52,49,84,244,131,187,129,84,84,49,48,54,52,54,53,51,84,244,131,187,141,84,84,49,48,54,52,54,53,53,84,244,131,187,143,84,84,49,48,54,52,54,53,54,84,244,131,187,144,84,84,49,48,54,52,54,54,57,84,244,131,187,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20616 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20616_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20616_s.txt", Encoding.UTF8);

    public Test20616() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers5f5b393ed8e742338d6031fb2e225092",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,55,52,49,54,57,84,244,134,143,185,84,84,49,48,55,52,49,55,48,84,244,134,143,186,84,84,49,48,55,52,49,55,49,84,244,134,143,187,84,84,49,48,55,52,49,55,50,84,244,134,143,188,84,84,49,48,55,52,49,55,51,84,244,134,143,189,84,84,49,48,55,52,49,55,52,84,244,134,143,190,84,84,49,48,55,52,49,55,53,84,244,134,143,191,84,84,49,48,55,52,49,55,54,84,244,134,144,128,84,84,49,48,55,52,49,55,55,84,244,134,144,129,84,84,49,48,55,52,49,55,56,84,244,134,144,130,84,84,49,48,55,52,49,55,57,84,244,134,144,131,84,84,49,48,55,52,49,56,48,84,244,134,144,132,84,84,49,48,55,52,49,56,49,84,244,134,144,133,84,84,49,48,55,52,49,56,50,84,244,134,144,134,84,84,49,48,55,52,49,56,51,84,244,134,144,135,84,84,49,48,55,52,49,56,52,84,244,134,144,136,84,84,49,48,55,52,49,56,53,84,244,134,144,137,84,84,49,48,55,52,49,56,54,84,244,134,144,138,84,84,49,48,55,52,49,56,55,84,244,134,144,139,84,84,49,48,55,52,49,56,56,84,244,134,144,140,84,84,49,48,55,52,49,56,57,84,244,134,144,141,84,84,49,48,55,52,49,57,48,84,244,134,144,142,84,84,49,48,55,52,49,57,49,84,244,134,144,143,84,84,49,48,55,52,49,57,50,84,244,134,144,144,84,84,49,48,55,52,49,57,51,84,244,134,144,145,84,84,49,48,55,52,49,57,52,84,244,134,144,146,84,84,49,48,55,52,49,57,53,84,244,134,144,147,84,84,49,48,55,52,49,57,54,84,244,134,144,148,84,84,49,48,55,52,49,57,55,84,244,134,144,149,84,84,49,48,55,52,49,57,56,84,244,134,144,150,84,84,49,48,55,52,49,57,57,84,244,134,144,151,84,84,49,48,55,52,50,48,48,84,244,134,144,152,84,84,49,48,55,52,50,48,49,84,244,134,144,153,84,84,49,48,55,52,50,48,50,84,244,134,144,154,84,84,49,48,55,52,50,48,51,84,244,134,144,155,84,84,49,48,55,52,50,48,52,84,244,134,144,156,84,84,49,48,55,52,50,48,53,84,244,134,144,157,84,84,49,48,55,52,50,48,54,84,244,134,144,158,84,84,49,48,55,52,50,48,55,84,244,134,144,159,84,84,49,48,55,52,50,48,56,84,244,134,144,160,84,84,49,48,55,52,50,48,57,84,244,134,144,161,84,84,49,48,55,52,50,49,48,84,244,134,144,162,84,84,49,48,55,52,50,49,49,84,244,134,144,163,84,84,49,48,55,52,50,49,50,84,244,134,144,164,84,84,49,48,55,52,50,49,51,84,244,134,144,165,84,84,49,48,55,52,50,49,52,84,244,134,144,166,84,84,49,48,55,52,50,49,53,84,244,134,144,167,84,84,49,48,55,52,50,49,54,84,244,134,144,168,84,84,49,48,55,52,50,49,55,84,244,134,144,169,84,84,49,48,55,52,50,49,56,84,244,134,144,170,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22793 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22793_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22793_s.txt", Encoding.UTF8);

    public Test22793() : base(recordedRequest, recordedResponse, "accounts8d43a0490823d21")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a0490823d21",
                        container: "containers0bd48f2ce8374f57b3f3c61b5595b35b",
                        blob: "Blob8bbc5aa879284250875eed18132c5dd0",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20292 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20292_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20292_s.txt", Encoding.UTF8);

    public Test20292() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers712afb35b54344eb8fa90647f752cd92",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,52,54,51,57,49,84,243,191,157,183,84,84,49,48,52,54,51,57,50,84,243,191,157,184,84,84,49,48,52,54,51,57,51,84,243,191,157,185,84,84,49,48,52,54,51,57,52,84,243,191,157,186,84,84,49,48,52,54,51,57,53,84,243,191,157,187,84,84,49,48,52,54,51,57,54,84,243,191,157,188,84,84,49,48,52,54,51,57,55,84,243,191,157,189,84,84,49,48,52,54,51,57,56,84,243,191,157,190,84,84,49,48,52,54,51,57,57,84,243,191,157,191,84,84,49,48,52,54,52,48,49,84,243,191,158,129,84,84,49,48,52,54,52,49,51,84,243,191,158,141,84,84,49,48,52,54,52,49,53,84,243,191,158,143,84,84,49,48,52,54,52,49,54,84,243,191,158,144,84,84,49,48,52,54,52,50,57,84,243,191,158,157,84,84,49,48,52,54,52,54,53,84,243,191,159,129,84,84,49,48,52,54,52,55,55,84,243,191,159,141,84,84,49,48,52,54,52,55,57,84,243,191,159,143,84,84,49,48,52,54,52,56,48,84,243,191,159,144,84,84,49,48,52,54,52,57,51,84,243,191,159,157,84,84,49,48,52,54,53,50,57,84,243,191,160,129,84,84,49,48,52,54,53,52,49,84,243,191,160,141,84,84,49,48,52,54,53,52,51,84,243,191,160,143,84,84,49,48,52,54,53,52,52,84,243,191,160,144,84,84,49,48,52,54,53,53,55,84,243,191,160,157,84,84,49,48,52,54,53,57,51,84,243,191,161,129,84,84,49,48,52,54,54,48,53,84,243,191,161,141,84,84,49,48,52,54,54,48,55,84,243,191,161,143,84,84,49,48,52,54,54,48,56,84,243,191,161,144,84,84,49,48,52,54,54,50,49,84,243,191,161,157,84,84,49,48,52,54,54,53,55,84,243,191,162,129,84,84,49,48,52,54,54,54,57,84,243,191,162,141,84,84,49,48,52,54,54,55,49,84,243,191,162,143,84,84,49,48,52,54,54,55,50,84,243,191,162,144,84,84,49,48,52,54,54,56,53,84,243,191,162,157,84,84,49,48,52,54,55,50,49,84,243,191,163,129,84,84,49,48,52,54,55,51,51,84,243,191,163,141,84,84,49,48,52,54,55,51,53,84,243,191,163,143,84,84,49,48,52,54,55,51,54,84,243,191,163,144,84,84,49,48,52,54,55,52,57,84,243,191,163,157,84,84,49,48,52,54,55,56,53,84,243,191,164,129,84,84,49,48,52,54,55,57,55,84,243,191,164,141,84,84,49,48,52,54,55,57,57,84,243,191,164,143,84,84,49,48,52,54,56,48,48,84,243,191,164,144,84,84,49,48,52,54,56,49,51,84,243,191,164,157,84,84,49,48,52,54,56,52,57,84,243,191,165,129,84,84,49,48,52,54,56,54,49,84,243,191,165,141,84,84,49,48,52,54,56,54,51,84,243,191,165,143,84,84,49,48,52,54,56,54,52,84,243,191,165,144,84,84,49,48,52,54,56,55,55,84,243,191,165,157,84,84,49,48,52,54,57,49,51,84,243,191,166,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20521 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20521_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20521_s.txt", Encoding.UTF8);

    public Test20521() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers169b02be047c4c76acbb586fdc8886c6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,57,53,50,49,84,244,130,171,129,84,84,49,48,53,57,53,51,51,84,244,130,171,141,84,84,49,48,53,57,53,51,53,84,244,130,171,143,84,84,49,48,53,57,53,51,54,84,244,130,171,144,84,84,49,48,53,57,53,52,57,84,244,130,171,157,84,84,49,48,53,57,53,56,53,84,244,130,172,129,84,84,49,48,53,57,53,57,55,84,244,130,172,141,84,84,49,48,53,57,53,57,57,84,244,130,172,143,84,84,49,48,53,57,54,48,48,84,244,130,172,144,84,84,49,48,53,57,54,49,51,84,244,130,172,157,84,84,49,48,53,57,54,52,57,84,244,130,173,129,84,84,49,48,53,57,54,54,49,84,244,130,173,141,84,84,49,48,53,57,54,54,51,84,244,130,173,143,84,84,49,48,53,57,54,54,52,84,244,130,173,144,84,84,49,48,53,57,54,55,55,84,244,130,173,157,84,84,49,48,53,57,55,49,51,84,244,130,174,129,84,84,49,48,53,57,55,50,53,84,244,130,174,141,84,84,49,48,53,57,55,50,55,84,244,130,174,143,84,84,49,48,53,57,55,50,56,84,244,130,174,144,84,84,49,48,53,57,55,52,49,84,244,130,174,157,84,84,49,48,53,57,55,55,55,84,244,130,175,129,84,84,49,48,53,57,55,56,57,84,244,130,175,141,84,84,49,48,53,57,55,57,49,84,244,130,175,143,84,84,49,48,53,57,55,57,50,84,244,130,175,144,84,84,49,48,53,57,56,48,53,84,244,130,175,157,84,84,49,48,53,57,56,52,49,84,244,130,176,129,84,84,49,48,53,57,56,53,51,84,244,130,176,141,84,84,49,48,53,57,56,53,53,84,244,130,176,143,84,84,49,48,53,57,56,53,54,84,244,130,176,144,84,84,49,48,53,57,56,54,57,84,244,130,176,157,84,84,49,48,53,57,57,48,53,84,244,130,177,129,84,84,49,48,53,57,57,49,55,84,244,130,177,141,84,84,49,48,53,57,57,49,57,84,244,130,177,143,84,84,49,48,53,57,57,50,48,84,244,130,177,144,84,84,49,48,53,57,57,51,51,84,244,130,177,157,84,84,49,48,53,57,57,54,57,84,244,130,178,129,84,84,49,48,53,57,57,56,49,84,244,130,178,141,84,84,49,48,53,57,57,56,51,84,244,130,178,143,84,84,49,48,53,57,57,56,52,84,244,130,178,144,84,84,49,48,53,57,57,57,55,84,244,130,178,157,84,84,49,48,54,48,48,51,51,84,244,130,179,129,84,84,49,48,54,48,48,52,53,84,244,130,179,141,84,84,49,48,54,48,48,52,55,84,244,130,179,143,84,84,49,48,54,48,48,52,56,84,244,130,179,144,84,84,49,48,54,48,48,54,49,84,244,130,179,157,84,84,49,48,54,48,48,57,55,84,244,130,180,129,84,84,49,48,54,48,49,48,57,84,244,130,180,141,84,84,49,48,54,48,49,49,49,84,244,130,180,143,84,84,49,48,54,48,49,49,50,84,244,130,180,144,84,84,49,48,54,48,49,50,53,84,244,130,180,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20773 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20773_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20773_s.txt", Encoding.UTF8);

    public Test20773() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersc5ae22b09f3f4a3eaff829adc5876203",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,57,56,56,48,53,84,244,140,144,181,84,84,49,48,57,56,56,48,54,84,244,140,144,182,84,84,49,48,57,56,56,48,55,84,244,140,144,183,84,84,49,48,57,56,56,48,56,84,244,140,144,184,84,84,49,48,57,56,56,48,57,84,244,140,144,185,84,84,49,48,57,56,56,49,48,84,244,140,144,186,84,84,49,48,57,56,56,49,49,84,244,140,144,187,84,84,49,48,57,56,56,49,50,84,244,140,144,188,84,84,49,48,57,56,56,49,51,84,244,140,144,189,84,84,49,48,57,56,56,49,52,84,244,140,144,190,84,84,49,48,57,56,56,49,53,84,244,140,144,191,84,84,49,48,57,56,56,49,55,84,244,140,145,129,84,84,49,48,57,56,56,50,57,84,244,140,145,141,84,84,49,48,57,56,56,51,49,84,244,140,145,143,84,84,49,48,57,56,56,51,50,84,244,140,145,144,84,84,49,48,57,56,56,52,53,84,244,140,145,157,84,84,49,48,57,56,56,56,49,84,244,140,146,129,84,84,49,48,57,56,56,57,51,84,244,140,146,141,84,84,49,48,57,56,56,57,53,84,244,140,146,143,84,84,49,48,57,56,56,57,54,84,244,140,146,144,84,84,49,48,57,56,57,48,57,84,244,140,146,157,84,84,49,48,57,56,57,52,53,84,244,140,147,129,84,84,49,48,57,56,57,53,55,84,244,140,147,141,84,84,49,48,57,56,57,53,57,84,244,140,147,143,84,84,49,48,57,56,57,54,48,84,244,140,147,144,84,84,49,48,57,56,57,55,51,84,244,140,147,157,84,84,49,48,57,57,48,48,57,84,244,140,148,129,84,84,49,48,57,57,48,50,49,84,244,140,148,141,84,84,49,48,57,57,48,50,51,84,244,140,148,143,84,84,49,48,57,57,48,50,52,84,244,140,148,144,84,84,49,48,57,57,48,51,55,84,244,140,148,157,84,84,49,48,57,57,48,55,51,84,244,140,149,129,84,84,49,48,57,57,48,56,53,84,244,140,149,141,84,84,49,48,57,57,48,56,55,84,244,140,149,143,84,84,49,48,57,57,48,56,56,84,244,140,149,144,84,84,49,48,57,57,49,48,49,84,244,140,149,157,84,84,49,48,57,57,49,51,55,84,244,140,150,129,84,84,49,48,57,57,49,52,57,84,244,140,150,141,84,84,49,48,57,57,49,53,49,84,244,140,150,143,84,84,49,48,57,57,49,53,50,84,244,140,150,144,84,84,49,48,57,57,49,54,53,84,244,140,150,157,84,84,49,48,57,57,50,48,49,84,244,140,151,129,84,84,49,48,57,57,50,49,51,84,244,140,151,141,84,84,49,48,57,57,50,49,53,84,244,140,151,143,84,84,49,48,57,57,50,49,54,84,244,140,151,144,84,84,49,48,57,57,50,50,57,84,244,140,151,157,84,84,49,48,57,57,50,54,53,84,244,140,152,129,84,84,49,48,57,57,50,55,55,84,244,140,152,141,84,84,49,48,57,57,50,55,57,84,244,140,152,143,84,84,49,48,57,57,50,56,48,84,244,140,152,144,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21032 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21032_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21032_s.txt", Encoding.UTF8);

    public Test21032() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers98fd3eef9d4b4edcb3855acb5ae8645d",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,49,48,53,48,84,244,143,144,138,84,84,49,49,49,49,48,53,49,84,244,143,144,139,84,84,49,49,49,49,48,53,50,84,244,143,144,140,84,84,49,49,49,49,48,53,51,84,244,143,144,141,84,84,49,49,49,49,48,53,52,84,244,143,144,142,84,84,49,49,49,49,48,53,53,84,244,143,144,143,84,84,49,49,49,49,48,53,54,84,244,143,144,144,84,84,49,49,49,49,48,53,55,84,244,143,144,145,84,84,49,49,49,49,48,53,56,84,244,143,144,146,84,84,49,49,49,49,48,53,57,84,244,143,144,147,84,84,49,49,49,49,48,54,48,84,244,143,144,148,84,84,49,49,49,49,48,54,49,84,244,143,144,149,84,84,49,49,49,49,48,54,50,84,244,143,144,150,84,84,49,49,49,49,48,54,51,84,244,143,144,151,84,84,49,49,49,49,48,54,52,84,244,143,144,152,84,84,49,49,49,49,48,54,53,84,244,143,144,153,84,84,49,49,49,49,48,54,54,84,244,143,144,154,84,84,49,49,49,49,48,54,55,84,244,143,144,155,84,84,49,49,49,49,48,54,56,84,244,143,144,156,84,84,49,49,49,49,48,54,57,84,244,143,144,157,84,84,49,49,49,49,48,55,48,84,244,143,144,158,84,84,49,49,49,49,48,55,49,84,244,143,144,159,84,84,49,49,49,49,48,55,50,84,244,143,144,160,84,84,49,49,49,49,48,55,51,84,244,143,144,161,84,84,49,49,49,49,48,55,52,84,244,143,144,162,84,84,49,49,49,49,48,55,53,84,244,143,144,163,84,84,49,49,49,49,48,55,54,84,244,143,144,164,84,84,49,49,49,49,48,55,55,84,244,143,144,165,84,84,49,49,49,49,48,55,56,84,244,143,144,166,84,84,49,49,49,49,48,55,57,84,244,143,144,167,84,84,49,49,49,49,48,56,48,84,244,143,144,168,84,84,49,49,49,49,48,56,49,84,244,143,144,169,84,84,49,49,49,49,48,56,50,84,244,143,144,170,84,84,49,49,49,49,48,56,51,84,244,143,144,171,84,84,49,49,49,49,48,56,52,84,244,143,144,172,84,84,49,49,49,49,48,56,53,84,244,143,144,173,84,84,49,49,49,49,48,56,54,84,244,143,144,174,84,84,49,49,49,49,48,56,55,84,244,143,144,175,84,84,49,49,49,49,48,56,56,84,244,143,144,176,84,84,49,49,49,49,48,56,57,84,244,143,144,177,84,84,49,49,49,49,48,57,48,84,244,143,144,178,84,84,49,49,49,49,48,57,49,84,244,143,144,179,84,84,49,49,49,49,48,57,50,84,244,143,144,180,84,84,49,49,49,49,48,57,51,84,244,143,144,181,84,84,49,49,49,49,48,57,52,84,244,143,144,182,84,84,49,49,49,49,48,57,53,84,244,143,144,183,84,84,49,49,49,49,48,57,54,84,244,143,144,184,84,84,49,49,49,49,48,57,55,84,244,143,144,185,84,84,49,49,49,49,48,57,56,84,244,143,144,186,84,84,49,49,49,49,48,57,57,84,244,143,144,187,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20108 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20108_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20108_s.txt", Encoding.UTF8);

    public Test20108() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers02552a2396c44255a61dd19b9714b3b6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,49,55,54,55,52,84,243,184,157,138,84,84,49,48,49,55,54,55,53,84,243,184,157,139,84,84,49,48,49,55,54,55,54,84,243,184,157,140,84,84,49,48,49,55,54,55,55,84,243,184,157,141,84,84,49,48,49,55,54,55,56,84,243,184,157,142,84,84,49,48,49,55,54,55,57,84,243,184,157,143,84,84,49,48,49,55,54,56,48,84,243,184,157,144,84,84,49,48,49,55,54,56,49,84,243,184,157,145,84,84,49,48,49,55,54,56,50,84,243,184,157,146,84,84,49,48,49,55,54,56,51,84,243,184,157,147,84,84,49,48,49,55,54,56,52,84,243,184,157,148,84,84,49,48,49,55,54,56,53,84,243,184,157,149,84,84,49,48,49,55,54,56,54,84,243,184,157,150,84,84,49,48,49,55,54,56,55,84,243,184,157,151,84,84,49,48,49,55,54,56,56,84,243,184,157,152,84,84,49,48,49,55,54,56,57,84,243,184,157,153,84,84,49,48,49,55,54,57,48,84,243,184,157,154,84,84,49,48,49,55,54,57,49,84,243,184,157,155,84,84,49,48,49,55,54,57,50,84,243,184,157,156,84,84,49,48,49,55,54,57,51,84,243,184,157,157,84,84,49,48,49,55,54,57,52,84,243,184,157,158,84,84,49,48,49,55,54,57,53,84,243,184,157,159,84,84,49,48,49,55,54,57,54,84,243,184,157,160,84,84,49,48,49,55,54,57,55,84,243,184,157,161,84,84,49,48,49,55,54,57,56,84,243,184,157,162,84,84,49,48,49,55,54,57,57,84,243,184,157,163,84,84,49,48,49,55,55,48,48,84,243,184,157,164,84,84,49,48,49,55,55,48,49,84,243,184,157,165,84,84,49,48,49,55,55,48,50,84,243,184,157,166,84,84,49,48,49,55,55,48,51,84,243,184,157,167,84,84,49,48,49,55,55,48,52,84,243,184,157,168,84,84,49,48,49,55,55,48,53,84,243,184,157,169,84,84,49,48,49,55,55,48,54,84,243,184,157,170,84,84,49,48,49,55,55,48,55,84,243,184,157,171,84,84,49,48,49,55,55,48,56,84,243,184,157,172,84,84,49,48,49,55,55,48,57,84,243,184,157,173,84,84,49,48,49,55,55,49,48,84,243,184,157,174,84,84,49,48,49,55,55,49,49,84,243,184,157,175,84,84,49,48,49,55,55,49,50,84,243,184,157,176,84,84,49,48,49,55,55,49,51,84,243,184,157,177,84,84,49,48,49,55,55,49,52,84,243,184,157,178,84,84,49,48,49,55,55,49,53,84,243,184,157,179,84,84,49,48,49,55,55,49,54,84,243,184,157,180,84,84,49,48,49,55,55,49,55,84,243,184,157,181,84,84,49,48,49,55,55,49,56,84,243,184,157,182,84,84,49,48,49,55,55,49,57,84,243,184,157,183,84,84,49,48,49,55,55,50,48,84,243,184,157,184,84,84,49,48,49,55,55,50,49,84,243,184,157,185,84,84,49,48,49,55,55,50,50,84,243,184,157,186,84,84,49,48,49,55,55,50,51,84,243,184,157,187,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20009 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20009_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20009_s.txt", Encoding.UTF8);

    public Test20009() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersc5d3e7c5509046d2aa3f8bb095571b82",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,48,50,55,48,49,84,243,180,179,141,84,84,49,48,48,50,55,48,51,84,243,180,179,143,84,84,49,48,48,50,55,48,52,84,243,180,179,144,84,84,49,48,48,50,55,49,55,84,243,180,179,157,84,84,49,48,48,50,55,53,51,84,243,180,180,129,84,84,49,48,48,50,55,54,53,84,243,180,180,141,84,84,49,48,48,50,55,54,55,84,243,180,180,143,84,84,49,48,48,50,55,54,56,84,243,180,180,144,84,84,49,48,48,50,55,56,49,84,243,180,180,157,84,84,49,48,48,50,56,49,55,84,243,180,181,129,84,84,49,48,48,50,56,50,57,84,243,180,181,141,84,84,49,48,48,50,56,51,49,84,243,180,181,143,84,84,49,48,48,50,56,51,50,84,243,180,181,144,84,84,49,48,48,50,56,52,53,84,243,180,181,157,84,84,49,48,48,50,56,56,49,84,243,180,182,129,84,84,49,48,48,50,56,57,51,84,243,180,182,141,84,84,49,48,48,50,56,57,53,84,243,180,182,143,84,84,49,48,48,50,56,57,54,84,243,180,182,144,84,84,49,48,48,50,57,48,57,84,243,180,182,157,84,84,49,48,48,50,57,52,53,84,243,180,183,129,84,84,49,48,48,50,57,53,55,84,243,180,183,141,84,84,49,48,48,50,57,53,57,84,243,180,183,143,84,84,49,48,48,50,57,54,48,84,243,180,183,144,84,84,49,48,48,50,57,55,51,84,243,180,183,157,84,84,49,48,48,51,48,48,57,84,243,180,184,129,84,84,49,48,48,51,48,50,49,84,243,180,184,141,84,84,49,48,48,51,48,50,51,84,243,180,184,143,84,84,49,48,48,51,48,50,52,84,243,180,184,144,84,84,49,48,48,51,48,51,55,84,243,180,184,157,84,84,49,48,48,51,48,55,51,84,243,180,185,129,84,84,49,48,48,51,48,56,53,84,243,180,185,141,84,84,49,48,48,51,48,56,55,84,243,180,185,143,84,84,49,48,48,51,48,56,56,84,243,180,185,144,84,84,49,48,48,51,49,48,49,84,243,180,185,157,84,84,49,48,48,51,49,51,55,84,243,180,186,129,84,84,49,48,48,51,49,52,57,84,243,180,186,141,84,84,49,48,48,51,49,53,49,84,243,180,186,143,84,84,49,48,48,51,49,53,50,84,243,180,186,144,84,84,49,48,48,51,49,54,53,84,243,180,186,157,84,84,49,48,48,51,50,48,49,84,243,180,187,129,84,84,49,48,48,51,50,49,51,84,243,180,187,141,84,84,49,48,48,51,50,49,53,84,243,180,187,143,84,84,49,48,48,51,50,49,54,84,243,180,187,144,84,84,49,48,48,51,50,50,57,84,243,180,187,157,84,84,49,48,48,51,50,54,53,84,243,180,188,129,84,84,49,48,48,51,50,55,55,84,243,180,188,141,84,84,49,48,48,51,50,55,57,84,243,180,188,143,84,84,49,48,48,51,50,56,48,84,243,180,188,144,84,84,49,48,48,51,50,57,51,84,243,180,188,157,84,84,49,48,48,51,51,50,57,84,243,180,189,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20965 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20965_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20965_s.txt", Encoding.UTF8);

    public Test20965() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersdf87e0f5374149afa792ac52b484870e",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,54,52,51,51,84,244,142,136,129,84,84,49,49,48,54,52,52,53,84,244,142,136,141,84,84,49,49,48,54,52,52,55,84,244,142,136,143,84,84,49,49,48,54,52,52,56,84,244,142,136,144,84,84,49,49,48,54,52,54,49,84,244,142,136,157,84,84,49,49,48,54,52,57,55,84,244,142,137,129,84,84,49,49,48,54,53,48,57,84,244,142,137,141,84,84,49,49,48,54,53,49,49,84,244,142,137,143,84,84,49,49,48,54,53,49,50,84,244,142,137,144,84,84,49,49,48,54,53,50,53,84,244,142,137,157,84,84,49,49,48,54,53,54,49,84,244,142,138,129,84,84,49,49,48,54,53,55,51,84,244,142,138,141,84,84,49,49,48,54,53,55,53,84,244,142,138,143,84,84,49,49,48,54,53,55,54,84,244,142,138,144,84,84,49,49,48,54,53,56,57,84,244,142,138,157,84,84,49,49,48,54,54,50,53,84,244,142,139,129,84,84,49,49,48,54,54,51,55,84,244,142,139,141,84,84,49,49,48,54,54,51,57,84,244,142,139,143,84,84,49,49,48,54,54,52,48,84,244,142,139,144,84,84,49,49,48,54,54,53,51,84,244,142,139,157,84,84,49,49,48,54,54,56,57,84,244,142,140,129,84,84,49,49,48,54,55,48,49,84,244,142,140,141,84,84,49,49,48,54,55,48,51,84,244,142,140,143,84,84,49,49,48,54,55,48,52,84,244,142,140,144,84,84,49,49,48,54,55,49,55,84,244,142,140,157,84,84,49,49,48,54,55,53,50,84,244,142,141,128,84,84,49,49,48,54,55,53,51,84,244,142,141,129,84,84,49,49,48,54,55,53,52,84,244,142,141,130,84,84,49,49,48,54,55,53,53,84,244,142,141,131,84,84,49,49,48,54,55,53,54,84,244,142,141,132,84,84,49,49,48,54,55,53,55,84,244,142,141,133,84,84,49,49,48,54,55,53,56,84,244,142,141,134,84,84,49,49,48,54,55,53,57,84,244,142,141,135,84,84,49,49,48,54,55,54,48,84,244,142,141,136,84,84,49,49,48,54,55,54,49,84,244,142,141,137,84,84,49,49,48,54,55,54,50,84,244,142,141,138,84,84,49,49,48,54,55,54,51,84,244,142,141,139,84,84,49,49,48,54,55,54,52,84,244,142,141,140,84,84,49,49,48,54,55,54,53,84,244,142,141,141,84,84,49,49,48,54,55,54,54,84,244,142,141,142,84,84,49,49,48,54,55,54,55,84,244,142,141,143,84,84,49,49,48,54,55,54,56,84,244,142,141,144,84,84,49,49,48,54,55,54,57,84,244,142,141,145,84,84,49,49,48,54,55,55,48,84,244,142,141,146,84,84,49,49,48,54,55,55,49,84,244,142,141,147,84,84,49,49,48,54,55,55,50,84,244,142,141,148,84,84,49,49,48,54,55,55,51,84,244,142,141,149,84,84,49,49,48,54,55,55,52,84,244,142,141,150,84,84,49,49,48,54,55,55,53,84,244,142,141,151,84,84,49,49,48,54,55,55,54,84,244,142,141,152,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20747 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20747_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20747_s.txt", Encoding.UTF8);

    public Test20747() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersc5ae22b09f3f4a3eaff829adc5876203",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,57,52,54,55,52,84,244,139,144,146,84,84,49,48,57,52,54,55,53,84,244,139,144,147,84,84,49,48,57,52,54,55,54,84,244,139,144,148,84,84,49,48,57,52,54,55,55,84,244,139,144,149,84,84,49,48,57,52,54,55,56,84,244,139,144,150,84,84,49,48,57,52,54,55,57,84,244,139,144,151,84,84,49,48,57,52,54,56,48,84,244,139,144,152,84,84,49,48,57,52,54,56,49,84,244,139,144,153,84,84,49,48,57,52,54,56,50,84,244,139,144,154,84,84,49,48,57,52,54,56,51,84,244,139,144,155,84,84,49,48,57,52,54,56,52,84,244,139,144,156,84,84,49,48,57,52,54,56,53,84,244,139,144,157,84,84,49,48,57,52,54,56,54,84,244,139,144,158,84,84,49,48,57,52,54,56,55,84,244,139,144,159,84,84,49,48,57,52,54,56,56,84,244,139,144,160,84,84,49,48,57,52,54,56,57,84,244,139,144,161,84,84,49,48,57,52,54,57,48,84,244,139,144,162,84,84,49,48,57,52,54,57,49,84,244,139,144,163,84,84,49,48,57,52,54,57,50,84,244,139,144,164,84,84,49,48,57,52,54,57,51,84,244,139,144,165,84,84,49,48,57,52,54,57,52,84,244,139,144,166,84,84,49,48,57,52,54,57,53,84,244,139,144,167,84,84,49,48,57,52,54,57,54,84,244,139,144,168,84,84,49,48,57,52,54,57,55,84,244,139,144,169,84,84,49,48,57,52,54,57,56,84,244,139,144,170,84,84,49,48,57,52,54,57,57,84,244,139,144,171,84,84,49,48,57,52,55,48,48,84,244,139,144,172,84,84,49,48,57,52,55,48,49,84,244,139,144,173,84,84,49,48,57,52,55,48,50,84,244,139,144,174,84,84,49,48,57,52,55,48,51,84,244,139,144,175,84,84,49,48,57,52,55,48,52,84,244,139,144,176,84,84,49,48,57,52,55,48,53,84,244,139,144,177,84,84,49,48,57,52,55,48,54,84,244,139,144,178,84,84,49,48,57,52,55,48,55,84,244,139,144,179,84,84,49,48,57,52,55,48,56,84,244,139,144,180,84,84,49,48,57,52,55,48,57,84,244,139,144,181,84,84,49,48,57,52,55,49,48,84,244,139,144,182,84,84,49,48,57,52,55,49,49,84,244,139,144,183,84,84,49,48,57,52,55,49,50,84,244,139,144,184,84,84,49,48,57,52,55,49,51,84,244,139,144,185,84,84,49,48,57,52,55,49,52,84,244,139,144,186,84,84,49,48,57,52,55,49,53,84,244,139,144,187,84,84,49,48,57,52,55,49,54,84,244,139,144,188,84,84,49,48,57,52,55,49,55,84,244,139,144,189,84,84,49,48,57,52,55,49,56,84,244,139,144,190,84,84,49,48,57,52,55,49,57,84,244,139,144,191,84,84,49,48,57,52,55,50,49,84,244,139,145,129,84,84,49,48,57,52,55,51,51,84,244,139,145,141,84,84,49,48,57,52,55,51,53,84,244,139,145,143,84,84,49,48,57,52,55,51,54,84,244,139,145,144,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20390 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20390_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20390_s.txt", Encoding.UTF8);

    public Test20390() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers319eca44915441a6b60a6025f5eab2bd",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,52,50,50,56,84,244,129,152,148,84,84,49,48,53,52,50,50,57,84,244,129,152,149,84,84,49,48,53,52,50,51,48,84,244,129,152,150,84,84,49,48,53,52,50,51,49,84,244,129,152,151,84,84,49,48,53,52,50,51,50,84,244,129,152,152,84,84,49,48,53,52,50,51,51,84,244,129,152,153,84,84,49,48,53,52,50,51,52,84,244,129,152,154,84,84,49,48,53,52,50,51,53,84,244,129,152,155,84,84,49,48,53,52,50,51,54,84,244,129,152,156,84,84,49,48,53,52,50,51,55,84,244,129,152,157,84,84,49,48,53,52,50,51,56,84,244,129,152,158,84,84,49,48,53,52,50,51,57,84,244,129,152,159,84,84,49,48,53,52,50,52,48,84,244,129,152,160,84,84,49,48,53,52,50,52,49,84,244,129,152,161,84,84,49,48,53,52,50,52,50,84,244,129,152,162,84,84,49,48,53,52,50,52,51,84,244,129,152,163,84,84,49,48,53,52,50,52,52,84,244,129,152,164,84,84,49,48,53,52,50,52,53,84,244,129,152,165,84,84,49,48,53,52,50,52,54,84,244,129,152,166,84,84,49,48,53,52,50,52,55,84,244,129,152,167,84,84,49,48,53,52,50,52,56,84,244,129,152,168,84,84,49,48,53,52,50,52,57,84,244,129,152,169,84,84,49,48,53,52,50,53,48,84,244,129,152,170,84,84,49,48,53,52,50,53,49,84,244,129,152,171,84,84,49,48,53,52,50,53,50,84,244,129,152,172,84,84,49,48,53,52,50,53,51,84,244,129,152,173,84,84,49,48,53,52,50,53,52,84,244,129,152,174,84,84,49,48,53,52,50,53,53,84,244,129,152,175,84,84,49,48,53,52,50,53,54,84,244,129,152,176,84,84,49,48,53,52,50,53,55,84,244,129,152,177,84,84,49,48,53,52,50,53,56,84,244,129,152,178,84,84,49,48,53,52,50,53,57,84,244,129,152,179,84,84,49,48,53,52,50,54,48,84,244,129,152,180,84,84,49,48,53,52,50,54,49,84,244,129,152,181,84,84,49,48,53,52,50,54,50,84,244,129,152,182,84,84,49,48,53,52,50,54,51,84,244,129,152,183,84,84,49,48,53,52,50,54,52,84,244,129,152,184,84,84,49,48,53,52,50,54,53,84,244,129,152,185,84,84,49,48,53,52,50,54,54,84,244,129,152,186,84,84,49,48,53,52,50,54,55,84,244,129,152,187,84,84,49,48,53,52,50,54,56,84,244,129,152,188,84,84,49,48,53,52,50,54,57,84,244,129,152,189,84,84,49,48,53,52,50,55,48,84,244,129,152,190,84,84,49,48,53,52,50,55,49,84,244,129,152,191,84,84,49,48,53,52,50,55,50,84,244,129,153,128,84,84,49,48,53,52,50,55,51,84,244,129,153,129,84,84,49,48,53,52,50,55,52,84,244,129,153,130,84,84,49,48,53,52,50,55,53,84,244,129,153,131,84,84,49,48,53,52,50,55,54,84,244,129,153,132,84,84,49,48,53,52,50,55,55,84,244,129,153,133,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20072 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20072_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20072_s.txt", Encoding.UTF8);

    public Test20072() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersb3c703c6e551430d9c914c24c3792dd5",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,49,50,53,55,54,84,243,183,141,160,84,84,49,48,49,50,53,55,55,84,243,183,141,161,84,84,49,48,49,50,53,55,56,84,243,183,141,162,84,84,49,48,49,50,53,55,57,84,243,183,141,163,84,84,49,48,49,50,53,56,48,84,243,183,141,164,84,84,49,48,49,50,53,56,49,84,243,183,141,165,84,84,49,48,49,50,53,56,50,84,243,183,141,166,84,84,49,48,49,50,53,56,51,84,243,183,141,167,84,84,49,48,49,50,53,56,52,84,243,183,141,168,84,84,49,48,49,50,53,56,53,84,243,183,141,169,84,84,49,48,49,50,53,56,54,84,243,183,141,170,84,84,49,48,49,50,53,56,55,84,243,183,141,171,84,84,49,48,49,50,53,56,56,84,243,183,141,172,84,84,49,48,49,50,53,56,57,84,243,183,141,173,84,84,49,48,49,50,53,57,48,84,243,183,141,174,84,84,49,48,49,50,53,57,49,84,243,183,141,175,84,84,49,48,49,50,53,57,50,84,243,183,141,176,84,84,49,48,49,50,53,57,51,84,243,183,141,177,84,84,49,48,49,50,53,57,52,84,243,183,141,178,84,84,49,48,49,50,53,57,53,84,243,183,141,179,84,84,49,48,49,50,53,57,54,84,243,183,141,180,84,84,49,48,49,50,53,57,55,84,243,183,141,181,84,84,49,48,49,50,53,57,56,84,243,183,141,182,84,84,49,48,49,50,53,57,57,84,243,183,141,183,84,84,49,48,49,50,54,48,48,84,243,183,141,184,84,84,49,48,49,50,54,48,49,84,243,183,141,185,84,84,49,48,49,50,54,48,50,84,243,183,141,186,84,84,49,48,49,50,54,48,51,84,243,183,141,187,84,84,49,48,49,50,54,48,52,84,243,183,141,188,84,84,49,48,49,50,54,48,53,84,243,183,141,189,84,84,49,48,49,50,54,48,54,84,243,183,141,190,84,84,49,48,49,50,54,48,55,84,243,183,141,191,84,84,49,48,49,50,54,48,57,84,243,183,142,129,84,84,49,48,49,50,54,50,49,84,243,183,142,141,84,84,49,48,49,50,54,50,51,84,243,183,142,143,84,84,49,48,49,50,54,50,52,84,243,183,142,144,84,84,49,48,49,50,54,51,55,84,243,183,142,157,84,84,49,48,49,50,54,55,50,84,243,183,143,128,84,84,49,48,49,50,54,55,51,84,243,183,143,129,84,84,49,48,49,50,54,55,52,84,243,183,143,130,84,84,49,48,49,50,54,55,53,84,243,183,143,131,84,84,49,48,49,50,54,55,54,84,243,183,143,132,84,84,49,48,49,50,54,55,55,84,243,183,143,133,84,84,49,48,49,50,54,55,56,84,243,183,143,134,84,84,49,48,49,50,54,55,57,84,243,183,143,135,84,84,49,48,49,50,54,56,48,84,243,183,143,136,84,84,49,48,49,50,54,56,49,84,243,183,143,137,84,84,49,48,49,50,54,56,50,84,243,183,143,138,84,84,49,48,49,50,54,56,51,84,243,183,143,139,84,84,49,48,49,50,54,56,52,84,243,183,143,140,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20328 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20328_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20328_s.txt", Encoding.UTF8);

    public Test20328() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers412024b733e349978217e6093afed677",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,50,55,50,56,84,244,129,128,184,84,84,49,48,53,50,55,50,57,84,244,129,128,185,84,84,49,48,53,50,55,51,48,84,244,129,128,186,84,84,49,48,53,50,55,51,49,84,244,129,128,187,84,84,49,48,53,50,55,51,50,84,244,129,128,188,84,84,49,48,53,50,55,51,51,84,244,129,128,189,84,84,49,48,53,50,55,51,52,84,244,129,128,190,84,84,49,48,53,50,55,51,53,84,244,129,128,191,84,84,49,48,53,50,55,51,54,84,244,129,129,128,84,84,49,48,53,50,55,51,55,84,244,129,129,129,84,84,49,48,53,50,55,51,56,84,244,129,129,130,84,84,49,48,53,50,55,51,57,84,244,129,129,131,84,84,49,48,53,50,55,52,48,84,244,129,129,132,84,84,49,48,53,50,55,52,49,84,244,129,129,133,84,84,49,48,53,50,55,52,50,84,244,129,129,134,84,84,49,48,53,50,55,52,51,84,244,129,129,135,84,84,49,48,53,50,55,52,52,84,244,129,129,136,84,84,49,48,53,50,55,52,53,84,244,129,129,137,84,84,49,48,53,50,55,52,54,84,244,129,129,138,84,84,49,48,53,50,55,52,55,84,244,129,129,139,84,84,49,48,53,50,55,52,56,84,244,129,129,140,84,84,49,48,53,50,55,52,57,84,244,129,129,141,84,84,49,48,53,50,55,53,48,84,244,129,129,142,84,84,49,48,53,50,55,53,49,84,244,129,129,143,84,84,49,48,53,50,55,53,50,84,244,129,129,144,84,84,49,48,53,50,55,53,51,84,244,129,129,145,84,84,49,48,53,50,55,53,52,84,244,129,129,146,84,84,49,48,53,50,55,53,53,84,244,129,129,147,84,84,49,48,53,50,55,53,54,84,244,129,129,148,84,84,49,48,53,50,55,53,55,84,244,129,129,149,84,84,49,48,53,50,55,53,56,84,244,129,129,150,84,84,49,48,53,50,55,53,57,84,244,129,129,151,84,84,49,48,53,50,55,54,48,84,244,129,129,152,84,84,49,48,53,50,55,54,49,84,244,129,129,153,84,84,49,48,53,50,55,54,50,84,244,129,129,154,84,84,49,48,53,50,55,54,51,84,244,129,129,155,84,84,49,48,53,50,55,54,52,84,244,129,129,156,84,84,49,48,53,50,55,54,53,84,244,129,129,157,84,84,49,48,53,50,55,54,54,84,244,129,129,158,84,84,49,48,53,50,55,54,55,84,244,129,129,159,84,84,49,48,53,50,55,54,56,84,244,129,129,160,84,84,49,48,53,50,55,54,57,84,244,129,129,161,84,84,49,48,53,50,55,55,48,84,244,129,129,162,84,84,49,48,53,50,55,55,49,84,244,129,129,163,84,84,49,48,53,50,55,55,50,84,244,129,129,164,84,84,49,48,53,50,55,55,51,84,244,129,129,165,84,84,49,48,53,50,55,55,52,84,244,129,129,166,84,84,49,48,53,50,55,55,53,84,244,129,129,167,84,84,49,48,53,50,55,55,54,84,244,129,129,168,84,84,49,48,53,50,55,55,55,84,244,129,129,169,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20235 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20235_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20235_s.txt", Encoding.UTF8);

    public Test20235() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersca1800aaa567470781b999118df6ba97",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,51,55,51,55,49,84,243,189,144,187,84,84,49,48,51,55,51,55,50,84,243,189,144,188,84,84,49,48,51,55,51,55,51,84,243,189,144,189,84,84,49,48,51,55,51,55,52,84,243,189,144,190,84,84,49,48,51,55,51,55,53,84,243,189,144,191,84,84,49,48,51,55,51,55,55,84,243,189,145,129,84,84,49,48,51,55,51,56,57,84,243,189,145,141,84,84,49,48,51,55,51,57,49,84,243,189,145,143,84,84,49,48,51,55,51,57,50,84,243,189,145,144,84,84,49,48,51,55,52,48,53,84,243,189,145,157,84,84,49,48,51,55,52,52,49,84,243,189,146,129,84,84,49,48,51,55,52,53,51,84,243,189,146,141,84,84,49,48,51,55,52,53,53,84,243,189,146,143,84,84,49,48,51,55,52,53,54,84,243,189,146,144,84,84,49,48,51,55,52,54,57,84,243,189,146,157,84,84,49,48,51,55,53,48,53,84,243,189,147,129,84,84,49,48,51,55,53,49,55,84,243,189,147,141,84,84,49,48,51,55,53,49,57,84,243,189,147,143,84,84,49,48,51,55,53,50,48,84,243,189,147,144,84,84,49,48,51,55,53,51,51,84,243,189,147,157,84,84,49,48,51,55,53,54,57,84,243,189,148,129,84,84,49,48,51,55,53,56,49,84,243,189,148,141,84,84,49,48,51,55,53,56,51,84,243,189,148,143,84,84,49,48,51,55,53,56,52,84,243,189,148,144,84,84,49,48,51,55,53,57,55,84,243,189,148,157,84,84,49,48,51,55,54,51,51,84,243,189,149,129,84,84,49,48,51,55,54,52,53,84,243,189,149,141,84,84,49,48,51,55,54,52,55,84,243,189,149,143,84,84,49,48,51,55,54,52,56,84,243,189,149,144,84,84,49,48,51,55,54,54,49,84,243,189,149,157,84,84,49,48,51,55,54,57,55,84,243,189,150,129,84,84,49,48,51,55,55,48,57,84,243,189,150,141,84,84,49,48,51,55,55,49,49,84,243,189,150,143,84,84,49,48,51,55,55,49,50,84,243,189,150,144,84,84,49,48,51,55,55,50,53,84,243,189,150,157,84,84,49,48,51,55,55,54,49,84,243,189,151,129,84,84,49,48,51,55,55,55,51,84,243,189,151,141,84,84,49,48,51,55,55,55,53,84,243,189,151,143,84,84,49,48,51,55,55,55,54,84,243,189,151,144,84,84,49,48,51,55,55,56,57,84,243,189,151,157,84,84,49,48,51,55,56,50,53,84,243,189,152,129,84,84,49,48,51,55,56,51,55,84,243,189,152,141,84,84,49,48,51,55,56,51,57,84,243,189,152,143,84,84,49,48,51,55,56,52,48,84,243,189,152,144,84,84,49,48,51,55,56,53,51,84,243,189,152,157,84,84,49,48,51,55,56,56,57,84,243,189,153,129,84,84,49,48,51,55,57,48,49,84,243,189,153,141,84,84,49,48,51,55,57,48,51,84,243,189,153,143,84,84,49,48,51,55,57,48,52,84,243,189,153,144,84,84,49,48,51,55,57,49,55,84,243,189,153,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20167 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20167_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20167_s.txt", Encoding.UTF8);

    public Test20167() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers4f3362aed9424bd2bfac6751ee820ab9",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,50,55,52,48,53,84,243,186,181,141,84,84,49,48,50,55,52,48,55,84,243,186,181,143,84,84,49,48,50,55,52,48,56,84,243,186,181,144,84,84,49,48,50,55,52,50,49,84,243,186,181,157,84,84,49,48,50,55,52,53,55,84,243,186,182,129,84,84,49,48,50,55,52,54,57,84,243,186,182,141,84,84,49,48,50,55,52,55,49,84,243,186,182,143,84,84,49,48,50,55,52,55,50,84,243,186,182,144,84,84,49,48,50,55,52,56,53,84,243,186,182,157,84,84,49,48,50,55,53,50,49,84,243,186,183,129,84,84,49,48,50,55,53,51,51,84,243,186,183,141,84,84,49,48,50,55,53,51,53,84,243,186,183,143,84,84,49,48,50,55,53,51,54,84,243,186,183,144,84,84,49,48,50,55,53,52,57,84,243,186,183,157,84,84,49,48,50,55,53,56,53,84,243,186,184,129,84,84,49,48,50,55,53,57,55,84,243,186,184,141,84,84,49,48,50,55,53,57,57,84,243,186,184,143,84,84,49,48,50,55,54,48,48,84,243,186,184,144,84,84,49,48,50,55,54,49,51,84,243,186,184,157,84,84,49,48,50,55,54,52,57,84,243,186,185,129,84,84,49,48,50,55,54,54,49,84,243,186,185,141,84,84,49,48,50,55,54,54,51,84,243,186,185,143,84,84,49,48,50,55,54,54,52,84,243,186,185,144,84,84,49,48,50,55,54,55,55,84,243,186,185,157,84,84,49,48,50,55,55,49,51,84,243,186,186,129,84,84,49,48,50,55,55,50,53,84,243,186,186,141,84,84,49,48,50,55,55,50,55,84,243,186,186,143,84,84,49,48,50,55,55,50,56,84,243,186,186,144,84,84,49,48,50,55,55,52,49,84,243,186,186,157,84,84,49,48,50,55,55,55,55,84,243,186,187,129,84,84,49,48,50,55,55,56,57,84,243,186,187,141,84,84,49,48,50,55,55,57,49,84,243,186,187,143,84,84,49,48,50,55,55,57,50,84,243,186,187,144,84,84,49,48,50,55,56,48,53,84,243,186,187,157,84,84,49,48,50,55,56,52,49,84,243,186,188,129,84,84,49,48,50,55,56,53,51,84,243,186,188,141,84,84,49,48,50,55,56,53,53,84,243,186,188,143,84,84,49,48,50,55,56,53,54,84,243,186,188,144,84,84,49,48,50,55,56,54,57,84,243,186,188,157,84,84,49,48,50,55,57,48,53,84,243,186,189,129,84,84,49,48,50,55,57,49,55,84,243,186,189,141,84,84,49,48,50,55,57,49,57,84,243,186,189,143,84,84,49,48,50,55,57,50,48,84,243,186,189,144,84,84,49,48,50,55,57,51,51,84,243,186,189,157,84,84,49,48,50,55,57,54,57,84,243,186,190,129,84,84,49,48,50,55,57,56,49,84,243,186,190,141,84,84,49,48,50,55,57,56,51,84,243,186,190,143,84,84,49,48,50,55,57,56,52,84,243,186,190,144,84,84,49,48,50,55,57,57,55,84,243,186,190,157,84,84,49,48,50,56,48,51,51,84,243,186,191,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20425 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20425_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20425_s.txt", Encoding.UTF8);

    public Test20425() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers7f83ba854dc4459da9078f97f691d28c",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,53,48,50,56,84,244,129,164,180,84,84,49,48,53,53,48,50,57,84,244,129,164,181,84,84,49,48,53,53,48,51,48,84,244,129,164,182,84,84,49,48,53,53,48,51,49,84,244,129,164,183,84,84,49,48,53,53,48,51,50,84,244,129,164,184,84,84,49,48,53,53,48,51,51,84,244,129,164,185,84,84,49,48,53,53,48,51,52,84,244,129,164,186,84,84,49,48,53,53,48,51,53,84,244,129,164,187,84,84,49,48,53,53,48,51,54,84,244,129,164,188,84,84,49,48,53,53,48,51,55,84,244,129,164,189,84,84,49,48,53,53,48,51,56,84,244,129,164,190,84,84,49,48,53,53,48,51,57,84,244,129,164,191,84,84,49,48,53,53,48,52,48,84,244,129,165,128,84,84,49,48,53,53,48,52,49,84,244,129,165,129,84,84,49,48,53,53,48,52,50,84,244,129,165,130,84,84,49,48,53,53,48,52,51,84,244,129,165,131,84,84,49,48,53,53,48,52,52,84,244,129,165,132,84,84,49,48,53,53,48,52,53,84,244,129,165,133,84,84,49,48,53,53,48,52,54,84,244,129,165,134,84,84,49,48,53,53,48,52,55,84,244,129,165,135,84,84,49,48,53,53,48,52,56,84,244,129,165,136,84,84,49,48,53,53,48,52,57,84,244,129,165,137,84,84,49,48,53,53,48,53,48,84,244,129,165,138,84,84,49,48,53,53,48,53,49,84,244,129,165,139,84,84,49,48,53,53,48,53,50,84,244,129,165,140,84,84,49,48,53,53,48,53,51,84,244,129,165,141,84,84,49,48,53,53,48,53,52,84,244,129,165,142,84,84,49,48,53,53,48,53,53,84,244,129,165,143,84,84,49,48,53,53,48,53,54,84,244,129,165,144,84,84,49,48,53,53,48,53,55,84,244,129,165,145,84,84,49,48,53,53,48,53,56,84,244,129,165,146,84,84,49,48,53,53,48,53,57,84,244,129,165,147,84,84,49,48,53,53,48,54,48,84,244,129,165,148,84,84,49,48,53,53,48,54,49,84,244,129,165,149,84,84,49,48,53,53,48,54,50,84,244,129,165,150,84,84,49,48,53,53,48,54,51,84,244,129,165,151,84,84,49,48,53,53,48,54,52,84,244,129,165,152,84,84,49,48,53,53,48,54,53,84,244,129,165,153,84,84,49,48,53,53,48,54,54,84,244,129,165,154,84,84,49,48,53,53,48,54,55,84,244,129,165,155,84,84,49,48,53,53,48,54,56,84,244,129,165,156,84,84,49,48,53,53,48,54,57,84,244,129,165,157,84,84,49,48,53,53,48,55,48,84,244,129,165,158,84,84,49,48,53,53,48,55,49,84,244,129,165,159,84,84,49,48,53,53,48,55,50,84,244,129,165,160,84,84,49,48,53,53,48,55,51,84,244,129,165,161,84,84,49,48,53,53,48,55,52,84,244,129,165,162,84,84,49,48,53,53,48,55,53,84,244,129,165,163,84,84,49,48,53,53,48,55,54,84,244,129,165,164,84,84,49,48,53,53,48,55,55,84,244,129,165,165,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20487 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20487_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20487_s.txt", Encoding.UTF8);

    public Test20487() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers3bfa703d74a140e499ecce701b962b8c",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,54,52,55,56,84,244,129,187,158,84,84,49,48,53,54,52,55,57,84,244,129,187,159,84,84,49,48,53,54,52,56,48,84,244,129,187,160,84,84,49,48,53,54,52,56,49,84,244,129,187,161,84,84,49,48,53,54,52,56,50,84,244,129,187,162,84,84,49,48,53,54,52,56,51,84,244,129,187,163,84,84,49,48,53,54,52,56,52,84,244,129,187,164,84,84,49,48,53,54,52,56,53,84,244,129,187,165,84,84,49,48,53,54,52,56,54,84,244,129,187,166,84,84,49,48,53,54,52,56,55,84,244,129,187,167,84,84,49,48,53,54,52,56,56,84,244,129,187,168,84,84,49,48,53,54,52,56,57,84,244,129,187,169,84,84,49,48,53,54,52,57,48,84,244,129,187,170,84,84,49,48,53,54,52,57,49,84,244,129,187,171,84,84,49,48,53,54,52,57,50,84,244,129,187,172,84,84,49,48,53,54,52,57,51,84,244,129,187,173,84,84,49,48,53,54,52,57,52,84,244,129,187,174,84,84,49,48,53,54,52,57,53,84,244,129,187,175,84,84,49,48,53,54,52,57,54,84,244,129,187,176,84,84,49,48,53,54,52,57,55,84,244,129,187,177,84,84,49,48,53,54,52,57,56,84,244,129,187,178,84,84,49,48,53,54,52,57,57,84,244,129,187,179,84,84,49,48,53,54,53,48,48,84,244,129,187,180,84,84,49,48,53,54,53,48,49,84,244,129,187,181,84,84,49,48,53,54,53,48,50,84,244,129,187,182,84,84,49,48,53,54,53,48,51,84,244,129,187,183,84,84,49,48,53,54,53,48,52,84,244,129,187,184,84,84,49,48,53,54,53,48,53,84,244,129,187,185,84,84,49,48,53,54,53,48,54,84,244,129,187,186,84,84,49,48,53,54,53,48,55,84,244,129,187,187,84,84,49,48,53,54,53,48,56,84,244,129,187,188,84,84,49,48,53,54,53,48,57,84,244,129,187,189,84,84,49,48,53,54,53,49,48,84,244,129,187,190,84,84,49,48,53,54,53,49,49,84,244,129,187,191,84,84,49,48,53,54,53,49,50,84,244,129,188,128,84,84,49,48,53,54,53,49,51,84,244,129,188,129,84,84,49,48,53,54,53,49,52,84,244,129,188,130,84,84,49,48,53,54,53,49,53,84,244,129,188,131,84,84,49,48,53,54,53,49,54,84,244,129,188,132,84,84,49,48,53,54,53,49,55,84,244,129,188,133,84,84,49,48,53,54,53,49,56,84,244,129,188,134,84,84,49,48,53,54,53,49,57,84,244,129,188,135,84,84,49,48,53,54,53,50,48,84,244,129,188,136,84,84,49,48,53,54,53,50,49,84,244,129,188,137,84,84,49,48,53,54,53,50,50,84,244,129,188,138,84,84,49,48,53,54,53,50,51,84,244,129,188,139,84,84,49,48,53,54,53,50,52,84,244,129,188,140,84,84,49,48,53,54,53,50,53,84,244,129,188,141,84,84,49,48,53,54,53,50,54,84,244,129,188,142,84,84,49,48,53,54,53,50,55,84,244,129,188,143,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22794 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22794_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22794_s.txt", Encoding.UTF8);

    public Test22794() : base(recordedRequest, recordedResponse, "accounts8d43a0490823d21")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a0490823d21",
                        container: "containers0bd48f2ce8374f57b3f3c61b5595b35b",
                        blob: "Blobe2f704b8ee89481e84523e1210e8242f",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21159 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21159_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21159_s.txt", Encoding.UTF8);

    public Test21159() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers225cce652d6045d9948fbaf5d1ebb735",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,52,48,53,48,84,244,143,191,130,84,84,49,49,49,52,48,53,49,84,244,143,191,131,84,84,49,49,49,52,48,53,50,84,244,143,191,132,84,84,49,49,49,52,48,53,51,84,244,143,191,133,84,84,49,49,49,52,48,53,52,84,244,143,191,134,84,84,49,49,49,52,48,53,53,84,244,143,191,135,84,84,49,49,49,52,48,53,54,84,244,143,191,136,84,84,49,49,49,52,48,53,55,84,244,143,191,137,84,84,49,49,49,52,48,53,56,84,244,143,191,138,84,84,49,49,49,52,48,53,57,84,244,143,191,139,84,84,49,49,49,52,48,54,48,84,244,143,191,140,84,84,49,49,49,52,48,54,49,84,244,143,191,141,84,84,49,49,49,52,48,54,50,84,244,143,191,142,84,84,49,49,49,52,48,54,51,84,244,143,191,143,84,84,49,49,49,52,48,54,52,84,244,143,191,144,84,84,49,49,49,52,48,54,53,84,244,143,191,145,84,84,49,49,49,52,48,54,54,84,244,143,191,146,84,84,49,49,49,52,48,54,55,84,244,143,191,147,84,84,49,49,49,52,48,54,56,84,244,143,191,148,84,84,49,49,49,52,48,54,57,84,244,143,191,149,84,84,49,49,49,52,48,55,48,84,244,143,191,150,84,84,49,49,49,52,48,55,49,84,244,143,191,151,84,84,49,49,49,52,48,55,50,84,244,143,191,152,84,84,49,49,49,52,48,55,51,84,244,143,191,153,84,84,49,49,49,52,48,55,52,84,244,143,191,154,84,84,49,49,49,52,48,55,53,84,244,143,191,155,84,84,49,49,49,52,48,55,54,84,244,143,191,156,84,84,49,49,49,52,48,55,55,84,244,143,191,157,84,84,49,49,49,52,48,55,56,84,244,143,191,158,84,84,49,49,49,52,48,55,57,84,244,143,191,159,84,84,49,49,49,52,48,56,48,84,244,143,191,160,84,84,49,49,49,52,48,56,49,84,244,143,191,161,84,84,49,49,49,52,48,56,50,84,244,143,191,162,84,84,49,49,49,52,48,56,51,84,244,143,191,163,84,84,49,49,49,52,48,56,52,84,244,143,191,164,84,84,49,49,49,52,48,56,53,84,244,143,191,165,84,84,49,49,49,52,48,56,54,84,244,143,191,166,84,84,49,49,49,52,48,56,55,84,244,143,191,167,84,84,49,49,49,52,48,56,56,84,244,143,191,168,84,84,49,49,49,52,48,56,57,84,244,143,191,169,84,84,49,49,49,52,48,57,48,84,244,143,191,170,84,84,49,49,49,52,48,57,49,84,244,143,191,171,84,84,49,49,49,52,48,57,50,84,244,143,191,172,84,84,49,49,49,52,48,57,51,84,244,143,191,173,84,84,49,49,49,52,48,57,52,84,244,143,191,174,84,84,49,49,49,52,48,57,53,84,244,143,191,175,84,84,49,49,49,52,48,57,54,84,244,143,191,176,84,84,49,49,49,52,48,57,55,84,244,143,191,177,84,84,49,49,49,52,48,57,56,84,244,143,191,178,84,84,49,49,49,52,48,57,57,84,244,143,191,179,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22795 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22795_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22795_s.txt", Encoding.UTF8);

    public Test22795() : base(recordedRequest, recordedResponse, "accounts8d43a0490823d21")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a0490823d21",
                        container: "containers0bd48f2ce8374f57b3f3c61b5595b35b",
                        blob: "Blobae21fc68ec9a43d79a3433d119f90404",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20838 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20838_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20838_s.txt", Encoding.UTF8);

    public Test20838() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersf4b0dcea8f7b4ccf92e1f36b952ddf93",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,51,48,49,57,84,244,141,146,171,84,84,49,49,48,51,48,50,48,84,244,141,146,172,84,84,49,49,48,51,48,50,49,84,244,141,146,173,84,84,49,49,48,51,48,50,50,84,244,141,146,174,84,84,49,49,48,51,48,50,51,84,244,141,146,175,84,84,49,49,48,51,48,50,52,84,244,141,146,176,84,84,49,49,48,51,48,50,53,84,244,141,146,177,84,84,49,49,48,51,48,50,54,84,244,141,146,178,84,84,49,49,48,51,48,50,55,84,244,141,146,179,84,84,49,49,48,51,48,50,56,84,244,141,146,180,84,84,49,49,48,51,48,50,57,84,244,141,146,181,84,84,49,49,48,51,48,51,48,84,244,141,146,182,84,84,49,49,48,51,48,51,49,84,244,141,146,183,84,84,49,49,48,51,48,51,50,84,244,141,146,184,84,84,49,49,48,51,48,51,51,84,244,141,146,185,84,84,49,49,48,51,48,51,52,84,244,141,146,186,84,84,49,49,48,51,48,51,53,84,244,141,146,187,84,84,49,49,48,51,48,51,54,84,244,141,146,188,84,84,49,49,48,51,48,51,55,84,244,141,146,189,84,84,49,49,48,51,48,51,56,84,244,141,146,190,84,84,49,49,48,51,48,51,57,84,244,141,146,191,84,84,49,49,48,51,48,52,48,84,244,141,147,128,84,84,49,49,48,51,48,52,49,84,244,141,147,129,84,84,49,49,48,51,48,52,50,84,244,141,147,130,84,84,49,49,48,51,48,52,51,84,244,141,147,131,84,84,49,49,48,51,48,52,52,84,244,141,147,132,84,84,49,49,48,51,48,52,53,84,244,141,147,133,84,84,49,49,48,51,48,52,54,84,244,141,147,134,84,84,49,49,48,51,48,52,55,84,244,141,147,135,84,84,49,49,48,51,48,52,56,84,244,141,147,136,84,84,49,49,48,51,48,52,57,84,244,141,147,137,84,84,49,49,48,51,48,53,48,84,244,141,147,138,84,84,49,49,48,51,48,53,49,84,244,141,147,139,84,84,49,49,48,51,48,53,50,84,244,141,147,140,84,84,49,49,48,51,48,53,51,84,244,141,147,141,84,84,49,49,48,51,48,53,52,84,244,141,147,142,84,84,49,49,48,51,48,53,53,84,244,141,147,143,84,84,49,49,48,51,48,53,54,84,244,141,147,144,84,84,49,49,48,51,48,53,55,84,244,141,147,145,84,84,49,49,48,51,48,53,56,84,244,141,147,146,84,84,49,49,48,51,48,53,57,84,244,141,147,147,84,84,49,49,48,51,48,54,48,84,244,141,147,148,84,84,49,49,48,51,48,54,49,84,244,141,147,149,84,84,49,49,48,51,48,54,50,84,244,141,147,150,84,84,49,49,48,51,48,54,51,84,244,141,147,151,84,84,49,49,48,51,48,54,52,84,244,141,147,152,84,84,49,49,48,51,48,54,53,84,244,141,147,153,84,84,49,49,48,51,48,54,54,84,244,141,147,154,84,84,49,49,48,51,48,54,55,84,244,141,147,155,84,84,49,49,48,51,48,54,56,84,244,141,147,156,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22768 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22768_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22768_s.txt", Encoding.UTF8);

    public Test22768() : base(recordedRequest, recordedResponse, "accounts8d43a0490823d21")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a0490823d21",
                        container: "containers0bd48f2ce8374f57b3f3c61b5595b35b",
                        blob: "Blob75dd14e58095411693d30703bece9a8b",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21034 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21034_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21034_s.txt", Encoding.UTF8);

    public Test21034() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers98fd3eef9d4b4edcb3855acb5ae8645d",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,49,49,48,48,84,244,143,144,188,84,84,49,49,49,49,49,48,49,84,244,143,144,189,84,84,49,49,49,49,49,48,50,84,244,143,144,190,84,84,49,49,49,49,49,48,51,84,244,143,144,191,84,84,49,49,49,49,49,48,52,84,244,143,145,128,84,84,49,49,49,49,49,48,53,84,244,143,145,129,84,84,49,49,49,49,49,48,54,84,244,143,145,130,84,84,49,49,49,49,49,48,55,84,244,143,145,131,84,84,49,49,49,49,49,48,56,84,244,143,145,132,84,84,49,49,49,49,49,48,57,84,244,143,145,133,84,84,49,49,49,49,49,49,48,84,244,143,145,134,84,84,49,49,49,49,49,49,49,84,244,143,145,135,84,84,49,49,49,49,49,49,50,84,244,143,145,136,84,84,49,49,49,49,49,49,51,84,244,143,145,137,84,84,49,49,49,49,49,49,52,84,244,143,145,138,84,84,49,49,49,49,49,49,53,84,244,143,145,139,84,84,49,49,49,49,49,49,54,84,244,143,145,140,84,84,49,49,49,49,49,49,55,84,244,143,145,141,84,84,49,49,49,49,49,49,56,84,244,143,145,142,84,84,49,49,49,49,49,49,57,84,244,143,145,143,84,84,49,49,49,49,49,50,48,84,244,143,145,144,84,84,49,49,49,49,49,50,49,84,244,143,145,145,84,84,49,49,49,49,49,50,50,84,244,143,145,146,84,84,49,49,49,49,49,50,51,84,244,143,145,147,84,84,49,49,49,49,49,50,52,84,244,143,145,148,84,84,49,49,49,49,49,50,53,84,244,143,145,149,84,84,49,49,49,49,49,50,54,84,244,143,145,150,84,84,49,49,49,49,49,50,55,84,244,143,145,151,84,84,49,49,49,49,49,50,56,84,244,143,145,152,84,84,49,49,49,49,49,50,57,84,244,143,145,153,84,84,49,49,49,49,49,51,48,84,244,143,145,154,84,84,49,49,49,49,49,51,49,84,244,143,145,155,84,84,49,49,49,49,49,51,50,84,244,143,145,156,84,84,49,49,49,49,49,51,51,84,244,143,145,157,84,84,49,49,49,49,49,51,52,84,244,143,145,158,84,84,49,49,49,49,49,51,53,84,244,143,145,159,84,84,49,49,49,49,49,51,54,84,244,143,145,160,84,84,49,49,49,49,49,51,55,84,244,143,145,161,84,84,49,49,49,49,49,51,56,84,244,143,145,162,84,84,49,49,49,49,49,51,57,84,244,143,145,163,84,84,49,49,49,49,49,52,48,84,244,143,145,164,84,84,49,49,49,49,49,52,49,84,244,143,145,165,84,84,49,49,49,49,49,52,50,84,244,143,145,166,84,84,49,49,49,49,49,52,51,84,244,143,145,167,84,84,49,49,49,49,49,52,52,84,244,143,145,168,84,84,49,49,49,49,49,52,53,84,244,143,145,169,84,84,49,49,49,49,49,52,54,84,244,143,145,170,84,84,49,49,49,49,49,52,55,84,244,143,145,171,84,84,49,49,49,49,49,52,56,84,244,143,145,172,84,84,49,49,49,49,49,52,57,84,244,143,145,173,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22769 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22769_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22769_s.txt", Encoding.UTF8);

    public Test22769() : base(recordedRequest, recordedResponse, "accounts8d43a0490823d21")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a0490823d21",
                        container: "containers0bd48f2ce8374f57b3f3c61b5595b35b",
                        blob: "Blob47889997f6e840c8957c0beff2e1592a",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20110 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20110_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20110_s.txt", Encoding.UTF8);

    public Test20110() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers02552a2396c44255a61dd19b9714b3b6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,49,55,55,50,52,84,243,184,157,188,84,84,49,48,49,55,55,50,53,84,243,184,157,189,84,84,49,48,49,55,55,50,54,84,243,184,157,190,84,84,49,48,49,55,55,50,55,84,243,184,157,191,84,84,49,48,49,55,55,50,57,84,243,184,158,129,84,84,49,48,49,55,55,52,49,84,243,184,158,141,84,84,49,48,49,55,55,52,51,84,243,184,158,143,84,84,49,48,49,55,55,52,52,84,243,184,158,144,84,84,49,48,49,55,55,53,55,84,243,184,158,157,84,84,49,48,49,55,55,57,51,84,243,184,159,129,84,84,49,48,49,55,56,48,53,84,243,184,159,141,84,84,49,48,49,55,56,48,55,84,243,184,159,143,84,84,49,48,49,55,56,48,56,84,243,184,159,144,84,84,49,48,49,55,56,50,49,84,243,184,159,157,84,84,49,48,49,55,56,53,55,84,243,184,160,129,84,84,49,48,49,55,56,54,57,84,243,184,160,141,84,84,49,48,49,55,56,55,49,84,243,184,160,143,84,84,49,48,49,55,56,55,50,84,243,184,160,144,84,84,49,48,49,55,56,56,53,84,243,184,160,157,84,84,49,48,49,55,57,50,49,84,243,184,161,129,84,84,49,48,49,55,57,51,51,84,243,184,161,141,84,84,49,48,49,55,57,51,53,84,243,184,161,143,84,84,49,48,49,55,57,51,54,84,243,184,161,144,84,84,49,48,49,55,57,52,57,84,243,184,161,157,84,84,49,48,49,55,57,56,53,84,243,184,162,129,84,84,49,48,49,55,57,57,55,84,243,184,162,141,84,84,49,48,49,55,57,57,57,84,243,184,162,143,84,84,49,48,49,56,48,48,48,84,243,184,162,144,84,84,49,48,49,56,48,49,51,84,243,184,162,157,84,84,49,48,49,56,48,52,57,84,243,184,163,129,84,84,49,48,49,56,48,54,49,84,243,184,163,141,84,84,49,48,49,56,48,54,51,84,243,184,163,143,84,84,49,48,49,56,48,54,52,84,243,184,163,144,84,84,49,48,49,56,48,55,55,84,243,184,163,157,84,84,49,48,49,56,49,49,51,84,243,184,164,129,84,84,49,48,49,56,49,50,53,84,243,184,164,141,84,84,49,48,49,56,49,50,55,84,243,184,164,143,84,84,49,48,49,56,49,50,56,84,243,184,164,144,84,84,49,48,49,56,49,52,49,84,243,184,164,157,84,84,49,48,49,56,49,55,55,84,243,184,165,129,84,84,49,48,49,56,49,56,57,84,243,184,165,141,84,84,49,48,49,56,49,57,49,84,243,184,165,143,84,84,49,48,49,56,49,57,50,84,243,184,165,144,84,84,49,48,49,56,50,48,53,84,243,184,165,157,84,84,49,48,49,56,50,52,49,84,243,184,166,129,84,84,49,48,49,56,50,53,51,84,243,184,166,141,84,84,49,48,49,56,50,53,53,84,243,184,166,143,84,84,49,48,49,56,50,53,54,84,243,184,166,144,84,84,49,48,49,56,50,54,57,84,243,184,166,157,84,84,49,48,49,56,51,48,53,84,243,184,167,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22796 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22796_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22796_s.txt", Encoding.UTF8);

    public Test22796() : base(recordedRequest, recordedResponse, "accounts8d43a0490823d21")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a0490823d21",
                        container: "containers0bd48f2ce8374f57b3f3c61b5595b35b",
                        blob: "Blob60625d8442224f7db16af39b6aa46eb4",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21094 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21094_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21094_s.txt", Encoding.UTF8);

    public Test21094() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers79aa3dd90e344ebe9466f3cb0c56378a",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,50,53,53,48,84,244,143,167,166,84,84,49,49,49,50,53,53,49,84,244,143,167,167,84,84,49,49,49,50,53,53,50,84,244,143,167,168,84,84,49,49,49,50,53,53,51,84,244,143,167,169,84,84,49,49,49,50,53,53,52,84,244,143,167,170,84,84,49,49,49,50,53,53,53,84,244,143,167,171,84,84,49,49,49,50,53,53,54,84,244,143,167,172,84,84,49,49,49,50,53,53,55,84,244,143,167,173,84,84,49,49,49,50,53,53,56,84,244,143,167,174,84,84,49,49,49,50,53,53,57,84,244,143,167,175,84,84,49,49,49,50,53,54,48,84,244,143,167,176,84,84,49,49,49,50,53,54,49,84,244,143,167,177,84,84,49,49,49,50,53,54,50,84,244,143,167,178,84,84,49,49,49,50,53,54,51,84,244,143,167,179,84,84,49,49,49,50,53,54,52,84,244,143,167,180,84,84,49,49,49,50,53,54,53,84,244,143,167,181,84,84,49,49,49,50,53,54,54,84,244,143,167,182,84,84,49,49,49,50,53,54,55,84,244,143,167,183,84,84,49,49,49,50,53,54,56,84,244,143,167,184,84,84,49,49,49,50,53,54,57,84,244,143,167,185,84,84,49,49,49,50,53,55,48,84,244,143,167,186,84,84,49,49,49,50,53,55,49,84,244,143,167,187,84,84,49,49,49,50,53,55,50,84,244,143,167,188,84,84,49,49,49,50,53,55,51,84,244,143,167,189,84,84,49,49,49,50,53,55,52,84,244,143,167,190,84,84,49,49,49,50,53,55,53,84,244,143,167,191,84,84,49,49,49,50,53,55,54,84,244,143,168,128,84,84,49,49,49,50,53,55,55,84,244,143,168,129,84,84,49,49,49,50,53,55,56,84,244,143,168,130,84,84,49,49,49,50,53,55,57,84,244,143,168,131,84,84,49,49,49,50,53,56,48,84,244,143,168,132,84,84,49,49,49,50,53,56,49,84,244,143,168,133,84,84,49,49,49,50,53,56,50,84,244,143,168,134,84,84,49,49,49,50,53,56,51,84,244,143,168,135,84,84,49,49,49,50,53,56,52,84,244,143,168,136,84,84,49,49,49,50,53,56,53,84,244,143,168,137,84,84,49,49,49,50,53,56,54,84,244,143,168,138,84,84,49,49,49,50,53,56,55,84,244,143,168,139,84,84,49,49,49,50,53,56,56,84,244,143,168,140,84,84,49,49,49,50,53,56,57,84,244,143,168,141,84,84,49,49,49,50,53,57,48,84,244,143,168,142,84,84,49,49,49,50,53,57,49,84,244,143,168,143,84,84,49,49,49,50,53,57,50,84,244,143,168,144,84,84,49,49,49,50,53,57,51,84,244,143,168,145,84,84,49,49,49,50,53,57,52,84,244,143,168,146,84,84,49,49,49,50,53,57,53,84,244,143,168,147,84,84,49,49,49,50,53,57,54,84,244,143,168,148,84,84,49,49,49,50,53,57,55,84,244,143,168,149,84,84,49,49,49,50,53,57,56,84,244,143,168,150,84,84,49,49,49,50,53,57,57,84,244,143,168,151,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20550 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20550_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20550_s.txt", Encoding.UTF8);

    public Test20550() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers169b02be047c4c76acbb586fdc8886c6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,54,52,55,48,53,84,244,131,188,129,84,84,49,48,54,52,55,49,55,84,244,131,188,141,84,84,49,48,54,52,55,49,57,84,244,131,188,143,84,84,49,48,54,52,55,50,48,84,244,131,188,144,84,84,49,48,54,52,55,51,51,84,244,131,188,157,84,84,49,48,54,52,55,54,57,84,244,131,189,129,84,84,49,48,54,52,55,56,49,84,244,131,189,141,84,84,49,48,54,52,55,56,51,84,244,131,189,143,84,84,49,48,54,52,55,56,52,84,244,131,189,144,84,84,49,48,54,52,55,57,55,84,244,131,189,157,84,84,49,48,54,52,56,51,51,84,244,131,190,129,84,84,49,48,54,52,56,52,53,84,244,131,190,141,84,84,49,48,54,52,56,52,55,84,244,131,190,143,84,84,49,48,54,52,56,52,56,84,244,131,190,144,84,84,49,48,54,52,56,54,49,84,244,131,190,157,84,84,49,48,54,52,56,57,55,84,244,131,191,129,84,84,49,48,54,52,57,48,57,84,244,131,191,141,84,84,49,48,54,52,57,49,49,84,244,131,191,143,84,84,49,48,54,52,57,49,50,84,244,131,191,144,84,84,49,48,54,52,57,50,53,84,244,131,191,157,84,84,49,48,54,52,57,54,49,84,244,132,128,129,84,84,49,48,54,52,57,55,51,84,244,132,128,141,84,84,49,48,54,52,57,55,53,84,244,132,128,143,84,84,49,48,54,52,57,55,54,84,244,132,128,144,84,84,49,48,54,52,57,56,57,84,244,132,128,157,84,84,49,48,54,53,48,50,52,84,244,132,129,128,84,84,49,48,54,53,48,50,53,84,244,132,129,129,84,84,49,48,54,53,48,50,54,84,244,132,129,130,84,84,49,48,54,53,48,50,55,84,244,132,129,131,84,84,49,48,54,53,48,50,56,84,244,132,129,132,84,84,49,48,54,53,48,50,57,84,244,132,129,133,84,84,49,48,54,53,48,51,48,84,244,132,129,134,84,84,49,48,54,53,48,51,49,84,244,132,129,135,84,84,49,48,54,53,48,51,50,84,244,132,129,136,84,84,49,48,54,53,48,51,51,84,244,132,129,137,84,84,49,48,54,53,48,51,52,84,244,132,129,138,84,84,49,48,54,53,48,51,53,84,244,132,129,139,84,84,49,48,54,53,48,51,54,84,244,132,129,140,84,84,49,48,54,53,48,51,55,84,244,132,129,141,84,84,49,48,54,53,48,51,56,84,244,132,129,142,84,84,49,48,54,53,48,51,57,84,244,132,129,143,84,84,49,48,54,53,48,52,48,84,244,132,129,144,84,84,49,48,54,53,48,52,49,84,244,132,129,145,84,84,49,48,54,53,48,52,50,84,244,132,129,146,84,84,49,48,54,53,48,52,51,84,244,132,129,147,84,84,49,48,54,53,48,52,52,84,244,132,129,148,84,84,49,48,54,53,48,52,53,84,244,132,129,149,84,84,49,48,54,53,48,52,54,84,244,132,129,150,84,84,49,48,54,53,48,52,55,84,244,132,129,151,84,84,49,48,54,53,48,52,56,84,244,132,129,152,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20679 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20679_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20679_s.txt", Encoding.UTF8);

    public Test20679() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers9df780a74f2549dda8f9f337dadb7946",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,56,52,50,50,53,84,244,136,173,129,84,84,49,48,56,52,50,51,55,84,244,136,173,141,84,84,49,48,56,52,50,51,57,84,244,136,173,143,84,84,49,48,56,52,50,52,48,84,244,136,173,144,84,84,49,48,56,52,50,53,51,84,244,136,173,157,84,84,49,48,56,52,50,56,57,84,244,136,174,129,84,84,49,48,56,52,51,48,49,84,244,136,174,141,84,84,49,48,56,52,51,48,51,84,244,136,174,143,84,84,49,48,56,52,51,48,52,84,244,136,174,144,84,84,49,48,56,52,51,49,55,84,244,136,174,157,84,84,49,48,56,52,51,53,51,84,244,136,175,129,84,84,49,48,56,52,51,54,53,84,244,136,175,141,84,84,49,48,56,52,51,54,55,84,244,136,175,143,84,84,49,48,56,52,51,54,56,84,244,136,175,144,84,84,49,48,56,52,51,56,49,84,244,136,175,157,84,84,49,48,56,52,52,49,55,84,244,136,176,129,84,84,49,48,56,52,52,50,57,84,244,136,176,141,84,84,49,48,56,52,52,51,49,84,244,136,176,143,84,84,49,48,56,52,52,51,50,84,244,136,176,144,84,84,49,48,56,52,52,52,53,84,244,136,176,157,84,84,49,48,56,52,52,56,49,84,244,136,177,129,84,84,49,48,56,52,52,57,51,84,244,136,177,141,84,84,49,48,56,52,52,57,53,84,244,136,177,143,84,84,49,48,56,52,52,57,54,84,244,136,177,144,84,84,49,48,56,52,53,48,57,84,244,136,177,157,84,84,49,48,56,52,53,52,53,84,244,136,178,129,84,84,49,48,56,52,53,53,55,84,244,136,178,141,84,84,49,48,56,52,53,53,57,84,244,136,178,143,84,84,49,48,56,52,53,54,48,84,244,136,178,144,84,84,49,48,56,52,53,55,51,84,244,136,178,157,84,84,49,48,56,52,54,48,57,84,244,136,179,129,84,84,49,48,56,52,54,50,49,84,244,136,179,141,84,84,49,48,56,52,54,50,51,84,244,136,179,143,84,84,49,48,56,52,54,50,52,84,244,136,179,144,84,84,49,48,56,52,54,51,55,84,244,136,179,157,84,84,49,48,56,52,54,55,51,84,244,136,180,129,84,84,49,48,56,52,54,56,53,84,244,136,180,141,84,84,49,48,56,52,54,56,55,84,244,136,180,143,84,84,49,48,56,52,54,56,56,84,244,136,180,144,84,84,49,48,56,52,55,48,49,84,244,136,180,157,84,84,49,48,56,52,55,51,55,84,244,136,181,129,84,84,49,48,56,52,55,52,57,84,244,136,181,141,84,84,49,48,56,52,55,53,49,84,244,136,181,143,84,84,49,48,56,52,55,53,50,84,244,136,181,144,84,84,49,48,56,52,55,54,53,84,244,136,181,157,84,84,49,48,56,52,56,48,49,84,244,136,182,129,84,84,49,48,56,52,56,49,51,84,244,136,182,141,84,84,49,48,56,52,56,49,53,84,244,136,182,143,84,84,49,48,56,52,56,49,54,84,244,136,182,144,84,84,49,48,56,52,56,50,57,84,244,136,182,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19888 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19888_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19888_s.txt", Encoding.UTF8);

    public Test19888() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersf0a96ab3064046f8a2fc77e6e3ebae9e",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,56,51,54,57,53,84,243,176,138,143,84,84,57,56,51,54,57,54,84,243,176,138,144,84,84,57,56,51,55,48,57,84,243,176,138,157,84,84,57,56,51,55,52,53,84,243,176,139,129,84,84,57,56,51,55,53,55,84,243,176,139,141,84,84,57,56,51,55,53,57,84,243,176,139,143,84,84,57,56,51,55,54,48,84,243,176,139,144,84,84,57,56,51,55,55,51,84,243,176,139,157,84,84,57,56,51,56,48,57,84,243,176,140,129,84,84,57,56,51,56,50,49,84,243,176,140,141,84,84,57,56,51,56,50,51,84,243,176,140,143,84,84,57,56,51,56,50,52,84,243,176,140,144,84,84,57,56,51,56,51,55,84,243,176,140,157,84,84,57,56,51,56,55,50,84,243,176,141,128,84,84,57,56,51,56,55,51,84,243,176,141,129,84,84,57,56,51,56,55,52,84,243,176,141,130,84,84,57,56,51,56,55,53,84,243,176,141,131,84,84,57,56,51,56,55,54,84,243,176,141,132,84,84,57,56,51,56,55,55,84,243,176,141,133,84,84,57,56,51,56,55,56,84,243,176,141,134,84,84,57,56,51,56,55,57,84,243,176,141,135,84,84,57,56,51,56,56,48,84,243,176,141,136,84,84,57,56,51,56,56,49,84,243,176,141,137,84,84,57,56,51,56,56,50,84,243,176,141,138,84,84,57,56,51,56,56,51,84,243,176,141,139,84,84,57,56,51,56,56,52,84,243,176,141,140,84,84,57,56,51,56,56,53,84,243,176,141,141,84,84,57,56,51,56,56,54,84,243,176,141,142,84,84,57,56,51,56,56,55,84,243,176,141,143,84,84,57,56,51,56,56,56,84,243,176,141,144,84,84,57,56,51,56,56,57,84,243,176,141,145,84,84,57,56,51,56,57,48,84,243,176,141,146,84,84,57,56,51,56,57,49,84,243,176,141,147,84,84,57,56,51,56,57,50,84,243,176,141,148,84,84,57,56,51,56,57,51,84,243,176,141,149,84,84,57,56,51,56,57,52,84,243,176,141,150,84,84,57,56,51,56,57,53,84,243,176,141,151,84,84,57,56,51,56,57,54,84,243,176,141,152,84,84,57,56,51,56,57,55,84,243,176,141,153,84,84,57,56,51,56,57,56,84,243,176,141,154,84,84,57,56,51,56,57,57,84,243,176,141,155,84,84,57,56,51,57,48,48,84,243,176,141,156,84,84,57,56,51,57,48,49,84,243,176,141,157,84,84,57,56,51,57,48,50,84,243,176,141,158,84,84,57,56,51,57,48,51,84,243,176,141,159,84,84,57,56,51,57,48,52,84,243,176,141,160,84,84,57,56,51,57,48,53,84,243,176,141,161,84,84,57,56,51,57,48,54,84,243,176,141,162,84,84,57,56,51,57,48,55,84,243,176,141,163,84,84,57,56,51,57,48,56,84,243,176,141,164,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21161 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21161_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21161_s.txt", Encoding.UTF8);

    public Test21161() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers225cce652d6045d9948fbaf5d1ebb735",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,52,49,48,48,84,244,143,191,180,84,84,49,49,49,52,49,48,49,84,244,143,191,181,84,84,49,49,49,52,49,48,50,84,244,143,191,182,84,84,49,49,49,52,49,48,51,84,244,143,191,183,84,84,49,49,49,52,49,48,52,84,244,143,191,184,84,84,49,49,49,52,49,48,53,84,244,143,191,185,84,84,49,49,49,52,49,48,54,84,244,143,191,186,84,84,49,49,49,52,49,48,55,84,244,143,191,187,84,84,49,49,49,52,49,48,56,84,244,143,191,188,84,84,49,49,49,52,49,48,57,84,244,143,191,189,84,84,49,49,49,52,49,49,48,84,244,143,191,190,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20427 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20427_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20427_s.txt", Encoding.UTF8);

    public Test20427() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers7f83ba854dc4459da9078f97f691d28c",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,53,48,55,56,84,244,129,165,166,84,84,49,48,53,53,48,55,57,84,244,129,165,167,84,84,49,48,53,53,48,56,48,84,244,129,165,168,84,84,49,48,53,53,48,56,49,84,244,129,165,169,84,84,49,48,53,53,48,56,50,84,244,129,165,170,84,84,49,48,53,53,48,56,51,84,244,129,165,171,84,84,49,48,53,53,48,56,52,84,244,129,165,172,84,84,49,48,53,53,48,56,53,84,244,129,165,173,84,84,49,48,53,53,48,56,54,84,244,129,165,174,84,84,49,48,53,53,48,56,55,84,244,129,165,175,84,84,49,48,53,53,48,56,56,84,244,129,165,176,84,84,49,48,53,53,48,56,57,84,244,129,165,177,84,84,49,48,53,53,48,57,48,84,244,129,165,178,84,84,49,48,53,53,48,57,49,84,244,129,165,179,84,84,49,48,53,53,48,57,50,84,244,129,165,180,84,84,49,48,53,53,48,57,51,84,244,129,165,181,84,84,49,48,53,53,48,57,52,84,244,129,165,182,84,84,49,48,53,53,48,57,53,84,244,129,165,183,84,84,49,48,53,53,48,57,54,84,244,129,165,184,84,84,49,48,53,53,48,57,55,84,244,129,165,185,84,84,49,48,53,53,48,57,56,84,244,129,165,186,84,84,49,48,53,53,48,57,57,84,244,129,165,187,84,84,49,48,53,53,49,48,48,84,244,129,165,188,84,84,49,48,53,53,49,48,49,84,244,129,165,189,84,84,49,48,53,53,49,48,50,84,244,129,165,190,84,84,49,48,53,53,49,48,51,84,244,129,165,191,84,84,49,48,53,53,49,48,52,84,244,129,166,128,84,84,49,48,53,53,49,48,53,84,244,129,166,129,84,84,49,48,53,53,49,48,54,84,244,129,166,130,84,84,49,48,53,53,49,48,55,84,244,129,166,131,84,84,49,48,53,53,49,48,56,84,244,129,166,132,84,84,49,48,53,53,49,48,57,84,244,129,166,133,84,84,49,48,53,53,49,49,48,84,244,129,166,134,84,84,49,48,53,53,49,49,49,84,244,129,166,135,84,84,49,48,53,53,49,49,50,84,244,129,166,136,84,84,49,48,53,53,49,49,51,84,244,129,166,137,84,84,49,48,53,53,49,49,52,84,244,129,166,138,84,84,49,48,53,53,49,49,53,84,244,129,166,139,84,84,49,48,53,53,49,49,54,84,244,129,166,140,84,84,49,48,53,53,49,49,55,84,244,129,166,141,84,84,49,48,53,53,49,49,56,84,244,129,166,142,84,84,49,48,53,53,49,49,57,84,244,129,166,143,84,84,49,48,53,53,49,50,48,84,244,129,166,144,84,84,49,48,53,53,49,50,49,84,244,129,166,145,84,84,49,48,53,53,49,50,50,84,244,129,166,146,84,84,49,48,53,53,49,50,51,84,244,129,166,147,84,84,49,48,53,53,49,50,52,84,244,129,166,148,84,84,49,48,53,53,49,50,53,84,244,129,166,149,84,84,49,48,53,53,49,50,54,84,244,129,166,150,84,84,49,48,53,53,49,50,55,84,244,129,166,151,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20901 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20901_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20901_s.txt", Encoding.UTF8);

    public Test20901() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersdd41d3a5bb7f42709f7cec587f1a204a",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,52,53,49,57,84,244,141,170,135,84,84,49,49,48,52,53,50,48,84,244,141,170,136,84,84,49,49,48,52,53,50,49,84,244,141,170,137,84,84,49,49,48,52,53,50,50,84,244,141,170,138,84,84,49,49,48,52,53,50,51,84,244,141,170,139,84,84,49,49,48,52,53,50,52,84,244,141,170,140,84,84,49,49,48,52,53,50,53,84,244,141,170,141,84,84,49,49,48,52,53,50,54,84,244,141,170,142,84,84,49,49,48,52,53,50,55,84,244,141,170,143,84,84,49,49,48,52,53,50,56,84,244,141,170,144,84,84,49,49,48,52,53,50,57,84,244,141,170,145,84,84,49,49,48,52,53,51,48,84,244,141,170,146,84,84,49,49,48,52,53,51,49,84,244,141,170,147,84,84,49,49,48,52,53,51,50,84,244,141,170,148,84,84,49,49,48,52,53,51,51,84,244,141,170,149,84,84,49,49,48,52,53,51,52,84,244,141,170,150,84,84,49,49,48,52,53,51,53,84,244,141,170,151,84,84,49,49,48,52,53,51,54,84,244,141,170,152,84,84,49,49,48,52,53,51,55,84,244,141,170,153,84,84,49,49,48,52,53,51,56,84,244,141,170,154,84,84,49,49,48,52,53,51,57,84,244,141,170,155,84,84,49,49,48,52,53,52,48,84,244,141,170,156,84,84,49,49,48,52,53,52,49,84,244,141,170,157,84,84,49,49,48,52,53,52,50,84,244,141,170,158,84,84,49,49,48,52,53,52,51,84,244,141,170,159,84,84,49,49,48,52,53,52,52,84,244,141,170,160,84,84,49,49,48,52,53,52,53,84,244,141,170,161,84,84,49,49,48,52,53,52,54,84,244,141,170,162,84,84,49,49,48,52,53,52,55,84,244,141,170,163,84,84,49,49,48,52,53,52,56,84,244,141,170,164,84,84,49,49,48,52,53,52,57,84,244,141,170,165,84,84,49,49,48,52,53,53,48,84,244,141,170,166,84,84,49,49,48,52,53,53,49,84,244,141,170,167,84,84,49,49,48,52,53,53,50,84,244,141,170,168,84,84,49,49,48,52,53,53,51,84,244,141,170,169,84,84,49,49,48,52,53,53,52,84,244,141,170,170,84,84,49,49,48,52,53,53,53,84,244,141,170,171,84,84,49,49,48,52,53,53,54,84,244,141,170,172,84,84,49,49,48,52,53,53,55,84,244,141,170,173,84,84,49,49,48,52,53,53,56,84,244,141,170,174,84,84,49,49,48,52,53,53,57,84,244,141,170,175,84,84,49,49,48,52,53,54,48,84,244,141,170,176,84,84,49,49,48,52,53,54,49,84,244,141,170,177,84,84,49,49,48,52,53,54,50,84,244,141,170,178,84,84,49,49,48,52,53,54,51,84,244,141,170,179,84,84,49,49,48,52,53,54,52,84,244,141,170,180,84,84,49,49,48,52,53,54,53,84,244,141,170,181,84,84,49,49,48,52,53,54,54,84,244,141,170,182,84,84,49,49,48,52,53,54,55,84,244,141,170,183,84,84,49,49,48,52,53,54,56,84,244,141,170,184,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20394 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20394_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20394_s.txt", Encoding.UTF8);

    public Test20394() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers7f83ba854dc4459da9078f97f691d28c",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,52,50,55,56,84,244,129,153,134,84,84,49,48,53,52,50,55,57,84,244,129,153,135,84,84,49,48,53,52,50,56,48,84,244,129,153,136,84,84,49,48,53,52,50,56,49,84,244,129,153,137,84,84,49,48,53,52,50,56,50,84,244,129,153,138,84,84,49,48,53,52,50,56,51,84,244,129,153,139,84,84,49,48,53,52,50,56,52,84,244,129,153,140,84,84,49,48,53,52,50,56,53,84,244,129,153,141,84,84,49,48,53,52,50,56,54,84,244,129,153,142,84,84,49,48,53,52,50,56,55,84,244,129,153,143,84,84,49,48,53,52,50,56,56,84,244,129,153,144,84,84,49,48,53,52,50,56,57,84,244,129,153,145,84,84,49,48,53,52,50,57,48,84,244,129,153,146,84,84,49,48,53,52,50,57,49,84,244,129,153,147,84,84,49,48,53,52,50,57,50,84,244,129,153,148,84,84,49,48,53,52,50,57,51,84,244,129,153,149,84,84,49,48,53,52,50,57,52,84,244,129,153,150,84,84,49,48,53,52,50,57,53,84,244,129,153,151,84,84,49,48,53,52,50,57,54,84,244,129,153,152,84,84,49,48,53,52,50,57,55,84,244,129,153,153,84,84,49,48,53,52,50,57,56,84,244,129,153,154,84,84,49,48,53,52,50,57,57,84,244,129,153,155,84,84,49,48,53,52,51,48,48,84,244,129,153,156,84,84,49,48,53,52,51,48,49,84,244,129,153,157,84,84,49,48,53,52,51,48,50,84,244,129,153,158,84,84,49,48,53,52,51,48,51,84,244,129,153,159,84,84,49,48,53,52,51,48,52,84,244,129,153,160,84,84,49,48,53,52,51,48,53,84,244,129,153,161,84,84,49,48,53,52,51,48,54,84,244,129,153,162,84,84,49,48,53,52,51,48,55,84,244,129,153,163,84,84,49,48,53,52,51,48,56,84,244,129,153,164,84,84,49,48,53,52,51,48,57,84,244,129,153,165,84,84,49,48,53,52,51,49,48,84,244,129,153,166,84,84,49,48,53,52,51,49,49,84,244,129,153,167,84,84,49,48,53,52,51,49,50,84,244,129,153,168,84,84,49,48,53,52,51,49,51,84,244,129,153,169,84,84,49,48,53,52,51,49,52,84,244,129,153,170,84,84,49,48,53,52,51,49,53,84,244,129,153,171,84,84,49,48,53,52,51,49,54,84,244,129,153,172,84,84,49,48,53,52,51,49,55,84,244,129,153,173,84,84,49,48,53,52,51,49,56,84,244,129,153,174,84,84,49,48,53,52,51,49,57,84,244,129,153,175,84,84,49,48,53,52,51,50,48,84,244,129,153,176,84,84,49,48,53,52,51,50,49,84,244,129,153,177,84,84,49,48,53,52,51,50,50,84,244,129,153,178,84,84,49,48,53,52,51,50,51,84,244,129,153,179,84,84,49,48,53,52,51,50,52,84,244,129,153,180,84,84,49,48,53,52,51,50,53,84,244,129,153,181,84,84,49,48,53,52,51,50,54,84,244,129,153,182,84,84,49,48,53,52,51,50,55,84,244,129,153,183,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20618 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20618_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20618_s.txt", Encoding.UTF8);

    public Test20618() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers5f5b393ed8e742338d6031fb2e225092",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,55,52,50,49,57,84,244,134,144,171,84,84,49,48,55,52,50,50,48,84,244,134,144,172,84,84,49,48,55,52,50,50,49,84,244,134,144,173,84,84,49,48,55,52,50,50,50,84,244,134,144,174,84,84,49,48,55,52,50,50,51,84,244,134,144,175,84,84,49,48,55,52,50,50,52,84,244,134,144,176,84,84,49,48,55,52,50,50,53,84,244,134,144,177,84,84,49,48,55,52,50,50,54,84,244,134,144,178,84,84,49,48,55,52,50,50,55,84,244,134,144,179,84,84,49,48,55,52,50,50,56,84,244,134,144,180,84,84,49,48,55,52,50,50,57,84,244,134,144,181,84,84,49,48,55,52,50,51,48,84,244,134,144,182,84,84,49,48,55,52,50,51,49,84,244,134,144,183,84,84,49,48,55,52,50,51,50,84,244,134,144,184,84,84,49,48,55,52,50,51,51,84,244,134,144,185,84,84,49,48,55,52,50,51,52,84,244,134,144,186,84,84,49,48,55,52,50,51,53,84,244,134,144,187,84,84,49,48,55,52,50,51,54,84,244,134,144,188,84,84,49,48,55,52,50,51,55,84,244,134,144,189,84,84,49,48,55,52,50,51,56,84,244,134,144,190,84,84,49,48,55,52,50,51,57,84,244,134,144,191,84,84,49,48,55,52,50,52,49,84,244,134,145,129,84,84,49,48,55,52,50,53,51,84,244,134,145,141,84,84,49,48,55,52,50,53,53,84,244,134,145,143,84,84,49,48,55,52,50,53,54,84,244,134,145,144,84,84,49,48,55,52,50,54,57,84,244,134,145,157,84,84,49,48,55,52,51,48,53,84,244,134,146,129,84,84,49,48,55,52,51,49,55,84,244,134,146,141,84,84,49,48,55,52,51,49,57,84,244,134,146,143,84,84,49,48,55,52,51,50,48,84,244,134,146,144,84,84,49,48,55,52,51,51,51,84,244,134,146,157,84,84,49,48,55,52,51,54,57,84,244,134,147,129,84,84,49,48,55,52,51,56,49,84,244,134,147,141,84,84,49,48,55,52,51,56,51,84,244,134,147,143,84,84,49,48,55,52,51,56,52,84,244,134,147,144,84,84,49,48,55,52,51,57,55,84,244,134,147,157,84,84,49,48,55,52,52,51,51,84,244,134,148,129,84,84,49,48,55,52,52,52,53,84,244,134,148,141,84,84,49,48,55,52,52,52,55,84,244,134,148,143,84,84,49,48,55,52,52,52,56,84,244,134,148,144,84,84,49,48,55,52,52,54,49,84,244,134,148,157,84,84,49,48,55,52,52,57,55,84,244,134,149,129,84,84,49,48,55,52,53,48,57,84,244,134,149,141,84,84,49,48,55,52,53,49,49,84,244,134,149,143,84,84,49,48,55,52,53,49,50,84,244,134,149,144,84,84,49,48,55,52,53,50,53,84,244,134,149,157,84,84,49,48,55,52,53,54,49,84,244,134,150,129,84,84,49,48,55,52,53,55,51,84,244,134,150,141,84,84,49,48,55,52,53,55,53,84,244,134,150,143,84,84,49,48,55,52,53,55,54,84,244,134,150,144,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22770 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22770_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22770_s.txt", Encoding.UTF8);

    public Test22770() : base(recordedRequest, recordedResponse, "accounts8d43a0490823d21")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a0490823d21",
                        container: "containers0bd48f2ce8374f57b3f3c61b5595b35b",
                        blob: "Blobeb5c55f6d7904d69af29076d652a2c84",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20523 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20523_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20523_s.txt", Encoding.UTF8);

    public Test20523() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers169b02be047c4c76acbb586fdc8886c6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,54,48,49,54,49,84,244,130,181,129,84,84,49,48,54,48,49,55,51,84,244,130,181,141,84,84,49,48,54,48,49,55,53,84,244,130,181,143,84,84,49,48,54,48,49,55,54,84,244,130,181,144,84,84,49,48,54,48,49,56,57,84,244,130,181,157,84,84,49,48,54,48,50,50,53,84,244,130,182,129,84,84,49,48,54,48,50,51,55,84,244,130,182,141,84,84,49,48,54,48,50,51,57,84,244,130,182,143,84,84,49,48,54,48,50,52,48,84,244,130,182,144,84,84,49,48,54,48,50,53,51,84,244,130,182,157,84,84,49,48,54,48,50,56,57,84,244,130,183,129,84,84,49,48,54,48,51,48,49,84,244,130,183,141,84,84,49,48,54,48,51,48,51,84,244,130,183,143,84,84,49,48,54,48,51,48,52,84,244,130,183,144,84,84,49,48,54,48,51,49,55,84,244,130,183,157,84,84,49,48,54,48,51,53,51,84,244,130,184,129,84,84,49,48,54,48,51,54,53,84,244,130,184,141,84,84,49,48,54,48,51,54,55,84,244,130,184,143,84,84,49,48,54,48,51,54,56,84,244,130,184,144,84,84,49,48,54,48,51,56,49,84,244,130,184,157,84,84,49,48,54,48,52,49,55,84,244,130,185,129,84,84,49,48,54,48,52,50,57,84,244,130,185,141,84,84,49,48,54,48,52,51,49,84,244,130,185,143,84,84,49,48,54,48,52,51,50,84,244,130,185,144,84,84,49,48,54,48,52,52,53,84,244,130,185,157,84,84,49,48,54,48,52,56,49,84,244,130,186,129,84,84,49,48,54,48,52,57,51,84,244,130,186,141,84,84,49,48,54,48,52,57,53,84,244,130,186,143,84,84,49,48,54,48,52,57,54,84,244,130,186,144,84,84,49,48,54,48,53,48,57,84,244,130,186,157,84,84,49,48,54,48,53,52,53,84,244,130,187,129,84,84,49,48,54,48,53,53,55,84,244,130,187,141,84,84,49,48,54,48,53,53,57,84,244,130,187,143,84,84,49,48,54,48,53,54,48,84,244,130,187,144,84,84,49,48,54,48,53,55,51,84,244,130,187,157,84,84,49,48,54,48,54,48,57,84,244,130,188,129,84,84,49,48,54,48,54,50,49,84,244,130,188,141,84,84,49,48,54,48,54,50,51,84,244,130,188,143,84,84,49,48,54,48,54,50,52,84,244,130,188,144,84,84,49,48,54,48,54,51,55,84,244,130,188,157,84,84,49,48,54,48,54,55,51,84,244,130,189,129,84,84,49,48,54,48,54,56,53,84,244,130,189,141,84,84,49,48,54,48,54,56,55,84,244,130,189,143,84,84,49,48,54,48,54,56,56,84,244,130,189,144,84,84,49,48,54,48,55,48,49,84,244,130,189,157,84,84,49,48,54,48,55,51,55,84,244,130,190,129,84,84,49,48,54,48,55,52,57,84,244,130,190,141,84,84,49,48,54,48,55,53,49,84,244,130,190,143,84,84,49,48,54,48,55,53,50,84,244,130,190,144,84,84,49,48,54,48,55,54,53,84,244,130,190,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20330 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20330_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20330_s.txt", Encoding.UTF8);

    public Test20330() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers412024b733e349978217e6093afed677",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,50,55,55,56,84,244,129,129,170,84,84,49,48,53,50,55,55,57,84,244,129,129,171,84,84,49,48,53,50,55,56,48,84,244,129,129,172,84,84,49,48,53,50,55,56,49,84,244,129,129,173,84,84,49,48,53,50,55,56,50,84,244,129,129,174,84,84,49,48,53,50,55,56,51,84,244,129,129,175,84,84,49,48,53,50,55,56,52,84,244,129,129,176,84,84,49,48,53,50,55,56,53,84,244,129,129,177,84,84,49,48,53,50,55,56,54,84,244,129,129,178,84,84,49,48,53,50,55,56,55,84,244,129,129,179,84,84,49,48,53,50,55,56,56,84,244,129,129,180,84,84,49,48,53,50,55,56,57,84,244,129,129,181,84,84,49,48,53,50,55,57,48,84,244,129,129,182,84,84,49,48,53,50,55,57,49,84,244,129,129,183,84,84,49,48,53,50,55,57,50,84,244,129,129,184,84,84,49,48,53,50,55,57,51,84,244,129,129,185,84,84,49,48,53,50,55,57,52,84,244,129,129,186,84,84,49,48,53,50,55,57,53,84,244,129,129,187,84,84,49,48,53,50,55,57,54,84,244,129,129,188,84,84,49,48,53,50,55,57,55,84,244,129,129,189,84,84,49,48,53,50,55,57,56,84,244,129,129,190,84,84,49,48,53,50,55,57,57,84,244,129,129,191,84,84,49,48,53,50,56,48,48,84,244,129,130,128,84,84,49,48,53,50,56,48,49,84,244,129,130,129,84,84,49,48,53,50,56,48,50,84,244,129,130,130,84,84,49,48,53,50,56,48,51,84,244,129,130,131,84,84,49,48,53,50,56,48,52,84,244,129,130,132,84,84,49,48,53,50,56,48,53,84,244,129,130,133,84,84,49,48,53,50,56,48,54,84,244,129,130,134,84,84,49,48,53,50,56,48,55,84,244,129,130,135,84,84,49,48,53,50,56,48,56,84,244,129,130,136,84,84,49,48,53,50,56,48,57,84,244,129,130,137,84,84,49,48,53,50,56,49,48,84,244,129,130,138,84,84,49,48,53,50,56,49,49,84,244,129,130,139,84,84,49,48,53,50,56,49,50,84,244,129,130,140,84,84,49,48,53,50,56,49,51,84,244,129,130,141,84,84,49,48,53,50,56,49,52,84,244,129,130,142,84,84,49,48,53,50,56,49,53,84,244,129,130,143,84,84,49,48,53,50,56,49,54,84,244,129,130,144,84,84,49,48,53,50,56,49,55,84,244,129,130,145,84,84,49,48,53,50,56,49,56,84,244,129,130,146,84,84,49,48,53,50,56,49,57,84,244,129,130,147,84,84,49,48,53,50,56,50,48,84,244,129,130,148,84,84,49,48,53,50,56,50,49,84,244,129,130,149,84,84,49,48,53,50,56,50,50,84,244,129,130,150,84,84,49,48,53,50,56,50,51,84,244,129,130,151,84,84,49,48,53,50,56,50,52,84,244,129,130,152,84,84,49,48,53,50,56,50,53,84,244,129,130,153,84,84,49,48,53,50,56,50,54,84,244,129,130,154,84,84,49,48,53,50,56,50,55,84,244,129,130,155,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20588 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20588_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20588_s.txt", Encoding.UTF8);

    public Test20588() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers2997cf743a0f481c9f696984938aa742",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,55,48,48,51,56,84,244,133,143,150,84,84,49,48,55,48,48,51,57,84,244,133,143,151,84,84,49,48,55,48,48,52,48,84,244,133,143,152,84,84,49,48,55,48,48,52,49,84,244,133,143,153,84,84,49,48,55,48,48,52,50,84,244,133,143,154,84,84,49,48,55,48,48,52,51,84,244,133,143,155,84,84,49,48,55,48,48,52,52,84,244,133,143,156,84,84,49,48,55,48,48,52,53,84,244,133,143,157,84,84,49,48,55,48,48,52,54,84,244,133,143,158,84,84,49,48,55,48,48,52,55,84,244,133,143,159,84,84,49,48,55,48,48,52,56,84,244,133,143,160,84,84,49,48,55,48,48,52,57,84,244,133,143,161,84,84,49,48,55,48,48,53,48,84,244,133,143,162,84,84,49,48,55,48,48,53,49,84,244,133,143,163,84,84,49,48,55,48,48,53,50,84,244,133,143,164,84,84,49,48,55,48,48,53,51,84,244,133,143,165,84,84,49,48,55,48,48,53,52,84,244,133,143,166,84,84,49,48,55,48,48,53,53,84,244,133,143,167,84,84,49,48,55,48,48,53,54,84,244,133,143,168,84,84,49,48,55,48,48,53,55,84,244,133,143,169,84,84,49,48,55,48,48,53,56,84,244,133,143,170,84,84,49,48,55,48,48,53,57,84,244,133,143,171,84,84,49,48,55,48,48,54,48,84,244,133,143,172,84,84,49,48,55,48,48,54,49,84,244,133,143,173,84,84,49,48,55,48,48,54,50,84,244,133,143,174,84,84,49,48,55,48,48,54,51,84,244,133,143,175,84,84,49,48,55,48,48,54,52,84,244,133,143,176,84,84,49,48,55,48,48,54,53,84,244,133,143,177,84,84,49,48,55,48,48,54,54,84,244,133,143,178,84,84,49,48,55,48,48,54,55,84,244,133,143,179,84,84,49,48,55,48,48,54,56,84,244,133,143,180,84,84,49,48,55,48,48,54,57,84,244,133,143,181,84,84,49,48,55,48,48,55,48,84,244,133,143,182,84,84,49,48,55,48,48,55,49,84,244,133,143,183,84,84,49,48,55,48,48,55,50,84,244,133,143,184,84,84,49,48,55,48,48,55,51,84,244,133,143,185,84,84,49,48,55,48,48,55,52,84,244,133,143,186,84,84,49,48,55,48,48,55,53,84,244,133,143,187,84,84,49,48,55,48,48,55,54,84,244,133,143,188,84,84,49,48,55,48,48,55,55,84,244,133,143,189,84,84,49,48,55,48,48,55,56,84,244,133,143,190,84,84,49,48,55,48,48,55,57,84,244,133,143,191,84,84,49,48,55,48,48,56,48,84,244,133,144,128,84,84,49,48,55,48,48,56,49,84,244,133,144,129,84,84,49,48,55,48,48,56,50,84,244,133,144,130,84,84,49,48,55,48,48,56,51,84,244,133,144,131,84,84,49,48,55,48,48,56,52,84,244,133,144,132,84,84,49,48,55,48,48,56,53,84,244,133,144,133,84,84,49,48,55,48,48,56,54,84,244,133,144,134,84,84,49,48,55,48,48,56,55,84,244,133,144,135,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22797 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22797_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22797_s.txt", Encoding.UTF8);

    public Test22797() : base(recordedRequest, recordedResponse, "accounts8d43a0490823d21")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a0490823d21",
                        container: "containers0bd48f2ce8374f57b3f3c61b5595b35b",
                        blob: "Blob5b68e71d22664224a59eefcf876ac9ad",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20074 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20074_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20074_s.txt", Encoding.UTF8);

    public Test20074() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersb3c703c6e551430d9c914c24c3792dd5",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,49,50,54,56,53,84,243,183,143,141,84,84,49,48,49,50,54,56,54,84,243,183,143,142,84,84,49,48,49,50,54,56,55,84,243,183,143,143,84,84,49,48,49,50,54,56,56,84,243,183,143,144,84,84,49,48,49,50,54,56,57,84,243,183,143,145,84,84,49,48,49,50,54,57,48,84,243,183,143,146,84,84,49,48,49,50,54,57,49,84,243,183,143,147,84,84,49,48,49,50,54,57,50,84,243,183,143,148,84,84,49,48,49,50,54,57,51,84,243,183,143,149,84,84,49,48,49,50,54,57,52,84,243,183,143,150,84,84,49,48,49,50,54,57,53,84,243,183,143,151,84,84,49,48,49,50,54,57,54,84,243,183,143,152,84,84,49,48,49,50,54,57,55,84,243,183,143,153,84,84,49,48,49,50,54,57,56,84,243,183,143,154,84,84,49,48,49,50,54,57,57,84,243,183,143,155,84,84,49,48,49,50,55,48,48,84,243,183,143,156,84,84,49,48,49,50,55,48,49,84,243,183,143,157,84,84,49,48,49,50,55,48,50,84,243,183,143,158,84,84,49,48,49,50,55,48,51,84,243,183,143,159,84,84,49,48,49,50,55,48,52,84,243,183,143,160,84,84,49,48,49,50,55,48,53,84,243,183,143,161,84,84,49,48,49,50,55,48,54,84,243,183,143,162,84,84,49,48,49,50,55,48,55,84,243,183,143,163,84,84,49,48,49,50,55,48,56,84,243,183,143,164,84,84,49,48,49,50,55,48,57,84,243,183,143,165,84,84,49,48,49,50,55,49,48,84,243,183,143,166,84,84,49,48,49,50,55,49,49,84,243,183,143,167,84,84,49,48,49,50,55,49,50,84,243,183,143,168,84,84,49,48,49,50,55,49,51,84,243,183,143,169,84,84,49,48,49,50,55,49,52,84,243,183,143,170,84,84,49,48,49,50,55,49,53,84,243,183,143,171,84,84,49,48,49,50,55,49,54,84,243,183,143,172,84,84,49,48,49,50,55,49,55,84,243,183,143,173,84,84,49,48,49,50,55,49,56,84,243,183,143,174,84,84,49,48,49,50,55,49,57,84,243,183,143,175,84,84,49,48,49,50,55,50,48,84,243,183,143,176,84,84,49,48,49,50,55,50,49,84,243,183,143,177,84,84,49,48,49,50,55,50,50,84,243,183,143,178,84,84,49,48,49,50,55,50,51,84,243,183,143,179,84,84,49,48,49,50,55,50,52,84,243,183,143,180,84,84,49,48,49,50,55,50,53,84,243,183,143,181,84,84,49,48,49,50,55,50,54,84,243,183,143,182,84,84,49,48,49,50,55,50,55,84,243,183,143,183,84,84,49,48,49,50,55,50,56,84,243,183,143,184,84,84,49,48,49,50,55,50,57,84,243,183,143,185,84,84,49,48,49,50,55,51,48,84,243,183,143,186,84,84,49,48,49,50,55,51,49,84,243,183,143,187,84,84,49,48,49,50,55,51,50,84,243,183,143,188,84,84,49,48,49,50,55,51,51,84,243,183,143,189,84,84,49,48,49,50,55,51,52,84,243,183,143,190,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20749 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20749_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20749_s.txt", Encoding.UTF8);

    public Test20749() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersc5ae22b09f3f4a3eaff829adc5876203",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,57,52,55,52,57,84,244,139,145,157,84,84,49,48,57,52,55,56,53,84,244,139,146,129,84,84,49,48,57,52,55,57,55,84,244,139,146,141,84,84,49,48,57,52,55,57,57,84,244,139,146,143,84,84,49,48,57,52,56,48,48,84,244,139,146,144,84,84,49,48,57,52,56,49,51,84,244,139,146,157,84,84,49,48,57,52,56,52,57,84,244,139,147,129,84,84,49,48,57,52,56,54,49,84,244,139,147,141,84,84,49,48,57,52,56,54,51,84,244,139,147,143,84,84,49,48,57,52,56,54,52,84,244,139,147,144,84,84,49,48,57,52,56,55,55,84,244,139,147,157,84,84,49,48,57,52,57,49,51,84,244,139,148,129,84,84,49,48,57,52,57,50,53,84,244,139,148,141,84,84,49,48,57,52,57,50,55,84,244,139,148,143,84,84,49,48,57,52,57,50,56,84,244,139,148,144,84,84,49,48,57,52,57,52,49,84,244,139,148,157,84,84,49,48,57,52,57,55,55,84,244,139,149,129,84,84,49,48,57,52,57,56,57,84,244,139,149,141,84,84,49,48,57,52,57,57,49,84,244,139,149,143,84,84,49,48,57,52,57,57,50,84,244,139,149,144,84,84,49,48,57,53,48,48,53,84,244,139,149,157,84,84,49,48,57,53,48,52,49,84,244,139,150,129,84,84,49,48,57,53,48,53,51,84,244,139,150,141,84,84,49,48,57,53,48,53,53,84,244,139,150,143,84,84,49,48,57,53,48,53,54,84,244,139,150,144,84,84,49,48,57,53,48,54,57,84,244,139,150,157,84,84,49,48,57,53,49,48,53,84,244,139,151,129,84,84,49,48,57,53,49,49,55,84,244,139,151,141,84,84,49,48,57,53,49,49,57,84,244,139,151,143,84,84,49,48,57,53,49,50,48,84,244,139,151,144,84,84,49,48,57,53,49,51,51,84,244,139,151,157,84,84,49,48,57,53,49,54,57,84,244,139,152,129,84,84,49,48,57,53,49,56,49,84,244,139,152,141,84,84,49,48,57,53,49,56,51,84,244,139,152,143,84,84,49,48,57,53,49,56,52,84,244,139,152,144,84,84,49,48,57,53,49,57,55,84,244,139,152,157,84,84,49,48,57,53,50,51,51,84,244,139,153,129,84,84,49,48,57,53,50,52,53,84,244,139,153,141,84,84,49,48,57,53,50,52,55,84,244,139,153,143,84,84,49,48,57,53,50,52,56,84,244,139,153,144,84,84,49,48,57,53,50,54,49,84,244,139,153,157,84,84,49,48,57,53,50,57,55,84,244,139,154,129,84,84,49,48,57,53,51,48,57,84,244,139,154,141,84,84,49,48,57,53,51,49,49,84,244,139,154,143,84,84,49,48,57,53,51,49,50,84,244,139,154,144,84,84,49,48,57,53,51,50,53,84,244,139,154,157,84,84,49,48,57,53,51,54,49,84,244,139,155,129,84,84,49,48,57,53,51,55,51,84,244,139,155,141,84,84,49,48,57,53,51,55,53,84,244,139,155,143,84,84,49,48,57,53,51,55,54,84,244,139,155,144,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19947 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19947_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19947_s.txt", Encoding.UTF8);

    public Test19947() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersbf5ecfbea5a24d8a8188936c9be6fa20",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,57,50,50,56,48,84,243,178,144,152,84,84,57,57,50,50,56,49,84,243,178,144,153,84,84,57,57,50,50,56,50,84,243,178,144,154,84,84,57,57,50,50,56,51,84,243,178,144,155,84,84,57,57,50,50,56,52,84,243,178,144,156,84,84,57,57,50,50,56,53,84,243,178,144,157,84,84,57,57,50,50,56,54,84,243,178,144,158,84,84,57,57,50,50,56,55,84,243,178,144,159,84,84,57,57,50,50,56,56,84,243,178,144,160,84,84,57,57,50,50,56,57,84,243,178,144,161,84,84,57,57,50,50,57,48,84,243,178,144,162,84,84,57,57,50,50,57,49,84,243,178,144,163,84,84,57,57,50,50,57,50,84,243,178,144,164,84,84,57,57,50,50,57,51,84,243,178,144,165,84,84,57,57,50,50,57,52,84,243,178,144,166,84,84,57,57,50,50,57,53,84,243,178,144,167,84,84,57,57,50,50,57,54,84,243,178,144,168,84,84,57,57,50,50,57,55,84,243,178,144,169,84,84,57,57,50,50,57,56,84,243,178,144,170,84,84,57,57,50,50,57,57,84,243,178,144,171,84,84,57,57,50,51,48,48,84,243,178,144,172,84,84,57,57,50,51,48,49,84,243,178,144,173,84,84,57,57,50,51,48,50,84,243,178,144,174,84,84,57,57,50,51,48,51,84,243,178,144,175,84,84,57,57,50,51,48,52,84,243,178,144,176,84,84,57,57,50,51,48,53,84,243,178,144,177,84,84,57,57,50,51,48,54,84,243,178,144,178,84,84,57,57,50,51,48,55,84,243,178,144,179,84,84,57,57,50,51,48,56,84,243,178,144,180,84,84,57,57,50,51,48,57,84,243,178,144,181,84,84,57,57,50,51,49,48,84,243,178,144,182,84,84,57,57,50,51,49,49,84,243,178,144,183,84,84,57,57,50,51,49,50,84,243,178,144,184,84,84,57,57,50,51,49,51,84,243,178,144,185,84,84,57,57,50,51,49,52,84,243,178,144,186,84,84,57,57,50,51,49,53,84,243,178,144,187,84,84,57,57,50,51,49,54,84,243,178,144,188,84,84,57,57,50,51,49,55,84,243,178,144,189,84,84,57,57,50,51,49,56,84,243,178,144,190,84,84,57,57,50,51,49,57,84,243,178,144,191,84,84,57,57,50,51,50,49,84,243,178,145,129,84,84,57,57,50,51,51,51,84,243,178,145,141,84,84,57,57,50,51,51,53,84,243,178,145,143,84,84,57,57,50,51,51,54,84,243,178,145,144,84,84,57,57,50,51,52,57,84,243,178,145,157,84,84,57,57,50,51,56,53,84,243,178,146,129,84,84,57,57,50,51,57,55,84,243,178,146,141,84,84,57,57,50,51,57,57,84,243,178,146,143,84,84,57,57,50,52,48,48,84,243,178,146,144,84,84,57,57,50,52,49,51,84,243,178,146,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19818 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19818_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19818_s.txt", Encoding.UTF8);

    public Test19818() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers3d1fce2fe43b489ca49e5d4066014499",
                        blob: Encoding.UTF8.GetString(new byte[]{84,53,56,52,50,51,84,238,144,183,84,84,53,56,52,50,52,84,238,144,184,84,84,53,56,52,50,53,84,238,144,185,84,84,53,56,52,50,54,84,238,144,186,84,84,53,56,52,50,55,84,238,144,187,84,84,53,56,52,50,56,84,238,144,188,84,84,53,56,52,50,57,84,238,144,189,84,84,53,56,52,51,48,84,238,144,190,84,84,53,56,52,51,49,84,238,144,191,84,84,53,56,52,51,51,84,238,145,129,84,84,53,56,52,52,53,84,238,145,141,84,84,53,56,52,52,55,84,238,145,143,84,84,53,56,52,52,56,84,238,145,144,84,84,53,56,52,54,49,84,238,145,157,84,84,53,56,52,57,55,84,238,146,129,84,84,53,56,53,48,57,84,238,146,141,84,84,53,56,53,49,49,84,238,146,143,84,84,53,56,53,49,50,84,238,146,144,84,84,53,56,53,50,53,84,238,146,157,84,84,53,56,53,54,49,84,238,147,129,84,84,53,56,53,55,51,84,238,147,141,84,84,53,56,53,55,53,84,238,147,143,84,84,53,56,53,55,54,84,238,147,144,84,84,53,56,53,56,57,84,238,147,157,84,84,53,56,54,50,53,84,238,148,129,84,84,53,56,54,51,55,84,238,148,141,84,84,53,56,54,51,57,84,238,148,143,84,84,53,56,54,52,48,84,238,148,144,84,84,53,56,54,53,51,84,238,148,157,84,84,53,56,54,56,57,84,238,149,129,84,84,53,56,55,48,49,84,238,149,141,84,84,53,56,55,48,51,84,238,149,143,84,84,53,56,55,48,52,84,238,149,144,84,84,53,56,55,49,55,84,238,149,157,84,84,53,56,55,53,51,84,238,150,129,84,84,53,56,55,54,53,84,238,150,141,84,84,53,56,55,54,55,84,238,150,143,84,84,53,56,55,54,56,84,238,150,144,84,84,53,56,55,56,49,84,238,150,157,84,84,53,56,56,49,55,84,238,151,129,84,84,53,56,56,50,57,84,238,151,141,84,84,53,56,56,51,49,84,238,151,143,84,84,53,56,56,51,50,84,238,151,144,84,84,53,56,56,52,53,84,238,151,157,84,84,53,56,56,56,49,84,238,152,129,84,84,53,56,56,57,51,84,238,152,141,84,84,53,56,56,57,53,84,238,152,143,84,84,53,56,56,57,54,84,238,152,144,84,84,53,56,57,48,57,84,238,152,157,84,84,53,56,57,52,53,84,238,153,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20169 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20169_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20169_s.txt", Encoding.UTF8);

    public Test20169() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers4f3362aed9424bd2bfac6751ee820ab9",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,50,56,48,52,53,84,243,186,191,141,84,84,49,48,50,56,48,52,55,84,243,186,191,143,84,84,49,48,50,56,48,52,56,84,243,186,191,144,84,84,49,48,50,56,48,54,49,84,243,186,191,157,84,84,49,48,50,56,48,57,55,84,243,187,128,129,84,84,49,48,50,56,49,48,57,84,243,187,128,141,84,84,49,48,50,56,49,49,49,84,243,187,128,143,84,84,49,48,50,56,49,49,50,84,243,187,128,144,84,84,49,48,50,56,49,50,53,84,243,187,128,157,84,84,49,48,50,56,49,54,48,84,243,187,129,128,84,84,49,48,50,56,49,54,49,84,243,187,129,129,84,84,49,48,50,56,49,54,50,84,243,187,129,130,84,84,49,48,50,56,49,54,51,84,243,187,129,131,84,84,49,48,50,56,49,54,52,84,243,187,129,132,84,84,49,48,50,56,49,54,53,84,243,187,129,133,84,84,49,48,50,56,49,54,54,84,243,187,129,134,84,84,49,48,50,56,49,54,55,84,243,187,129,135,84,84,49,48,50,56,49,54,56,84,243,187,129,136,84,84,49,48,50,56,49,54,57,84,243,187,129,137,84,84,49,48,50,56,49,55,48,84,243,187,129,138,84,84,49,48,50,56,49,55,49,84,243,187,129,139,84,84,49,48,50,56,49,55,50,84,243,187,129,140,84,84,49,48,50,56,49,55,51,84,243,187,129,141,84,84,49,48,50,56,49,55,52,84,243,187,129,142,84,84,49,48,50,56,49,55,53,84,243,187,129,143,84,84,49,48,50,56,49,55,54,84,243,187,129,144,84,84,49,48,50,56,49,55,55,84,243,187,129,145,84,84,49,48,50,56,49,55,56,84,243,187,129,146,84,84,49,48,50,56,49,55,57,84,243,187,129,147,84,84,49,48,50,56,49,56,48,84,243,187,129,148,84,84,49,48,50,56,49,56,49,84,243,187,129,149,84,84,49,48,50,56,49,56,50,84,243,187,129,150,84,84,49,48,50,56,49,56,51,84,243,187,129,151,84,84,49,48,50,56,49,56,52,84,243,187,129,152,84,84,49,48,50,56,49,56,53,84,243,187,129,153,84,84,49,48,50,56,49,56,54,84,243,187,129,154,84,84,49,48,50,56,49,56,55,84,243,187,129,155,84,84,49,48,50,56,49,56,56,84,243,187,129,156,84,84,49,48,50,56,49,56,57,84,243,187,129,157,84,84,49,48,50,56,49,57,48,84,243,187,129,158,84,84,49,48,50,56,49,57,49,84,243,187,129,159,84,84,49,48,50,56,49,57,50,84,243,187,129,160,84,84,49,48,50,56,49,57,51,84,243,187,129,161,84,84,49,48,50,56,49,57,52,84,243,187,129,162,84,84,49,48,50,56,49,57,53,84,243,187,129,163,84,84,49,48,50,56,49,57,54,84,243,187,129,164,84,84,49,48,50,56,49,57,55,84,243,187,129,165,84,84,49,48,50,56,49,57,56,84,243,187,129,166,84,84,49,48,50,56,49,57,57,84,243,187,129,167,84,84,49,48,50,56,50,48,48,84,243,187,129,168,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20294 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20294_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20294_s.txt", Encoding.UTF8);

    public Test20294() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers712afb35b54344eb8fa90647f752cd92",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,52,54,57,50,53,84,243,191,166,141,84,84,49,48,52,54,57,50,55,84,243,191,166,143,84,84,49,48,52,54,57,50,56,84,243,191,166,144,84,84,49,48,52,54,57,52,49,84,243,191,166,157,84,84,49,48,52,54,57,55,55,84,243,191,167,129,84,84,49,48,52,54,57,56,57,84,243,191,167,141,84,84,49,48,52,54,57,57,49,84,243,191,167,143,84,84,49,48,52,54,57,57,50,84,243,191,167,144,84,84,49,48,52,55,48,48,53,84,243,191,167,157,84,84,49,48,52,55,48,52,49,84,243,191,168,129,84,84,49,48,52,55,48,53,51,84,243,191,168,141,84,84,49,48,52,55,48,53,53,84,243,191,168,143,84,84,49,48,52,55,48,53,54,84,243,191,168,144,84,84,49,48,52,55,48,54,57,84,243,191,168,157,84,84,49,48,52,55,49,48,53,84,243,191,169,129,84,84,49,48,52,55,49,49,55,84,243,191,169,141,84,84,49,48,52,55,49,49,57,84,243,191,169,143,84,84,49,48,52,55,49,50,48,84,243,191,169,144,84,84,49,48,52,55,49,51,51,84,243,191,169,157,84,84,49,48,52,55,49,54,57,84,243,191,170,129,84,84,49,48,52,55,49,56,49,84,243,191,170,141,84,84,49,48,52,55,49,56,51,84,243,191,170,143,84,84,49,48,52,55,49,56,52,84,243,191,170,144,84,84,49,48,52,55,49,57,55,84,243,191,170,157,84,84,49,48,52,55,50,51,51,84,243,191,171,129,84,84,49,48,52,55,50,52,53,84,243,191,171,141,84,84,49,48,52,55,50,52,55,84,243,191,171,143,84,84,49,48,52,55,50,52,56,84,243,191,171,144,84,84,49,48,52,55,50,54,49,84,243,191,171,157,84,84,49,48,52,55,50,57,55,84,243,191,172,129,84,84,49,48,52,55,51,48,57,84,243,191,172,141,84,84,49,48,52,55,51,49,49,84,243,191,172,143,84,84,49,48,52,55,51,49,50,84,243,191,172,144,84,84,49,48,52,55,51,50,53,84,243,191,172,157,84,84,49,48,52,55,51,54,49,84,243,191,173,129,84,84,49,48,52,55,51,55,51,84,243,191,173,141,84,84,49,48,52,55,51,55,53,84,243,191,173,143,84,84,49,48,52,55,51,55,54,84,243,191,173,144,84,84,49,48,52,55,51,56,57,84,243,191,173,157,84,84,49,48,52,55,52,50,53,84,243,191,174,129,84,84,49,48,52,55,52,51,55,84,243,191,174,141,84,84,49,48,52,55,52,51,57,84,243,191,174,143,84,84,49,48,52,55,52,52,48,84,243,191,174,144,84,84,49,48,52,55,52,53,51,84,243,191,174,157,84,84,49,48,52,55,52,56,57,84,243,191,175,129,84,84,49,48,52,55,53,48,49,84,243,191,175,141,84,84,49,48,52,55,53,48,51,84,243,191,175,143,84,84,49,48,52,55,53,48,52,84,243,191,175,144,84,84,49,48,52,55,53,49,55,84,243,191,175,157,84,84,49,48,52,55,53,53,51,84,243,191,176,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22771 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22771_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22771_s.txt", Encoding.UTF8);

    public Test22771() : base(recordedRequest, recordedResponse, "accounts8d43a0490823d21")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a0490823d21",
                        container: "containers0bd48f2ce8374f57b3f3c61b5595b35b",
                        blob: "Blob801a6efb38ab457dba04cc01cd697eeb",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22798 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22798_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22798_s.txt", Encoding.UTF8);

    public Test22798() : base(recordedRequest, recordedResponse, "accounts8d43a0490823d21")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a0490823d21",
                        container: "containers0bd48f2ce8374f57b3f3c61b5595b35b",
                        blob: "Blob8e83ce0132944b908c5d8b11a3511a32",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20967 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20967_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20967_s.txt", Encoding.UTF8);

    public Test20967() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersdf87e0f5374149afa792ac52b484870e",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,54,55,55,55,84,244,142,141,153,84,84,49,49,48,54,55,55,56,84,244,142,141,154,84,84,49,49,48,54,55,55,57,84,244,142,141,155,84,84,49,49,48,54,55,56,48,84,244,142,141,156,84,84,49,49,48,54,55,56,49,84,244,142,141,157,84,84,49,49,48,54,55,56,50,84,244,142,141,158,84,84,49,49,48,54,55,56,51,84,244,142,141,159,84,84,49,49,48,54,55,56,52,84,244,142,141,160,84,84,49,49,48,54,55,56,53,84,244,142,141,161,84,84,49,49,48,54,55,56,54,84,244,142,141,162,84,84,49,49,48,54,55,56,55,84,244,142,141,163,84,84,49,49,48,54,55,56,56,84,244,142,141,164,84,84,49,49,48,54,55,56,57,84,244,142,141,165,84,84,49,49,48,54,55,57,48,84,244,142,141,166,84,84,49,49,48,54,55,57,49,84,244,142,141,167,84,84,49,49,48,54,55,57,50,84,244,142,141,168,84,84,49,49,48,54,55,57,51,84,244,142,141,169,84,84,49,49,48,54,55,57,52,84,244,142,141,170,84,84,49,49,48,54,55,57,53,84,244,142,141,171,84,84,49,49,48,54,55,57,54,84,244,142,141,172,84,84,49,49,48,54,55,57,55,84,244,142,141,173,84,84,49,49,48,54,55,57,56,84,244,142,141,174,84,84,49,49,48,54,55,57,57,84,244,142,141,175,84,84,49,49,48,54,56,48,48,84,244,142,141,176,84,84,49,49,48,54,56,48,49,84,244,142,141,177,84,84,49,49,48,54,56,48,50,84,244,142,141,178,84,84,49,49,48,54,56,48,51,84,244,142,141,179,84,84,49,49,48,54,56,48,52,84,244,142,141,180,84,84,49,49,48,54,56,48,53,84,244,142,141,181,84,84,49,49,48,54,56,48,54,84,244,142,141,182,84,84,49,49,48,54,56,48,55,84,244,142,141,183,84,84,49,49,48,54,56,48,56,84,244,142,141,184,84,84,49,49,48,54,56,48,57,84,244,142,141,185,84,84,49,49,48,54,56,49,48,84,244,142,141,186,84,84,49,49,48,54,56,49,49,84,244,142,141,187,84,84,49,49,48,54,56,49,50,84,244,142,141,188,84,84,49,49,48,54,56,49,51,84,244,142,141,189,84,84,49,49,48,54,56,49,52,84,244,142,141,190,84,84,49,49,48,54,56,49,53,84,244,142,141,191,84,84,49,49,48,54,56,49,55,84,244,142,142,129,84,84,49,49,48,54,56,50,57,84,244,142,142,141,84,84,49,49,48,54,56,51,49,84,244,142,142,143,84,84,49,49,48,54,56,51,50,84,244,142,142,144,84,84,49,49,48,54,56,52,53,84,244,142,142,157,84,84,49,49,48,54,56,56,48,84,244,142,143,128,84,84,49,49,48,54,56,56,49,84,244,142,143,129,84,84,49,49,48,54,56,56,50,84,244,142,143,130,84,84,49,49,48,54,56,56,51,84,244,142,143,131,84,84,49,49,48,54,56,56,52,84,244,142,143,132,84,84,49,49,48,54,56,56,53,84,244,142,143,133,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20237 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20237_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20237_s.txt", Encoding.UTF8);

    public Test20237() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersca1800aaa567470781b999118df6ba97",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,51,55,57,53,51,84,243,189,154,129,84,84,49,48,51,55,57,54,53,84,243,189,154,141,84,84,49,48,51,55,57,54,55,84,243,189,154,143,84,84,49,48,51,55,57,54,56,84,243,189,154,144,84,84,49,48,51,55,57,56,49,84,243,189,154,157,84,84,49,48,51,56,48,49,55,84,243,189,155,129,84,84,49,48,51,56,48,50,57,84,243,189,155,141,84,84,49,48,51,56,48,51,49,84,243,189,155,143,84,84,49,48,51,56,48,51,50,84,243,189,155,144,84,84,49,48,51,56,48,52,53,84,243,189,155,157,84,84,49,48,51,56,48,56,49,84,243,189,156,129,84,84,49,48,51,56,48,57,51,84,243,189,156,141,84,84,49,48,51,56,48,57,53,84,243,189,156,143,84,84,49,48,51,56,48,57,54,84,243,189,156,144,84,84,49,48,51,56,49,48,57,84,243,189,156,157,84,84,49,48,51,56,49,52,52,84,243,189,157,128,84,84,49,48,51,56,49,52,53,84,243,189,157,129,84,84,49,48,51,56,49,52,54,84,243,189,157,130,84,84,49,48,51,56,49,52,55,84,243,189,157,131,84,84,49,48,51,56,49,52,56,84,243,189,157,132,84,84,49,48,51,56,49,52,57,84,243,189,157,133,84,84,49,48,51,56,49,53,48,84,243,189,157,134,84,84,49,48,51,56,49,53,49,84,243,189,157,135,84,84,49,48,51,56,49,53,50,84,243,189,157,136,84,84,49,48,51,56,49,53,51,84,243,189,157,137,84,84,49,48,51,56,49,53,52,84,243,189,157,138,84,84,49,48,51,56,49,53,53,84,243,189,157,139,84,84,49,48,51,56,49,53,54,84,243,189,157,140,84,84,49,48,51,56,49,53,55,84,243,189,157,141,84,84,49,48,51,56,49,53,56,84,243,189,157,142,84,84,49,48,51,56,49,53,57,84,243,189,157,143,84,84,49,48,51,56,49,54,48,84,243,189,157,144,84,84,49,48,51,56,49,54,49,84,243,189,157,145,84,84,49,48,51,56,49,54,50,84,243,189,157,146,84,84,49,48,51,56,49,54,51,84,243,189,157,147,84,84,49,48,51,56,49,54,52,84,243,189,157,148,84,84,49,48,51,56,49,54,53,84,243,189,157,149,84,84,49,48,51,56,49,54,54,84,243,189,157,150,84,84,49,48,51,56,49,54,55,84,243,189,157,151,84,84,49,48,51,56,49,54,56,84,243,189,157,152,84,84,49,48,51,56,49,54,57,84,243,189,157,153,84,84,49,48,51,56,49,55,48,84,243,189,157,154,84,84,49,48,51,56,49,55,49,84,243,189,157,155,84,84,49,48,51,56,49,55,50,84,243,189,157,156,84,84,49,48,51,56,49,55,51,84,243,189,157,157,84,84,49,48,51,56,49,55,52,84,243,189,157,158,84,84,49,48,51,56,49,55,53,84,243,189,157,159,84,84,49,48,51,56,49,55,54,84,243,189,157,160,84,84,49,48,51,56,49,55,55,84,243,189,157,161,84,84,49,48,51,56,49,55,56,84,243,189,157,162,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22772 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22772_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22772_s.txt", Encoding.UTF8);

    public Test22772() : base(recordedRequest, recordedResponse, "accounts8d43a0490823d21")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a0490823d21",
                        container: "containers0bd48f2ce8374f57b3f3c61b5595b35b",
                        blob: "Blob46ae59d70d504dbcb8d356258e04193d",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22799 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22799_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22799_s.txt", Encoding.UTF8);

    public Test22799() : base(recordedRequest, recordedResponse, "accounts8d43a0490823d21")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a0490823d21",
                        container: "containers0bd48f2ce8374f57b3f3c61b5595b35b",
                        blob: "Blob22a205160acc419e8b83457b8dc4aa36",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20013 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20013_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20013_s.txt", Encoding.UTF8);

    public Test20013() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers612d6939acd44cdbbba30cffbd18a713",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,48,51,51,52,49,84,243,180,189,141,84,84,49,48,48,51,51,52,51,84,243,180,189,143,84,84,49,48,48,51,51,52,52,84,243,180,189,144,84,84,49,48,48,51,51,53,55,84,243,180,189,157,84,84,49,48,48,51,51,57,51,84,243,180,190,129,84,84,49,48,48,51,52,48,53,84,243,180,190,141,84,84,49,48,48,51,52,48,55,84,243,180,190,143,84,84,49,48,48,51,52,48,56,84,243,180,190,144,84,84,49,48,48,51,52,50,49,84,243,180,190,157,84,84,49,48,48,51,52,53,55,84,243,180,191,129,84,84,49,48,48,51,52,54,57,84,243,180,191,141,84,84,49,48,48,51,52,55,49,84,243,180,191,143,84,84,49,48,48,51,52,55,50,84,243,180,191,144,84,84,49,48,48,51,52,56,53,84,243,180,191,157,84,84,49,48,48,51,53,50,49,84,243,181,128,129,84,84,49,48,48,51,53,51,51,84,243,181,128,141,84,84,49,48,48,51,53,51,53,84,243,181,128,143,84,84,49,48,48,51,53,51,54,84,243,181,128,144,84,84,49,48,48,51,53,52,57,84,243,181,128,157,84,84,49,48,48,51,53,56,52,84,243,181,129,128,84,84,49,48,48,51,53,56,53,84,243,181,129,129,84,84,49,48,48,51,53,56,54,84,243,181,129,130,84,84,49,48,48,51,53,56,55,84,243,181,129,131,84,84,49,48,48,51,53,56,56,84,243,181,129,132,84,84,49,48,48,51,53,56,57,84,243,181,129,133,84,84,49,48,48,51,53,57,48,84,243,181,129,134,84,84,49,48,48,51,53,57,49,84,243,181,129,135,84,84,49,48,48,51,53,57,50,84,243,181,129,136,84,84,49,48,48,51,53,57,51,84,243,181,129,137,84,84,49,48,48,51,53,57,52,84,243,181,129,138,84,84,49,48,48,51,53,57,53,84,243,181,129,139,84,84,49,48,48,51,53,57,54,84,243,181,129,140,84,84,49,48,48,51,53,57,55,84,243,181,129,141,84,84,49,48,48,51,53,57,56,84,243,181,129,142,84,84,49,48,48,51,53,57,57,84,243,181,129,143,84,84,49,48,48,51,54,48,48,84,243,181,129,144,84,84,49,48,48,51,54,48,49,84,243,181,129,145,84,84,49,48,48,51,54,48,50,84,243,181,129,146,84,84,49,48,48,51,54,48,51,84,243,181,129,147,84,84,49,48,48,51,54,48,52,84,243,181,129,148,84,84,49,48,48,51,54,48,53,84,243,181,129,149,84,84,49,48,48,51,54,48,54,84,243,181,129,150,84,84,49,48,48,51,54,48,55,84,243,181,129,151,84,84,49,48,48,51,54,48,56,84,243,181,129,152,84,84,49,48,48,51,54,48,57,84,243,181,129,153,84,84,49,48,48,51,54,49,48,84,243,181,129,154,84,84,49,48,48,51,54,49,49,84,243,181,129,155,84,84,49,48,48,51,54,49,50,84,243,181,129,156,84,84,49,48,48,51,54,49,51,84,243,181,129,157,84,84,49,48,48,51,54,49,52,84,243,181,129,158,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20840 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20840_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20840_s.txt", Encoding.UTF8);

    public Test20840() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersf4b0dcea8f7b4ccf92e1f36b952ddf93",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,51,48,54,57,84,244,141,147,157,84,84,49,49,48,51,48,55,48,84,244,141,147,158,84,84,49,49,48,51,48,55,49,84,244,141,147,159,84,84,49,49,48,51,48,55,50,84,244,141,147,160,84,84,49,49,48,51,48,55,51,84,244,141,147,161,84,84,49,49,48,51,48,55,52,84,244,141,147,162,84,84,49,49,48,51,48,55,53,84,244,141,147,163,84,84,49,49,48,51,48,55,54,84,244,141,147,164,84,84,49,49,48,51,48,55,55,84,244,141,147,165,84,84,49,49,48,51,48,55,56,84,244,141,147,166,84,84,49,49,48,51,48,55,57,84,244,141,147,167,84,84,49,49,48,51,48,56,48,84,244,141,147,168,84,84,49,49,48,51,48,56,49,84,244,141,147,169,84,84,49,49,48,51,48,56,50,84,244,141,147,170,84,84,49,49,48,51,48,56,51,84,244,141,147,171,84,84,49,49,48,51,48,56,52,84,244,141,147,172,84,84,49,49,48,51,48,56,53,84,244,141,147,173,84,84,49,49,48,51,48,56,54,84,244,141,147,174,84,84,49,49,48,51,48,56,55,84,244,141,147,175,84,84,49,49,48,51,48,56,56,84,244,141,147,176,84,84,49,49,48,51,48,56,57,84,244,141,147,177,84,84,49,49,48,51,48,57,48,84,244,141,147,178,84,84,49,49,48,51,48,57,49,84,244,141,147,179,84,84,49,49,48,51,48,57,50,84,244,141,147,180,84,84,49,49,48,51,48,57,51,84,244,141,147,181,84,84,49,49,48,51,48,57,52,84,244,141,147,182,84,84,49,49,48,51,48,57,53,84,244,141,147,183,84,84,49,49,48,51,48,57,54,84,244,141,147,184,84,84,49,49,48,51,48,57,55,84,244,141,147,185,84,84,49,49,48,51,48,57,56,84,244,141,147,186,84,84,49,49,48,51,48,57,57,84,244,141,147,187,84,84,49,49,48,51,49,48,48,84,244,141,147,188,84,84,49,49,48,51,49,48,49,84,244,141,147,189,84,84,49,49,48,51,49,48,50,84,244,141,147,190,84,84,49,49,48,51,49,48,51,84,244,141,147,191,84,84,49,49,48,51,49,48,52,84,244,141,148,128,84,84,49,49,48,51,49,48,53,84,244,141,148,129,84,84,49,49,48,51,49,48,54,84,244,141,148,130,84,84,49,49,48,51,49,48,55,84,244,141,148,131,84,84,49,49,48,51,49,48,56,84,244,141,148,132,84,84,49,49,48,51,49,48,57,84,244,141,148,133,84,84,49,49,48,51,49,49,48,84,244,141,148,134,84,84,49,49,48,51,49,49,49,84,244,141,148,135,84,84,49,49,48,51,49,49,50,84,244,141,148,136,84,84,49,49,48,51,49,49,51,84,244,141,148,137,84,84,49,49,48,51,49,49,52,84,244,141,148,138,84,84,49,49,48,51,49,49,53,84,244,141,148,139,84,84,49,49,48,51,49,49,54,84,244,141,148,140,84,84,49,49,48,51,49,49,55,84,244,141,148,141,84,84,49,49,48,51,49,49,56,84,244,141,148,142,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20489 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20489_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20489_s.txt", Encoding.UTF8);

    public Test20489() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers3bfa703d74a140e499ecce701b962b8c",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,54,53,50,56,84,244,129,188,144,84,84,49,48,53,54,53,50,57,84,244,129,188,145,84,84,49,48,53,54,53,51,48,84,244,129,188,146,84,84,49,48,53,54,53,51,49,84,244,129,188,147,84,84,49,48,53,54,53,51,50,84,244,129,188,148,84,84,49,48,53,54,53,51,51,84,244,129,188,149,84,84,49,48,53,54,53,51,52,84,244,129,188,150,84,84,49,48,53,54,53,51,53,84,244,129,188,151,84,84,49,48,53,54,53,51,54,84,244,129,188,152,84,84,49,48,53,54,53,51,55,84,244,129,188,153,84,84,49,48,53,54,53,51,56,84,244,129,188,154,84,84,49,48,53,54,53,51,57,84,244,129,188,155,84,84,49,48,53,54,53,52,48,84,244,129,188,156,84,84,49,48,53,54,53,52,49,84,244,129,188,157,84,84,49,48,53,54,53,52,50,84,244,129,188,158,84,84,49,48,53,54,53,52,51,84,244,129,188,159,84,84,49,48,53,54,53,52,52,84,244,129,188,160,84,84,49,48,53,54,53,52,53,84,244,129,188,161,84,84,49,48,53,54,53,52,54,84,244,129,188,162,84,84,49,48,53,54,53,52,55,84,244,129,188,163,84,84,49,48,53,54,53,52,56,84,244,129,188,164,84,84,49,48,53,54,53,52,57,84,244,129,188,165,84,84,49,48,53,54,53,53,48,84,244,129,188,166,84,84,49,48,53,54,53,53,49,84,244,129,188,167,84,84,49,48,53,54,53,53,50,84,244,129,188,168,84,84,49,48,53,54,53,53,51,84,244,129,188,169,84,84,49,48,53,54,53,53,52,84,244,129,188,170,84,84,49,48,53,54,53,53,53,84,244,129,188,171,84,84,49,48,53,54,53,53,54,84,244,129,188,172,84,84,49,48,53,54,53,53,55,84,244,129,188,173,84,84,49,48,53,54,53,53,56,84,244,129,188,174,84,84,49,48,53,54,53,53,57,84,244,129,188,175,84,84,49,48,53,54,53,54,48,84,244,129,188,176,84,84,49,48,53,54,53,54,49,84,244,129,188,177,84,84,49,48,53,54,53,54,50,84,244,129,188,178,84,84,49,48,53,54,53,54,51,84,244,129,188,179,84,84,49,48,53,54,53,54,52,84,244,129,188,180,84,84,49,48,53,54,53,54,53,84,244,129,188,181,84,84,49,48,53,54,53,54,54,84,244,129,188,182,84,84,49,48,53,54,53,54,55,84,244,129,188,183,84,84,49,48,53,54,53,54,56,84,244,129,188,184,84,84,49,48,53,54,53,54,57,84,244,129,188,185,84,84,49,48,53,54,53,55,48,84,244,129,188,186,84,84,49,48,53,54,53,55,49,84,244,129,188,187,84,84,49,48,53,54,53,55,50,84,244,129,188,188,84,84,49,48,53,54,53,55,51,84,244,129,188,189,84,84,49,48,53,54,53,55,52,84,244,129,188,190,84,84,49,48,53,54,53,55,53,84,244,129,188,191,84,84,49,48,53,54,53,55,54,84,244,129,189,128,84,84,49,48,53,54,53,55,55,84,244,129,189,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20112 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20112_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20112_s.txt", Encoding.UTF8);

    public Test20112() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers02552a2396c44255a61dd19b9714b3b6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,49,56,51,49,55,84,243,184,167,141,84,84,49,48,49,56,51,49,57,84,243,184,167,143,84,84,49,48,49,56,51,50,48,84,243,184,167,144,84,84,49,48,49,56,51,51,51,84,243,184,167,157,84,84,49,48,49,56,51,54,57,84,243,184,168,129,84,84,49,48,49,56,51,56,49,84,243,184,168,141,84,84,49,48,49,56,51,56,51,84,243,184,168,143,84,84,49,48,49,56,51,56,52,84,243,184,168,144,84,84,49,48,49,56,51,57,55,84,243,184,168,157,84,84,49,48,49,56,52,51,51,84,243,184,169,129,84,84,49,48,49,56,52,52,53,84,243,184,169,141,84,84,49,48,49,56,52,52,55,84,243,184,169,143,84,84,49,48,49,56,52,52,56,84,243,184,169,144,84,84,49,48,49,56,52,54,49,84,243,184,169,157,84,84,49,48,49,56,52,57,55,84,243,184,170,129,84,84,49,48,49,56,53,48,57,84,243,184,170,141,84,84,49,48,49,56,53,49,49,84,243,184,170,143,84,84,49,48,49,56,53,49,50,84,243,184,170,144,84,84,49,48,49,56,53,50,53,84,243,184,170,157,84,84,49,48,49,56,53,54,49,84,243,184,171,129,84,84,49,48,49,56,53,55,51,84,243,184,171,141,84,84,49,48,49,56,53,55,53,84,243,184,171,143,84,84,49,48,49,56,53,55,54,84,243,184,171,144,84,84,49,48,49,56,53,56,57,84,243,184,171,157,84,84,49,48,49,56,54,50,53,84,243,184,172,129,84,84,49,48,49,56,54,51,55,84,243,184,172,141,84,84,49,48,49,56,54,51,57,84,243,184,172,143,84,84,49,48,49,56,54,52,48,84,243,184,172,144,84,84,49,48,49,56,54,53,51,84,243,184,172,157,84,84,49,48,49,56,54,56,57,84,243,184,173,129,84,84,49,48,49,56,55,48,49,84,243,184,173,141,84,84,49,48,49,56,55,48,51,84,243,184,173,143,84,84,49,48,49,56,55,48,52,84,243,184,173,144,84,84,49,48,49,56,55,49,55,84,243,184,173,157,84,84,49,48,49,56,55,53,51,84,243,184,174,129,84,84,49,48,49,56,55,54,53,84,243,184,174,141,84,84,49,48,49,56,55,54,55,84,243,184,174,143,84,84,49,48,49,56,55,54,56,84,243,184,174,144,84,84,49,48,49,56,55,56,49,84,243,184,174,157,84,84,49,48,49,56,56,49,55,84,243,184,175,129,84,84,49,48,49,56,56,50,57,84,243,184,175,141,84,84,49,48,49,56,56,51,49,84,243,184,175,143,84,84,49,48,49,56,56,51,50,84,243,184,175,144,84,84,49,48,49,56,56,52,53,84,243,184,175,157,84,84,49,48,49,56,56,56,49,84,243,184,176,129,84,84,49,48,49,56,56,57,51,84,243,184,176,141,84,84,49,48,49,56,56,57,53,84,243,184,176,143,84,84,49,48,49,56,56,57,54,84,243,184,176,144,84,84,49,48,49,56,57,48,57,84,243,184,176,157,84,84,49,48,49,56,57,52,53,84,243,184,177,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20332 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20332_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20332_s.txt", Encoding.UTF8);

    public Test20332() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers412024b733e349978217e6093afed677",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,50,56,50,56,84,244,129,130,156,84,84,49,48,53,50,56,50,57,84,244,129,130,157,84,84,49,48,53,50,56,51,48,84,244,129,130,158,84,84,49,48,53,50,56,51,49,84,244,129,130,159,84,84,49,48,53,50,56,51,50,84,244,129,130,160,84,84,49,48,53,50,56,51,51,84,244,129,130,161,84,84,49,48,53,50,56,51,52,84,244,129,130,162,84,84,49,48,53,50,56,51,53,84,244,129,130,163,84,84,49,48,53,50,56,51,54,84,244,129,130,164,84,84,49,48,53,50,56,51,55,84,244,129,130,165,84,84,49,48,53,50,56,51,56,84,244,129,130,166,84,84,49,48,53,50,56,51,57,84,244,129,130,167,84,84,49,48,53,50,56,52,48,84,244,129,130,168,84,84,49,48,53,50,56,52,49,84,244,129,130,169,84,84,49,48,53,50,56,52,50,84,244,129,130,170,84,84,49,48,53,50,56,52,51,84,244,129,130,171,84,84,49,48,53,50,56,52,52,84,244,129,130,172,84,84,49,48,53,50,56,52,53,84,244,129,130,173,84,84,49,48,53,50,56,52,54,84,244,129,130,174,84,84,49,48,53,50,56,52,55,84,244,129,130,175,84,84,49,48,53,50,56,52,56,84,244,129,130,176,84,84,49,48,53,50,56,52,57,84,244,129,130,177,84,84,49,48,53,50,56,53,48,84,244,129,130,178,84,84,49,48,53,50,56,53,49,84,244,129,130,179,84,84,49,48,53,50,56,53,50,84,244,129,130,180,84,84,49,48,53,50,56,53,51,84,244,129,130,181,84,84,49,48,53,50,56,53,52,84,244,129,130,182,84,84,49,48,53,50,56,53,53,84,244,129,130,183,84,84,49,48,53,50,56,53,54,84,244,129,130,184,84,84,49,48,53,50,56,53,55,84,244,129,130,185,84,84,49,48,53,50,56,53,56,84,244,129,130,186,84,84,49,48,53,50,56,53,57,84,244,129,130,187,84,84,49,48,53,50,56,54,48,84,244,129,130,188,84,84,49,48,53,50,56,54,49,84,244,129,130,189,84,84,49,48,53,50,56,54,50,84,244,129,130,190,84,84,49,48,53,50,56,54,51,84,244,129,130,191,84,84,49,48,53,50,56,54,52,84,244,129,131,128,84,84,49,48,53,50,56,54,53,84,244,129,131,129,84,84,49,48,53,50,56,54,54,84,244,129,131,130,84,84,49,48,53,50,56,54,55,84,244,129,131,131,84,84,49,48,53,50,56,54,56,84,244,129,131,132,84,84,49,48,53,50,56,54,57,84,244,129,131,133,84,84,49,48,53,50,56,55,48,84,244,129,131,134,84,84,49,48,53,50,56,55,49,84,244,129,131,135,84,84,49,48,53,50,56,55,50,84,244,129,131,136,84,84,49,48,53,50,56,55,51,84,244,129,131,137,84,84,49,48,53,50,56,55,52,84,244,129,131,138,84,84,49,48,53,50,56,55,53,84,244,129,131,139,84,84,49,48,53,50,56,55,54,84,244,129,131,140,84,84,49,48,53,50,56,55,55,84,244,129,131,141,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20778 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20778_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20778_s.txt", Encoding.UTF8);

    public Test20778() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers8240a720eb234783afd6a68d24f64161",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,57,57,50,57,51,84,244,140,152,157,84,84,49,48,57,57,51,50,57,84,244,140,153,129,84,84,49,48,57,57,51,52,49,84,244,140,153,141,84,84,49,48,57,57,51,52,51,84,244,140,153,143,84,84,49,48,57,57,51,52,52,84,244,140,153,144,84,84,49,48,57,57,51,53,55,84,244,140,153,157,84,84,49,48,57,57,51,57,51,84,244,140,154,129,84,84,49,48,57,57,52,48,53,84,244,140,154,141,84,84,49,48,57,57,52,48,55,84,244,140,154,143,84,84,49,48,57,57,52,48,56,84,244,140,154,144,84,84,49,48,57,57,52,50,49,84,244,140,154,157,84,84,49,48,57,57,52,53,55,84,244,140,155,129,84,84,49,48,57,57,52,54,57,84,244,140,155,141,84,84,49,48,57,57,52,55,49,84,244,140,155,143,84,84,49,48,57,57,52,55,50,84,244,140,155,144,84,84,49,48,57,57,52,56,53,84,244,140,155,157,84,84,49,48,57,57,53,50,49,84,244,140,156,129,84,84,49,48,57,57,53,51,51,84,244,140,156,141,84,84,49,48,57,57,53,51,53,84,244,140,156,143,84,84,49,48,57,57,53,51,54,84,244,140,156,144,84,84,49,48,57,57,53,52,57,84,244,140,156,157,84,84,49,48,57,57,53,56,52,84,244,140,157,128,84,84,49,48,57,57,53,56,53,84,244,140,157,129,84,84,49,48,57,57,53,56,54,84,244,140,157,130,84,84,49,48,57,57,53,56,55,84,244,140,157,131,84,84,49,48,57,57,53,56,56,84,244,140,157,132,84,84,49,48,57,57,53,56,57,84,244,140,157,133,84,84,49,48,57,57,53,57,48,84,244,140,157,134,84,84,49,48,57,57,53,57,49,84,244,140,157,135,84,84,49,48,57,57,53,57,50,84,244,140,157,136,84,84,49,48,57,57,53,57,51,84,244,140,157,137,84,84,49,48,57,57,53,57,52,84,244,140,157,138,84,84,49,48,57,57,53,57,53,84,244,140,157,139,84,84,49,48,57,57,53,57,54,84,244,140,157,140,84,84,49,48,57,57,53,57,55,84,244,140,157,141,84,84,49,48,57,57,53,57,56,84,244,140,157,142,84,84,49,48,57,57,53,57,57,84,244,140,157,143,84,84,49,48,57,57,54,48,48,84,244,140,157,144,84,84,49,48,57,57,54,48,49,84,244,140,157,145,84,84,49,48,57,57,54,48,50,84,244,140,157,146,84,84,49,48,57,57,54,48,51,84,244,140,157,147,84,84,49,48,57,57,54,48,52,84,244,140,157,148,84,84,49,48,57,57,54,48,53,84,244,140,157,149,84,84,49,48,57,57,54,48,54,84,244,140,157,150,84,84,49,48,57,57,54,48,55,84,244,140,157,151,84,84,49,48,57,57,54,48,56,84,244,140,157,152,84,84,49,48,57,57,54,48,57,84,244,140,157,153,84,84,49,48,57,57,54,49,48,84,244,140,157,154,84,84,49,48,57,57,54,49,49,84,244,140,157,155,84,84,49,48,57,57,54,49,50,84,244,140,157,156,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21036 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21036_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21036_s.txt", Encoding.UTF8);

    public Test21036() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers98fd3eef9d4b4edcb3855acb5ae8645d",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,49,49,53,48,84,244,143,145,174,84,84,49,49,49,49,49,53,49,84,244,143,145,175,84,84,49,49,49,49,49,53,50,84,244,143,145,176,84,84,49,49,49,49,49,53,51,84,244,143,145,177,84,84,49,49,49,49,49,53,52,84,244,143,145,178,84,84,49,49,49,49,49,53,53,84,244,143,145,179,84,84,49,49,49,49,49,53,54,84,244,143,145,180,84,84,49,49,49,49,49,53,55,84,244,143,145,181,84,84,49,49,49,49,49,53,56,84,244,143,145,182,84,84,49,49,49,49,49,53,57,84,244,143,145,183,84,84,49,49,49,49,49,54,48,84,244,143,145,184,84,84,49,49,49,49,49,54,49,84,244,143,145,185,84,84,49,49,49,49,49,54,50,84,244,143,145,186,84,84,49,49,49,49,49,54,51,84,244,143,145,187,84,84,49,49,49,49,49,54,52,84,244,143,145,188,84,84,49,49,49,49,49,54,53,84,244,143,145,189,84,84,49,49,49,49,49,54,54,84,244,143,145,190,84,84,49,49,49,49,49,54,55,84,244,143,145,191,84,84,49,49,49,49,49,54,56,84,244,143,146,128,84,84,49,49,49,49,49,54,57,84,244,143,146,129,84,84,49,49,49,49,49,55,48,84,244,143,146,130,84,84,49,49,49,49,49,55,49,84,244,143,146,131,84,84,49,49,49,49,49,55,50,84,244,143,146,132,84,84,49,49,49,49,49,55,51,84,244,143,146,133,84,84,49,49,49,49,49,55,52,84,244,143,146,134,84,84,49,49,49,49,49,55,53,84,244,143,146,135,84,84,49,49,49,49,49,55,54,84,244,143,146,136,84,84,49,49,49,49,49,55,55,84,244,143,146,137,84,84,49,49,49,49,49,55,56,84,244,143,146,138,84,84,49,49,49,49,49,55,57,84,244,143,146,139,84,84,49,49,49,49,49,56,48,84,244,143,146,140,84,84,49,49,49,49,49,56,49,84,244,143,146,141,84,84,49,49,49,49,49,56,50,84,244,143,146,142,84,84,49,49,49,49,49,56,51,84,244,143,146,143,84,84,49,49,49,49,49,56,52,84,244,143,146,144,84,84,49,49,49,49,49,56,53,84,244,143,146,145,84,84,49,49,49,49,49,56,54,84,244,143,146,146,84,84,49,49,49,49,49,56,55,84,244,143,146,147,84,84,49,49,49,49,49,56,56,84,244,143,146,148,84,84,49,49,49,49,49,56,57,84,244,143,146,149,84,84,49,49,49,49,49,57,48,84,244,143,146,150,84,84,49,49,49,49,49,57,49,84,244,143,146,151,84,84,49,49,49,49,49,57,50,84,244,143,146,152,84,84,49,49,49,49,49,57,51,84,244,143,146,153,84,84,49,49,49,49,49,57,52,84,244,143,146,154,84,84,49,49,49,49,49,57,53,84,244,143,146,155,84,84,49,49,49,49,49,57,54,84,244,143,146,156,84,84,49,49,49,49,49,57,55,84,244,143,146,157,84,84,49,49,49,49,49,57,56,84,244,143,146,158,84,84,49,49,49,49,49,57,57,84,244,143,146,159,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20620 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20620_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20620_s.txt", Encoding.UTF8);

    public Test20620() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers5f5b393ed8e742338d6031fb2e225092",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,55,52,53,56,57,84,244,134,150,157,84,84,49,48,55,52,54,50,53,84,244,134,151,129,84,84,49,48,55,52,54,51,55,84,244,134,151,141,84,84,49,48,55,52,54,51,57,84,244,134,151,143,84,84,49,48,55,52,54,52,48,84,244,134,151,144,84,84,49,48,55,52,54,53,51,84,244,134,151,157,84,84,49,48,55,52,54,56,57,84,244,134,152,129,84,84,49,48,55,52,55,48,49,84,244,134,152,141,84,84,49,48,55,52,55,48,51,84,244,134,152,143,84,84,49,48,55,52,55,48,52,84,244,134,152,144,84,84,49,48,55,52,55,49,55,84,244,134,152,157,84,84,49,48,55,52,55,53,51,84,244,134,153,129,84,84,49,48,55,52,55,54,53,84,244,134,153,141,84,84,49,48,55,52,55,54,55,84,244,134,153,143,84,84,49,48,55,52,55,54,56,84,244,134,153,144,84,84,49,48,55,52,55,56,49,84,244,134,153,157,84,84,49,48,55,52,56,49,55,84,244,134,154,129,84,84,49,48,55,52,56,50,57,84,244,134,154,141,84,84,49,48,55,52,56,51,49,84,244,134,154,143,84,84,49,48,55,52,56,51,50,84,244,134,154,144,84,84,49,48,55,52,56,52,53,84,244,134,154,157,84,84,49,48,55,52,56,56,49,84,244,134,155,129,84,84,49,48,55,52,56,57,51,84,244,134,155,141,84,84,49,48,55,52,56,57,53,84,244,134,155,143,84,84,49,48,55,52,56,57,54,84,244,134,155,144,84,84,49,48,55,52,57,48,57,84,244,134,155,157,84,84,49,48,55,52,57,52,53,84,244,134,156,129,84,84,49,48,55,52,57,53,55,84,244,134,156,141,84,84,49,48,55,52,57,53,57,84,244,134,156,143,84,84,49,48,55,52,57,54,48,84,244,134,156,144,84,84,49,48,55,52,57,55,51,84,244,134,156,157,84,84,49,48,55,53,48,48,56,84,244,134,157,128,84,84,49,48,55,53,48,48,57,84,244,134,157,129,84,84,49,48,55,53,48,49,48,84,244,134,157,130,84,84,49,48,55,53,48,49,49,84,244,134,157,131,84,84,49,48,55,53,48,49,50,84,244,134,157,132,84,84,49,48,55,53,48,49,51,84,244,134,157,133,84,84,49,48,55,53,48,49,52,84,244,134,157,134,84,84,49,48,55,53,48,49,53,84,244,134,157,135,84,84,49,48,55,53,48,49,54,84,244,134,157,136,84,84,49,48,55,53,48,49,55,84,244,134,157,137,84,84,49,48,55,53,48,49,56,84,244,134,157,138,84,84,49,48,55,53,48,49,57,84,244,134,157,139,84,84,49,48,55,53,48,50,48,84,244,134,157,140,84,84,49,48,55,53,48,50,49,84,244,134,157,141,84,84,49,48,55,53,48,50,50,84,244,134,157,142,84,84,49,48,55,53,48,50,51,84,244,134,157,143,84,84,49,48,55,53,48,50,52,84,244,134,157,144,84,84,49,48,55,53,48,50,53,84,244,134,157,145,84,84,49,48,55,53,48,50,54,84,244,134,157,146,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19407 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19407_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19407_s.txt", Encoding.UTF8);

    public Test19407() : base(recordedRequest, recordedResponse, "accounts8d43a024a0ff30a")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a024a0ff30a",
                        container: "$root",
                        blob: "foo",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20681 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20681_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20681_s.txt", Encoding.UTF8);

    public Test20681() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers9df780a74f2549dda8f9f337dadb7946",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,56,52,56,54,53,84,244,136,183,129,84,84,49,48,56,52,56,55,55,84,244,136,183,141,84,84,49,48,56,52,56,55,57,84,244,136,183,143,84,84,49,48,56,52,56,56,48,84,244,136,183,144,84,84,49,48,56,52,56,57,51,84,244,136,183,157,84,84,49,48,56,52,57,50,57,84,244,136,184,129,84,84,49,48,56,52,57,52,49,84,244,136,184,141,84,84,49,48,56,52,57,52,51,84,244,136,184,143,84,84,49,48,56,52,57,52,52,84,244,136,184,144,84,84,49,48,56,52,57,53,55,84,244,136,184,157,84,84,49,48,56,52,57,57,51,84,244,136,185,129,84,84,49,48,56,53,48,48,53,84,244,136,185,141,84,84,49,48,56,53,48,48,55,84,244,136,185,143,84,84,49,48,56,53,48,48,56,84,244,136,185,144,84,84,49,48,56,53,48,50,49,84,244,136,185,157,84,84,49,48,56,53,48,53,55,84,244,136,186,129,84,84,49,48,56,53,48,54,57,84,244,136,186,141,84,84,49,48,56,53,48,55,49,84,244,136,186,143,84,84,49,48,56,53,48,55,50,84,244,136,186,144,84,84,49,48,56,53,48,56,53,84,244,136,186,157,84,84,49,48,56,53,49,50,49,84,244,136,187,129,84,84,49,48,56,53,49,51,51,84,244,136,187,141,84,84,49,48,56,53,49,51,53,84,244,136,187,143,84,84,49,48,56,53,49,51,54,84,244,136,187,144,84,84,49,48,56,53,49,52,57,84,244,136,187,157,84,84,49,48,56,53,49,56,53,84,244,136,188,129,84,84,49,48,56,53,49,57,55,84,244,136,188,141,84,84,49,48,56,53,49,57,57,84,244,136,188,143,84,84,49,48,56,53,50,48,48,84,244,136,188,144,84,84,49,48,56,53,50,49,51,84,244,136,188,157,84,84,49,48,56,53,50,52,57,84,244,136,189,129,84,84,49,48,56,53,50,54,49,84,244,136,189,141,84,84,49,48,56,53,50,54,51,84,244,136,189,143,84,84,49,48,56,53,50,54,52,84,244,136,189,144,84,84,49,48,56,53,50,55,55,84,244,136,189,157,84,84,49,48,56,53,51,49,51,84,244,136,190,129,84,84,49,48,56,53,51,50,53,84,244,136,190,141,84,84,49,48,56,53,51,50,55,84,244,136,190,143,84,84,49,48,56,53,51,50,56,84,244,136,190,144,84,84,49,48,56,53,51,52,49,84,244,136,190,157,84,84,49,48,56,53,51,55,55,84,244,136,191,129,84,84,49,48,56,53,51,56,57,84,244,136,191,141,84,84,49,48,56,53,51,57,49,84,244,136,191,143,84,84,49,48,56,53,51,57,50,84,244,136,191,144,84,84,49,48,56,53,52,48,53,84,244,136,191,157,84,84,49,48,56,53,52,52,49,84,244,137,128,129,84,84,49,48,56,53,52,53,51,84,244,137,128,141,84,84,49,48,56,53,52,53,53,84,244,137,128,143,84,84,49,48,56,53,52,53,54,84,244,137,128,144,84,84,49,48,56,53,52,54,57,84,244,137,128,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22800 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22800_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22800_s.txt", Encoding.UTF8);

    public Test22800() : base(recordedRequest, recordedResponse, "accounts8d43a0490823d21")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a0490823d21",
                        container: "containers0bd48f2ce8374f57b3f3c61b5595b35b",
                        blob: "Blobf92b1d0c2a7847a5bf92331d8c64db35",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20114 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20114_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20114_s.txt", Encoding.UTF8);

    public Test20114() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers02552a2396c44255a61dd19b9714b3b6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,49,56,57,53,55,84,243,184,177,141,84,84,49,48,49,56,57,53,57,84,243,184,177,143,84,84,49,48,49,56,57,54,48,84,243,184,177,144,84,84,49,48,49,56,57,55,51,84,243,184,177,157,84,84,49,48,49,57,48,48,57,84,243,184,178,129,84,84,49,48,49,57,48,50,49,84,243,184,178,141,84,84,49,48,49,57,48,50,51,84,243,184,178,143,84,84,49,48,49,57,48,50,52,84,243,184,178,144,84,84,49,48,49,57,48,51,55,84,243,184,178,157,84,84,49,48,49,57,48,55,51,84,243,184,179,129,84,84,49,48,49,57,48,56,53,84,243,184,179,141,84,84,49,48,49,57,48,56,55,84,243,184,179,143,84,84,49,48,49,57,48,56,56,84,243,184,179,144,84,84,49,48,49,57,49,48,49,84,243,184,179,157,84,84,49,48,49,57,49,51,55,84,243,184,180,129,84,84,49,48,49,57,49,52,57,84,243,184,180,141,84,84,49,48,49,57,49,53,49,84,243,184,180,143,84,84,49,48,49,57,49,53,50,84,243,184,180,144,84,84,49,48,49,57,49,54,53,84,243,184,180,157,84,84,49,48,49,57,50,48,49,84,243,184,181,129,84,84,49,48,49,57,50,49,51,84,243,184,181,141,84,84,49,48,49,57,50,49,53,84,243,184,181,143,84,84,49,48,49,57,50,49,54,84,243,184,181,144,84,84,49,48,49,57,50,50,57,84,243,184,181,157,84,84,49,48,49,57,50,54,53,84,243,184,182,129,84,84,49,48,49,57,50,55,55,84,243,184,182,141,84,84,49,48,49,57,50,55,57,84,243,184,182,143,84,84,49,48,49,57,50,56,48,84,243,184,182,144,84,84,49,48,49,57,50,57,51,84,243,184,182,157,84,84,49,48,49,57,51,50,57,84,243,184,183,129,84,84,49,48,49,57,51,52,49,84,243,184,183,141,84,84,49,48,49,57,51,52,51,84,243,184,183,143,84,84,49,48,49,57,51,52,52,84,243,184,183,144,84,84,49,48,49,57,51,53,55,84,243,184,183,157,84,84,49,48,49,57,51,57,51,84,243,184,184,129,84,84,49,48,49,57,52,48,53,84,243,184,184,141,84,84,49,48,49,57,52,48,55,84,243,184,184,143,84,84,49,48,49,57,52,48,56,84,243,184,184,144,84,84,49,48,49,57,52,50,49,84,243,184,184,157,84,84,49,48,49,57,52,53,55,84,243,184,185,129,84,84,49,48,49,57,52,54,57,84,243,184,185,141,84,84,49,48,49,57,52,55,49,84,243,184,185,143,84,84,49,48,49,57,52,55,50,84,243,184,185,144,84,84,49,48,49,57,52,56,53,84,243,184,185,157,84,84,49,48,49,57,53,50,49,84,243,184,186,129,84,84,49,48,49,57,53,51,51,84,243,184,186,141,84,84,49,48,49,57,53,51,53,84,243,184,186,143,84,84,49,48,49,57,53,51,54,84,243,184,186,144,84,84,49,48,49,57,53,52,57,84,243,184,186,157,84,84,49,48,49,57,53,56,53,84,243,184,187,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22773 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22773_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22773_s.txt", Encoding.UTF8);

    public Test22773() : base(recordedRequest, recordedResponse, "accounts8d43a0490823d21")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a0490823d21",
                        container: "containers0bd48f2ce8374f57b3f3c61b5595b35b",
                        blob: "Blob6546057810f8481993491e503a8e3b2e",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20525 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20525_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20525_s.txt", Encoding.UTF8);

    public Test20525() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers169b02be047c4c76acbb586fdc8886c6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,54,48,56,48,49,84,244,130,191,129,84,84,49,48,54,48,56,49,51,84,244,130,191,141,84,84,49,48,54,48,56,49,53,84,244,130,191,143,84,84,49,48,54,48,56,49,54,84,244,130,191,144,84,84,49,48,54,48,56,50,57,84,244,130,191,157,84,84,49,48,54,48,56,54,53,84,244,131,128,129,84,84,49,48,54,48,56,55,55,84,244,131,128,141,84,84,49,48,54,48,56,55,57,84,244,131,128,143,84,84,49,48,54,48,56,56,48,84,244,131,128,144,84,84,49,48,54,48,56,57,51,84,244,131,128,157,84,84,49,48,54,48,57,50,56,84,244,131,129,128,84,84,49,48,54,48,57,50,57,84,244,131,129,129,84,84,49,48,54,48,57,51,48,84,244,131,129,130,84,84,49,48,54,48,57,51,49,84,244,131,129,131,84,84,49,48,54,48,57,51,50,84,244,131,129,132,84,84,49,48,54,48,57,51,51,84,244,131,129,133,84,84,49,48,54,48,57,51,52,84,244,131,129,134,84,84,49,48,54,48,57,51,53,84,244,131,129,135,84,84,49,48,54,48,57,51,54,84,244,131,129,136,84,84,49,48,54,48,57,51,55,84,244,131,129,137,84,84,49,48,54,48,57,51,56,84,244,131,129,138,84,84,49,48,54,48,57,51,57,84,244,131,129,139,84,84,49,48,54,48,57,52,48,84,244,131,129,140,84,84,49,48,54,48,57,52,49,84,244,131,129,141,84,84,49,48,54,48,57,52,50,84,244,131,129,142,84,84,49,48,54,48,57,52,51,84,244,131,129,143,84,84,49,48,54,48,57,52,52,84,244,131,129,144,84,84,49,48,54,48,57,52,53,84,244,131,129,145,84,84,49,48,54,48,57,52,54,84,244,131,129,146,84,84,49,48,54,48,57,52,55,84,244,131,129,147,84,84,49,48,54,48,57,52,56,84,244,131,129,148,84,84,49,48,54,48,57,52,57,84,244,131,129,149,84,84,49,48,54,48,57,53,48,84,244,131,129,150,84,84,49,48,54,48,57,53,49,84,244,131,129,151,84,84,49,48,54,48,57,53,50,84,244,131,129,152,84,84,49,48,54,48,57,53,51,84,244,131,129,153,84,84,49,48,54,48,57,53,52,84,244,131,129,154,84,84,49,48,54,48,57,53,53,84,244,131,129,155,84,84,49,48,54,48,57,53,54,84,244,131,129,156,84,84,49,48,54,48,57,53,55,84,244,131,129,157,84,84,49,48,54,48,57,53,56,84,244,131,129,158,84,84,49,48,54,48,57,53,57,84,244,131,129,159,84,84,49,48,54,48,57,54,48,84,244,131,129,160,84,84,49,48,54,48,57,54,49,84,244,131,129,161,84,84,49,48,54,48,57,54,50,84,244,131,129,162,84,84,49,48,54,48,57,54,51,84,244,131,129,163,84,84,49,48,54,48,57,54,52,84,244,131,129,164,84,84,49,48,54,48,57,54,53,84,244,131,129,165,84,84,49,48,54,48,57,54,54,84,244,131,129,166,84,84,49,48,54,48,57,54,55,84,244,131,129,167,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20491 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20491_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20491_s.txt", Encoding.UTF8);

    public Test20491() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers3bfa703d74a140e499ecce701b962b8c",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,54,53,55,56,84,244,129,189,130,84,84,49,48,53,54,53,55,57,84,244,129,189,131,84,84,49,48,53,54,53,56,48,84,244,129,189,132,84,84,49,48,53,54,53,56,49,84,244,129,189,133,84,84,49,48,53,54,53,56,50,84,244,129,189,134,84,84,49,48,53,54,53,56,51,84,244,129,189,135,84,84,49,48,53,54,53,56,52,84,244,129,189,136,84,84,49,48,53,54,53,56,53,84,244,129,189,137,84,84,49,48,53,54,53,56,54,84,244,129,189,138,84,84,49,48,53,54,53,56,55,84,244,129,189,139,84,84,49,48,53,54,53,56,56,84,244,129,189,140,84,84,49,48,53,54,53,56,57,84,244,129,189,141,84,84,49,48,53,54,53,57,48,84,244,129,189,142,84,84,49,48,53,54,53,57,49,84,244,129,189,143,84,84,49,48,53,54,53,57,50,84,244,129,189,144,84,84,49,48,53,54,53,57,51,84,244,129,189,145,84,84,49,48,53,54,53,57,52,84,244,129,189,146,84,84,49,48,53,54,53,57,53,84,244,129,189,147,84,84,49,48,53,54,53,57,54,84,244,129,189,148,84,84,49,48,53,54,53,57,55,84,244,129,189,149,84,84,49,48,53,54,53,57,56,84,244,129,189,150,84,84,49,48,53,54,53,57,57,84,244,129,189,151,84,84,49,48,53,54,54,48,48,84,244,129,189,152,84,84,49,48,53,54,54,48,49,84,244,129,189,153,84,84,49,48,53,54,54,48,50,84,244,129,189,154,84,84,49,48,53,54,54,48,51,84,244,129,189,155,84,84,49,48,53,54,54,48,52,84,244,129,189,156,84,84,49,48,53,54,54,48,53,84,244,129,189,157,84,84,49,48,53,54,54,48,54,84,244,129,189,158,84,84,49,48,53,54,54,48,55,84,244,129,189,159,84,84,49,48,53,54,54,48,56,84,244,129,189,160,84,84,49,48,53,54,54,48,57,84,244,129,189,161,84,84,49,48,53,54,54,49,48,84,244,129,189,162,84,84,49,48,53,54,54,49,49,84,244,129,189,163,84,84,49,48,53,54,54,49,50,84,244,129,189,164,84,84,49,48,53,54,54,49,51,84,244,129,189,165,84,84,49,48,53,54,54,49,52,84,244,129,189,166,84,84,49,48,53,54,54,49,53,84,244,129,189,167,84,84,49,48,53,54,54,49,54,84,244,129,189,168,84,84,49,48,53,54,54,49,55,84,244,129,189,169,84,84,49,48,53,54,54,49,56,84,244,129,189,170,84,84,49,48,53,54,54,49,57,84,244,129,189,171,84,84,49,48,53,54,54,50,48,84,244,129,189,172,84,84,49,48,53,54,54,50,49,84,244,129,189,173,84,84,49,48,53,54,54,50,50,84,244,129,189,174,84,84,49,48,53,54,54,50,51,84,244,129,189,175,84,84,49,48,53,54,54,50,52,84,244,129,189,176,84,84,49,48,53,54,54,50,53,84,244,129,189,177,84,84,49,48,53,54,54,50,54,84,244,129,189,178,84,84,49,48,53,54,54,50,55,84,244,129,189,179,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20552 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20552_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20552_s.txt", Encoding.UTF8);

    public Test20552() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers169b02be047c4c76acbb586fdc8886c6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,54,53,48,52,57,84,244,132,129,153,84,84,49,48,54,53,48,53,48,84,244,132,129,154,84,84,49,48,54,53,48,53,49,84,244,132,129,155,84,84,49,48,54,53,48,53,50,84,244,132,129,156,84,84,49,48,54,53,48,53,51,84,244,132,129,157,84,84,49,48,54,53,48,53,52,84,244,132,129,158,84,84,49,48,54,53,48,53,53,84,244,132,129,159,84,84,49,48,54,53,48,53,54,84,244,132,129,160,84,84,49,48,54,53,48,53,55,84,244,132,129,161,84,84,49,48,54,53,48,53,56,84,244,132,129,162,84,84,49,48,54,53,48,53,57,84,244,132,129,163,84,84,49,48,54,53,48,54,48,84,244,132,129,164,84,84,49,48,54,53,48,54,49,84,244,132,129,165,84,84,49,48,54,53,48,54,50,84,244,132,129,166,84,84,49,48,54,53,48,54,51,84,244,132,129,167,84,84,49,48,54,53,48,54,52,84,244,132,129,168,84,84,49,48,54,53,48,54,53,84,244,132,129,169,84,84,49,48,54,53,48,54,54,84,244,132,129,170,84,84,49,48,54,53,48,54,55,84,244,132,129,171,84,84,49,48,54,53,48,54,56,84,244,132,129,172,84,84,49,48,54,53,48,54,57,84,244,132,129,173,84,84,49,48,54,53,48,55,48,84,244,132,129,174,84,84,49,48,54,53,48,55,49,84,244,132,129,175,84,84,49,48,54,53,48,55,50,84,244,132,129,176,84,84,49,48,54,53,48,55,51,84,244,132,129,177,84,84,49,48,54,53,48,55,52,84,244,132,129,178,84,84,49,48,54,53,48,55,53,84,244,132,129,179,84,84,49,48,54,53,48,55,54,84,244,132,129,180,84,84,49,48,54,53,48,55,55,84,244,132,129,181,84,84,49,48,54,53,48,55,56,84,244,132,129,182,84,84,49,48,54,53,48,55,57,84,244,132,129,183,84,84,49,48,54,53,48,56,48,84,244,132,129,184,84,84,49,48,54,53,48,56,49,84,244,132,129,185,84,84,49,48,54,53,48,56,50,84,244,132,129,186,84,84,49,48,54,53,48,56,51,84,244,132,129,187,84,84,49,48,54,53,48,56,52,84,244,132,129,188,84,84,49,48,54,53,48,56,53,84,244,132,129,189,84,84,49,48,54,53,48,56,54,84,244,132,129,190,84,84,49,48,54,53,48,56,55,84,244,132,129,191,84,84,49,48,54,53,48,56,57,84,244,132,130,129,84,84,49,48,54,53,49,48,49,84,244,132,130,141,84,84,49,48,54,53,49,48,51,84,244,132,130,143,84,84,49,48,54,53,49,48,52,84,244,132,130,144,84,84,49,48,54,53,49,49,55,84,244,132,130,157,84,84,49,48,54,53,49,53,51,84,244,132,131,129,84,84,49,48,54,53,49,54,53,84,244,132,131,141,84,84,49,48,54,53,49,54,55,84,244,132,131,143,84,84,49,48,54,53,49,54,56,84,244,132,131,144,84,84,49,48,54,53,49,56,49,84,244,132,131,157,84,84,49,48,54,53,50,49,55,84,244,132,132,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19949 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19949_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19949_s.txt", Encoding.UTF8);

    public Test19949() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersbf5ecfbea5a24d8a8188936c9be6fa20",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,57,50,52,52,57,84,243,178,147,129,84,84,57,57,50,52,54,49,84,243,178,147,141,84,84,57,57,50,52,54,51,84,243,178,147,143,84,84,57,57,50,52,54,52,84,243,178,147,144,84,84,57,57,50,52,55,55,84,243,178,147,157,84,84,57,57,50,53,49,51,84,243,178,148,129,84,84,57,57,50,53,50,53,84,243,178,148,141,84,84,57,57,50,53,50,55,84,243,178,148,143,84,84,57,57,50,53,50,56,84,243,178,148,144,84,84,57,57,50,53,52,49,84,243,178,148,157,84,84,57,57,50,53,55,55,84,243,178,149,129,84,84,57,57,50,53,56,57,84,243,178,149,141,84,84,57,57,50,53,57,49,84,243,178,149,143,84,84,57,57,50,53,57,50,84,243,178,149,144,84,84,57,57,50,54,48,53,84,243,178,149,157,84,84,57,57,50,54,52,49,84,243,178,150,129,84,84,57,57,50,54,53,51,84,243,178,150,141,84,84,57,57,50,54,53,53,84,243,178,150,143,84,84,57,57,50,54,53,54,84,243,178,150,144,84,84,57,57,50,54,54,57,84,243,178,150,157,84,84,57,57,50,55,48,53,84,243,178,151,129,84,84,57,57,50,55,49,55,84,243,178,151,141,84,84,57,57,50,55,49,57,84,243,178,151,143,84,84,57,57,50,55,50,48,84,243,178,151,144,84,84,57,57,50,55,51,51,84,243,178,151,157,84,84,57,57,50,55,54,57,84,243,178,152,129,84,84,57,57,50,55,56,49,84,243,178,152,141,84,84,57,57,50,55,56,51,84,243,178,152,143,84,84,57,57,50,55,56,52,84,243,178,152,144,84,84,57,57,50,55,57,55,84,243,178,152,157,84,84,57,57,50,56,51,51,84,243,178,153,129,84,84,57,57,50,56,52,53,84,243,178,153,141,84,84,57,57,50,56,52,55,84,243,178,153,143,84,84,57,57,50,56,52,56,84,243,178,153,144,84,84,57,57,50,56,54,49,84,243,178,153,157,84,84,57,57,50,56,57,55,84,243,178,154,129,84,84,57,57,50,57,48,57,84,243,178,154,141,84,84,57,57,50,57,49,49,84,243,178,154,143,84,84,57,57,50,57,49,50,84,243,178,154,144,84,84,57,57,50,57,50,53,84,243,178,154,157,84,84,57,57,50,57,54,49,84,243,178,155,129,84,84,57,57,50,57,55,51,84,243,178,155,141,84,84,57,57,50,57,55,53,84,243,178,155,143,84,84,57,57,50,57,55,54,84,243,178,155,144,84,84,57,57,50,57,56,57,84,243,178,155,157,84,84,57,57,51,48,50,53,84,243,178,156,129,84,84,57,57,51,48,51,55,84,243,178,156,141,84,84,57,57,51,48,51,57,84,243,178,156,143,84,84,57,57,51,48,52,48,84,243,178,156,144,84,84,57,57,51,48,53,51,84,243,178,156,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21096 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21096_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21096_s.txt", Encoding.UTF8);

    public Test21096() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers79aa3dd90e344ebe9466f3cb0c56378a",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,50,54,48,48,84,244,143,168,152,84,84,49,49,49,50,54,48,49,84,244,143,168,153,84,84,49,49,49,50,54,48,50,84,244,143,168,154,84,84,49,49,49,50,54,48,51,84,244,143,168,155,84,84,49,49,49,50,54,48,52,84,244,143,168,156,84,84,49,49,49,50,54,48,53,84,244,143,168,157,84,84,49,49,49,50,54,48,54,84,244,143,168,158,84,84,49,49,49,50,54,48,55,84,244,143,168,159,84,84,49,49,49,50,54,48,56,84,244,143,168,160,84,84,49,49,49,50,54,48,57,84,244,143,168,161,84,84,49,49,49,50,54,49,48,84,244,143,168,162,84,84,49,49,49,50,54,49,49,84,244,143,168,163,84,84,49,49,49,50,54,49,50,84,244,143,168,164,84,84,49,49,49,50,54,49,51,84,244,143,168,165,84,84,49,49,49,50,54,49,52,84,244,143,168,166,84,84,49,49,49,50,54,49,53,84,244,143,168,167,84,84,49,49,49,50,54,49,54,84,244,143,168,168,84,84,49,49,49,50,54,49,55,84,244,143,168,169,84,84,49,49,49,50,54,49,56,84,244,143,168,170,84,84,49,49,49,50,54,49,57,84,244,143,168,171,84,84,49,49,49,50,54,50,48,84,244,143,168,172,84,84,49,49,49,50,54,50,49,84,244,143,168,173,84,84,49,49,49,50,54,50,50,84,244,143,168,174,84,84,49,49,49,50,54,50,51,84,244,143,168,175,84,84,49,49,49,50,54,50,52,84,244,143,168,176,84,84,49,49,49,50,54,50,53,84,244,143,168,177,84,84,49,49,49,50,54,50,54,84,244,143,168,178,84,84,49,49,49,50,54,50,55,84,244,143,168,179,84,84,49,49,49,50,54,50,56,84,244,143,168,180,84,84,49,49,49,50,54,50,57,84,244,143,168,181,84,84,49,49,49,50,54,51,48,84,244,143,168,182,84,84,49,49,49,50,54,51,49,84,244,143,168,183,84,84,49,49,49,50,54,51,50,84,244,143,168,184,84,84,49,49,49,50,54,51,51,84,244,143,168,185,84,84,49,49,49,50,54,51,52,84,244,143,168,186,84,84,49,49,49,50,54,51,53,84,244,143,168,187,84,84,49,49,49,50,54,51,54,84,244,143,168,188,84,84,49,49,49,50,54,51,55,84,244,143,168,189,84,84,49,49,49,50,54,51,56,84,244,143,168,190,84,84,49,49,49,50,54,51,57,84,244,143,168,191,84,84,49,49,49,50,54,52,48,84,244,143,169,128,84,84,49,49,49,50,54,52,49,84,244,143,169,129,84,84,49,49,49,50,54,52,50,84,244,143,169,130,84,84,49,49,49,50,54,52,51,84,244,143,169,131,84,84,49,49,49,50,54,52,52,84,244,143,169,132,84,84,49,49,49,50,54,52,53,84,244,143,169,133,84,84,49,49,49,50,54,52,54,84,244,143,169,134,84,84,49,49,49,50,54,52,55,84,244,143,169,135,84,84,49,49,49,50,54,52,56,84,244,143,169,136,84,84,49,49,49,50,54,52,57,84,244,143,169,137,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22801 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22801_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22801_s.txt", Encoding.UTF8);

    public Test22801() : base(recordedRequest, recordedResponse, "accounts8d43a0490823d21")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a0490823d21",
                        container: "containers0bd48f2ce8374f57b3f3c61b5595b35b",
                        blob: "Blobe60237e663194bff995c1df1a35a43b5",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19890 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19890_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19890_s.txt", Encoding.UTF8);

    public Test19890() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersf0a96ab3064046f8a2fc77e6e3ebae9e",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,56,51,57,48,57,84,243,176,141,165,84,84,57,56,51,57,49,48,84,243,176,141,166,84,84,57,56,51,57,49,49,84,243,176,141,167,84,84,57,56,51,57,49,50,84,243,176,141,168,84,84,57,56,51,57,49,51,84,243,176,141,169,84,84,57,56,51,57,49,52,84,243,176,141,170,84,84,57,56,51,57,49,53,84,243,176,141,171,84,84,57,56,51,57,49,54,84,243,176,141,172,84,84,57,56,51,57,49,55,84,243,176,141,173,84,84,57,56,51,57,49,56,84,243,176,141,174,84,84,57,56,51,57,49,57,84,243,176,141,175,84,84,57,56,51,57,50,48,84,243,176,141,176,84,84,57,56,51,57,50,49,84,243,176,141,177,84,84,57,56,51,57,50,50,84,243,176,141,178,84,84,57,56,51,57,50,51,84,243,176,141,179,84,84,57,56,51,57,50,52,84,243,176,141,180,84,84,57,56,51,57,50,53,84,243,176,141,181,84,84,57,56,51,57,50,54,84,243,176,141,182,84,84,57,56,51,57,50,55,84,243,176,141,183,84,84,57,56,51,57,50,56,84,243,176,141,184,84,84,57,56,51,57,50,57,84,243,176,141,185,84,84,57,56,51,57,51,48,84,243,176,141,186,84,84,57,56,51,57,51,49,84,243,176,141,187,84,84,57,56,51,57,51,50,84,243,176,141,188,84,84,57,56,51,57,51,51,84,243,176,141,189,84,84,57,56,51,57,51,52,84,243,176,141,190,84,84,57,56,51,57,51,53,84,243,176,141,191,84,84,57,56,51,57,51,55,84,243,176,142,129,84,84,57,56,51,57,52,57,84,243,176,142,141,84,84,57,56,51,57,53,49,84,243,176,142,143,84,84,57,56,51,57,53,50,84,243,176,142,144,84,84,57,56,51,57,54,53,84,243,176,142,157,84,84,57,56,52,48,48,48,84,243,176,143,128,84,84,57,56,52,48,48,49,84,243,176,143,129,84,84,57,56,52,48,48,50,84,243,176,143,130,84,84,57,56,52,48,48,51,84,243,176,143,131,84,84,57,56,52,48,48,52,84,243,176,143,132,84,84,57,56,52,48,48,53,84,243,176,143,133,84,84,57,56,52,48,48,54,84,243,176,143,134,84,84,57,56,52,48,48,55,84,243,176,143,135,84,84,57,56,52,48,48,56,84,243,176,143,136,84,84,57,56,52,48,48,57,84,243,176,143,137,84,84,57,56,52,48,49,48,84,243,176,143,138,84,84,57,56,52,48,49,49,84,243,176,143,139,84,84,57,56,52,48,49,50,84,243,176,143,140,84,84,57,56,52,48,49,51,84,243,176,143,141,84,84,57,56,52,48,49,52,84,243,176,143,142,84,84,57,56,52,48,49,53,84,243,176,143,143,84,84,57,56,52,48,49,54,84,243,176,143,144,84,84,57,56,52,48,49,55,84,243,176,143,145,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20334 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20334_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20334_s.txt", Encoding.UTF8);

    public Test20334() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers412024b733e349978217e6093afed677",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,50,56,55,56,84,244,129,131,142,84,84,49,48,53,50,56,55,57,84,244,129,131,143,84,84,49,48,53,50,56,56,48,84,244,129,131,144,84,84,49,48,53,50,56,56,49,84,244,129,131,145,84,84,49,48,53,50,56,56,50,84,244,129,131,146,84,84,49,48,53,50,56,56,51,84,244,129,131,147,84,84,49,48,53,50,56,56,52,84,244,129,131,148,84,84,49,48,53,50,56,56,53,84,244,129,131,149,84,84,49,48,53,50,56,56,54,84,244,129,131,150,84,84,49,48,53,50,56,56,55,84,244,129,131,151,84,84,49,48,53,50,56,56,56,84,244,129,131,152,84,84,49,48,53,50,56,56,57,84,244,129,131,153,84,84,49,48,53,50,56,57,48,84,244,129,131,154,84,84,49,48,53,50,56,57,49,84,244,129,131,155,84,84,49,48,53,50,56,57,50,84,244,129,131,156,84,84,49,48,53,50,56,57,51,84,244,129,131,157,84,84,49,48,53,50,56,57,52,84,244,129,131,158,84,84,49,48,53,50,56,57,53,84,244,129,131,159,84,84,49,48,53,50,56,57,54,84,244,129,131,160,84,84,49,48,53,50,56,57,55,84,244,129,131,161,84,84,49,48,53,50,56,57,56,84,244,129,131,162,84,84,49,48,53,50,56,57,57,84,244,129,131,163,84,84,49,48,53,50,57,48,48,84,244,129,131,164,84,84,49,48,53,50,57,48,49,84,244,129,131,165,84,84,49,48,53,50,57,48,50,84,244,129,131,166,84,84,49,48,53,50,57,48,51,84,244,129,131,167,84,84,49,48,53,50,57,48,52,84,244,129,131,168,84,84,49,48,53,50,57,48,53,84,244,129,131,169,84,84,49,48,53,50,57,48,54,84,244,129,131,170,84,84,49,48,53,50,57,48,55,84,244,129,131,171,84,84,49,48,53,50,57,48,56,84,244,129,131,172,84,84,49,48,53,50,57,48,57,84,244,129,131,173,84,84,49,48,53,50,57,49,48,84,244,129,131,174,84,84,49,48,53,50,57,49,49,84,244,129,131,175,84,84,49,48,53,50,57,49,50,84,244,129,131,176,84,84,49,48,53,50,57,49,51,84,244,129,131,177,84,84,49,48,53,50,57,49,52,84,244,129,131,178,84,84,49,48,53,50,57,49,53,84,244,129,131,179,84,84,49,48,53,50,57,49,54,84,244,129,131,180,84,84,49,48,53,50,57,49,55,84,244,129,131,181,84,84,49,48,53,50,57,49,56,84,244,129,131,182,84,84,49,48,53,50,57,49,57,84,244,129,131,183,84,84,49,48,53,50,57,50,48,84,244,129,131,184,84,84,49,48,53,50,57,50,49,84,244,129,131,185,84,84,49,48,53,50,57,50,50,84,244,129,131,186,84,84,49,48,53,50,57,50,51,84,244,129,131,187,84,84,49,48,53,50,57,50,52,84,244,129,131,188,84,84,49,48,53,50,57,50,53,84,244,129,131,189,84,84,49,48,53,50,57,50,54,84,244,129,131,190,84,84,49,48,53,50,57,50,55,84,244,129,131,191,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22774 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22774_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22774_s.txt", Encoding.UTF8);

    public Test22774() : base(recordedRequest, recordedResponse, "accounts8d43a0490823d21")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a0490823d21",
                        container: "containers0bd48f2ce8374f57b3f3c61b5595b35b",
                        blob: "Blobac33d36b73894e9eb100cd8e96600e04",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20905 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20905_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20905_s.txt", Encoding.UTF8);

    public Test20905() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers9e891393b2624599aedf317812121dcf",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,52,53,54,57,84,244,141,170,185,84,84,49,49,48,52,53,55,48,84,244,141,170,186,84,84,49,49,48,52,53,55,49,84,244,141,170,187,84,84,49,49,48,52,53,55,50,84,244,141,170,188,84,84,49,49,48,52,53,55,51,84,244,141,170,189,84,84,49,49,48,52,53,55,52,84,244,141,170,190,84,84,49,49,48,52,53,55,53,84,244,141,170,191,84,84,49,49,48,52,53,55,54,84,244,141,171,128,84,84,49,49,48,52,53,55,55,84,244,141,171,129,84,84,49,49,48,52,53,55,56,84,244,141,171,130,84,84,49,49,48,52,53,55,57,84,244,141,171,131,84,84,49,49,48,52,53,56,48,84,244,141,171,132,84,84,49,49,48,52,53,56,49,84,244,141,171,133,84,84,49,49,48,52,53,56,50,84,244,141,171,134,84,84,49,49,48,52,53,56,51,84,244,141,171,135,84,84,49,49,48,52,53,56,52,84,244,141,171,136,84,84,49,49,48,52,53,56,53,84,244,141,171,137,84,84,49,49,48,52,53,56,54,84,244,141,171,138,84,84,49,49,48,52,53,56,55,84,244,141,171,139,84,84,49,49,48,52,53,56,56,84,244,141,171,140,84,84,49,49,48,52,53,56,57,84,244,141,171,141,84,84,49,49,48,52,53,57,48,84,244,141,171,142,84,84,49,49,48,52,53,57,49,84,244,141,171,143,84,84,49,49,48,52,53,57,50,84,244,141,171,144,84,84,49,49,48,52,53,57,51,84,244,141,171,145,84,84,49,49,48,52,53,57,52,84,244,141,171,146,84,84,49,49,48,52,53,57,53,84,244,141,171,147,84,84,49,49,48,52,53,57,54,84,244,141,171,148,84,84,49,49,48,52,53,57,55,84,244,141,171,149,84,84,49,49,48,52,53,57,56,84,244,141,171,150,84,84,49,49,48,52,53,57,57,84,244,141,171,151,84,84,49,49,48,52,54,48,48,84,244,141,171,152,84,84,49,49,48,52,54,48,49,84,244,141,171,153,84,84,49,49,48,52,54,48,50,84,244,141,171,154,84,84,49,49,48,52,54,48,51,84,244,141,171,155,84,84,49,49,48,52,54,48,52,84,244,141,171,156,84,84,49,49,48,52,54,48,53,84,244,141,171,157,84,84,49,49,48,52,54,48,54,84,244,141,171,158,84,84,49,49,48,52,54,48,55,84,244,141,171,159,84,84,49,49,48,52,54,48,56,84,244,141,171,160,84,84,49,49,48,52,54,48,57,84,244,141,171,161,84,84,49,49,48,52,54,49,48,84,244,141,171,162,84,84,49,49,48,52,54,49,49,84,244,141,171,163,84,84,49,49,48,52,54,49,50,84,244,141,171,164,84,84,49,49,48,52,54,49,51,84,244,141,171,165,84,84,49,49,48,52,54,49,52,84,244,141,171,166,84,84,49,49,48,52,54,49,53,84,244,141,171,167,84,84,49,49,48,52,54,49,54,84,244,141,171,168,84,84,49,49,48,52,54,49,55,84,244,141,171,169,84,84,49,49,48,52,54,49,56,84,244,141,171,170,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20751 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20751_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20751_s.txt", Encoding.UTF8);

    public Test20751() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersc5ae22b09f3f4a3eaff829adc5876203",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,57,53,51,56,57,84,244,139,155,157,84,84,49,48,57,53,52,50,53,84,244,139,156,129,84,84,49,48,57,53,52,51,55,84,244,139,156,141,84,84,49,48,57,53,52,51,57,84,244,139,156,143,84,84,49,48,57,53,52,52,48,84,244,139,156,144,84,84,49,48,57,53,52,53,51,84,244,139,156,157,84,84,49,48,57,53,52,56,56,84,244,139,157,128,84,84,49,48,57,53,52,56,57,84,244,139,157,129,84,84,49,48,57,53,52,57,48,84,244,139,157,130,84,84,49,48,57,53,52,57,49,84,244,139,157,131,84,84,49,48,57,53,52,57,50,84,244,139,157,132,84,84,49,48,57,53,52,57,51,84,244,139,157,133,84,84,49,48,57,53,52,57,52,84,244,139,157,134,84,84,49,48,57,53,52,57,53,84,244,139,157,135,84,84,49,48,57,53,52,57,54,84,244,139,157,136,84,84,49,48,57,53,52,57,55,84,244,139,157,137,84,84,49,48,57,53,52,57,56,84,244,139,157,138,84,84,49,48,57,53,52,57,57,84,244,139,157,139,84,84,49,48,57,53,53,48,48,84,244,139,157,140,84,84,49,48,57,53,53,48,49,84,244,139,157,141,84,84,49,48,57,53,53,48,50,84,244,139,157,142,84,84,49,48,57,53,53,48,51,84,244,139,157,143,84,84,49,48,57,53,53,48,52,84,244,139,157,144,84,84,49,48,57,53,53,48,53,84,244,139,157,145,84,84,49,48,57,53,53,48,54,84,244,139,157,146,84,84,49,48,57,53,53,48,55,84,244,139,157,147,84,84,49,48,57,53,53,48,56,84,244,139,157,148,84,84,49,48,57,53,53,48,57,84,244,139,157,149,84,84,49,48,57,53,53,49,48,84,244,139,157,150,84,84,49,48,57,53,53,49,49,84,244,139,157,151,84,84,49,48,57,53,53,49,50,84,244,139,157,152,84,84,49,48,57,53,53,49,51,84,244,139,157,153,84,84,49,48,57,53,53,49,52,84,244,139,157,154,84,84,49,48,57,53,53,49,53,84,244,139,157,155,84,84,49,48,57,53,53,49,54,84,244,139,157,156,84,84,49,48,57,53,53,49,55,84,244,139,157,157,84,84,49,48,57,53,53,49,56,84,244,139,157,158,84,84,49,48,57,53,53,49,57,84,244,139,157,159,84,84,49,48,57,53,53,50,48,84,244,139,157,160,84,84,49,48,57,53,53,50,49,84,244,139,157,161,84,84,49,48,57,53,53,50,50,84,244,139,157,162,84,84,49,48,57,53,53,50,51,84,244,139,157,163,84,84,49,48,57,53,53,50,52,84,244,139,157,164,84,84,49,48,57,53,53,50,53,84,244,139,157,165,84,84,49,48,57,53,53,50,54,84,244,139,157,166,84,84,49,48,57,53,53,50,55,84,244,139,157,167,84,84,49,48,57,53,53,50,56,84,244,139,157,168,84,84,49,48,57,53,53,50,57,84,244,139,157,169,84,84,49,48,57,53,53,51,48,84,244,139,157,170,84,84,49,48,57,53,53,51,49,84,244,139,157,171,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20076 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20076_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20076_s.txt", Encoding.UTF8);

    public Test20076() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersb3c703c6e551430d9c914c24c3792dd5",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,49,50,55,51,53,84,243,183,143,191,84,84,49,48,49,50,55,51,54,84,243,183,144,128,84,84,49,48,49,50,55,51,55,84,243,183,144,129,84,84,49,48,49,50,55,51,56,84,243,183,144,130,84,84,49,48,49,50,55,51,57,84,243,183,144,131,84,84,49,48,49,50,55,52,48,84,243,183,144,132,84,84,49,48,49,50,55,52,49,84,243,183,144,133,84,84,49,48,49,50,55,52,50,84,243,183,144,134,84,84,49,48,49,50,55,52,51,84,243,183,144,135,84,84,49,48,49,50,55,52,52,84,243,183,144,136,84,84,49,48,49,50,55,52,53,84,243,183,144,137,84,84,49,48,49,50,55,52,54,84,243,183,144,138,84,84,49,48,49,50,55,52,55,84,243,183,144,139,84,84,49,48,49,50,55,52,56,84,243,183,144,140,84,84,49,48,49,50,55,52,57,84,243,183,144,141,84,84,49,48,49,50,55,53,48,84,243,183,144,142,84,84,49,48,49,50,55,53,49,84,243,183,144,143,84,84,49,48,49,50,55,53,50,84,243,183,144,144,84,84,49,48,49,50,55,53,51,84,243,183,144,145,84,84,49,48,49,50,55,53,52,84,243,183,144,146,84,84,49,48,49,50,55,53,53,84,243,183,144,147,84,84,49,48,49,50,55,53,54,84,243,183,144,148,84,84,49,48,49,50,55,53,55,84,243,183,144,149,84,84,49,48,49,50,55,53,56,84,243,183,144,150,84,84,49,48,49,50,55,53,57,84,243,183,144,151,84,84,49,48,49,50,55,54,48,84,243,183,144,152,84,84,49,48,49,50,55,54,49,84,243,183,144,153,84,84,49,48,49,50,55,54,50,84,243,183,144,154,84,84,49,48,49,50,55,54,51,84,243,183,144,155,84,84,49,48,49,50,55,54,52,84,243,183,144,156,84,84,49,48,49,50,55,54,53,84,243,183,144,157,84,84,49,48,49,50,55,54,54,84,243,183,144,158,84,84,49,48,49,50,55,54,55,84,243,183,144,159,84,84,49,48,49,50,55,54,56,84,243,183,144,160,84,84,49,48,49,50,55,54,57,84,243,183,144,161,84,84,49,48,49,50,55,55,48,84,243,183,144,162,84,84,49,48,49,50,55,55,49,84,243,183,144,163,84,84,49,48,49,50,55,55,50,84,243,183,144,164,84,84,49,48,49,50,55,55,51,84,243,183,144,165,84,84,49,48,49,50,55,55,52,84,243,183,144,166,84,84,49,48,49,50,55,55,53,84,243,183,144,167,84,84,49,48,49,50,55,55,54,84,243,183,144,168,84,84,49,48,49,50,55,55,55,84,243,183,144,169,84,84,49,48,49,50,55,55,56,84,243,183,144,170,84,84,49,48,49,50,55,55,57,84,243,183,144,171,84,84,49,48,49,50,55,56,48,84,243,183,144,172,84,84,49,48,49,50,55,56,49,84,243,183,144,173,84,84,49,48,49,50,55,56,50,84,243,183,144,174,84,84,49,48,49,50,55,56,51,84,243,183,144,175,84,84,49,48,49,50,55,56,52,84,243,183,144,176,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22802 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22802_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22802_s.txt", Encoding.UTF8);

    public Test22802() : base(recordedRequest, recordedResponse, "accounts8d43a0490823d21")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a0490823d21",
                        container: "containers0bd48f2ce8374f57b3f3c61b5595b35b",
                        blob: "Blob7cdb7c1c222843d2ac64c7bbaadd754e",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19820 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19820_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19820_s.txt", Encoding.UTF8);

    public Test19820() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers3d1fce2fe43b489ca49e5d4066014499",
                        blob: Encoding.UTF8.GetString(new byte[]{84,53,56,57,53,55,84,238,153,141,84,84,53,56,57,53,57,84,238,153,143,84,84,53,56,57,54,48,84,238,153,144,84,84,53,56,57,55,51,84,238,153,157,84,84,53,57,48,48,57,84,238,154,129,84,84,53,57,48,50,49,84,238,154,141,84,84,53,57,48,50,51,84,238,154,143,84,84,53,57,48,50,52,84,238,154,144,84,84,53,57,48,51,55,84,238,154,157,84,84,53,57,48,55,51,84,238,155,129,84,84,53,57,48,56,53,84,238,155,141,84,84,53,57,48,56,55,84,238,155,143,84,84,53,57,48,56,56,84,238,155,144,84,84,53,57,49,48,49,84,238,155,157,84,84,53,57,49,51,55,84,238,156,129,84,84,53,57,49,52,57,84,238,156,141,84,84,53,57,49,53,49,84,238,156,143,84,84,53,57,49,53,50,84,238,156,144,84,84,53,57,49,54,53,84,238,156,157,84,84,53,57,50,48,48,84,238,157,128,84,84,53,57,50,48,49,84,238,157,129,84,84,53,57,50,48,50,84,238,157,130,84,84,53,57,50,48,51,84,238,157,131,84,84,53,57,50,48,52,84,238,157,132,84,84,53,57,50,48,53,84,238,157,133,84,84,53,57,50,48,54,84,238,157,134,84,84,53,57,50,48,55,84,238,157,135,84,84,53,57,50,48,56,84,238,157,136,84,84,53,57,50,48,57,84,238,157,137,84,84,53,57,50,49,48,84,238,157,138,84,84,53,57,50,49,49,84,238,157,139,84,84,53,57,50,49,50,84,238,157,140,84,84,53,57,50,49,51,84,238,157,141,84,84,53,57,50,49,52,84,238,157,142,84,84,53,57,50,49,53,84,238,157,143,84,84,53,57,50,49,54,84,238,157,144,84,84,53,57,50,49,55,84,238,157,145,84,84,53,57,50,49,56,84,238,157,146,84,84,53,57,50,49,57,84,238,157,147,84,84,53,57,50,50,48,84,238,157,148,84,84,53,57,50,50,49,84,238,157,149,84,84,53,57,50,50,50,84,238,157,150,84,84,53,57,50,50,51,84,238,157,151,84,84,53,57,50,50,52,84,238,157,152,84,84,53,57,50,50,53,84,238,157,153,84,84,53,57,50,50,54,84,238,157,154,84,84,53,57,50,50,55,84,238,157,155,84,84,53,57,50,50,56,84,238,157,156,84,84,53,57,50,50,57,84,238,157,157,84,84,53,57,50,51,48,84,238,157,158,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20171 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20171_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20171_s.txt", Encoding.UTF8);

    public Test20171() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers4f3362aed9424bd2bfac6751ee820ab9",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,50,56,50,48,49,84,243,187,129,169,84,84,49,48,50,56,50,48,50,84,243,187,129,170,84,84,49,48,50,56,50,48,51,84,243,187,129,171,84,84,49,48,50,56,50,48,52,84,243,187,129,172,84,84,49,48,50,56,50,48,53,84,243,187,129,173,84,84,49,48,50,56,50,48,54,84,243,187,129,174,84,84,49,48,50,56,50,48,55,84,243,187,129,175,84,84,49,48,50,56,50,48,56,84,243,187,129,176,84,84,49,48,50,56,50,48,57,84,243,187,129,177,84,84,49,48,50,56,50,49,48,84,243,187,129,178,84,84,49,48,50,56,50,49,49,84,243,187,129,179,84,84,49,48,50,56,50,49,50,84,243,187,129,180,84,84,49,48,50,56,50,49,51,84,243,187,129,181,84,84,49,48,50,56,50,49,52,84,243,187,129,182,84,84,49,48,50,56,50,49,53,84,243,187,129,183,84,84,49,48,50,56,50,49,54,84,243,187,129,184,84,84,49,48,50,56,50,49,55,84,243,187,129,185,84,84,49,48,50,56,50,49,56,84,243,187,129,186,84,84,49,48,50,56,50,49,57,84,243,187,129,187,84,84,49,48,50,56,50,50,48,84,243,187,129,188,84,84,49,48,50,56,50,50,49,84,243,187,129,189,84,84,49,48,50,56,50,50,50,84,243,187,129,190,84,84,49,48,50,56,50,50,51,84,243,187,129,191,84,84,49,48,50,56,50,50,53,84,243,187,130,129,84,84,49,48,50,56,50,51,55,84,243,187,130,141,84,84,49,48,50,56,50,51,57,84,243,187,130,143,84,84,49,48,50,56,50,52,48,84,243,187,130,144,84,84,49,48,50,56,50,53,51,84,243,187,130,157,84,84,49,48,50,56,50,56,57,84,243,187,131,129,84,84,49,48,50,56,51,48,49,84,243,187,131,141,84,84,49,48,50,56,51,48,51,84,243,187,131,143,84,84,49,48,50,56,51,48,52,84,243,187,131,144,84,84,49,48,50,56,51,49,55,84,243,187,131,157,84,84,49,48,50,56,51,53,51,84,243,187,132,129,84,84,49,48,50,56,51,54,53,84,243,187,132,141,84,84,49,48,50,56,51,54,55,84,243,187,132,143,84,84,49,48,50,56,51,54,56,84,243,187,132,144,84,84,49,48,50,56,51,56,49,84,243,187,132,157,84,84,49,48,50,56,52,49,55,84,243,187,133,129,84,84,49,48,50,56,52,50,57,84,243,187,133,141,84,84,49,48,50,56,52,51,49,84,243,187,133,143,84,84,49,48,50,56,52,51,50,84,243,187,133,144,84,84,49,48,50,56,52,52,53,84,243,187,133,157,84,84,49,48,50,56,52,56,49,84,243,187,134,129,84,84,49,48,50,56,52,57,51,84,243,187,134,141,84,84,49,48,50,56,52,57,53,84,243,187,134,143,84,84,49,48,50,56,52,57,54,84,243,187,134,144,84,84,49,48,50,56,53,48,57,84,243,187,134,157,84,84,49,48,50,56,53,52,53,84,243,187,135,129,84,84,49,48,50,56,53,53,55,84,243,187,135,141,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22803 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22803_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22803_s.txt", Encoding.UTF8);

    public Test22803() : base(recordedRequest, recordedResponse, "accounts8d43a0490823d21")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a0490823d21",
                        container: "containers0bd48f2ce8374f57b3f3c61b5595b35b",
                        blob: "Blob64dfc918c27f499982a1fc6471657822",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20296 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20296_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20296_s.txt", Encoding.UTF8);

    public Test20296() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers712afb35b54344eb8fa90647f752cd92",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,52,55,53,54,53,84,243,191,176,141,84,84,49,48,52,55,53,54,55,84,243,191,176,143,84,84,49,48,52,55,53,54,56,84,243,191,176,144,84,84,49,48,52,55,53,56,49,84,243,191,176,157,84,84,49,48,52,55,54,49,55,84,243,191,177,129,84,84,49,48,52,55,54,50,57,84,243,191,177,141,84,84,49,48,52,55,54,51,49,84,243,191,177,143,84,84,49,48,52,55,54,51,50,84,243,191,177,144,84,84,49,48,52,55,54,52,53,84,243,191,177,157,84,84,49,48,52,55,54,56,49,84,243,191,178,129,84,84,49,48,52,55,54,57,51,84,243,191,178,141,84,84,49,48,52,55,54,57,53,84,243,191,178,143,84,84,49,48,52,55,54,57,54,84,243,191,178,144,84,84,49,48,52,55,55,48,57,84,243,191,178,157,84,84,49,48,52,55,55,52,53,84,243,191,179,129,84,84,49,48,52,55,55,53,55,84,243,191,179,141,84,84,49,48,52,55,55,53,57,84,243,191,179,143,84,84,49,48,52,55,55,54,48,84,243,191,179,144,84,84,49,48,52,55,55,55,51,84,243,191,179,157,84,84,49,48,52,55,56,48,57,84,243,191,180,129,84,84,49,48,52,55,56,50,49,84,243,191,180,141,84,84,49,48,52,55,56,50,51,84,243,191,180,143,84,84,49,48,52,55,56,50,52,84,243,191,180,144,84,84,49,48,52,55,56,51,55,84,243,191,180,157,84,84,49,48,52,55,56,55,51,84,243,191,181,129,84,84,49,48,52,55,56,56,53,84,243,191,181,141,84,84,49,48,52,55,56,56,55,84,243,191,181,143,84,84,49,48,52,55,56,56,56,84,243,191,181,144,84,84,49,48,52,55,57,48,49,84,243,191,181,157,84,84,49,48,52,55,57,51,55,84,243,191,182,129,84,84,49,48,52,55,57,52,57,84,243,191,182,141,84,84,49,48,52,55,57,53,49,84,243,191,182,143,84,84,49,48,52,55,57,53,50,84,243,191,182,144,84,84,49,48,52,55,57,54,53,84,243,191,182,157,84,84,49,48,52,56,48,48,49,84,243,191,183,129,84,84,49,48,52,56,48,49,51,84,243,191,183,141,84,84,49,48,52,56,48,49,53,84,243,191,183,143,84,84,49,48,52,56,48,49,54,84,243,191,183,144,84,84,49,48,52,56,48,50,57,84,243,191,183,157,84,84,49,48,52,56,48,54,53,84,243,191,184,129,84,84,49,48,52,56,48,55,55,84,243,191,184,141,84,84,49,48,52,56,48,55,57,84,243,191,184,143,84,84,49,48,52,56,48,56,48,84,243,191,184,144,84,84,49,48,52,56,48,57,51,84,243,191,184,157,84,84,49,48,52,56,49,50,57,84,243,191,185,129,84,84,49,48,52,56,49,52,49,84,243,191,185,141,84,84,49,48,52,56,49,52,51,84,243,191,185,143,84,84,49,48,52,56,49,52,52,84,243,191,185,144,84,84,49,48,52,56,49,53,55,84,243,191,185,157,84,84,49,48,52,56,49,57,51,84,243,191,186,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20842 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20842_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20842_s.txt", Encoding.UTF8);

    public Test20842() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersf4b0dcea8f7b4ccf92e1f36b952ddf93",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,51,49,49,57,84,244,141,148,143,84,84,49,49,48,51,49,50,48,84,244,141,148,144,84,84,49,49,48,51,49,50,49,84,244,141,148,145,84,84,49,49,48,51,49,50,50,84,244,141,148,146,84,84,49,49,48,51,49,50,51,84,244,141,148,147,84,84,49,49,48,51,49,50,52,84,244,141,148,148,84,84,49,49,48,51,49,50,53,84,244,141,148,149,84,84,49,49,48,51,49,50,54,84,244,141,148,150,84,84,49,49,48,51,49,50,55,84,244,141,148,151,84,84,49,49,48,51,49,50,56,84,244,141,148,152,84,84,49,49,48,51,49,50,57,84,244,141,148,153,84,84,49,49,48,51,49,51,48,84,244,141,148,154,84,84,49,49,48,51,49,51,49,84,244,141,148,155,84,84,49,49,48,51,49,51,50,84,244,141,148,156,84,84,49,49,48,51,49,51,51,84,244,141,148,157,84,84,49,49,48,51,49,51,52,84,244,141,148,158,84,84,49,49,48,51,49,51,53,84,244,141,148,159,84,84,49,49,48,51,49,51,54,84,244,141,148,160,84,84,49,49,48,51,49,51,55,84,244,141,148,161,84,84,49,49,48,51,49,51,56,84,244,141,148,162,84,84,49,49,48,51,49,51,57,84,244,141,148,163,84,84,49,49,48,51,49,52,48,84,244,141,148,164,84,84,49,49,48,51,49,52,49,84,244,141,148,165,84,84,49,49,48,51,49,52,50,84,244,141,148,166,84,84,49,49,48,51,49,52,51,84,244,141,148,167,84,84,49,49,48,51,49,52,52,84,244,141,148,168,84,84,49,49,48,51,49,52,53,84,244,141,148,169,84,84,49,49,48,51,49,52,54,84,244,141,148,170,84,84,49,49,48,51,49,52,55,84,244,141,148,171,84,84,49,49,48,51,49,52,56,84,244,141,148,172,84,84,49,49,48,51,49,52,57,84,244,141,148,173,84,84,49,49,48,51,49,53,48,84,244,141,148,174,84,84,49,49,48,51,49,53,49,84,244,141,148,175,84,84,49,49,48,51,49,53,50,84,244,141,148,176,84,84,49,49,48,51,49,53,51,84,244,141,148,177,84,84,49,49,48,51,49,53,52,84,244,141,148,178,84,84,49,49,48,51,49,53,53,84,244,141,148,179,84,84,49,49,48,51,49,53,54,84,244,141,148,180,84,84,49,49,48,51,49,53,55,84,244,141,148,181,84,84,49,49,48,51,49,53,56,84,244,141,148,182,84,84,49,49,48,51,49,53,57,84,244,141,148,183,84,84,49,49,48,51,49,54,48,84,244,141,148,184,84,84,49,49,48,51,49,54,49,84,244,141,148,185,84,84,49,49,48,51,49,54,50,84,244,141,148,186,84,84,49,49,48,51,49,54,51,84,244,141,148,187,84,84,49,49,48,51,49,54,52,84,244,141,148,188,84,84,49,49,48,51,49,54,53,84,244,141,148,189,84,84,49,49,48,51,49,54,54,84,244,141,148,190,84,84,49,49,48,51,49,54,55,84,244,141,148,191,84,84,49,49,48,51,49,54,56,84,244,141,149,128,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20780 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20780_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20780_s.txt", Encoding.UTF8);

    public Test20780() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers8240a720eb234783afd6a68d24f64161",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,57,57,54,49,51,84,244,140,157,157,84,84,49,48,57,57,54,49,52,84,244,140,157,158,84,84,49,48,57,57,54,49,53,84,244,140,157,159,84,84,49,48,57,57,54,49,54,84,244,140,157,160,84,84,49,48,57,57,54,49,55,84,244,140,157,161,84,84,49,48,57,57,54,49,56,84,244,140,157,162,84,84,49,48,57,57,54,49,57,84,244,140,157,163,84,84,49,48,57,57,54,50,48,84,244,140,157,164,84,84,49,48,57,57,54,50,49,84,244,140,157,165,84,84,49,48,57,57,54,50,50,84,244,140,157,166,84,84,49,48,57,57,54,50,51,84,244,140,157,167,84,84,49,48,57,57,54,50,52,84,244,140,157,168,84,84,49,48,57,57,54,50,53,84,244,140,157,169,84,84,49,48,57,57,54,50,54,84,244,140,157,170,84,84,49,48,57,57,54,50,55,84,244,140,157,171,84,84,49,48,57,57,54,50,56,84,244,140,157,172,84,84,49,48,57,57,54,50,57,84,244,140,157,173,84,84,49,48,57,57,54,51,48,84,244,140,157,174,84,84,49,48,57,57,54,51,49,84,244,140,157,175,84,84,49,48,57,57,54,51,50,84,244,140,157,176,84,84,49,48,57,57,54,51,51,84,244,140,157,177,84,84,49,48,57,57,54,51,52,84,244,140,157,178,84,84,49,48,57,57,54,51,53,84,244,140,157,179,84,84,49,48,57,57,54,51,54,84,244,140,157,180,84,84,49,48,57,57,54,51,55,84,244,140,157,181,84,84,49,48,57,57,54,51,56,84,244,140,157,182,84,84,49,48,57,57,54,51,57,84,244,140,157,183,84,84,49,48,57,57,54,52,48,84,244,140,157,184,84,84,49,48,57,57,54,52,49,84,244,140,157,185,84,84,49,48,57,57,54,52,50,84,244,140,157,186,84,84,49,48,57,57,54,52,51,84,244,140,157,187,84,84,49,48,57,57,54,52,52,84,244,140,157,188,84,84,49,48,57,57,54,52,53,84,244,140,157,189,84,84,49,48,57,57,54,52,54,84,244,140,157,190,84,84,49,48,57,57,54,52,55,84,244,140,157,191,84,84,49,48,57,57,54,52,57,84,244,140,158,129,84,84,49,48,57,57,54,54,49,84,244,140,158,141,84,84,49,48,57,57,54,54,51,84,244,140,158,143,84,84,49,48,57,57,54,54,52,84,244,140,158,144,84,84,49,48,57,57,54,55,55,84,244,140,158,157,84,84,49,48,57,57,55,49,51,84,244,140,159,129,84,84,49,48,57,57,55,50,53,84,244,140,159,141,84,84,49,48,57,57,55,50,55,84,244,140,159,143,84,84,49,48,57,57,55,50,56,84,244,140,159,144,84,84,49,48,57,57,55,52,49,84,244,140,159,157,84,84,49,48,57,57,55,55,55,84,244,140,160,129,84,84,49,48,57,57,55,56,57,84,244,140,160,141,84,84,49,48,57,57,55,57,49,84,244,140,160,143,84,84,49,48,57,57,55,57,50,84,244,140,160,144,84,84,49,48,57,57,56,48,53,84,244,140,160,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20969 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20969_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20969_s.txt", Encoding.UTF8);

    public Test20969() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersdf87e0f5374149afa792ac52b484870e",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,54,56,56,54,84,244,142,143,134,84,84,49,49,48,54,56,56,55,84,244,142,143,135,84,84,49,49,48,54,56,56,56,84,244,142,143,136,84,84,49,49,48,54,56,56,57,84,244,142,143,137,84,84,49,49,48,54,56,57,48,84,244,142,143,138,84,84,49,49,48,54,56,57,49,84,244,142,143,139,84,84,49,49,48,54,56,57,50,84,244,142,143,140,84,84,49,49,48,54,56,57,51,84,244,142,143,141,84,84,49,49,48,54,56,57,52,84,244,142,143,142,84,84,49,49,48,54,56,57,53,84,244,142,143,143,84,84,49,49,48,54,56,57,54,84,244,142,143,144,84,84,49,49,48,54,56,57,55,84,244,142,143,145,84,84,49,49,48,54,56,57,56,84,244,142,143,146,84,84,49,49,48,54,56,57,57,84,244,142,143,147,84,84,49,49,48,54,57,48,48,84,244,142,143,148,84,84,49,49,48,54,57,48,49,84,244,142,143,149,84,84,49,49,48,54,57,48,50,84,244,142,143,150,84,84,49,49,48,54,57,48,51,84,244,142,143,151,84,84,49,49,48,54,57,48,52,84,244,142,143,152,84,84,49,49,48,54,57,48,53,84,244,142,143,153,84,84,49,49,48,54,57,48,54,84,244,142,143,154,84,84,49,49,48,54,57,48,55,84,244,142,143,155,84,84,49,49,48,54,57,48,56,84,244,142,143,156,84,84,49,49,48,54,57,48,57,84,244,142,143,157,84,84,49,49,48,54,57,49,48,84,244,142,143,158,84,84,49,49,48,54,57,49,49,84,244,142,143,159,84,84,49,49,48,54,57,49,50,84,244,142,143,160,84,84,49,49,48,54,57,49,51,84,244,142,143,161,84,84,49,49,48,54,57,49,52,84,244,142,143,162,84,84,49,49,48,54,57,49,53,84,244,142,143,163,84,84,49,49,48,54,57,49,54,84,244,142,143,164,84,84,49,49,48,54,57,49,55,84,244,142,143,165,84,84,49,49,48,54,57,49,56,84,244,142,143,166,84,84,49,49,48,54,57,49,57,84,244,142,143,167,84,84,49,49,48,54,57,50,48,84,244,142,143,168,84,84,49,49,48,54,57,50,49,84,244,142,143,169,84,84,49,49,48,54,57,50,50,84,244,142,143,170,84,84,49,49,48,54,57,50,51,84,244,142,143,171,84,84,49,49,48,54,57,50,52,84,244,142,143,172,84,84,49,49,48,54,57,50,53,84,244,142,143,173,84,84,49,49,48,54,57,50,54,84,244,142,143,174,84,84,49,49,48,54,57,50,55,84,244,142,143,175,84,84,49,49,48,54,57,50,56,84,244,142,143,176,84,84,49,49,48,54,57,50,57,84,244,142,143,177,84,84,49,49,48,54,57,51,48,84,244,142,143,178,84,84,49,49,48,54,57,51,49,84,244,142,143,179,84,84,49,49,48,54,57,51,50,84,244,142,143,180,84,84,49,49,48,54,57,51,51,84,244,142,143,181,84,84,49,49,48,54,57,51,52,84,244,142,143,182,84,84,49,49,48,54,57,51,53,84,244,142,143,183,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20429 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20429_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20429_s.txt", Encoding.UTF8);

    public Test20429() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers7f83ba854dc4459da9078f97f691d28c",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,53,49,50,56,84,244,129,166,152,84,84,49,48,53,53,49,50,57,84,244,129,166,153,84,84,49,48,53,53,49,51,48,84,244,129,166,154,84,84,49,48,53,53,49,51,49,84,244,129,166,155,84,84,49,48,53,53,49,51,50,84,244,129,166,156,84,84,49,48,53,53,49,51,51,84,244,129,166,157,84,84,49,48,53,53,49,51,52,84,244,129,166,158,84,84,49,48,53,53,49,51,53,84,244,129,166,159,84,84,49,48,53,53,49,51,54,84,244,129,166,160,84,84,49,48,53,53,49,51,55,84,244,129,166,161,84,84,49,48,53,53,49,51,56,84,244,129,166,162,84,84,49,48,53,53,49,51,57,84,244,129,166,163,84,84,49,48,53,53,49,52,48,84,244,129,166,164,84,84,49,48,53,53,49,52,49,84,244,129,166,165,84,84,49,48,53,53,49,52,50,84,244,129,166,166,84,84,49,48,53,53,49,52,51,84,244,129,166,167,84,84,49,48,53,53,49,52,52,84,244,129,166,168,84,84,49,48,53,53,49,52,53,84,244,129,166,169,84,84,49,48,53,53,49,52,54,84,244,129,166,170,84,84,49,48,53,53,49,52,55,84,244,129,166,171,84,84,49,48,53,53,49,52,56,84,244,129,166,172,84,84,49,48,53,53,49,52,57,84,244,129,166,173,84,84,49,48,53,53,49,53,48,84,244,129,166,174,84,84,49,48,53,53,49,53,49,84,244,129,166,175,84,84,49,48,53,53,49,53,50,84,244,129,166,176,84,84,49,48,53,53,49,53,51,84,244,129,166,177,84,84,49,48,53,53,49,53,52,84,244,129,166,178,84,84,49,48,53,53,49,53,53,84,244,129,166,179,84,84,49,48,53,53,49,53,54,84,244,129,166,180,84,84,49,48,53,53,49,53,55,84,244,129,166,181,84,84,49,48,53,53,49,53,56,84,244,129,166,182,84,84,49,48,53,53,49,53,57,84,244,129,166,183,84,84,49,48,53,53,49,54,48,84,244,129,166,184,84,84,49,48,53,53,49,54,49,84,244,129,166,185,84,84,49,48,53,53,49,54,50,84,244,129,166,186,84,84,49,48,53,53,49,54,51,84,244,129,166,187,84,84,49,48,53,53,49,54,52,84,244,129,166,188,84,84,49,48,53,53,49,54,53,84,244,129,166,189,84,84,49,48,53,53,49,54,54,84,244,129,166,190,84,84,49,48,53,53,49,54,55,84,244,129,166,191,84,84,49,48,53,53,49,54,56,84,244,129,167,128,84,84,49,48,53,53,49,54,57,84,244,129,167,129,84,84,49,48,53,53,49,55,48,84,244,129,167,130,84,84,49,48,53,53,49,55,49,84,244,129,167,131,84,84,49,48,53,53,49,55,50,84,244,129,167,132,84,84,49,48,53,53,49,55,51,84,244,129,167,133,84,84,49,48,53,53,49,55,52,84,244,129,167,134,84,84,49,48,53,53,49,55,53,84,244,129,167,135,84,84,49,48,53,53,49,55,54,84,244,129,167,136,84,84,49,48,53,53,49,55,55,84,244,129,167,137,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20590 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20590_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20590_s.txt", Encoding.UTF8);

    public Test20590() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers2997cf743a0f481c9f696984938aa742",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,55,48,48,56,56,84,244,133,144,136,84,84,49,48,55,48,48,56,57,84,244,133,144,137,84,84,49,48,55,48,48,57,48,84,244,133,144,138,84,84,49,48,55,48,48,57,49,84,244,133,144,139,84,84,49,48,55,48,48,57,50,84,244,133,144,140,84,84,49,48,55,48,48,57,51,84,244,133,144,141,84,84,49,48,55,48,48,57,52,84,244,133,144,142,84,84,49,48,55,48,48,57,53,84,244,133,144,143,84,84,49,48,55,48,48,57,54,84,244,133,144,144,84,84,49,48,55,48,48,57,55,84,244,133,144,145,84,84,49,48,55,48,48,57,56,84,244,133,144,146,84,84,49,48,55,48,48,57,57,84,244,133,144,147,84,84,49,48,55,48,49,48,48,84,244,133,144,148,84,84,49,48,55,48,49,48,49,84,244,133,144,149,84,84,49,48,55,48,49,48,50,84,244,133,144,150,84,84,49,48,55,48,49,48,51,84,244,133,144,151,84,84,49,48,55,48,49,48,52,84,244,133,144,152,84,84,49,48,55,48,49,48,53,84,244,133,144,153,84,84,49,48,55,48,49,48,54,84,244,133,144,154,84,84,49,48,55,48,49,48,55,84,244,133,144,155,84,84,49,48,55,48,49,48,56,84,244,133,144,156,84,84,49,48,55,48,49,48,57,84,244,133,144,157,84,84,49,48,55,48,49,49,48,84,244,133,144,158,84,84,49,48,55,48,49,49,49,84,244,133,144,159,84,84,49,48,55,48,49,49,50,84,244,133,144,160,84,84,49,48,55,48,49,49,51,84,244,133,144,161,84,84,49,48,55,48,49,49,52,84,244,133,144,162,84,84,49,48,55,48,49,49,53,84,244,133,144,163,84,84,49,48,55,48,49,49,54,84,244,133,144,164,84,84,49,48,55,48,49,49,55,84,244,133,144,165,84,84,49,48,55,48,49,49,56,84,244,133,144,166,84,84,49,48,55,48,49,49,57,84,244,133,144,167,84,84,49,48,55,48,49,50,48,84,244,133,144,168,84,84,49,48,55,48,49,50,49,84,244,133,144,169,84,84,49,48,55,48,49,50,50,84,244,133,144,170,84,84,49,48,55,48,49,50,51,84,244,133,144,171,84,84,49,48,55,48,49,50,52,84,244,133,144,172,84,84,49,48,55,48,49,50,53,84,244,133,144,173,84,84,49,48,55,48,49,50,54,84,244,133,144,174,84,84,49,48,55,48,49,50,55,84,244,133,144,175,84,84,49,48,55,48,49,50,56,84,244,133,144,176,84,84,49,48,55,48,49,50,57,84,244,133,144,177,84,84,49,48,55,48,49,51,48,84,244,133,144,178,84,84,49,48,55,48,49,51,49,84,244,133,144,179,84,84,49,48,55,48,49,51,50,84,244,133,144,180,84,84,49,48,55,48,49,51,51,84,244,133,144,181,84,84,49,48,55,48,49,51,52,84,244,133,144,182,84,84,49,48,55,48,49,51,53,84,244,133,144,183,84,84,49,48,55,48,49,51,54,84,244,133,144,184,84,84,49,48,55,48,49,51,55,84,244,133,144,185,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22775 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22775_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22775_s.txt", Encoding.UTF8);

    public Test22775() : base(recordedRequest, recordedResponse, "accounts8d43a0490823d21")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a0490823d21",
                        container: "containers0bd48f2ce8374f57b3f3c61b5595b35b",
                        blob: "Blobcdea6587818446e8aaf3e6d93bd2d5ea",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20239 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20239_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20239_s.txt", Encoding.UTF8);

    public Test20239() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersca1800aaa567470781b999118df6ba97",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,51,56,49,55,57,84,243,189,157,163,84,84,49,48,51,56,49,56,48,84,243,189,157,164,84,84,49,48,51,56,49,56,49,84,243,189,157,165,84,84,49,48,51,56,49,56,50,84,243,189,157,166,84,84,49,48,51,56,49,56,51,84,243,189,157,167,84,84,49,48,51,56,49,56,52,84,243,189,157,168,84,84,49,48,51,56,49,56,53,84,243,189,157,169,84,84,49,48,51,56,49,56,54,84,243,189,157,170,84,84,49,48,51,56,49,56,55,84,243,189,157,171,84,84,49,48,51,56,49,56,56,84,243,189,157,172,84,84,49,48,51,56,49,56,57,84,243,189,157,173,84,84,49,48,51,56,49,57,48,84,243,189,157,174,84,84,49,48,51,56,49,57,49,84,243,189,157,175,84,84,49,48,51,56,49,57,50,84,243,189,157,176,84,84,49,48,51,56,49,57,51,84,243,189,157,177,84,84,49,48,51,56,49,57,52,84,243,189,157,178,84,84,49,48,51,56,49,57,53,84,243,189,157,179,84,84,49,48,51,56,49,57,54,84,243,189,157,180,84,84,49,48,51,56,49,57,55,84,243,189,157,181,84,84,49,48,51,56,49,57,56,84,243,189,157,182,84,84,49,48,51,56,49,57,57,84,243,189,157,183,84,84,49,48,51,56,50,48,48,84,243,189,157,184,84,84,49,48,51,56,50,48,49,84,243,189,157,185,84,84,49,48,51,56,50,48,50,84,243,189,157,186,84,84,49,48,51,56,50,48,51,84,243,189,157,187,84,84,49,48,51,56,50,48,52,84,243,189,157,188,84,84,49,48,51,56,50,48,53,84,243,189,157,189,84,84,49,48,51,56,50,48,54,84,243,189,157,190,84,84,49,48,51,56,50,48,55,84,243,189,157,191,84,84,49,48,51,56,50,48,57,84,243,189,158,129,84,84,49,48,51,56,50,50,49,84,243,189,158,141,84,84,49,48,51,56,50,50,51,84,243,189,158,143,84,84,49,48,51,56,50,50,52,84,243,189,158,144,84,84,49,48,51,56,50,51,55,84,243,189,158,157,84,84,49,48,51,56,50,55,51,84,243,189,159,129,84,84,49,48,51,56,50,56,53,84,243,189,159,141,84,84,49,48,51,56,50,56,55,84,243,189,159,143,84,84,49,48,51,56,50,56,56,84,243,189,159,144,84,84,49,48,51,56,51,48,49,84,243,189,159,157,84,84,49,48,51,56,51,51,55,84,243,189,160,129,84,84,49,48,51,56,51,52,57,84,243,189,160,141,84,84,49,48,51,56,51,53,49,84,243,189,160,143,84,84,49,48,51,56,51,53,50,84,243,189,160,144,84,84,49,48,51,56,51,54,53,84,243,189,160,157,84,84,49,48,51,56,52,48,49,84,243,189,161,129,84,84,49,48,51,56,52,49,51,84,243,189,161,141,84,84,49,48,51,56,52,49,53,84,243,189,161,143,84,84,49,48,51,56,52,49,54,84,243,189,161,144,84,84,49,48,51,56,52,50,57,84,243,189,161,157,84,84,49,48,51,56,52,54,53,84,243,189,162,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22776 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22776_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22776_s.txt", Encoding.UTF8);

    public Test22776() : base(recordedRequest, recordedResponse, "accounts8d43a0490823d21")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a0490823d21",
                        container: "containers0bd48f2ce8374f57b3f3c61b5595b35b",
                        blob: "Bloba362a7bf06c844e4b6d6b7b18063631f",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20493 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20493_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20493_s.txt", Encoding.UTF8);

    public Test20493() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers3bfa703d74a140e499ecce701b962b8c",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,54,54,50,56,84,244,129,189,180,84,84,49,48,53,54,54,50,57,84,244,129,189,181,84,84,49,48,53,54,54,51,48,84,244,129,189,182,84,84,49,48,53,54,54,51,49,84,244,129,189,183,84,84,49,48,53,54,54,51,50,84,244,129,189,184,84,84,49,48,53,54,54,51,51,84,244,129,189,185,84,84,49,48,53,54,54,51,52,84,244,129,189,186,84,84,49,48,53,54,54,51,53,84,244,129,189,187,84,84,49,48,53,54,54,51,54,84,244,129,189,188,84,84,49,48,53,54,54,51,55,84,244,129,189,189,84,84,49,48,53,54,54,51,56,84,244,129,189,190,84,84,49,48,53,54,54,51,57,84,244,129,189,191,84,84,49,48,53,54,54,52,48,84,244,129,190,128,84,84,49,48,53,54,54,52,49,84,244,129,190,129,84,84,49,48,53,54,54,52,50,84,244,129,190,130,84,84,49,48,53,54,54,52,51,84,244,129,190,131,84,84,49,48,53,54,54,52,52,84,244,129,190,132,84,84,49,48,53,54,54,52,53,84,244,129,190,133,84,84,49,48,53,54,54,52,54,84,244,129,190,134,84,84,49,48,53,54,54,52,55,84,244,129,190,135,84,84,49,48,53,54,54,52,56,84,244,129,190,136,84,84,49,48,53,54,54,52,57,84,244,129,190,137,84,84,49,48,53,54,54,53,48,84,244,129,190,138,84,84,49,48,53,54,54,53,49,84,244,129,190,139,84,84,49,48,53,54,54,53,50,84,244,129,190,140,84,84,49,48,53,54,54,53,51,84,244,129,190,141,84,84,49,48,53,54,54,53,52,84,244,129,190,142,84,84,49,48,53,54,54,53,53,84,244,129,190,143,84,84,49,48,53,54,54,53,54,84,244,129,190,144,84,84,49,48,53,54,54,53,55,84,244,129,190,145,84,84,49,48,53,54,54,53,56,84,244,129,190,146,84,84,49,48,53,54,54,53,57,84,244,129,190,147,84,84,49,48,53,54,54,54,48,84,244,129,190,148,84,84,49,48,53,54,54,54,49,84,244,129,190,149,84,84,49,48,53,54,54,54,50,84,244,129,190,150,84,84,49,48,53,54,54,54,51,84,244,129,190,151,84,84,49,48,53,54,54,54,52,84,244,129,190,152,84,84,49,48,53,54,54,54,53,84,244,129,190,153,84,84,49,48,53,54,54,54,54,84,244,129,190,154,84,84,49,48,53,54,54,54,55,84,244,129,190,155,84,84,49,48,53,54,54,54,56,84,244,129,190,156,84,84,49,48,53,54,54,54,57,84,244,129,190,157,84,84,49,48,53,54,54,55,48,84,244,129,190,158,84,84,49,48,53,54,54,55,49,84,244,129,190,159,84,84,49,48,53,54,54,55,50,84,244,129,190,160,84,84,49,48,53,54,54,55,51,84,244,129,190,161,84,84,49,48,53,54,54,55,52,84,244,129,190,162,84,84,49,48,53,54,54,55,53,84,244,129,190,163,84,84,49,48,53,54,54,55,54,84,244,129,190,164,84,84,49,48,53,54,54,55,55,84,244,129,190,165,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21038 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21038_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21038_s.txt", Encoding.UTF8);

    public Test21038() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers98fd3eef9d4b4edcb3855acb5ae8645d",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,49,50,48,48,84,244,143,146,160,84,84,49,49,49,49,50,48,49,84,244,143,146,161,84,84,49,49,49,49,50,48,50,84,244,143,146,162,84,84,49,49,49,49,50,48,51,84,244,143,146,163,84,84,49,49,49,49,50,48,52,84,244,143,146,164,84,84,49,49,49,49,50,48,53,84,244,143,146,165,84,84,49,49,49,49,50,48,54,84,244,143,146,166,84,84,49,49,49,49,50,48,55,84,244,143,146,167,84,84,49,49,49,49,50,48,56,84,244,143,146,168,84,84,49,49,49,49,50,48,57,84,244,143,146,169,84,84,49,49,49,49,50,49,48,84,244,143,146,170,84,84,49,49,49,49,50,49,49,84,244,143,146,171,84,84,49,49,49,49,50,49,50,84,244,143,146,172,84,84,49,49,49,49,50,49,51,84,244,143,146,173,84,84,49,49,49,49,50,49,52,84,244,143,146,174,84,84,49,49,49,49,50,49,53,84,244,143,146,175,84,84,49,49,49,49,50,49,54,84,244,143,146,176,84,84,49,49,49,49,50,49,55,84,244,143,146,177,84,84,49,49,49,49,50,49,56,84,244,143,146,178,84,84,49,49,49,49,50,49,57,84,244,143,146,179,84,84,49,49,49,49,50,50,48,84,244,143,146,180,84,84,49,49,49,49,50,50,49,84,244,143,146,181,84,84,49,49,49,49,50,50,50,84,244,143,146,182,84,84,49,49,49,49,50,50,51,84,244,143,146,183,84,84,49,49,49,49,50,50,52,84,244,143,146,184,84,84,49,49,49,49,50,50,53,84,244,143,146,185,84,84,49,49,49,49,50,50,54,84,244,143,146,186,84,84,49,49,49,49,50,50,55,84,244,143,146,187,84,84,49,49,49,49,50,50,56,84,244,143,146,188,84,84,49,49,49,49,50,50,57,84,244,143,146,189,84,84,49,49,49,49,50,51,48,84,244,143,146,190,84,84,49,49,49,49,50,51,49,84,244,143,146,191,84,84,49,49,49,49,50,51,50,84,244,143,147,128,84,84,49,49,49,49,50,51,51,84,244,143,147,129,84,84,49,49,49,49,50,51,52,84,244,143,147,130,84,84,49,49,49,49,50,51,53,84,244,143,147,131,84,84,49,49,49,49,50,51,54,84,244,143,147,132,84,84,49,49,49,49,50,51,55,84,244,143,147,133,84,84,49,49,49,49,50,51,56,84,244,143,147,134,84,84,49,49,49,49,50,51,57,84,244,143,147,135,84,84,49,49,49,49,50,52,48,84,244,143,147,136,84,84,49,49,49,49,50,52,49,84,244,143,147,137,84,84,49,49,49,49,50,52,50,84,244,143,147,138,84,84,49,49,49,49,50,52,51,84,244,143,147,139,84,84,49,49,49,49,50,52,52,84,244,143,147,140,84,84,49,49,49,49,50,52,53,84,244,143,147,141,84,84,49,49,49,49,50,52,54,84,244,143,147,142,84,84,49,49,49,49,50,52,55,84,244,143,147,143,84,84,49,49,49,49,50,52,56,84,244,143,147,144,84,84,49,49,49,49,50,52,57,84,244,143,147,145,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22777 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22777_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22777_s.txt", Encoding.UTF8);

    public Test22777() : base(recordedRequest, recordedResponse, "accounts8d43a0490823d21")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a0490823d21",
                        container: "containers0bd48f2ce8374f57b3f3c61b5595b35b",
                        blob: "Blob780e3337140545d691c2964bcb01c4a3",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20683 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20683_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20683_s.txt", Encoding.UTF8);

    public Test20683() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers9df780a74f2549dda8f9f337dadb7946",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,56,53,53,48,52,84,244,137,129,128,84,84,49,48,56,53,53,48,53,84,244,137,129,129,84,84,49,48,56,53,53,48,54,84,244,137,129,130,84,84,49,48,56,53,53,48,55,84,244,137,129,131,84,84,49,48,56,53,53,48,56,84,244,137,129,132,84,84,49,48,56,53,53,48,57,84,244,137,129,133,84,84,49,48,56,53,53,49,48,84,244,137,129,134,84,84,49,48,56,53,53,49,49,84,244,137,129,135,84,84,49,48,56,53,53,49,50,84,244,137,129,136,84,84,49,48,56,53,53,49,51,84,244,137,129,137,84,84,49,48,56,53,53,49,52,84,244,137,129,138,84,84,49,48,56,53,53,49,53,84,244,137,129,139,84,84,49,48,56,53,53,49,54,84,244,137,129,140,84,84,49,48,56,53,53,49,55,84,244,137,129,141,84,84,49,48,56,53,53,49,56,84,244,137,129,142,84,84,49,48,56,53,53,49,57,84,244,137,129,143,84,84,49,48,56,53,53,50,48,84,244,137,129,144,84,84,49,48,56,53,53,50,49,84,244,137,129,145,84,84,49,48,56,53,53,50,50,84,244,137,129,146,84,84,49,48,56,53,53,50,51,84,244,137,129,147,84,84,49,48,56,53,53,50,52,84,244,137,129,148,84,84,49,48,56,53,53,50,53,84,244,137,129,149,84,84,49,48,56,53,53,50,54,84,244,137,129,150,84,84,49,48,56,53,53,50,55,84,244,137,129,151,84,84,49,48,56,53,53,50,56,84,244,137,129,152,84,84,49,48,56,53,53,50,57,84,244,137,129,153,84,84,49,48,56,53,53,51,48,84,244,137,129,154,84,84,49,48,56,53,53,51,49,84,244,137,129,155,84,84,49,48,56,53,53,51,50,84,244,137,129,156,84,84,49,48,56,53,53,51,51,84,244,137,129,157,84,84,49,48,56,53,53,51,52,84,244,137,129,158,84,84,49,48,56,53,53,51,53,84,244,137,129,159,84,84,49,48,56,53,53,51,54,84,244,137,129,160,84,84,49,48,56,53,53,51,55,84,244,137,129,161,84,84,49,48,56,53,53,51,56,84,244,137,129,162,84,84,49,48,56,53,53,51,57,84,244,137,129,163,84,84,49,48,56,53,53,52,48,84,244,137,129,164,84,84,49,48,56,53,53,52,49,84,244,137,129,165,84,84,49,48,56,53,53,52,50,84,244,137,129,166,84,84,49,48,56,53,53,52,51,84,244,137,129,167,84,84,49,48,56,53,53,52,52,84,244,137,129,168,84,84,49,48,56,53,53,52,53,84,244,137,129,169,84,84,49,48,56,53,53,52,54,84,244,137,129,170,84,84,49,48,56,53,53,52,55,84,244,137,129,171,84,84,49,48,56,53,53,52,56,84,244,137,129,172,84,84,49,48,56,53,53,52,57,84,244,137,129,173,84,84,49,48,56,53,53,53,48,84,244,137,129,174,84,84,49,48,56,53,53,53,49,84,244,137,129,175,84,84,49,48,56,53,53,53,50,84,244,137,129,176,84,84,49,48,56,53,53,53,51,84,244,137,129,177,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20622 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20622_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20622_s.txt", Encoding.UTF8);

    public Test20622() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers5f5b393ed8e742338d6031fb2e225092",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,55,53,48,50,55,84,244,134,157,147,84,84,49,48,55,53,48,50,56,84,244,134,157,148,84,84,49,48,55,53,48,50,57,84,244,134,157,149,84,84,49,48,55,53,48,51,48,84,244,134,157,150,84,84,49,48,55,53,48,51,49,84,244,134,157,151,84,84,49,48,55,53,48,51,50,84,244,134,157,152,84,84,49,48,55,53,48,51,51,84,244,134,157,153,84,84,49,48,55,53,48,51,52,84,244,134,157,154,84,84,49,48,55,53,48,51,53,84,244,134,157,155,84,84,49,48,55,53,48,51,54,84,244,134,157,156,84,84,49,48,55,53,48,51,55,84,244,134,157,157,84,84,49,48,55,53,48,51,56,84,244,134,157,158,84,84,49,48,55,53,48,51,57,84,244,134,157,159,84,84,49,48,55,53,48,52,48,84,244,134,157,160,84,84,49,48,55,53,48,52,49,84,244,134,157,161,84,84,49,48,55,53,48,52,50,84,244,134,157,162,84,84,49,48,55,53,48,52,51,84,244,134,157,163,84,84,49,48,55,53,48,52,52,84,244,134,157,164,84,84,49,48,55,53,48,52,53,84,244,134,157,165,84,84,49,48,55,53,48,52,54,84,244,134,157,166,84,84,49,48,55,53,48,52,55,84,244,134,157,167,84,84,49,48,55,53,48,52,56,84,244,134,157,168,84,84,49,48,55,53,48,52,57,84,244,134,157,169,84,84,49,48,55,53,48,53,48,84,244,134,157,170,84,84,49,48,55,53,48,53,49,84,244,134,157,171,84,84,49,48,55,53,48,53,50,84,244,134,157,172,84,84,49,48,55,53,48,53,51,84,244,134,157,173,84,84,49,48,55,53,48,53,52,84,244,134,157,174,84,84,49,48,55,53,48,53,53,84,244,134,157,175,84,84,49,48,55,53,48,53,54,84,244,134,157,176,84,84,49,48,55,53,48,53,55,84,244,134,157,177,84,84,49,48,55,53,48,53,56,84,244,134,157,178,84,84,49,48,55,53,48,53,57,84,244,134,157,179,84,84,49,48,55,53,48,54,48,84,244,134,157,180,84,84,49,48,55,53,48,54,49,84,244,134,157,181,84,84,49,48,55,53,48,54,50,84,244,134,157,182,84,84,49,48,55,53,48,54,51,84,244,134,157,183,84,84,49,48,55,53,48,54,52,84,244,134,157,184,84,84,49,48,55,53,48,54,53,84,244,134,157,185,84,84,49,48,55,53,48,54,54,84,244,134,157,186,84,84,49,48,55,53,48,54,55,84,244,134,157,187,84,84,49,48,55,53,48,54,56,84,244,134,157,188,84,84,49,48,55,53,48,54,57,84,244,134,157,189,84,84,49,48,55,53,48,55,48,84,244,134,157,190,84,84,49,48,55,53,48,55,49,84,244,134,157,191,84,84,49,48,55,53,48,55,51,84,244,134,158,129,84,84,49,48,55,53,48,56,53,84,244,134,158,141,84,84,49,48,55,53,48,56,55,84,244,134,158,143,84,84,49,48,55,53,48,56,56,84,244,134,158,144,84,84,49,48,55,53,49,48,49,84,244,134,158,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20396 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20396_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20396_s.txt", Encoding.UTF8);

    public Test20396() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers7f83ba854dc4459da9078f97f691d28c",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,52,51,50,56,84,244,129,153,184,84,84,49,48,53,52,51,50,57,84,244,129,153,185,84,84,49,48,53,52,51,51,48,84,244,129,153,186,84,84,49,48,53,52,51,51,49,84,244,129,153,187,84,84,49,48,53,52,51,51,50,84,244,129,153,188,84,84,49,48,53,52,51,51,51,84,244,129,153,189,84,84,49,48,53,52,51,51,52,84,244,129,153,190,84,84,49,48,53,52,51,51,53,84,244,129,153,191,84,84,49,48,53,52,51,51,54,84,244,129,154,128,84,84,49,48,53,52,51,51,55,84,244,129,154,129,84,84,49,48,53,52,51,51,56,84,244,129,154,130,84,84,49,48,53,52,51,51,57,84,244,129,154,131,84,84,49,48,53,52,51,52,48,84,244,129,154,132,84,84,49,48,53,52,51,52,49,84,244,129,154,133,84,84,49,48,53,52,51,52,50,84,244,129,154,134,84,84,49,48,53,52,51,52,51,84,244,129,154,135,84,84,49,48,53,52,51,52,52,84,244,129,154,136,84,84,49,48,53,52,51,52,53,84,244,129,154,137,84,84,49,48,53,52,51,52,54,84,244,129,154,138,84,84,49,48,53,52,51,52,55,84,244,129,154,139,84,84,49,48,53,52,51,52,56,84,244,129,154,140,84,84,49,48,53,52,51,52,57,84,244,129,154,141,84,84,49,48,53,52,51,53,48,84,244,129,154,142,84,84,49,48,53,52,51,53,49,84,244,129,154,143,84,84,49,48,53,52,51,53,50,84,244,129,154,144,84,84,49,48,53,52,51,53,51,84,244,129,154,145,84,84,49,48,53,52,51,53,52,84,244,129,154,146,84,84,49,48,53,52,51,53,53,84,244,129,154,147,84,84,49,48,53,52,51,53,54,84,244,129,154,148,84,84,49,48,53,52,51,53,55,84,244,129,154,149,84,84,49,48,53,52,51,53,56,84,244,129,154,150,84,84,49,48,53,52,51,53,57,84,244,129,154,151,84,84,49,48,53,52,51,54,48,84,244,129,154,152,84,84,49,48,53,52,51,54,49,84,244,129,154,153,84,84,49,48,53,52,51,54,50,84,244,129,154,154,84,84,49,48,53,52,51,54,51,84,244,129,154,155,84,84,49,48,53,52,51,54,52,84,244,129,154,156,84,84,49,48,53,52,51,54,53,84,244,129,154,157,84,84,49,48,53,52,51,54,54,84,244,129,154,158,84,84,49,48,53,52,51,54,55,84,244,129,154,159,84,84,49,48,53,52,51,54,56,84,244,129,154,160,84,84,49,48,53,52,51,54,57,84,244,129,154,161,84,84,49,48,53,52,51,55,48,84,244,129,154,162,84,84,49,48,53,52,51,55,49,84,244,129,154,163,84,84,49,48,53,52,51,55,50,84,244,129,154,164,84,84,49,48,53,52,51,55,51,84,244,129,154,165,84,84,49,48,53,52,51,55,52,84,244,129,154,166,84,84,49,48,53,52,51,55,53,84,244,129,154,167,84,84,49,48,53,52,51,55,54,84,244,129,154,168,84,84,49,48,53,52,51,55,55,84,244,129,154,169,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20554 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20554_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20554_s.txt", Encoding.UTF8);

    public Test20554() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers169b02be047c4c76acbb586fdc8886c6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,54,53,50,50,57,84,244,132,132,141,84,84,49,48,54,53,50,51,49,84,244,132,132,143,84,84,49,48,54,53,50,51,50,84,244,132,132,144,84,84,49,48,54,53,50,52,53,84,244,132,132,157,84,84,49,48,54,53,50,56,49,84,244,132,133,129,84,84,49,48,54,53,50,57,51,84,244,132,133,141,84,84,49,48,54,53,50,57,53,84,244,132,133,143,84,84,49,48,54,53,50,57,54,84,244,132,133,144,84,84,49,48,54,53,51,48,57,84,244,132,133,157,84,84,49,48,54,53,51,52,53,84,244,132,134,129,84,84,49,48,54,53,51,53,55,84,244,132,134,141,84,84,49,48,54,53,51,53,57,84,244,132,134,143,84,84,49,48,54,53,51,54,48,84,244,132,134,144,84,84,49,48,54,53,51,55,51,84,244,132,134,157,84,84,49,48,54,53,52,48,57,84,244,132,135,129,84,84,49,48,54,53,52,50,49,84,244,132,135,141,84,84,49,48,54,53,52,50,51,84,244,132,135,143,84,84,49,48,54,53,52,50,52,84,244,132,135,144,84,84,49,48,54,53,52,51,55,84,244,132,135,157,84,84,49,48,54,53,52,55,51,84,244,132,136,129,84,84,49,48,54,53,52,56,53,84,244,132,136,141,84,84,49,48,54,53,52,56,55,84,244,132,136,143,84,84,49,48,54,53,52,56,56,84,244,132,136,144,84,84,49,48,54,53,53,48,49,84,244,132,136,157,84,84,49,48,54,53,53,51,55,84,244,132,137,129,84,84,49,48,54,53,53,52,57,84,244,132,137,141,84,84,49,48,54,53,53,53,49,84,244,132,137,143,84,84,49,48,54,53,53,53,50,84,244,132,137,144,84,84,49,48,54,53,53,54,53,84,244,132,137,157,84,84,49,48,54,53,54,48,49,84,244,132,138,129,84,84,49,48,54,53,54,49,51,84,244,132,138,141,84,84,49,48,54,53,54,49,53,84,244,132,138,143,84,84,49,48,54,53,54,49,54,84,244,132,138,144,84,84,49,48,54,53,54,50,57,84,244,132,138,157,84,84,49,48,54,53,54,54,53,84,244,132,139,129,84,84,49,48,54,53,54,55,55,84,244,132,139,141,84,84,49,48,54,53,54,55,57,84,244,132,139,143,84,84,49,48,54,53,54,56,48,84,244,132,139,144,84,84,49,48,54,53,54,57,51,84,244,132,139,157,84,84,49,48,54,53,55,50,57,84,244,132,140,129,84,84,49,48,54,53,55,52,49,84,244,132,140,141,84,84,49,48,54,53,55,52,51,84,244,132,140,143,84,84,49,48,54,53,55,52,52,84,244,132,140,144,84,84,49,48,54,53,55,53,55,84,244,132,140,157,84,84,49,48,54,53,55,57,50,84,244,132,141,128,84,84,49,48,54,53,55,57,51,84,244,132,141,129,84,84,49,48,54,53,55,57,52,84,244,132,141,130,84,84,49,48,54,53,55,57,53,84,244,132,141,131,84,84,49,48,54,53,55,57,54,84,244,132,141,132,84,84,49,48,54,53,55,57,55,84,244,132,141,133,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22804 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22804_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22804_s.txt", Encoding.UTF8);

    public Test22804() : base(recordedRequest, recordedResponse, "accounts8d43a0490823d21")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a0490823d21",
                        container: "containers0bd48f2ce8374f57b3f3c61b5595b35b",
                        blob: "Blob55c88275df154a988b02ed90700b15b4",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22778 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22778_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22778_s.txt", Encoding.UTF8);

    public Test22778() : base(recordedRequest, recordedResponse, "accounts8d43a0490823d21")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a0490823d21",
                        container: "containers0bd48f2ce8374f57b3f3c61b5595b35b",
                        blob: "Blob7f77194646f34958acbee98f70607061",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20015 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20015_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20015_s.txt", Encoding.UTF8);

    public Test20015() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers612d6939acd44cdbbba30cffbd18a713",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,48,51,54,49,53,84,243,181,129,159,84,84,49,48,48,51,54,49,54,84,243,181,129,160,84,84,49,48,48,51,54,49,55,84,243,181,129,161,84,84,49,48,48,51,54,49,56,84,243,181,129,162,84,84,49,48,48,51,54,49,57,84,243,181,129,163,84,84,49,48,48,51,54,50,48,84,243,181,129,164,84,84,49,48,48,51,54,50,49,84,243,181,129,165,84,84,49,48,48,51,54,50,50,84,243,181,129,166,84,84,49,48,48,51,54,50,51,84,243,181,129,167,84,84,49,48,48,51,54,50,52,84,243,181,129,168,84,84,49,48,48,51,54,50,53,84,243,181,129,169,84,84,49,48,48,51,54,50,54,84,243,181,129,170,84,84,49,48,48,51,54,50,55,84,243,181,129,171,84,84,49,48,48,51,54,50,56,84,243,181,129,172,84,84,49,48,48,51,54,50,57,84,243,181,129,173,84,84,49,48,48,51,54,51,48,84,243,181,129,174,84,84,49,48,48,51,54,51,49,84,243,181,129,175,84,84,49,48,48,51,54,51,50,84,243,181,129,176,84,84,49,48,48,51,54,51,51,84,243,181,129,177,84,84,49,48,48,51,54,51,52,84,243,181,129,178,84,84,49,48,48,51,54,51,53,84,243,181,129,179,84,84,49,48,48,51,54,51,54,84,243,181,129,180,84,84,49,48,48,51,54,51,55,84,243,181,129,181,84,84,49,48,48,51,54,51,56,84,243,181,129,182,84,84,49,48,48,51,54,51,57,84,243,181,129,183,84,84,49,48,48,51,54,52,48,84,243,181,129,184,84,84,49,48,48,51,54,52,49,84,243,181,129,185,84,84,49,48,48,51,54,52,50,84,243,181,129,186,84,84,49,48,48,51,54,52,51,84,243,181,129,187,84,84,49,48,48,51,54,52,52,84,243,181,129,188,84,84,49,48,48,51,54,52,53,84,243,181,129,189,84,84,49,48,48,51,54,52,54,84,243,181,129,190,84,84,49,48,48,51,54,52,55,84,243,181,129,191,84,84,49,48,48,51,54,52,57,84,243,181,130,129,84,84,49,48,48,51,54,54,49,84,243,181,130,141,84,84,49,48,48,51,54,54,51,84,243,181,130,143,84,84,49,48,48,51,54,54,52,84,243,181,130,144,84,84,49,48,48,51,54,55,55,84,243,181,130,157,84,84,49,48,48,51,55,49,51,84,243,181,131,129,84,84,49,48,48,51,55,50,53,84,243,181,131,141,84,84,49,48,48,51,55,50,55,84,243,181,131,143,84,84,49,48,48,51,55,50,56,84,243,181,131,144,84,84,49,48,48,51,55,52,49,84,243,181,131,157,84,84,49,48,48,51,55,55,55,84,243,181,132,129,84,84,49,48,48,51,55,56,57,84,243,181,132,141,84,84,49,48,48,51,55,57,49,84,243,181,132,143,84,84,49,48,48,51,55,57,50,84,243,181,132,144,84,84,49,48,48,51,56,48,53,84,243,181,132,157,84,84,49,48,48,51,56,52,49,84,243,181,133,129,84,84,49,48,48,51,56,53,51,84,243,181,133,141,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19892 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19892_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19892_s.txt", Encoding.UTF8);

    public Test19892() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersf0a96ab3064046f8a2fc77e6e3ebae9e",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,56,52,48,49,56,84,243,176,143,146,84,84,57,56,52,48,49,57,84,243,176,143,147,84,84,57,56,52,48,50,48,84,243,176,143,148,84,84,57,56,52,48,50,49,84,243,176,143,149,84,84,57,56,52,48,50,50,84,243,176,143,150,84,84,57,56,52,48,50,51,84,243,176,143,151,84,84,57,56,52,48,50,52,84,243,176,143,152,84,84,57,56,52,48,50,53,84,243,176,143,153,84,84,57,56,52,48,50,54,84,243,176,143,154,84,84,57,56,52,48,50,55,84,243,176,143,155,84,84,57,56,52,48,50,56,84,243,176,143,156,84,84,57,56,52,48,50,57,84,243,176,143,157,84,84,57,56,52,48,51,48,84,243,176,143,158,84,84,57,56,52,48,51,49,84,243,176,143,159,84,84,57,56,52,48,51,50,84,243,176,143,160,84,84,57,56,52,48,51,51,84,243,176,143,161,84,84,57,56,52,48,51,52,84,243,176,143,162,84,84,57,56,52,48,51,53,84,243,176,143,163,84,84,57,56,52,48,51,54,84,243,176,143,164,84,84,57,56,52,48,51,55,84,243,176,143,165,84,84,57,56,52,48,51,56,84,243,176,143,166,84,84,57,56,52,48,51,57,84,243,176,143,167,84,84,57,56,52,48,52,48,84,243,176,143,168,84,84,57,56,52,48,52,49,84,243,176,143,169,84,84,57,56,52,48,52,50,84,243,176,143,170,84,84,57,56,52,48,52,51,84,243,176,143,171,84,84,57,56,52,48,52,52,84,243,176,143,172,84,84,57,56,52,48,52,53,84,243,176,143,173,84,84,57,56,52,48,52,54,84,243,176,143,174,84,84,57,56,52,48,52,55,84,243,176,143,175,84,84,57,56,52,48,52,56,84,243,176,143,176,84,84,57,56,52,48,52,57,84,243,176,143,177,84,84,57,56,52,48,53,48,84,243,176,143,178,84,84,57,56,52,48,53,49,84,243,176,143,179,84,84,57,56,52,48,53,50,84,243,176,143,180,84,84,57,56,52,48,53,51,84,243,176,143,181,84,84,57,56,52,48,53,52,84,243,176,143,182,84,84,57,56,52,48,53,53,84,243,176,143,183,84,84,57,56,52,48,53,54,84,243,176,143,184,84,84,57,56,52,48,53,55,84,243,176,143,185,84,84,57,56,52,48,53,56,84,243,176,143,186,84,84,57,56,52,48,53,57,84,243,176,143,187,84,84,57,56,52,48,54,48,84,243,176,143,188,84,84,57,56,52,48,54,49,84,243,176,143,189,84,84,57,56,52,48,54,50,84,243,176,143,190,84,84,57,56,52,48,54,51,84,243,176,143,191,84,84,57,56,52,48,54,52,84,243,176,144,128,84,84,57,56,52,48,54,53,84,243,176,144,129,84,84,57,56,52,48,54,54,84,243,176,144,130,84,84,57,56,52,48,54,55,84,243,176,144,131,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20116 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20116_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20116_s.txt", Encoding.UTF8);

    public Test20116() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers02552a2396c44255a61dd19b9714b3b6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,49,57,53,57,55,84,243,184,187,141,84,84,49,48,49,57,53,57,57,84,243,184,187,143,84,84,49,48,49,57,54,48,48,84,243,184,187,144,84,84,49,48,49,57,54,49,51,84,243,184,187,157,84,84,49,48,49,57,54,52,57,84,243,184,188,129,84,84,49,48,49,57,54,54,49,84,243,184,188,141,84,84,49,48,49,57,54,54,51,84,243,184,188,143,84,84,49,48,49,57,54,54,52,84,243,184,188,144,84,84,49,48,49,57,54,55,55,84,243,184,188,157,84,84,49,48,49,57,55,49,51,84,243,184,189,129,84,84,49,48,49,57,55,50,53,84,243,184,189,141,84,84,49,48,49,57,55,50,55,84,243,184,189,143,84,84,49,48,49,57,55,50,56,84,243,184,189,144,84,84,49,48,49,57,55,52,49,84,243,184,189,157,84,84,49,48,49,57,55,55,55,84,243,184,190,129,84,84,49,48,49,57,55,56,57,84,243,184,190,141,84,84,49,48,49,57,55,57,49,84,243,184,190,143,84,84,49,48,49,57,55,57,50,84,243,184,190,144,84,84,49,48,49,57,56,48,53,84,243,184,190,157,84,84,49,48,49,57,56,52,49,84,243,184,191,129,84,84,49,48,49,57,56,53,51,84,243,184,191,141,84,84,49,48,49,57,56,53,53,84,243,184,191,143,84,84,49,48,49,57,56,53,54,84,243,184,191,144,84,84,49,48,49,57,56,54,57,84,243,184,191,157,84,84,49,48,49,57,57,48,53,84,243,185,128,129,84,84,49,48,49,57,57,49,55,84,243,185,128,141,84,84,49,48,49,57,57,49,57,84,243,185,128,143,84,84,49,48,49,57,57,50,48,84,243,185,128,144,84,84,49,48,49,57,57,51,51,84,243,185,128,157,84,84,49,48,49,57,57,54,56,84,243,185,129,128,84,84,49,48,49,57,57,54,57,84,243,185,129,129,84,84,49,48,49,57,57,55,48,84,243,185,129,130,84,84,49,48,49,57,57,55,49,84,243,185,129,131,84,84,49,48,49,57,57,55,50,84,243,185,129,132,84,84,49,48,49,57,57,55,51,84,243,185,129,133,84,84,49,48,49,57,57,55,52,84,243,185,129,134,84,84,49,48,49,57,57,55,53,84,243,185,129,135,84,84,49,48,49,57,57,55,54,84,243,185,129,136,84,84,49,48,49,57,57,55,55,84,243,185,129,137,84,84,49,48,49,57,57,55,56,84,243,185,129,138,84,84,49,48,49,57,57,55,57,84,243,185,129,139,84,84,49,48,49,57,57,56,48,84,243,185,129,140,84,84,49,48,49,57,57,56,49,84,243,185,129,141,84,84,49,48,49,57,57,56,50,84,243,185,129,142,84,84,49,48,49,57,57,56,51,84,243,185,129,143,84,84,49,48,49,57,57,56,52,84,243,185,129,144,84,84,49,48,49,57,57,56,53,84,243,185,129,145,84,84,49,48,49,57,57,56,54,84,243,185,129,146,84,84,49,48,49,57,57,56,55,84,243,185,129,147,84,84,49,48,49,57,57,56,56,84,243,185,129,148,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21167 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21167_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21167_s.txt", Encoding.UTF8);

    public Test21167() : base(recordedRequest, recordedResponse, "accounts8d43a03d4f63376")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a03d4f63376",
                        container: "containers6cc7bb67214a45ff85922f947c8569a0",
                        blob: Encoding.UTF8.GetString(new byte[]{84,56,52,84,84,84,84,56,53,84,85,84,84,56,54,84,86,84,84,56,55,84,87,84,84,56,56,84,88,84,84,56,57,84,89,84,84,57,48,84,90,84,84,57,49,84,91,84,84,57,51,84,93,84,84,57,52,84,94,84,84,57,53,84,95,84,84,57,54,84,96,84,84,57,55,84,97,84,84,57,56,84,98,84,84,57,57,84,99,84,84,49,48,48,84,100,84,84,49,48,49,84,101,84,84,49,48,50,84,102,84,84,49,48,51,84,103,84,84,49,48,52,84,104,84,84,49,48,53,84,105,84,84,49,48,54,84,106,84,84,49,48,55,84,107,84,84,49,48,56,84,108,84,84,49,48,57,84,109,84,84,49,49,48,84,110,84,84,49,49,49,84,111,84,84,49,49,50,84,112,84,84,49,49,51,84,113,84,84,49,49,52,84,114,84,84,49,49,53,84,115,84,84,49,49,54,84,116,84,84,49,49,55,84,117,84,84,49,49,56,84,118,84,84,49,49,57,84,119,84,84,49,50,48,84,120,84,84,49,50,49,84,121,84,84,49,50,50,84,122,84,84,49,50,51,84,123,84,84,49,50,52,84,124,84,84,49,50,53,84,125,84,84,49,50,54,84,126,84,84,49,50,56,84,194,128,84,84,49,51,48,84,194,130,84,84,49,51,49,84,194,131,84,84,49,51,50,84,194,132,84,84,49,51,51,84,194,133,84,84,49,51,52,84,194,134,84,84,49,51,53,84,194,135,84,84,49,51,54,84,194,136,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20078 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20078_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20078_s.txt", Encoding.UTF8);

    public Test20078() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersb3c703c6e551430d9c914c24c3792dd5",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,49,50,55,56,53,84,243,183,144,177,84,84,49,48,49,50,55,56,54,84,243,183,144,178,84,84,49,48,49,50,55,56,55,84,243,183,144,179,84,84,49,48,49,50,55,56,56,84,243,183,144,180,84,84,49,48,49,50,55,56,57,84,243,183,144,181,84,84,49,48,49,50,55,57,48,84,243,183,144,182,84,84,49,48,49,50,55,57,49,84,243,183,144,183,84,84,49,48,49,50,55,57,50,84,243,183,144,184,84,84,49,48,49,50,55,57,51,84,243,183,144,185,84,84,49,48,49,50,55,57,52,84,243,183,144,186,84,84,49,48,49,50,55,57,53,84,243,183,144,187,84,84,49,48,49,50,55,57,54,84,243,183,144,188,84,84,49,48,49,50,55,57,55,84,243,183,144,189,84,84,49,48,49,50,55,57,56,84,243,183,144,190,84,84,49,48,49,50,55,57,57,84,243,183,144,191,84,84,49,48,49,50,56,48,49,84,243,183,145,129,84,84,49,48,49,50,56,49,51,84,243,183,145,141,84,84,49,48,49,50,56,49,53,84,243,183,145,143,84,84,49,48,49,50,56,49,54,84,243,183,145,144,84,84,49,48,49,50,56,50,57,84,243,183,145,157,84,84,49,48,49,50,56,54,53,84,243,183,146,129,84,84,49,48,49,50,56,55,55,84,243,183,146,141,84,84,49,48,49,50,56,55,57,84,243,183,146,143,84,84,49,48,49,50,56,56,48,84,243,183,146,144,84,84,49,48,49,50,56,57,51,84,243,183,146,157,84,84,49,48,49,50,57,50,57,84,243,183,147,129,84,84,49,48,49,50,57,52,49,84,243,183,147,141,84,84,49,48,49,50,57,52,51,84,243,183,147,143,84,84,49,48,49,50,57,52,52,84,243,183,147,144,84,84,49,48,49,50,57,53,55,84,243,183,147,157,84,84,49,48,49,50,57,57,51,84,243,183,148,129,84,84,49,48,49,51,48,48,53,84,243,183,148,141,84,84,49,48,49,51,48,48,55,84,243,183,148,143,84,84,49,48,49,51,48,48,56,84,243,183,148,144,84,84,49,48,49,51,48,50,49,84,243,183,148,157,84,84,49,48,49,51,48,53,55,84,243,183,149,129,84,84,49,48,49,51,48,54,57,84,243,183,149,141,84,84,49,48,49,51,48,55,49,84,243,183,149,143,84,84,49,48,49,51,48,55,50,84,243,183,149,144,84,84,49,48,49,51,48,56,53,84,243,183,149,157,84,84,49,48,49,51,49,50,49,84,243,183,150,129,84,84,49,48,49,51,49,51,51,84,243,183,150,141,84,84,49,48,49,51,49,51,53,84,243,183,150,143,84,84,49,48,49,51,49,51,54,84,243,183,150,144,84,84,49,48,49,51,49,52,57,84,243,183,150,157,84,84,49,48,49,51,49,56,53,84,243,183,151,129,84,84,49,48,49,51,49,57,55,84,243,183,151,141,84,84,49,48,49,51,49,57,57,84,243,183,151,143,84,84,49,48,49,51,50,48,48,84,243,183,151,144,84,84,49,48,49,51,50,49,51,84,243,183,151,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19822 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19822_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19822_s.txt", Encoding.UTF8);

    public Test19822() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers3d1fce2fe43b489ca49e5d4066014499",
                        blob: Encoding.UTF8.GetString(new byte[]{84,53,57,50,51,49,84,238,157,159,84,84,53,57,50,51,50,84,238,157,160,84,84,53,57,50,51,51,84,238,157,161,84,84,53,57,50,51,52,84,238,157,162,84,84,53,57,50,51,53,84,238,157,163,84,84,53,57,50,51,54,84,238,157,164,84,84,53,57,50,51,55,84,238,157,165,84,84,53,57,50,51,56,84,238,157,166,84,84,53,57,50,51,57,84,238,157,167,84,84,53,57,50,52,48,84,238,157,168,84,84,53,57,50,52,49,84,238,157,169,84,84,53,57,50,52,50,84,238,157,170,84,84,53,57,50,52,51,84,238,157,171,84,84,53,57,50,52,52,84,238,157,172,84,84,53,57,50,52,53,84,238,157,173,84,84,53,57,50,52,54,84,238,157,174,84,84,53,57,50,52,55,84,238,157,175,84,84,53,57,50,52,56,84,238,157,176,84,84,53,57,50,52,57,84,238,157,177,84,84,53,57,50,53,48,84,238,157,178,84,84,53,57,50,53,49,84,238,157,179,84,84,53,57,50,53,50,84,238,157,180,84,84,53,57,50,53,51,84,238,157,181,84,84,53,57,50,53,52,84,238,157,182,84,84,53,57,50,53,53,84,238,157,183,84,84,53,57,50,53,54,84,238,157,184,84,84,53,57,50,53,55,84,238,157,185,84,84,53,57,50,53,56,84,238,157,186,84,84,53,57,50,53,57,84,238,157,187,84,84,53,57,50,54,48,84,238,157,188,84,84,53,57,50,54,49,84,238,157,189,84,84,53,57,50,54,50,84,238,157,190,84,84,53,57,50,54,51,84,238,157,191,84,84,53,57,50,54,53,84,238,158,129,84,84,53,57,50,55,55,84,238,158,141,84,84,53,57,50,55,57,84,238,158,143,84,84,53,57,50,56,48,84,238,158,144,84,84,53,57,50,57,51,84,238,158,157,84,84,53,57,51,50,57,84,238,159,129,84,84,53,57,51,52,49,84,238,159,141,84,84,53,57,51,52,51,84,238,159,143,84,84,53,57,51,52,52,84,238,159,144,84,84,53,57,51,53,55,84,238,159,157,84,84,53,57,51,57,51,84,238,160,129,84,84,53,57,52,48,53,84,238,160,141,84,84,53,57,52,48,55,84,238,160,143,84,84,53,57,52,48,56,84,238,160,144,84,84,53,57,52,50,49,84,238,160,157,84,84,53,57,52,53,55,84,238,161,129,84,84,53,57,52,54,57,84,238,161,141,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22805 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22805_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22805_s.txt", Encoding.UTF8);

    public Test22805() : base(recordedRequest, recordedResponse, "accounts8d43a0490823d21")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a0490823d21",
                        container: "containers0bd48f2ce8374f57b3f3c61b5595b35b",
                        blob: "Blobc8f807f35343459e9c7e0eef94a07bdb",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21098 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21098_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21098_s.txt", Encoding.UTF8);

    public Test21098() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers79aa3dd90e344ebe9466f3cb0c56378a",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,50,54,53,48,84,244,143,169,138,84,84,49,49,49,50,54,53,49,84,244,143,169,139,84,84,49,49,49,50,54,53,50,84,244,143,169,140,84,84,49,49,49,50,54,53,51,84,244,143,169,141,84,84,49,49,49,50,54,53,52,84,244,143,169,142,84,84,49,49,49,50,54,53,53,84,244,143,169,143,84,84,49,49,49,50,54,53,54,84,244,143,169,144,84,84,49,49,49,50,54,53,55,84,244,143,169,145,84,84,49,49,49,50,54,53,56,84,244,143,169,146,84,84,49,49,49,50,54,53,57,84,244,143,169,147,84,84,49,49,49,50,54,54,48,84,244,143,169,148,84,84,49,49,49,50,54,54,49,84,244,143,169,149,84,84,49,49,49,50,54,54,50,84,244,143,169,150,84,84,49,49,49,50,54,54,51,84,244,143,169,151,84,84,49,49,49,50,54,54,52,84,244,143,169,152,84,84,49,49,49,50,54,54,53,84,244,143,169,153,84,84,49,49,49,50,54,54,54,84,244,143,169,154,84,84,49,49,49,50,54,54,55,84,244,143,169,155,84,84,49,49,49,50,54,54,56,84,244,143,169,156,84,84,49,49,49,50,54,54,57,84,244,143,169,157,84,84,49,49,49,50,54,55,48,84,244,143,169,158,84,84,49,49,49,50,54,55,49,84,244,143,169,159,84,84,49,49,49,50,54,55,50,84,244,143,169,160,84,84,49,49,49,50,54,55,51,84,244,143,169,161,84,84,49,49,49,50,54,55,52,84,244,143,169,162,84,84,49,49,49,50,54,55,53,84,244,143,169,163,84,84,49,49,49,50,54,55,54,84,244,143,169,164,84,84,49,49,49,50,54,55,55,84,244,143,169,165,84,84,49,49,49,50,54,55,56,84,244,143,169,166,84,84,49,49,49,50,54,55,57,84,244,143,169,167,84,84,49,49,49,50,54,56,48,84,244,143,169,168,84,84,49,49,49,50,54,56,49,84,244,143,169,169,84,84,49,49,49,50,54,56,50,84,244,143,169,170,84,84,49,49,49,50,54,56,51,84,244,143,169,171,84,84,49,49,49,50,54,56,52,84,244,143,169,172,84,84,49,49,49,50,54,56,53,84,244,143,169,173,84,84,49,49,49,50,54,56,54,84,244,143,169,174,84,84,49,49,49,50,54,56,55,84,244,143,169,175,84,84,49,49,49,50,54,56,56,84,244,143,169,176,84,84,49,49,49,50,54,56,57,84,244,143,169,177,84,84,49,49,49,50,54,57,48,84,244,143,169,178,84,84,49,49,49,50,54,57,49,84,244,143,169,179,84,84,49,49,49,50,54,57,50,84,244,143,169,180,84,84,49,49,49,50,54,57,51,84,244,143,169,181,84,84,49,49,49,50,54,57,52,84,244,143,169,182,84,84,49,49,49,50,54,57,53,84,244,143,169,183,84,84,49,49,49,50,54,57,54,84,244,143,169,184,84,84,49,49,49,50,54,57,55,84,244,143,169,185,84,84,49,49,49,50,54,57,56,84,244,143,169,186,84,84,49,49,49,50,54,57,57,84,244,143,169,187,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20173 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20173_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20173_s.txt", Encoding.UTF8);

    public Test20173() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers4f3362aed9424bd2bfac6751ee820ab9",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,50,56,53,53,57,84,243,187,135,143,84,84,49,48,50,56,53,54,48,84,243,187,135,144,84,84,49,48,50,56,53,55,51,84,243,187,135,157,84,84,49,48,50,56,54,48,57,84,243,187,136,129,84,84,49,48,50,56,54,50,49,84,243,187,136,141,84,84,49,48,50,56,54,50,51,84,243,187,136,143,84,84,49,48,50,56,54,50,52,84,243,187,136,144,84,84,49,48,50,56,54,51,55,84,243,187,136,157,84,84,49,48,50,56,54,55,51,84,243,187,137,129,84,84,49,48,50,56,54,56,53,84,243,187,137,141,84,84,49,48,50,56,54,56,55,84,243,187,137,143,84,84,49,48,50,56,54,56,56,84,243,187,137,144,84,84,49,48,50,56,55,48,49,84,243,187,137,157,84,84,49,48,50,56,55,51,55,84,243,187,138,129,84,84,49,48,50,56,55,52,57,84,243,187,138,141,84,84,49,48,50,56,55,53,49,84,243,187,138,143,84,84,49,48,50,56,55,53,50,84,243,187,138,144,84,84,49,48,50,56,55,54,53,84,243,187,138,157,84,84,49,48,50,56,56,48,49,84,243,187,139,129,84,84,49,48,50,56,56,49,51,84,243,187,139,141,84,84,49,48,50,56,56,49,53,84,243,187,139,143,84,84,49,48,50,56,56,49,54,84,243,187,139,144,84,84,49,48,50,56,56,50,57,84,243,187,139,157,84,84,49,48,50,56,56,54,53,84,243,187,140,129,84,84,49,48,50,56,56,55,55,84,243,187,140,141,84,84,49,48,50,56,56,55,57,84,243,187,140,143,84,84,49,48,50,56,56,56,48,84,243,187,140,144,84,84,49,48,50,56,56,57,51,84,243,187,140,157,84,84,49,48,50,56,57,50,56,84,243,187,141,128,84,84,49,48,50,56,57,50,57,84,243,187,141,129,84,84,49,48,50,56,57,51,48,84,243,187,141,130,84,84,49,48,50,56,57,51,49,84,243,187,141,131,84,84,49,48,50,56,57,51,50,84,243,187,141,132,84,84,49,48,50,56,57,51,51,84,243,187,141,133,84,84,49,48,50,56,57,51,52,84,243,187,141,134,84,84,49,48,50,56,57,51,53,84,243,187,141,135,84,84,49,48,50,56,57,51,54,84,243,187,141,136,84,84,49,48,50,56,57,51,55,84,243,187,141,137,84,84,49,48,50,56,57,51,56,84,243,187,141,138,84,84,49,48,50,56,57,51,57,84,243,187,141,139,84,84,49,48,50,56,57,52,48,84,243,187,141,140,84,84,49,48,50,56,57,52,49,84,243,187,141,141,84,84,49,48,50,56,57,52,50,84,243,187,141,142,84,84,49,48,50,56,57,52,51,84,243,187,141,143,84,84,49,48,50,56,57,52,52,84,243,187,141,144,84,84,49,48,50,56,57,52,53,84,243,187,141,145,84,84,49,48,50,56,57,52,54,84,243,187,141,146,84,84,49,48,50,56,57,52,55,84,243,187,141,147,84,84,49,48,50,56,57,52,56,84,243,187,141,148,84,84,49,48,50,56,57,52,57,84,243,187,141,149,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20971 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20971_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20971_s.txt", Encoding.UTF8);

    public Test20971() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersdf87e0f5374149afa792ac52b484870e",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,54,57,51,54,84,244,142,143,184,84,84,49,49,48,54,57,51,55,84,244,142,143,185,84,84,49,49,48,54,57,51,56,84,244,142,143,186,84,84,49,49,48,54,57,51,57,84,244,142,143,187,84,84,49,49,48,54,57,52,48,84,244,142,143,188,84,84,49,49,48,54,57,52,49,84,244,142,143,189,84,84,49,49,48,54,57,52,50,84,244,142,143,190,84,84,49,49,48,54,57,52,51,84,244,142,143,191,84,84,49,49,48,54,57,52,52,84,244,142,144,128,84,84,49,49,48,54,57,52,53,84,244,142,144,129,84,84,49,49,48,54,57,52,54,84,244,142,144,130,84,84,49,49,48,54,57,52,55,84,244,142,144,131,84,84,49,49,48,54,57,52,56,84,244,142,144,132,84,84,49,49,48,54,57,52,57,84,244,142,144,133,84,84,49,49,48,54,57,53,48,84,244,142,144,134,84,84,49,49,48,54,57,53,49,84,244,142,144,135,84,84,49,49,48,54,57,53,50,84,244,142,144,136,84,84,49,49,48,54,57,53,51,84,244,142,144,137,84,84,49,49,48,54,57,53,52,84,244,142,144,138,84,84,49,49,48,54,57,53,53,84,244,142,144,139,84,84,49,49,48,54,57,53,54,84,244,142,144,140,84,84,49,49,48,54,57,53,55,84,244,142,144,141,84,84,49,49,48,54,57,53,56,84,244,142,144,142,84,84,49,49,48,54,57,53,57,84,244,142,144,143,84,84,49,49,48,54,57,54,48,84,244,142,144,144,84,84,49,49,48,54,57,54,49,84,244,142,144,145,84,84,49,49,48,54,57,54,50,84,244,142,144,146,84,84,49,49,48,54,57,54,51,84,244,142,144,147,84,84,49,49,48,54,57,54,52,84,244,142,144,148,84,84,49,49,48,54,57,54,53,84,244,142,144,149,84,84,49,49,48,54,57,54,54,84,244,142,144,150,84,84,49,49,48,54,57,54,55,84,244,142,144,151,84,84,49,49,48,54,57,54,56,84,244,142,144,152,84,84,49,49,48,54,57,54,57,84,244,142,144,153,84,84,49,49,48,54,57,55,48,84,244,142,144,154,84,84,49,49,48,54,57,55,49,84,244,142,144,155,84,84,49,49,48,54,57,55,50,84,244,142,144,156,84,84,49,49,48,54,57,55,51,84,244,142,144,157,84,84,49,49,48,54,57,55,52,84,244,142,144,158,84,84,49,49,48,54,57,55,53,84,244,142,144,159,84,84,49,49,48,54,57,55,54,84,244,142,144,160,84,84,49,49,48,54,57,55,55,84,244,142,144,161,84,84,49,49,48,54,57,55,56,84,244,142,144,162,84,84,49,49,48,54,57,55,57,84,244,142,144,163,84,84,49,49,48,54,57,56,48,84,244,142,144,164,84,84,49,49,48,54,57,56,49,84,244,142,144,165,84,84,49,49,48,54,57,56,50,84,244,142,144,166,84,84,49,49,48,54,57,56,51,84,244,142,144,167,84,84,49,49,48,54,57,56,52,84,244,142,144,168,84,84,49,49,48,54,57,56,53,84,244,142,144,169,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21040 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21040_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21040_s.txt", Encoding.UTF8);

    public Test21040() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers98fd3eef9d4b4edcb3855acb5ae8645d",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,49,50,53,48,84,244,143,147,146,84,84,49,49,49,49,50,53,49,84,244,143,147,147,84,84,49,49,49,49,50,53,50,84,244,143,147,148,84,84,49,49,49,49,50,53,51,84,244,143,147,149,84,84,49,49,49,49,50,53,52,84,244,143,147,150,84,84,49,49,49,49,50,53,53,84,244,143,147,151,84,84,49,49,49,49,50,53,54,84,244,143,147,152,84,84,49,49,49,49,50,53,55,84,244,143,147,153,84,84,49,49,49,49,50,53,56,84,244,143,147,154,84,84,49,49,49,49,50,53,57,84,244,143,147,155,84,84,49,49,49,49,50,54,48,84,244,143,147,156,84,84,49,49,49,49,50,54,49,84,244,143,147,157,84,84,49,49,49,49,50,54,50,84,244,143,147,158,84,84,49,49,49,49,50,54,51,84,244,143,147,159,84,84,49,49,49,49,50,54,52,84,244,143,147,160,84,84,49,49,49,49,50,54,53,84,244,143,147,161,84,84,49,49,49,49,50,54,54,84,244,143,147,162,84,84,49,49,49,49,50,54,55,84,244,143,147,163,84,84,49,49,49,49,50,54,56,84,244,143,147,164,84,84,49,49,49,49,50,54,57,84,244,143,147,165,84,84,49,49,49,49,50,55,48,84,244,143,147,166,84,84,49,49,49,49,50,55,49,84,244,143,147,167,84,84,49,49,49,49,50,55,50,84,244,143,147,168,84,84,49,49,49,49,50,55,51,84,244,143,147,169,84,84,49,49,49,49,50,55,52,84,244,143,147,170,84,84,49,49,49,49,50,55,53,84,244,143,147,171,84,84,49,49,49,49,50,55,54,84,244,143,147,172,84,84,49,49,49,49,50,55,55,84,244,143,147,173,84,84,49,49,49,49,50,55,56,84,244,143,147,174,84,84,49,49,49,49,50,55,57,84,244,143,147,175,84,84,49,49,49,49,50,56,48,84,244,143,147,176,84,84,49,49,49,49,50,56,49,84,244,143,147,177,84,84,49,49,49,49,50,56,50,84,244,143,147,178,84,84,49,49,49,49,50,56,51,84,244,143,147,179,84,84,49,49,49,49,50,56,52,84,244,143,147,180,84,84,49,49,49,49,50,56,53,84,244,143,147,181,84,84,49,49,49,49,50,56,54,84,244,143,147,182,84,84,49,49,49,49,50,56,55,84,244,143,147,183,84,84,49,49,49,49,50,56,56,84,244,143,147,184,84,84,49,49,49,49,50,56,57,84,244,143,147,185,84,84,49,49,49,49,50,57,48,84,244,143,147,186,84,84,49,49,49,49,50,57,49,84,244,143,147,187,84,84,49,49,49,49,50,57,50,84,244,143,147,188,84,84,49,49,49,49,50,57,51,84,244,143,147,189,84,84,49,49,49,49,50,57,52,84,244,143,147,190,84,84,49,49,49,49,50,57,53,84,244,143,147,191,84,84,49,49,49,49,50,57,54,84,244,143,148,128,84,84,49,49,49,49,50,57,55,84,244,143,148,129,84,84,49,49,49,49,50,57,56,84,244,143,148,130,84,84,49,49,49,49,50,57,57,84,244,143,148,131,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20336 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20336_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20336_s.txt", Encoding.UTF8);

    public Test20336() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers412024b733e349978217e6093afed677",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,50,57,50,56,84,244,129,132,128,84,84,49,48,53,50,57,50,57,84,244,129,132,129,84,84,49,48,53,50,57,51,48,84,244,129,132,130,84,84,49,48,53,50,57,51,49,84,244,129,132,131,84,84,49,48,53,50,57,51,50,84,244,129,132,132,84,84,49,48,53,50,57,51,51,84,244,129,132,133,84,84,49,48,53,50,57,51,52,84,244,129,132,134,84,84,49,48,53,50,57,51,53,84,244,129,132,135,84,84,49,48,53,50,57,51,54,84,244,129,132,136,84,84,49,48,53,50,57,51,55,84,244,129,132,137,84,84,49,48,53,50,57,51,56,84,244,129,132,138,84,84,49,48,53,50,57,51,57,84,244,129,132,139,84,84,49,48,53,50,57,52,48,84,244,129,132,140,84,84,49,48,53,50,57,52,49,84,244,129,132,141,84,84,49,48,53,50,57,52,50,84,244,129,132,142,84,84,49,48,53,50,57,52,51,84,244,129,132,143,84,84,49,48,53,50,57,52,52,84,244,129,132,144,84,84,49,48,53,50,57,52,53,84,244,129,132,145,84,84,49,48,53,50,57,52,54,84,244,129,132,146,84,84,49,48,53,50,57,52,55,84,244,129,132,147,84,84,49,48,53,50,57,52,56,84,244,129,132,148,84,84,49,48,53,50,57,52,57,84,244,129,132,149,84,84,49,48,53,50,57,53,48,84,244,129,132,150,84,84,49,48,53,50,57,53,49,84,244,129,132,151,84,84,49,48,53,50,57,53,50,84,244,129,132,152,84,84,49,48,53,50,57,53,51,84,244,129,132,153,84,84,49,48,53,50,57,53,52,84,244,129,132,154,84,84,49,48,53,50,57,53,53,84,244,129,132,155,84,84,49,48,53,50,57,53,54,84,244,129,132,156,84,84,49,48,53,50,57,53,55,84,244,129,132,157,84,84,49,48,53,50,57,53,56,84,244,129,132,158,84,84,49,48,53,50,57,53,57,84,244,129,132,159,84,84,49,48,53,50,57,54,48,84,244,129,132,160,84,84,49,48,53,50,57,54,49,84,244,129,132,161,84,84,49,48,53,50,57,54,50,84,244,129,132,162,84,84,49,48,53,50,57,54,51,84,244,129,132,163,84,84,49,48,53,50,57,54,52,84,244,129,132,164,84,84,49,48,53,50,57,54,53,84,244,129,132,165,84,84,49,48,53,50,57,54,54,84,244,129,132,166,84,84,49,48,53,50,57,54,55,84,244,129,132,167,84,84,49,48,53,50,57,54,56,84,244,129,132,168,84,84,49,48,53,50,57,54,57,84,244,129,132,169,84,84,49,48,53,50,57,55,48,84,244,129,132,170,84,84,49,48,53,50,57,55,49,84,244,129,132,171,84,84,49,48,53,50,57,55,50,84,244,129,132,172,84,84,49,48,53,50,57,55,51,84,244,129,132,173,84,84,49,48,53,50,57,55,52,84,244,129,132,174,84,84,49,48,53,50,57,55,53,84,244,129,132,175,84,84,49,48,53,50,57,55,54,84,244,129,132,176,84,84,49,48,53,50,57,55,55,84,244,129,132,177,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20844 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20844_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20844_s.txt", Encoding.UTF8);

    public Test20844() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersf4b0dcea8f7b4ccf92e1f36b952ddf93",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,51,49,54,57,84,244,141,149,129,84,84,49,49,48,51,49,55,48,84,244,141,149,130,84,84,49,49,48,51,49,55,49,84,244,141,149,131,84,84,49,49,48,51,49,55,50,84,244,141,149,132,84,84,49,49,48,51,49,55,51,84,244,141,149,133,84,84,49,49,48,51,49,55,52,84,244,141,149,134,84,84,49,49,48,51,49,55,53,84,244,141,149,135,84,84,49,49,48,51,49,55,54,84,244,141,149,136,84,84,49,49,48,51,49,55,55,84,244,141,149,137,84,84,49,49,48,51,49,55,56,84,244,141,149,138,84,84,49,49,48,51,49,55,57,84,244,141,149,139,84,84,49,49,48,51,49,56,48,84,244,141,149,140,84,84,49,49,48,51,49,56,49,84,244,141,149,141,84,84,49,49,48,51,49,56,50,84,244,141,149,142,84,84,49,49,48,51,49,56,51,84,244,141,149,143,84,84,49,49,48,51,49,56,52,84,244,141,149,144,84,84,49,49,48,51,49,56,53,84,244,141,149,145,84,84,49,49,48,51,49,56,54,84,244,141,149,146,84,84,49,49,48,51,49,56,55,84,244,141,149,147,84,84,49,49,48,51,49,56,56,84,244,141,149,148,84,84,49,49,48,51,49,56,57,84,244,141,149,149,84,84,49,49,48,51,49,57,48,84,244,141,149,150,84,84,49,49,48,51,49,57,49,84,244,141,149,151,84,84,49,49,48,51,49,57,50,84,244,141,149,152,84,84,49,49,48,51,49,57,51,84,244,141,149,153,84,84,49,49,48,51,49,57,52,84,244,141,149,154,84,84,49,49,48,51,49,57,53,84,244,141,149,155,84,84,49,49,48,51,49,57,54,84,244,141,149,156,84,84,49,49,48,51,49,57,55,84,244,141,149,157,84,84,49,49,48,51,49,57,56,84,244,141,149,158,84,84,49,49,48,51,49,57,57,84,244,141,149,159,84,84,49,49,48,51,50,48,48,84,244,141,149,160,84,84,49,49,48,51,50,48,49,84,244,141,149,161,84,84,49,49,48,51,50,48,50,84,244,141,149,162,84,84,49,49,48,51,50,48,51,84,244,141,149,163,84,84,49,49,48,51,50,48,52,84,244,141,149,164,84,84,49,49,48,51,50,48,53,84,244,141,149,165,84,84,49,49,48,51,50,48,54,84,244,141,149,166,84,84,49,49,48,51,50,48,55,84,244,141,149,167,84,84,49,49,48,51,50,48,56,84,244,141,149,168,84,84,49,49,48,51,50,48,57,84,244,141,149,169,84,84,49,49,48,51,50,49,48,84,244,141,149,170,84,84,49,49,48,51,50,49,49,84,244,141,149,171,84,84,49,49,48,51,50,49,50,84,244,141,149,172,84,84,49,49,48,51,50,49,51,84,244,141,149,173,84,84,49,49,48,51,50,49,52,84,244,141,149,174,84,84,49,49,48,51,50,49,53,84,244,141,149,175,84,84,49,49,48,51,50,49,54,84,244,141,149,176,84,84,49,49,48,51,50,49,55,84,244,141,149,177,84,84,49,49,48,51,50,49,56,84,244,141,149,178,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20782 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20782_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20782_s.txt", Encoding.UTF8);

    public Test20782() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers8240a720eb234783afd6a68d24f64161",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,57,57,56,52,49,84,244,140,161,129,84,84,49,48,57,57,56,53,51,84,244,140,161,141,84,84,49,48,57,57,56,53,53,84,244,140,161,143,84,84,49,48,57,57,56,53,54,84,244,140,161,144,84,84,49,48,57,57,56,54,57,84,244,140,161,157,84,84,49,48,57,57,57,48,53,84,244,140,162,129,84,84,49,48,57,57,57,49,55,84,244,140,162,141,84,84,49,48,57,57,57,49,57,84,244,140,162,143,84,84,49,48,57,57,57,50,48,84,244,140,162,144,84,84,49,48,57,57,57,51,51,84,244,140,162,157,84,84,49,48,57,57,57,54,57,84,244,140,163,129,84,84,49,48,57,57,57,56,49,84,244,140,163,141,84,84,49,48,57,57,57,56,51,84,244,140,163,143,84,84,49,48,57,57,57,56,52,84,244,140,163,144,84,84,49,48,57,57,57,57,55,84,244,140,163,157,84,84,49,49,48,48,48,51,51,84,244,140,164,129,84,84,49,49,48,48,48,52,53,84,244,140,164,141,84,84,49,49,48,48,48,52,55,84,244,140,164,143,84,84,49,49,48,48,48,52,56,84,244,140,164,144,84,84,49,49,48,48,48,54,49,84,244,140,164,157,84,84,49,49,48,48,48,57,55,84,244,140,165,129,84,84,49,49,48,48,49,48,57,84,244,140,165,141,84,84,49,49,48,48,49,49,49,84,244,140,165,143,84,84,49,49,48,48,49,49,50,84,244,140,165,144,84,84,49,49,48,48,49,50,53,84,244,140,165,157,84,84,49,49,48,48,49,54,49,84,244,140,166,129,84,84,49,49,48,48,49,55,51,84,244,140,166,141,84,84,49,49,48,48,49,55,53,84,244,140,166,143,84,84,49,49,48,48,49,55,54,84,244,140,166,144,84,84,49,49,48,48,49,56,57,84,244,140,166,157,84,84,49,49,48,48,50,50,53,84,244,140,167,129,84,84,49,49,48,48,50,51,55,84,244,140,167,141,84,84,49,49,48,48,50,51,57,84,244,140,167,143,84,84,49,49,48,48,50,52,48,84,244,140,167,144,84,84,49,49,48,48,50,53,51,84,244,140,167,157,84,84,49,49,48,48,50,56,57,84,244,140,168,129,84,84,49,49,48,48,51,48,49,84,244,140,168,141,84,84,49,49,48,48,51,48,51,84,244,140,168,143,84,84,49,49,48,48,51,48,52,84,244,140,168,144,84,84,49,49,48,48,51,49,55,84,244,140,168,157,84,84,49,49,48,48,51,53,51,84,244,140,169,129,84,84,49,49,48,48,51,54,53,84,244,140,169,141,84,84,49,49,48,48,51,54,55,84,244,140,169,143,84,84,49,49,48,48,51,54,56,84,244,140,169,144,84,84,49,49,48,48,51,56,49,84,244,140,169,157,84,84,49,49,48,48,52,49,55,84,244,140,170,129,84,84,49,49,48,48,52,50,57,84,244,140,170,141,84,84,49,49,48,48,52,51,49,84,244,140,170,143,84,84,49,49,48,48,52,51,50,84,244,140,170,144,84,84,49,49,48,48,52,52,53,84,244,140,170,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20685 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20685_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20685_s.txt", Encoding.UTF8);

    public Test20685() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers9df780a74f2549dda8f9f337dadb7946",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,56,53,53,53,52,84,244,137,129,178,84,84,49,48,56,53,53,53,53,84,244,137,129,179,84,84,49,48,56,53,53,53,54,84,244,137,129,180,84,84,49,48,56,53,53,53,55,84,244,137,129,181,84,84,49,48,56,53,53,53,56,84,244,137,129,182,84,84,49,48,56,53,53,53,57,84,244,137,129,183,84,84,49,48,56,53,53,54,48,84,244,137,129,184,84,84,49,48,56,53,53,54,49,84,244,137,129,185,84,84,49,48,56,53,53,54,50,84,244,137,129,186,84,84,49,48,56,53,53,54,51,84,244,137,129,187,84,84,49,48,56,53,53,54,52,84,244,137,129,188,84,84,49,48,56,53,53,54,53,84,244,137,129,189,84,84,49,48,56,53,53,54,54,84,244,137,129,190,84,84,49,48,56,53,53,54,55,84,244,137,129,191,84,84,49,48,56,53,53,54,57,84,244,137,130,129,84,84,49,48,56,53,53,56,49,84,244,137,130,141,84,84,49,48,56,53,53,56,51,84,244,137,130,143,84,84,49,48,56,53,53,56,52,84,244,137,130,144,84,84,49,48,56,53,53,57,55,84,244,137,130,157,84,84,49,48,56,53,54,51,51,84,244,137,131,129,84,84,49,48,56,53,54,52,53,84,244,137,131,141,84,84,49,48,56,53,54,52,55,84,244,137,131,143,84,84,49,48,56,53,54,52,56,84,244,137,131,144,84,84,49,48,56,53,54,54,49,84,244,137,131,157,84,84,49,48,56,53,54,57,55,84,244,137,132,129,84,84,49,48,56,53,55,48,57,84,244,137,132,141,84,84,49,48,56,53,55,49,49,84,244,137,132,143,84,84,49,48,56,53,55,49,50,84,244,137,132,144,84,84,49,48,56,53,55,50,53,84,244,137,132,157,84,84,49,48,56,53,55,54,49,84,244,137,133,129,84,84,49,48,56,53,55,55,51,84,244,137,133,141,84,84,49,48,56,53,55,55,53,84,244,137,133,143,84,84,49,48,56,53,55,55,54,84,244,137,133,144,84,84,49,48,56,53,55,56,57,84,244,137,133,157,84,84,49,48,56,53,56,50,53,84,244,137,134,129,84,84,49,48,56,53,56,51,55,84,244,137,134,141,84,84,49,48,56,53,56,51,57,84,244,137,134,143,84,84,49,48,56,53,56,52,48,84,244,137,134,144,84,84,49,48,56,53,56,53,51,84,244,137,134,157,84,84,49,48,56,53,56,56,57,84,244,137,135,129,84,84,49,48,56,53,57,48,49,84,244,137,135,141,84,84,49,48,56,53,57,48,51,84,244,137,135,143,84,84,49,48,56,53,57,48,52,84,244,137,135,144,84,84,49,48,56,53,57,49,55,84,244,137,135,157,84,84,49,48,56,53,57,53,51,84,244,137,136,129,84,84,49,48,56,53,57,54,53,84,244,137,136,141,84,84,49,48,56,53,57,54,55,84,244,137,136,143,84,84,49,48,56,53,57,54,56,84,244,137,136,144,84,84,49,48,56,53,57,56,49,84,244,137,136,157,84,84,49,48,56,54,48,49,55,84,244,137,137,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20624 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20624_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20624_s.txt", Encoding.UTF8);

    public Test20624() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers5f5b393ed8e742338d6031fb2e225092",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,55,53,49,51,55,84,244,134,159,129,84,84,49,48,55,53,49,52,57,84,244,134,159,141,84,84,49,48,55,53,49,53,49,84,244,134,159,143,84,84,49,48,55,53,49,53,50,84,244,134,159,144,84,84,49,48,55,53,49,54,53,84,244,134,159,157,84,84,49,48,55,53,50,48,49,84,244,134,160,129,84,84,49,48,55,53,50,49,51,84,244,134,160,141,84,84,49,48,55,53,50,49,53,84,244,134,160,143,84,84,49,48,55,53,50,49,54,84,244,134,160,144,84,84,49,48,55,53,50,50,57,84,244,134,160,157,84,84,49,48,55,53,50,54,53,84,244,134,161,129,84,84,49,48,55,53,50,55,55,84,244,134,161,141,84,84,49,48,55,53,50,55,57,84,244,134,161,143,84,84,49,48,55,53,50,56,48,84,244,134,161,144,84,84,49,48,55,53,50,57,51,84,244,134,161,157,84,84,49,48,55,53,51,50,57,84,244,134,162,129,84,84,49,48,55,53,51,52,49,84,244,134,162,141,84,84,49,48,55,53,51,52,51,84,244,134,162,143,84,84,49,48,55,53,51,52,52,84,244,134,162,144,84,84,49,48,55,53,51,53,55,84,244,134,162,157,84,84,49,48,55,53,51,57,51,84,244,134,163,129,84,84,49,48,55,53,52,48,53,84,244,134,163,141,84,84,49,48,55,53,52,48,55,84,244,134,163,143,84,84,49,48,55,53,52,48,56,84,244,134,163,144,84,84,49,48,55,53,52,50,49,84,244,134,163,157,84,84,49,48,55,53,52,53,55,84,244,134,164,129,84,84,49,48,55,53,52,54,57,84,244,134,164,141,84,84,49,48,55,53,52,55,49,84,244,134,164,143,84,84,49,48,55,53,52,55,50,84,244,134,164,144,84,84,49,48,55,53,52,56,53,84,244,134,164,157,84,84,49,48,55,53,53,50,49,84,244,134,165,129,84,84,49,48,55,53,53,51,51,84,244,134,165,141,84,84,49,48,55,53,53,51,53,84,244,134,165,143,84,84,49,48,55,53,53,51,54,84,244,134,165,144,84,84,49,48,55,53,53,52,57,84,244,134,165,157,84,84,49,48,55,53,53,56,53,84,244,134,166,129,84,84,49,48,55,53,53,57,55,84,244,134,166,141,84,84,49,48,55,53,53,57,57,84,244,134,166,143,84,84,49,48,55,53,54,48,48,84,244,134,166,144,84,84,49,48,55,53,54,49,51,84,244,134,166,157,84,84,49,48,55,53,54,52,57,84,244,134,167,129,84,84,49,48,55,53,54,54,49,84,244,134,167,141,84,84,49,48,55,53,54,54,51,84,244,134,167,143,84,84,49,48,55,53,54,54,52,84,244,134,167,144,84,84,49,48,55,53,54,55,55,84,244,134,167,157,84,84,49,48,55,53,55,49,51,84,244,134,168,129,84,84,49,48,55,53,55,50,53,84,244,134,168,141,84,84,49,48,55,53,55,50,55,84,244,134,168,143,84,84,49,48,55,53,55,50,56,84,244,134,168,144,84,84,49,48,55,53,55,52,49,84,244,134,168,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19409 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19409_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19409_s.txt", Encoding.UTF8);

    public Test19409() : base(recordedRequest, recordedResponse, "accounts8d43a024a0ff30a")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a024a0ff30a",
                        container: "$root",
                        blob: "foo",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21531 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21531_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21531_s.txt", Encoding.UTF8);

    public Test21531() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers872c4bdb185f48ae95ca10006a31c5fb",
                        blob: "Blob867d2a61daba49cdb3e3908118bb4b5e",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 0,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20907 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20907_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20907_s.txt", Encoding.UTF8);

    public Test20907() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers9e891393b2624599aedf317812121dcf",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,52,54,49,57,84,244,141,171,171,84,84,49,49,48,52,54,50,48,84,244,141,171,172,84,84,49,49,48,52,54,50,49,84,244,141,171,173,84,84,49,49,48,52,54,50,50,84,244,141,171,174,84,84,49,49,48,52,54,50,51,84,244,141,171,175,84,84,49,49,48,52,54,50,52,84,244,141,171,176,84,84,49,49,48,52,54,50,53,84,244,141,171,177,84,84,49,49,48,52,54,50,54,84,244,141,171,178,84,84,49,49,48,52,54,50,55,84,244,141,171,179,84,84,49,49,48,52,54,50,56,84,244,141,171,180,84,84,49,49,48,52,54,50,57,84,244,141,171,181,84,84,49,49,48,52,54,51,48,84,244,141,171,182,84,84,49,49,48,52,54,51,49,84,244,141,171,183,84,84,49,49,48,52,54,51,50,84,244,141,171,184,84,84,49,49,48,52,54,51,51,84,244,141,171,185,84,84,49,49,48,52,54,51,52,84,244,141,171,186,84,84,49,49,48,52,54,51,53,84,244,141,171,187,84,84,49,49,48,52,54,51,54,84,244,141,171,188,84,84,49,49,48,52,54,51,55,84,244,141,171,189,84,84,49,49,48,52,54,51,56,84,244,141,171,190,84,84,49,49,48,52,54,51,57,84,244,141,171,191,84,84,49,49,48,52,54,52,48,84,244,141,172,128,84,84,49,49,48,52,54,52,49,84,244,141,172,129,84,84,49,49,48,52,54,52,50,84,244,141,172,130,84,84,49,49,48,52,54,52,51,84,244,141,172,131,84,84,49,49,48,52,54,52,52,84,244,141,172,132,84,84,49,49,48,52,54,52,53,84,244,141,172,133,84,84,49,49,48,52,54,52,54,84,244,141,172,134,84,84,49,49,48,52,54,52,55,84,244,141,172,135,84,84,49,49,48,52,54,52,56,84,244,141,172,136,84,84,49,49,48,52,54,52,57,84,244,141,172,137,84,84,49,49,48,52,54,53,48,84,244,141,172,138,84,84,49,49,48,52,54,53,49,84,244,141,172,139,84,84,49,49,48,52,54,53,50,84,244,141,172,140,84,84,49,49,48,52,54,53,51,84,244,141,172,141,84,84,49,49,48,52,54,53,52,84,244,141,172,142,84,84,49,49,48,52,54,53,53,84,244,141,172,143,84,84,49,49,48,52,54,53,54,84,244,141,172,144,84,84,49,49,48,52,54,53,55,84,244,141,172,145,84,84,49,49,48,52,54,53,56,84,244,141,172,146,84,84,49,49,48,52,54,53,57,84,244,141,172,147,84,84,49,49,48,52,54,54,48,84,244,141,172,148,84,84,49,49,48,52,54,54,49,84,244,141,172,149,84,84,49,49,48,52,54,54,50,84,244,141,172,150,84,84,49,49,48,52,54,54,51,84,244,141,172,151,84,84,49,49,48,52,54,54,52,84,244,141,172,152,84,84,49,49,48,52,54,54,53,84,244,141,172,153,84,84,49,49,48,52,54,54,54,84,244,141,172,154,84,84,49,49,48,52,54,54,55,84,244,141,172,155,84,84,49,49,48,52,54,54,56,84,244,141,172,156,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20298 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20298_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20298_s.txt", Encoding.UTF8);

    public Test20298() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers712afb35b54344eb8fa90647f752cd92",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,52,56,50,48,53,84,243,191,186,141,84,84,49,48,52,56,50,48,55,84,243,191,186,143,84,84,49,48,52,56,50,48,56,84,243,191,186,144,84,84,49,48,52,56,50,50,49,84,243,191,186,157,84,84,49,48,52,56,50,53,55,84,243,191,187,129,84,84,49,48,52,56,50,54,57,84,243,191,187,141,84,84,49,48,52,56,50,55,49,84,243,191,187,143,84,84,49,48,52,56,50,55,50,84,243,191,187,144,84,84,49,48,52,56,50,56,53,84,243,191,187,157,84,84,49,48,52,56,51,50,49,84,243,191,188,129,84,84,49,48,52,56,51,51,51,84,243,191,188,141,84,84,49,48,52,56,51,51,53,84,243,191,188,143,84,84,49,48,52,56,51,51,54,84,243,191,188,144,84,84,49,48,52,56,51,52,57,84,243,191,188,157,84,84,49,48,52,56,51,56,53,84,243,191,189,129,84,84,49,48,52,56,51,57,55,84,243,191,189,141,84,84,49,48,52,56,51,57,57,84,243,191,189,143,84,84,49,48,52,56,52,48,48,84,243,191,189,144,84,84,49,48,52,56,52,49,51,84,243,191,189,157,84,84,49,48,52,56,52,52,57,84,243,191,190,129,84,84,49,48,52,56,52,54,49,84,243,191,190,141,84,84,49,48,52,56,52,54,51,84,243,191,190,143,84,84,49,48,52,56,52,54,52,84,243,191,190,144,84,84,49,48,52,56,52,55,55,84,243,191,190,157,84,84,49,48,52,56,53,49,51,84,243,191,191,129,84,84,49,48,52,56,53,50,53,84,243,191,191,141,84,84,49,48,52,56,53,50,55,84,243,191,191,143,84,84,49,48,52,56,53,50,56,84,243,191,191,144,84,84,49,48,52,56,53,52,49,84,243,191,191,157,84,84,49,48,52,56,53,55,55,84,244,128,128,129,84,84,49,48,52,56,53,56,57,84,244,128,128,141,84,84,49,48,52,56,53,57,49,84,244,128,128,143,84,84,49,48,52,56,53,57,50,84,244,128,128,144,84,84,49,48,52,56,54,48,53,84,244,128,128,157,84,84,49,48,52,56,54,52,48,84,244,128,129,128,84,84,49,48,52,56,54,52,49,84,244,128,129,129,84,84,49,48,52,56,54,52,50,84,244,128,129,130,84,84,49,48,52,56,54,52,51,84,244,128,129,131,84,84,49,48,52,56,54,52,52,84,244,128,129,132,84,84,49,48,52,56,54,52,53,84,244,128,129,133,84,84,49,48,52,56,54,52,54,84,244,128,129,134,84,84,49,48,52,56,54,52,55,84,244,128,129,135,84,84,49,48,52,56,54,52,56,84,244,128,129,136,84,84,49,48,52,56,54,52,57,84,244,128,129,137,84,84,49,48,52,56,54,53,48,84,244,128,129,138,84,84,49,48,52,56,54,53,49,84,244,128,129,139,84,84,49,48,52,56,54,53,50,84,244,128,129,140,84,84,49,48,52,56,54,53,51,84,244,128,129,141,84,84,49,48,52,56,54,53,52,84,244,128,129,142,84,84,49,48,52,56,54,53,53,84,244,128,129,143,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22806 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22806_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22806_s.txt", Encoding.UTF8);

    public Test22806() : base(recordedRequest, recordedResponse, "accounts8d43a0490823d21")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a0490823d21",
                        container: "containers0bd48f2ce8374f57b3f3c61b5595b35b",
                        blob: "Blob29d36c2de630409b8b450055e28deecb",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20241 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20241_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20241_s.txt", Encoding.UTF8);

    public Test20241() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersca1800aaa567470781b999118df6ba97",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,51,56,52,55,55,84,243,189,162,141,84,84,49,48,51,56,52,55,57,84,243,189,162,143,84,84,49,48,51,56,52,56,48,84,243,189,162,144,84,84,49,48,51,56,52,57,51,84,243,189,162,157,84,84,49,48,51,56,53,50,57,84,243,189,163,129,84,84,49,48,51,56,53,52,49,84,243,189,163,141,84,84,49,48,51,56,53,52,51,84,243,189,163,143,84,84,49,48,51,56,53,52,52,84,243,189,163,144,84,84,49,48,51,56,53,53,55,84,243,189,163,157,84,84,49,48,51,56,53,57,51,84,243,189,164,129,84,84,49,48,51,56,54,48,53,84,243,189,164,141,84,84,49,48,51,56,54,48,55,84,243,189,164,143,84,84,49,48,51,56,54,48,56,84,243,189,164,144,84,84,49,48,51,56,54,50,49,84,243,189,164,157,84,84,49,48,51,56,54,53,55,84,243,189,165,129,84,84,49,48,51,56,54,54,57,84,243,189,165,141,84,84,49,48,51,56,54,55,49,84,243,189,165,143,84,84,49,48,51,56,54,55,50,84,243,189,165,144,84,84,49,48,51,56,54,56,53,84,243,189,165,157,84,84,49,48,51,56,55,50,49,84,243,189,166,129,84,84,49,48,51,56,55,51,51,84,243,189,166,141,84,84,49,48,51,56,55,51,53,84,243,189,166,143,84,84,49,48,51,56,55,51,54,84,243,189,166,144,84,84,49,48,51,56,55,52,57,84,243,189,166,157,84,84,49,48,51,56,55,56,53,84,243,189,167,129,84,84,49,48,51,56,55,57,55,84,243,189,167,141,84,84,49,48,51,56,55,57,57,84,243,189,167,143,84,84,49,48,51,56,56,48,48,84,243,189,167,144,84,84,49,48,51,56,56,49,51,84,243,189,167,157,84,84,49,48,51,56,56,52,57,84,243,189,168,129,84,84,49,48,51,56,56,54,49,84,243,189,168,141,84,84,49,48,51,56,56,54,51,84,243,189,168,143,84,84,49,48,51,56,56,54,52,84,243,189,168,144,84,84,49,48,51,56,56,55,55,84,243,189,168,157,84,84,49,48,51,56,57,49,51,84,243,189,169,129,84,84,49,48,51,56,57,50,53,84,243,189,169,141,84,84,49,48,51,56,57,50,55,84,243,189,169,143,84,84,49,48,51,56,57,50,56,84,243,189,169,144,84,84,49,48,51,56,57,52,49,84,243,189,169,157,84,84,49,48,51,56,57,55,55,84,243,189,170,129,84,84,49,48,51,56,57,56,57,84,243,189,170,141,84,84,49,48,51,56,57,57,49,84,243,189,170,143,84,84,49,48,51,56,57,57,50,84,243,189,170,144,84,84,49,48,51,57,48,48,53,84,243,189,170,157,84,84,49,48,51,57,48,52,49,84,243,189,171,129,84,84,49,48,51,57,48,53,51,84,243,189,171,141,84,84,49,48,51,57,48,53,53,84,243,189,171,143,84,84,49,48,51,57,48,53,54,84,243,189,171,144,84,84,49,48,51,57,48,54,57,84,243,189,171,157,84,84,49,48,51,57,49,48,53,84,243,189,172,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20431 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20431_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20431_s.txt", Encoding.UTF8);

    public Test20431() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers7f83ba854dc4459da9078f97f691d28c",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,53,49,55,56,84,244,129,167,138,84,84,49,48,53,53,49,55,57,84,244,129,167,139,84,84,49,48,53,53,49,56,48,84,244,129,167,140,84,84,49,48,53,53,49,56,49,84,244,129,167,141,84,84,49,48,53,53,49,56,50,84,244,129,167,142,84,84,49,48,53,53,49,56,51,84,244,129,167,143,84,84,49,48,53,53,49,56,52,84,244,129,167,144,84,84,49,48,53,53,49,56,53,84,244,129,167,145,84,84,49,48,53,53,49,56,54,84,244,129,167,146,84,84,49,48,53,53,49,56,55,84,244,129,167,147,84,84,49,48,53,53,49,56,56,84,244,129,167,148,84,84,49,48,53,53,49,56,57,84,244,129,167,149,84,84,49,48,53,53,49,57,48,84,244,129,167,150,84,84,49,48,53,53,49,57,49,84,244,129,167,151,84,84,49,48,53,53,49,57,50,84,244,129,167,152,84,84,49,48,53,53,49,57,51,84,244,129,167,153,84,84,49,48,53,53,49,57,52,84,244,129,167,154,84,84,49,48,53,53,49,57,53,84,244,129,167,155,84,84,49,48,53,53,49,57,54,84,244,129,167,156,84,84,49,48,53,53,49,57,55,84,244,129,167,157,84,84,49,48,53,53,49,57,56,84,244,129,167,158,84,84,49,48,53,53,49,57,57,84,244,129,167,159,84,84,49,48,53,53,50,48,48,84,244,129,167,160,84,84,49,48,53,53,50,48,49,84,244,129,167,161,84,84,49,48,53,53,50,48,50,84,244,129,167,162,84,84,49,48,53,53,50,48,51,84,244,129,167,163,84,84,49,48,53,53,50,48,52,84,244,129,167,164,84,84,49,48,53,53,50,48,53,84,244,129,167,165,84,84,49,48,53,53,50,48,54,84,244,129,167,166,84,84,49,48,53,53,50,48,55,84,244,129,167,167,84,84,49,48,53,53,50,48,56,84,244,129,167,168,84,84,49,48,53,53,50,48,57,84,244,129,167,169,84,84,49,48,53,53,50,49,48,84,244,129,167,170,84,84,49,48,53,53,50,49,49,84,244,129,167,171,84,84,49,48,53,53,50,49,50,84,244,129,167,172,84,84,49,48,53,53,50,49,51,84,244,129,167,173,84,84,49,48,53,53,50,49,52,84,244,129,167,174,84,84,49,48,53,53,50,49,53,84,244,129,167,175,84,84,49,48,53,53,50,49,54,84,244,129,167,176,84,84,49,48,53,53,50,49,55,84,244,129,167,177,84,84,49,48,53,53,50,49,56,84,244,129,167,178,84,84,49,48,53,53,50,49,57,84,244,129,167,179,84,84,49,48,53,53,50,50,48,84,244,129,167,180,84,84,49,48,53,53,50,50,49,84,244,129,167,181,84,84,49,48,53,53,50,50,50,84,244,129,167,182,84,84,49,48,53,53,50,50,51,84,244,129,167,183,84,84,49,48,53,53,50,50,52,84,244,129,167,184,84,84,49,48,53,53,50,50,53,84,244,129,167,185,84,84,49,48,53,53,50,50,54,84,244,129,167,186,84,84,49,48,53,53,50,50,55,84,244,129,167,187,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19951 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19951_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19951_s.txt", Encoding.UTF8);

    public Test19951() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersbf5ecfbea5a24d8a8188936c9be6fa20",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,57,51,48,56,56,84,243,178,157,128,84,84,57,57,51,48,56,57,84,243,178,157,129,84,84,57,57,51,48,57,48,84,243,178,157,130,84,84,57,57,51,48,57,49,84,243,178,157,131,84,84,57,57,51,48,57,50,84,243,178,157,132,84,84,57,57,51,48,57,51,84,243,178,157,133,84,84,57,57,51,48,57,52,84,243,178,157,134,84,84,57,57,51,48,57,53,84,243,178,157,135,84,84,57,57,51,48,57,54,84,243,178,157,136,84,84,57,57,51,48,57,55,84,243,178,157,137,84,84,57,57,51,48,57,56,84,243,178,157,138,84,84,57,57,51,48,57,57,84,243,178,157,139,84,84,57,57,51,49,48,48,84,243,178,157,140,84,84,57,57,51,49,48,49,84,243,178,157,141,84,84,57,57,51,49,48,50,84,243,178,157,142,84,84,57,57,51,49,48,51,84,243,178,157,143,84,84,57,57,51,49,48,52,84,243,178,157,144,84,84,57,57,51,49,48,53,84,243,178,157,145,84,84,57,57,51,49,48,54,84,243,178,157,146,84,84,57,57,51,49,48,55,84,243,178,157,147,84,84,57,57,51,49,48,56,84,243,178,157,148,84,84,57,57,51,49,48,57,84,243,178,157,149,84,84,57,57,51,49,49,48,84,243,178,157,150,84,84,57,57,51,49,49,49,84,243,178,157,151,84,84,57,57,51,49,49,50,84,243,178,157,152,84,84,57,57,51,49,49,51,84,243,178,157,153,84,84,57,57,51,49,49,52,84,243,178,157,154,84,84,57,57,51,49,49,53,84,243,178,157,155,84,84,57,57,51,49,49,54,84,243,178,157,156,84,84,57,57,51,49,49,55,84,243,178,157,157,84,84,57,57,51,49,49,56,84,243,178,157,158,84,84,57,57,51,49,49,57,84,243,178,157,159,84,84,57,57,51,49,50,48,84,243,178,157,160,84,84,57,57,51,49,50,49,84,243,178,157,161,84,84,57,57,51,49,50,50,84,243,178,157,162,84,84,57,57,51,49,50,51,84,243,178,157,163,84,84,57,57,51,49,50,52,84,243,178,157,164,84,84,57,57,51,49,50,53,84,243,178,157,165,84,84,57,57,51,49,50,54,84,243,178,157,166,84,84,57,57,51,49,50,55,84,243,178,157,167,84,84,57,57,51,49,50,56,84,243,178,157,168,84,84,57,57,51,49,50,57,84,243,178,157,169,84,84,57,57,51,49,51,48,84,243,178,157,170,84,84,57,57,51,49,51,49,84,243,178,157,171,84,84,57,57,51,49,51,50,84,243,178,157,172,84,84,57,57,51,49,51,51,84,243,178,157,173,84,84,57,57,51,49,51,52,84,243,178,157,174,84,84,57,57,51,49,51,53,84,243,178,157,175,84,84,57,57,51,49,51,54,84,243,178,157,176,84,84,57,57,51,49,51,55,84,243,178,157,177,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20495 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20495_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20495_s.txt", Encoding.UTF8);

    public Test20495() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers3bfa703d74a140e499ecce701b962b8c",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,54,54,55,56,84,244,129,190,166,84,84,49,48,53,54,54,55,57,84,244,129,190,167,84,84,49,48,53,54,54,56,48,84,244,129,190,168,84,84,49,48,53,54,54,56,49,84,244,129,190,169,84,84,49,48,53,54,54,56,50,84,244,129,190,170,84,84,49,48,53,54,54,56,51,84,244,129,190,171,84,84,49,48,53,54,54,56,52,84,244,129,190,172,84,84,49,48,53,54,54,56,53,84,244,129,190,173,84,84,49,48,53,54,54,56,54,84,244,129,190,174,84,84,49,48,53,54,54,56,55,84,244,129,190,175,84,84,49,48,53,54,54,56,56,84,244,129,190,176,84,84,49,48,53,54,54,56,57,84,244,129,190,177,84,84,49,48,53,54,54,57,48,84,244,129,190,178,84,84,49,48,53,54,54,57,49,84,244,129,190,179,84,84,49,48,53,54,54,57,50,84,244,129,190,180,84,84,49,48,53,54,54,57,51,84,244,129,190,181,84,84,49,48,53,54,54,57,52,84,244,129,190,182,84,84,49,48,53,54,54,57,53,84,244,129,190,183,84,84,49,48,53,54,54,57,54,84,244,129,190,184,84,84,49,48,53,54,54,57,55,84,244,129,190,185,84,84,49,48,53,54,54,57,56,84,244,129,190,186,84,84,49,48,53,54,54,57,57,84,244,129,190,187,84,84,49,48,53,54,55,48,48,84,244,129,190,188,84,84,49,48,53,54,55,48,49,84,244,129,190,189,84,84,49,48,53,54,55,48,50,84,244,129,190,190,84,84,49,48,53,54,55,48,51,84,244,129,190,191,84,84,49,48,53,54,55,48,52,84,244,129,191,128,84,84,49,48,53,54,55,48,53,84,244,129,191,129,84,84,49,48,53,54,55,48,54,84,244,129,191,130,84,84,49,48,53,54,55,48,55,84,244,129,191,131,84,84,49,48,53,54,55,48,56,84,244,129,191,132,84,84,49,48,53,54,55,48,57,84,244,129,191,133,84,84,49,48,53,54,55,49,48,84,244,129,191,134,84,84,49,48,53,54,55,49,49,84,244,129,191,135,84,84,49,48,53,54,55,49,50,84,244,129,191,136,84,84,49,48,53,54,55,49,51,84,244,129,191,137,84,84,49,48,53,54,55,49,52,84,244,129,191,138,84,84,49,48,53,54,55,49,53,84,244,129,191,139,84,84,49,48,53,54,55,49,54,84,244,129,191,140,84,84,49,48,53,54,55,49,55,84,244,129,191,141,84,84,49,48,53,54,55,49,56,84,244,129,191,142,84,84,49,48,53,54,55,49,57,84,244,129,191,143,84,84,49,48,53,54,55,50,48,84,244,129,191,144,84,84,49,48,53,54,55,50,49,84,244,129,191,145,84,84,49,48,53,54,55,50,50,84,244,129,191,146,84,84,49,48,53,54,55,50,51,84,244,129,191,147,84,84,49,48,53,54,55,50,52,84,244,129,191,148,84,84,49,48,53,54,55,50,53,84,244,129,191,149,84,84,49,48,53,54,55,50,54,84,244,129,191,150,84,84,49,48,53,54,55,50,55,84,244,129,191,151,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22807 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22807_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22807_s.txt", Encoding.UTF8);

    public Test22807() : base(recordedRequest, recordedResponse, "accounts8d43a0490823d21")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a0490823d21",
                        container: "containers0bd48f2ce8374f57b3f3c61b5595b35b",
                        blob: "Bloba5b9d38b91fb42858621fd046b228ad7",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20592 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20592_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20592_s.txt", Encoding.UTF8);

    public Test20592() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers2997cf743a0f481c9f696984938aa742",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,55,48,49,51,56,84,244,133,144,186,84,84,49,48,55,48,49,51,57,84,244,133,144,187,84,84,49,48,55,48,49,52,48,84,244,133,144,188,84,84,49,48,55,48,49,52,49,84,244,133,144,189,84,84,49,48,55,48,49,52,50,84,244,133,144,190,84,84,49,48,55,48,49,52,51,84,244,133,144,191,84,84,49,48,55,48,49,52,53,84,244,133,145,129,84,84,49,48,55,48,49,53,55,84,244,133,145,141,84,84,49,48,55,48,49,53,57,84,244,133,145,143,84,84,49,48,55,48,49,54,48,84,244,133,145,144,84,84,49,48,55,48,49,55,51,84,244,133,145,157,84,84,49,48,55,48,50,48,57,84,244,133,146,129,84,84,49,48,55,48,50,50,49,84,244,133,146,141,84,84,49,48,55,48,50,50,51,84,244,133,146,143,84,84,49,48,55,48,50,50,52,84,244,133,146,144,84,84,49,48,55,48,50,51,55,84,244,133,146,157,84,84,49,48,55,48,50,55,51,84,244,133,147,129,84,84,49,48,55,48,50,56,53,84,244,133,147,141,84,84,49,48,55,48,50,56,55,84,244,133,147,143,84,84,49,48,55,48,50,56,56,84,244,133,147,144,84,84,49,48,55,48,51,48,49,84,244,133,147,157,84,84,49,48,55,48,51,51,55,84,244,133,148,129,84,84,49,48,55,48,51,52,57,84,244,133,148,141,84,84,49,48,55,48,51,53,49,84,244,133,148,143,84,84,49,48,55,48,51,53,50,84,244,133,148,144,84,84,49,48,55,48,51,54,53,84,244,133,148,157,84,84,49,48,55,48,52,48,49,84,244,133,149,129,84,84,49,48,55,48,52,49,51,84,244,133,149,141,84,84,49,48,55,48,52,49,53,84,244,133,149,143,84,84,49,48,55,48,52,49,54,84,244,133,149,144,84,84,49,48,55,48,52,50,57,84,244,133,149,157,84,84,49,48,55,48,52,54,53,84,244,133,150,129,84,84,49,48,55,48,52,55,55,84,244,133,150,141,84,84,49,48,55,48,52,55,57,84,244,133,150,143,84,84,49,48,55,48,52,56,48,84,244,133,150,144,84,84,49,48,55,48,52,57,51,84,244,133,150,157,84,84,49,48,55,48,53,50,57,84,244,133,151,129,84,84,49,48,55,48,53,52,49,84,244,133,151,141,84,84,49,48,55,48,53,52,51,84,244,133,151,143,84,84,49,48,55,48,53,52,52,84,244,133,151,144,84,84,49,48,55,48,53,53,55,84,244,133,151,157,84,84,49,48,55,48,53,57,51,84,244,133,152,129,84,84,49,48,55,48,54,48,53,84,244,133,152,141,84,84,49,48,55,48,54,48,55,84,244,133,152,143,84,84,49,48,55,48,54,48,56,84,244,133,152,144,84,84,49,48,55,48,54,50,49,84,244,133,152,157,84,84,49,48,55,48,54,53,55,84,244,133,153,129,84,84,49,48,55,48,54,54,57,84,244,133,153,141,84,84,49,48,55,48,54,55,49,84,244,133,153,143,84,84,49,48,55,48,54,55,50,84,244,133,153,144,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20753 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20753_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20753_s.txt", Encoding.UTF8);

    public Test20753() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersc5ae22b09f3f4a3eaff829adc5876203",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,57,53,53,51,50,84,244,139,157,172,84,84,49,48,57,53,53,51,51,84,244,139,157,173,84,84,49,48,57,53,53,51,52,84,244,139,157,174,84,84,49,48,57,53,53,51,53,84,244,139,157,175,84,84,49,48,57,53,53,51,54,84,244,139,157,176,84,84,49,48,57,53,53,51,55,84,244,139,157,177,84,84,49,48,57,53,53,51,56,84,244,139,157,178,84,84,49,48,57,53,53,51,57,84,244,139,157,179,84,84,49,48,57,53,53,52,48,84,244,139,157,180,84,84,49,48,57,53,53,52,49,84,244,139,157,181,84,84,49,48,57,53,53,52,50,84,244,139,157,182,84,84,49,48,57,53,53,52,51,84,244,139,157,183,84,84,49,48,57,53,53,52,52,84,244,139,157,184,84,84,49,48,57,53,53,52,53,84,244,139,157,185,84,84,49,48,57,53,53,52,54,84,244,139,157,186,84,84,49,48,57,53,53,52,55,84,244,139,157,187,84,84,49,48,57,53,53,52,56,84,244,139,157,188,84,84,49,48,57,53,53,52,57,84,244,139,157,189,84,84,49,48,57,53,53,53,48,84,244,139,157,190,84,84,49,48,57,53,53,53,49,84,244,139,157,191,84,84,49,48,57,53,53,53,51,84,244,139,158,129,84,84,49,48,57,53,53,54,53,84,244,139,158,141,84,84,49,48,57,53,53,54,55,84,244,139,158,143,84,84,49,48,57,53,53,54,56,84,244,139,158,144,84,84,49,48,57,53,53,56,49,84,244,139,158,157,84,84,49,48,57,53,54,49,55,84,244,139,159,129,84,84,49,48,57,53,54,50,57,84,244,139,159,141,84,84,49,48,57,53,54,51,49,84,244,139,159,143,84,84,49,48,57,53,54,51,50,84,244,139,159,144,84,84,49,48,57,53,54,52,53,84,244,139,159,157,84,84,49,48,57,53,54,56,49,84,244,139,160,129,84,84,49,48,57,53,54,57,51,84,244,139,160,141,84,84,49,48,57,53,54,57,53,84,244,139,160,143,84,84,49,48,57,53,54,57,54,84,244,139,160,144,84,84,49,48,57,53,55,48,57,84,244,139,160,157,84,84,49,48,57,53,55,52,53,84,244,139,161,129,84,84,49,48,57,53,55,53,55,84,244,139,161,141,84,84,49,48,57,53,55,53,57,84,244,139,161,143,84,84,49,48,57,53,55,54,48,84,244,139,161,144,84,84,49,48,57,53,55,55,51,84,244,139,161,157,84,84,49,48,57,53,56,48,57,84,244,139,162,129,84,84,49,48,57,53,56,50,49,84,244,139,162,141,84,84,49,48,57,53,56,50,51,84,244,139,162,143,84,84,49,48,57,53,56,50,52,84,244,139,162,144,84,84,49,48,57,53,56,51,55,84,244,139,162,157,84,84,49,48,57,53,56,55,51,84,244,139,163,129,84,84,49,48,57,53,56,56,53,84,244,139,163,141,84,84,49,48,57,53,56,56,55,84,244,139,163,143,84,84,49,48,57,53,56,56,56,84,244,139,163,144,84,84,49,48,57,53,57,48,49,84,244,139,163,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19894 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19894_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19894_s.txt", Encoding.UTF8);

    public Test19894() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersf0a96ab3064046f8a2fc77e6e3ebae9e",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,56,52,48,54,56,84,243,176,144,132,84,84,57,56,52,48,54,57,84,243,176,144,133,84,84,57,56,52,48,55,48,84,243,176,144,134,84,84,57,56,52,48,55,49,84,243,176,144,135,84,84,57,56,52,48,55,50,84,243,176,144,136,84,84,57,56,52,48,55,51,84,243,176,144,137,84,84,57,56,52,48,55,52,84,243,176,144,138,84,84,57,56,52,48,55,53,84,243,176,144,139,84,84,57,56,52,48,55,54,84,243,176,144,140,84,84,57,56,52,48,55,55,84,243,176,144,141,84,84,57,56,52,48,55,56,84,243,176,144,142,84,84,57,56,52,48,55,57,84,243,176,144,143,84,84,57,56,52,48,56,48,84,243,176,144,144,84,84,57,56,52,48,56,49,84,243,176,144,145,84,84,57,56,52,48,56,50,84,243,176,144,146,84,84,57,56,52,48,56,51,84,243,176,144,147,84,84,57,56,52,48,56,52,84,243,176,144,148,84,84,57,56,52,48,56,53,84,243,176,144,149,84,84,57,56,52,48,56,54,84,243,176,144,150,84,84,57,56,52,48,56,55,84,243,176,144,151,84,84,57,56,52,48,56,56,84,243,176,144,152,84,84,57,56,52,48,56,57,84,243,176,144,153,84,84,57,56,52,48,57,48,84,243,176,144,154,84,84,57,56,52,48,57,49,84,243,176,144,155,84,84,57,56,52,48,57,50,84,243,176,144,156,84,84,57,56,52,48,57,51,84,243,176,144,157,84,84,57,56,52,48,57,52,84,243,176,144,158,84,84,57,56,52,48,57,53,84,243,176,144,159,84,84,57,56,52,48,57,54,84,243,176,144,160,84,84,57,56,52,48,57,55,84,243,176,144,161,84,84,57,56,52,48,57,56,84,243,176,144,162,84,84,57,56,52,48,57,57,84,243,176,144,163,84,84,57,56,52,49,48,48,84,243,176,144,164,84,84,57,56,52,49,48,49,84,243,176,144,165,84,84,57,56,52,49,48,50,84,243,176,144,166,84,84,57,56,52,49,48,51,84,243,176,144,167,84,84,57,56,52,49,48,52,84,243,176,144,168,84,84,57,56,52,49,48,53,84,243,176,144,169,84,84,57,56,52,49,48,54,84,243,176,144,170,84,84,57,56,52,49,48,55,84,243,176,144,171,84,84,57,56,52,49,48,56,84,243,176,144,172,84,84,57,56,52,49,48,57,84,243,176,144,173,84,84,57,56,52,49,49,48,84,243,176,144,174,84,84,57,56,52,49,49,49,84,243,176,144,175,84,84,57,56,52,49,49,50,84,243,176,144,176,84,84,57,56,52,49,49,51,84,243,176,144,177,84,84,57,56,52,49,49,52,84,243,176,144,178,84,84,57,56,52,49,49,53,84,243,176,144,179,84,84,57,56,52,49,49,54,84,243,176,144,180,84,84,57,56,52,49,49,55,84,243,176,144,181,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21042 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21042_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21042_s.txt", Encoding.UTF8);

    public Test21042() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers98fd3eef9d4b4edcb3855acb5ae8645d",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,49,51,48,48,84,244,143,148,132,84,84,49,49,49,49,51,48,49,84,244,143,148,133,84,84,49,49,49,49,51,48,50,84,244,143,148,134,84,84,49,49,49,49,51,48,51,84,244,143,148,135,84,84,49,49,49,49,51,48,52,84,244,143,148,136,84,84,49,49,49,49,51,48,53,84,244,143,148,137,84,84,49,49,49,49,51,48,54,84,244,143,148,138,84,84,49,49,49,49,51,48,55,84,244,143,148,139,84,84,49,49,49,49,51,48,56,84,244,143,148,140,84,84,49,49,49,49,51,48,57,84,244,143,148,141,84,84,49,49,49,49,51,49,48,84,244,143,148,142,84,84,49,49,49,49,51,49,49,84,244,143,148,143,84,84,49,49,49,49,51,49,50,84,244,143,148,144,84,84,49,49,49,49,51,49,51,84,244,143,148,145,84,84,49,49,49,49,51,49,52,84,244,143,148,146,84,84,49,49,49,49,51,49,53,84,244,143,148,147,84,84,49,49,49,49,51,49,54,84,244,143,148,148,84,84,49,49,49,49,51,49,55,84,244,143,148,149,84,84,49,49,49,49,51,49,56,84,244,143,148,150,84,84,49,49,49,49,51,49,57,84,244,143,148,151,84,84,49,49,49,49,51,50,48,84,244,143,148,152,84,84,49,49,49,49,51,50,49,84,244,143,148,153,84,84,49,49,49,49,51,50,50,84,244,143,148,154,84,84,49,49,49,49,51,50,51,84,244,143,148,155,84,84,49,49,49,49,51,50,52,84,244,143,148,156,84,84,49,49,49,49,51,50,53,84,244,143,148,157,84,84,49,49,49,49,51,50,54,84,244,143,148,158,84,84,49,49,49,49,51,50,55,84,244,143,148,159,84,84,49,49,49,49,51,50,56,84,244,143,148,160,84,84,49,49,49,49,51,50,57,84,244,143,148,161,84,84,49,49,49,49,51,51,48,84,244,143,148,162,84,84,49,49,49,49,51,51,49,84,244,143,148,163,84,84,49,49,49,49,51,51,50,84,244,143,148,164,84,84,49,49,49,49,51,51,51,84,244,143,148,165,84,84,49,49,49,49,51,51,52,84,244,143,148,166,84,84,49,49,49,49,51,51,53,84,244,143,148,167,84,84,49,49,49,49,51,51,54,84,244,143,148,168,84,84,49,49,49,49,51,51,55,84,244,143,148,169,84,84,49,49,49,49,51,51,56,84,244,143,148,170,84,84,49,49,49,49,51,51,57,84,244,143,148,171,84,84,49,49,49,49,51,52,48,84,244,143,148,172,84,84,49,49,49,49,51,52,49,84,244,143,148,173,84,84,49,49,49,49,51,52,50,84,244,143,148,174,84,84,49,49,49,49,51,52,51,84,244,143,148,175,84,84,49,49,49,49,51,52,52,84,244,143,148,176,84,84,49,49,49,49,51,52,53,84,244,143,148,177,84,84,49,49,49,49,51,52,54,84,244,143,148,178,84,84,49,49,49,49,51,52,55,84,244,143,148,179,84,84,49,49,49,49,51,52,56,84,244,143,148,180,84,84,49,49,49,49,51,52,57,84,244,143,148,181,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20556 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20556_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20556_s.txt", Encoding.UTF8);

    public Test20556() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers169b02be047c4c76acbb586fdc8886c6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,54,53,55,57,56,84,244,132,141,134,84,84,49,48,54,53,55,57,57,84,244,132,141,135,84,84,49,48,54,53,56,48,48,84,244,132,141,136,84,84,49,48,54,53,56,48,49,84,244,132,141,137,84,84,49,48,54,53,56,48,50,84,244,132,141,138,84,84,49,48,54,53,56,48,51,84,244,132,141,139,84,84,49,48,54,53,56,48,52,84,244,132,141,140,84,84,49,48,54,53,56,48,53,84,244,132,141,141,84,84,49,48,54,53,56,48,54,84,244,132,141,142,84,84,49,48,54,53,56,48,55,84,244,132,141,143,84,84,49,48,54,53,56,48,56,84,244,132,141,144,84,84,49,48,54,53,56,48,57,84,244,132,141,145,84,84,49,48,54,53,56,49,48,84,244,132,141,146,84,84,49,48,54,53,56,49,49,84,244,132,141,147,84,84,49,48,54,53,56,49,50,84,244,132,141,148,84,84,49,48,54,53,56,49,51,84,244,132,141,149,84,84,49,48,54,53,56,49,52,84,244,132,141,150,84,84,49,48,54,53,56,49,53,84,244,132,141,151,84,84,49,48,54,53,56,49,54,84,244,132,141,152,84,84,49,48,54,53,56,49,55,84,244,132,141,153,84,84,49,48,54,53,56,49,56,84,244,132,141,154,84,84,49,48,54,53,56,49,57,84,244,132,141,155,84,84,49,48,54,53,56,50,48,84,244,132,141,156,84,84,49,48,54,53,56,50,49,84,244,132,141,157,84,84,49,48,54,53,56,50,50,84,244,132,141,158,84,84,49,48,54,53,56,50,51,84,244,132,141,159,84,84,49,48,54,53,56,50,52,84,244,132,141,160,84,84,49,48,54,53,56,50,53,84,244,132,141,161,84,84,49,48,54,53,56,50,54,84,244,132,141,162,84,84,49,48,54,53,56,50,55,84,244,132,141,163,84,84,49,48,54,53,56,50,56,84,244,132,141,164,84,84,49,48,54,53,56,50,57,84,244,132,141,165,84,84,49,48,54,53,56,51,48,84,244,132,141,166,84,84,49,48,54,53,56,51,49,84,244,132,141,167,84,84,49,48,54,53,56,51,50,84,244,132,141,168,84,84,49,48,54,53,56,51,51,84,244,132,141,169,84,84,49,48,54,53,56,51,52,84,244,132,141,170,84,84,49,48,54,53,56,51,53,84,244,132,141,171,84,84,49,48,54,53,56,51,54,84,244,132,141,172,84,84,49,48,54,53,56,51,55,84,244,132,141,173,84,84,49,48,54,53,56,51,56,84,244,132,141,174,84,84,49,48,54,53,56,51,57,84,244,132,141,175,84,84,49,48,54,53,56,52,48,84,244,132,141,176,84,84,49,48,54,53,56,52,49,84,244,132,141,177,84,84,49,48,54,53,56,52,50,84,244,132,141,178,84,84,49,48,54,53,56,52,51,84,244,132,141,179,84,84,49,48,54,53,56,52,52,84,244,132,141,180,84,84,49,48,54,53,56,52,53,84,244,132,141,181,84,84,49,48,54,53,56,52,54,84,244,132,141,182,84,84,49,48,54,53,56,52,55,84,244,132,141,183,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21532 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21532_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21532_s.txt", Encoding.UTF8);

    public Test21532() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers872c4bdb185f48ae95ca10006a31c5fb",
                        blob: "Blob867d2a61daba49cdb3e3908118bb4b5e",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 0,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20528 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20528_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20528_s.txt", Encoding.UTF8);

    public Test20528() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers169b02be047c4c76acbb586fdc8886c6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,54,48,57,54,56,84,244,131,129,168,84,84,49,48,54,48,57,54,57,84,244,131,129,169,84,84,49,48,54,48,57,55,48,84,244,131,129,170,84,84,49,48,54,48,57,55,49,84,244,131,129,171,84,84,49,48,54,48,57,55,50,84,244,131,129,172,84,84,49,48,54,48,57,55,51,84,244,131,129,173,84,84,49,48,54,48,57,55,52,84,244,131,129,174,84,84,49,48,54,48,57,55,53,84,244,131,129,175,84,84,49,48,54,48,57,55,54,84,244,131,129,176,84,84,49,48,54,48,57,55,55,84,244,131,129,177,84,84,49,48,54,48,57,55,56,84,244,131,129,178,84,84,49,48,54,48,57,55,57,84,244,131,129,179,84,84,49,48,54,48,57,56,48,84,244,131,129,180,84,84,49,48,54,48,57,56,49,84,244,131,129,181,84,84,49,48,54,48,57,56,50,84,244,131,129,182,84,84,49,48,54,48,57,56,51,84,244,131,129,183,84,84,49,48,54,48,57,56,52,84,244,131,129,184,84,84,49,48,54,48,57,56,53,84,244,131,129,185,84,84,49,48,54,48,57,56,54,84,244,131,129,186,84,84,49,48,54,48,57,56,55,84,244,131,129,187,84,84,49,48,54,48,57,56,56,84,244,131,129,188,84,84,49,48,54,48,57,56,57,84,244,131,129,189,84,84,49,48,54,48,57,57,48,84,244,131,129,190,84,84,49,48,54,48,57,57,49,84,244,131,129,191,84,84,49,48,54,48,57,57,51,84,244,131,130,129,84,84,49,48,54,49,48,48,53,84,244,131,130,141,84,84,49,48,54,49,48,48,55,84,244,131,130,143,84,84,49,48,54,49,48,48,56,84,244,131,130,144,84,84,49,48,54,49,48,50,49,84,244,131,130,157,84,84,49,48,54,49,48,53,55,84,244,131,131,129,84,84,49,48,54,49,48,54,57,84,244,131,131,141,84,84,49,48,54,49,48,55,49,84,244,131,131,143,84,84,49,48,54,49,48,55,50,84,244,131,131,144,84,84,49,48,54,49,48,56,53,84,244,131,131,157,84,84,49,48,54,49,49,50,49,84,244,131,132,129,84,84,49,48,54,49,49,51,51,84,244,131,132,141,84,84,49,48,54,49,49,51,53,84,244,131,132,143,84,84,49,48,54,49,49,51,54,84,244,131,132,144,84,84,49,48,54,49,49,52,57,84,244,131,132,157,84,84,49,48,54,49,49,56,53,84,244,131,133,129,84,84,49,48,54,49,49,57,55,84,244,131,133,141,84,84,49,48,54,49,49,57,57,84,244,131,133,143,84,84,49,48,54,49,50,48,48,84,244,131,133,144,84,84,49,48,54,49,50,49,51,84,244,131,133,157,84,84,49,48,54,49,50,52,57,84,244,131,134,129,84,84,49,48,54,49,50,54,49,84,244,131,134,141,84,84,49,48,54,49,50,54,51,84,244,131,134,143,84,84,49,48,54,49,50,54,52,84,244,131,134,144,84,84,49,48,54,49,50,55,55,84,244,131,134,157,84,84,49,48,54,49,51,49,51,84,244,131,135,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22808 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22808_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22808_s.txt", Encoding.UTF8);

    public Test22808() : base(recordedRequest, recordedResponse, "accounts8d43a0490823d21")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a0490823d21",
                        container: "containers0bd48f2ce8374f57b3f3c61b5595b35b",
                        blob: "Blobd82bfd0fc4c6460ca9456c6ff86951e1",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20017 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20017_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20017_s.txt", Encoding.UTF8);

    public Test20017() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers612d6939acd44cdbbba30cffbd18a713",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,48,51,56,53,53,84,243,181,133,143,84,84,49,48,48,51,56,53,54,84,243,181,133,144,84,84,49,48,48,51,56,54,57,84,243,181,133,157,84,84,49,48,48,51,57,48,53,84,243,181,134,129,84,84,49,48,48,51,57,49,55,84,243,181,134,141,84,84,49,48,48,51,57,49,57,84,243,181,134,143,84,84,49,48,48,51,57,50,48,84,243,181,134,144,84,84,49,48,48,51,57,51,51,84,243,181,134,157,84,84,49,48,48,51,57,54,57,84,243,181,135,129,84,84,49,48,48,51,57,56,49,84,243,181,135,141,84,84,49,48,48,51,57,56,51,84,243,181,135,143,84,84,49,48,48,51,57,56,52,84,243,181,135,144,84,84,49,48,48,51,57,57,55,84,243,181,135,157,84,84,49,48,48,52,48,51,51,84,243,181,136,129,84,84,49,48,48,52,48,52,53,84,243,181,136,141,84,84,49,48,48,52,48,52,55,84,243,181,136,143,84,84,49,48,48,52,48,52,56,84,243,181,136,144,84,84,49,48,48,52,48,54,49,84,243,181,136,157,84,84,49,48,48,52,48,57,55,84,243,181,137,129,84,84,49,48,48,52,49,48,57,84,243,181,137,141,84,84,49,48,48,52,49,49,49,84,243,181,137,143,84,84,49,48,48,52,49,49,50,84,243,181,137,144,84,84,49,48,48,52,49,50,53,84,243,181,137,157,84,84,49,48,48,52,49,54,49,84,243,181,138,129,84,84,49,48,48,52,49,55,51,84,243,181,138,141,84,84,49,48,48,52,49,55,53,84,243,181,138,143,84,84,49,48,48,52,49,55,54,84,243,181,138,144,84,84,49,48,48,52,49,56,57,84,243,181,138,157,84,84,49,48,48,52,50,50,53,84,243,181,139,129,84,84,49,48,48,52,50,51,55,84,243,181,139,141,84,84,49,48,48,52,50,51,57,84,243,181,139,143,84,84,49,48,48,52,50,52,48,84,243,181,139,144,84,84,49,48,48,52,50,53,51,84,243,181,139,157,84,84,49,48,48,52,50,56,57,84,243,181,140,129,84,84,49,48,48,52,51,48,49,84,243,181,140,141,84,84,49,48,48,52,51,48,51,84,243,181,140,143,84,84,49,48,48,52,51,48,52,84,243,181,140,144,84,84,49,48,48,52,51,49,55,84,243,181,140,157,84,84,49,48,48,52,51,53,50,84,243,181,141,128,84,84,49,48,48,52,51,53,51,84,243,181,141,129,84,84,49,48,48,52,51,53,52,84,243,181,141,130,84,84,49,48,48,52,51,53,53,84,243,181,141,131,84,84,49,48,48,52,51,53,54,84,243,181,141,132,84,84,49,48,48,52,51,53,55,84,243,181,141,133,84,84,49,48,48,52,51,53,56,84,243,181,141,134,84,84,49,48,48,52,51,53,57,84,243,181,141,135,84,84,49,48,48,52,51,54,48,84,243,181,141,136,84,84,49,48,48,52,51,54,49,84,243,181,141,137,84,84,49,48,48,52,51,54,50,84,243,181,141,138,84,84,49,48,48,52,51,54,51,84,243,181,141,139,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22556 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22556_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22556_s.txt", Encoding.UTF8);

    public Test22556() : base(recordedRequest, recordedResponse, "accounts8d43a048d26afcd")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048d26afcd",
                        container: "containersddd934ca569845dc89778f0bd55316f0",
                        blob: "Blob073751f8773540c59c528ccf12f5f14c",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19824 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19824_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19824_s.txt", Encoding.UTF8);

    public Test19824() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers3d1fce2fe43b489ca49e5d4066014499",
                        blob: Encoding.UTF8.GetString(new byte[]{84,53,57,52,55,49,84,238,161,143,84,84,53,57,52,55,50,84,238,161,144,84,84,53,57,52,56,53,84,238,161,157,84,84,53,57,53,50,49,84,238,162,129,84,84,53,57,53,51,51,84,238,162,141,84,84,53,57,53,51,53,84,238,162,143,84,84,53,57,53,51,54,84,238,162,144,84,84,53,57,53,52,57,84,238,162,157,84,84,53,57,53,56,53,84,238,163,129,84,84,53,57,53,57,55,84,238,163,141,84,84,53,57,53,57,57,84,238,163,143,84,84,53,57,54,48,48,84,238,163,144,84,84,53,57,54,49,51,84,238,163,157,84,84,53,57,54,52,57,84,238,164,129,84,84,53,57,54,54,49,84,238,164,141,84,84,53,57,54,54,51,84,238,164,143,84,84,53,57,54,54,52,84,238,164,144,84,84,53,57,54,55,55,84,238,164,157,84,84,53,57,55,49,51,84,238,165,129,84,84,53,57,55,50,53,84,238,165,141,84,84,53,57,55,50,55,84,238,165,143,84,84,53,57,55,50,56,84,238,165,144,84,84,53,57,55,52,49,84,238,165,157,84,84,53,57,55,55,55,84,238,166,129,84,84,53,57,55,56,57,84,238,166,141,84,84,53,57,55,57,49,84,238,166,143,84,84,53,57,55,57,50,84,238,166,144,84,84,53,57,56,48,53,84,238,166,157,84,84,53,57,56,52,49,84,238,167,129,84,84,53,57,56,53,51,84,238,167,141,84,84,53,57,56,53,53,84,238,167,143,84,84,53,57,56,53,54,84,238,167,144,84,84,53,57,56,54,57,84,238,167,157,84,84,53,57,57,48,53,84,238,168,129,84,84,53,57,57,49,55,84,238,168,141,84,84,53,57,57,49,57,84,238,168,143,84,84,53,57,57,50,48,84,238,168,144,84,84,53,57,57,51,51,84,238,168,157,84,84,53,57,57,54,57,84,238,169,129,84,84,53,57,57,56,49,84,238,169,141,84,84,53,57,57,56,51,84,238,169,143,84,84,53,57,57,56,52,84,238,169,144,84,84,53,57,57,57,55,84,238,169,157,84,84,54,48,48,51,51,84,238,170,129,84,84,54,48,48,52,53,84,238,170,141,84,84,54,48,48,52,55,84,238,170,143,84,84,54,48,48,52,56,84,238,170,144,84,84,54,48,48,54,49,84,238,170,157,84,84,54,48,48,57,55,84,238,171,129,84,84,54,48,49,48,57,84,238,171,141,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22557 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22557_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22557_s.txt", Encoding.UTF8);

    public Test22557() : base(recordedRequest, recordedResponse, "accounts8d43a048d26afcd")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048d26afcd",
                        container: "containersddd934ca569845dc89778f0bd55316f0",
                        blob: "Blob54e9f2db32e342618438914ebe308d4b",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20300 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20300_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20300_s.txt", Encoding.UTF8);

    public Test20300() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers712afb35b54344eb8fa90647f752cd92",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,52,56,54,53,54,84,244,128,129,144,84,84,49,48,52,56,54,53,55,84,244,128,129,145,84,84,49,48,52,56,54,53,56,84,244,128,129,146,84,84,49,48,52,56,54,53,57,84,244,128,129,147,84,84,49,48,52,56,54,54,48,84,244,128,129,148,84,84,49,48,52,56,54,54,49,84,244,128,129,149,84,84,49,48,52,56,54,54,50,84,244,128,129,150,84,84,49,48,52,56,54,54,51,84,244,128,129,151,84,84,49,48,52,56,54,54,52,84,244,128,129,152,84,84,49,48,52,56,54,54,53,84,244,128,129,153,84,84,49,48,52,56,54,54,54,84,244,128,129,154,84,84,49,48,52,56,54,54,55,84,244,128,129,155,84,84,49,48,52,56,54,54,56,84,244,128,129,156,84,84,49,48,52,56,54,54,57,84,244,128,129,157,84,84,49,48,52,56,54,55,48,84,244,128,129,158,84,84,49,48,52,56,54,55,49,84,244,128,129,159,84,84,49,48,52,56,54,55,50,84,244,128,129,160,84,84,49,48,52,56,54,55,51,84,244,128,129,161,84,84,49,48,52,56,54,55,52,84,244,128,129,162,84,84,49,48,52,56,54,55,53,84,244,128,129,163,84,84,49,48,52,56,54,55,54,84,244,128,129,164,84,84,49,48,52,56,54,55,55,84,244,128,129,165,84,84,49,48,52,56,54,55,56,84,244,128,129,166,84,84,49,48,52,56,54,55,57,84,244,128,129,167,84,84,49,48,52,56,54,56,48,84,244,128,129,168,84,84,49,48,52,56,54,56,49,84,244,128,129,169,84,84,49,48,52,56,54,56,50,84,244,128,129,170,84,84,49,48,52,56,54,56,51,84,244,128,129,171,84,84,49,48,52,56,54,56,52,84,244,128,129,172,84,84,49,48,52,56,54,56,53,84,244,128,129,173,84,84,49,48,52,56,54,56,54,84,244,128,129,174,84,84,49,48,52,56,54,56,55,84,244,128,129,175,84,84,49,48,52,56,54,56,56,84,244,128,129,176,84,84,49,48,52,56,54,56,57,84,244,128,129,177,84,84,49,48,52,56,54,57,48,84,244,128,129,178,84,84,49,48,52,56,54,57,49,84,244,128,129,179,84,84,49,48,52,56,54,57,50,84,244,128,129,180,84,84,49,48,52,56,54,57,51,84,244,128,129,181,84,84,49,48,52,56,54,57,52,84,244,128,129,182,84,84,49,48,52,56,54,57,53,84,244,128,129,183,84,84,49,48,52,56,54,57,54,84,244,128,129,184,84,84,49,48,52,56,54,57,55,84,244,128,129,185,84,84,49,48,52,56,54,57,56,84,244,128,129,186,84,84,49,48,52,56,54,57,57,84,244,128,129,187,84,84,49,48,52,56,55,48,48,84,244,128,129,188,84,84,49,48,52,56,55,48,49,84,244,128,129,189,84,84,49,48,52,56,55,48,50,84,244,128,129,190,84,84,49,48,52,56,55,48,51,84,244,128,129,191,84,84,49,48,52,56,55,48,53,84,244,128,130,129,84,84,49,48,52,56,55,49,55,84,244,128,130,141,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21100 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21100_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21100_s.txt", Encoding.UTF8);

    public Test21100() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers79aa3dd90e344ebe9466f3cb0c56378a",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,50,55,48,48,84,244,143,169,188,84,84,49,49,49,50,55,48,49,84,244,143,169,189,84,84,49,49,49,50,55,48,50,84,244,143,169,190,84,84,49,49,49,50,55,48,51,84,244,143,169,191,84,84,49,49,49,50,55,48,52,84,244,143,170,128,84,84,49,49,49,50,55,48,53,84,244,143,170,129,84,84,49,49,49,50,55,48,54,84,244,143,170,130,84,84,49,49,49,50,55,48,55,84,244,143,170,131,84,84,49,49,49,50,55,48,56,84,244,143,170,132,84,84,49,49,49,50,55,48,57,84,244,143,170,133,84,84,49,49,49,50,55,49,48,84,244,143,170,134,84,84,49,49,49,50,55,49,49,84,244,143,170,135,84,84,49,49,49,50,55,49,50,84,244,143,170,136,84,84,49,49,49,50,55,49,51,84,244,143,170,137,84,84,49,49,49,50,55,49,52,84,244,143,170,138,84,84,49,49,49,50,55,49,53,84,244,143,170,139,84,84,49,49,49,50,55,49,54,84,244,143,170,140,84,84,49,49,49,50,55,49,55,84,244,143,170,141,84,84,49,49,49,50,55,49,56,84,244,143,170,142,84,84,49,49,49,50,55,49,57,84,244,143,170,143,84,84,49,49,49,50,55,50,48,84,244,143,170,144,84,84,49,49,49,50,55,50,49,84,244,143,170,145,84,84,49,49,49,50,55,50,50,84,244,143,170,146,84,84,49,49,49,50,55,50,51,84,244,143,170,147,84,84,49,49,49,50,55,50,52,84,244,143,170,148,84,84,49,49,49,50,55,50,53,84,244,143,170,149,84,84,49,49,49,50,55,50,54,84,244,143,170,150,84,84,49,49,49,50,55,50,55,84,244,143,170,151,84,84,49,49,49,50,55,50,56,84,244,143,170,152,84,84,49,49,49,50,55,50,57,84,244,143,170,153,84,84,49,49,49,50,55,51,48,84,244,143,170,154,84,84,49,49,49,50,55,51,49,84,244,143,170,155,84,84,49,49,49,50,55,51,50,84,244,143,170,156,84,84,49,49,49,50,55,51,51,84,244,143,170,157,84,84,49,49,49,50,55,51,52,84,244,143,170,158,84,84,49,49,49,50,55,51,53,84,244,143,170,159,84,84,49,49,49,50,55,51,54,84,244,143,170,160,84,84,49,49,49,50,55,51,55,84,244,143,170,161,84,84,49,49,49,50,55,51,56,84,244,143,170,162,84,84,49,49,49,50,55,51,57,84,244,143,170,163,84,84,49,49,49,50,55,52,48,84,244,143,170,164,84,84,49,49,49,50,55,52,49,84,244,143,170,165,84,84,49,49,49,50,55,52,50,84,244,143,170,166,84,84,49,49,49,50,55,52,51,84,244,143,170,167,84,84,49,49,49,50,55,52,52,84,244,143,170,168,84,84,49,49,49,50,55,52,53,84,244,143,170,169,84,84,49,49,49,50,55,52,54,84,244,143,170,170,84,84,49,49,49,50,55,52,55,84,244,143,170,171,84,84,49,49,49,50,55,52,56,84,244,143,170,172,84,84,49,49,49,50,55,52,57,84,244,143,170,173,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20973 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20973_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20973_s.txt", Encoding.UTF8);

    public Test20973() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersdf87e0f5374149afa792ac52b484870e",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,54,57,56,54,84,244,142,144,170,84,84,49,49,48,54,57,56,55,84,244,142,144,171,84,84,49,49,48,54,57,56,56,84,244,142,144,172,84,84,49,49,48,54,57,56,57,84,244,142,144,173,84,84,49,49,48,54,57,57,48,84,244,142,144,174,84,84,49,49,48,54,57,57,49,84,244,142,144,175,84,84,49,49,48,54,57,57,50,84,244,142,144,176,84,84,49,49,48,54,57,57,51,84,244,142,144,177,84,84,49,49,48,54,57,57,52,84,244,142,144,178,84,84,49,49,48,54,57,57,53,84,244,142,144,179,84,84,49,49,48,54,57,57,54,84,244,142,144,180,84,84,49,49,48,54,57,57,55,84,244,142,144,181,84,84,49,49,48,54,57,57,56,84,244,142,144,182,84,84,49,49,48,54,57,57,57,84,244,142,144,183,84,84,49,49,48,55,48,48,48,84,244,142,144,184,84,84,49,49,48,55,48,48,49,84,244,142,144,185,84,84,49,49,48,55,48,48,50,84,244,142,144,186,84,84,49,49,48,55,48,48,51,84,244,142,144,187,84,84,49,49,48,55,48,48,52,84,244,142,144,188,84,84,49,49,48,55,48,48,53,84,244,142,144,189,84,84,49,49,48,55,48,48,54,84,244,142,144,190,84,84,49,49,48,55,48,48,55,84,244,142,144,191,84,84,49,49,48,55,48,48,57,84,244,142,145,129,84,84,49,49,48,55,48,50,49,84,244,142,145,141,84,84,49,49,48,55,48,50,51,84,244,142,145,143,84,84,49,49,48,55,48,50,52,84,244,142,145,144,84,84,49,49,48,55,48,51,55,84,244,142,145,157,84,84,49,49,48,55,48,55,51,84,244,142,146,129,84,84,49,49,48,55,48,56,53,84,244,142,146,141,84,84,49,49,48,55,48,56,55,84,244,142,146,143,84,84,49,49,48,55,48,56,56,84,244,142,146,144,84,84,49,49,48,55,49,48,49,84,244,142,146,157,84,84,49,49,48,55,49,51,55,84,244,142,147,129,84,84,49,49,48,55,49,52,57,84,244,142,147,141,84,84,49,49,48,55,49,53,49,84,244,142,147,143,84,84,49,49,48,55,49,53,50,84,244,142,147,144,84,84,49,49,48,55,49,54,53,84,244,142,147,157,84,84,49,49,48,55,50,48,49,84,244,142,148,129,84,84,49,49,48,55,50,49,51,84,244,142,148,141,84,84,49,49,48,55,50,49,53,84,244,142,148,143,84,84,49,49,48,55,50,49,54,84,244,142,148,144,84,84,49,49,48,55,50,50,57,84,244,142,148,157,84,84,49,49,48,55,50,54,53,84,244,142,149,129,84,84,49,49,48,55,50,55,55,84,244,142,149,141,84,84,49,49,48,55,50,55,57,84,244,142,149,143,84,84,49,49,48,55,50,56,48,84,244,142,149,144,84,84,49,49,48,55,50,57,51,84,244,142,149,157,84,84,49,49,48,55,51,50,57,84,244,142,150,129,84,84,49,49,48,55,51,52,49,84,244,142,150,141,84,84,49,49,48,55,51,52,51,84,244,142,150,143,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22809 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22809_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22809_s.txt", Encoding.UTF8);

    public Test22809() : base(recordedRequest, recordedResponse, "accounts8d43a0490823d21")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a0490823d21",
                        container: "containers0bd48f2ce8374f57b3f3c61b5595b35b",
                        blob: "Blob837d119466334235ab08308754453acd",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20784 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20784_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20784_s.txt", Encoding.UTF8);

    public Test20784() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers8240a720eb234783afd6a68d24f64161",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,48,52,56,49,84,244,140,171,129,84,84,49,49,48,48,52,57,51,84,244,140,171,141,84,84,49,49,48,48,52,57,53,84,244,140,171,143,84,84,49,49,48,48,52,57,54,84,244,140,171,144,84,84,49,49,48,48,53,48,57,84,244,140,171,157,84,84,49,49,48,48,53,52,53,84,244,140,172,129,84,84,49,49,48,48,53,53,55,84,244,140,172,141,84,84,49,49,48,48,53,53,57,84,244,140,172,143,84,84,49,49,48,48,53,54,48,84,244,140,172,144,84,84,49,49,48,48,53,55,51,84,244,140,172,157,84,84,49,49,48,48,54,48,57,84,244,140,173,129,84,84,49,49,48,48,54,50,49,84,244,140,173,141,84,84,49,49,48,48,54,50,51,84,244,140,173,143,84,84,49,49,48,48,54,50,52,84,244,140,173,144,84,84,49,49,48,48,54,51,55,84,244,140,173,157,84,84,49,49,48,48,54,55,51,84,244,140,174,129,84,84,49,49,48,48,54,56,53,84,244,140,174,141,84,84,49,49,48,48,54,56,55,84,244,140,174,143,84,84,49,49,48,48,54,56,56,84,244,140,174,144,84,84,49,49,48,48,55,48,49,84,244,140,174,157,84,84,49,49,48,48,55,51,55,84,244,140,175,129,84,84,49,49,48,48,55,52,57,84,244,140,175,141,84,84,49,49,48,48,55,53,49,84,244,140,175,143,84,84,49,49,48,48,55,53,50,84,244,140,175,144,84,84,49,49,48,48,55,54,53,84,244,140,175,157,84,84,49,49,48,48,56,48,49,84,244,140,176,129,84,84,49,49,48,48,56,49,51,84,244,140,176,141,84,84,49,49,48,48,56,49,53,84,244,140,176,143,84,84,49,49,48,48,56,49,54,84,244,140,176,144,84,84,49,49,48,48,56,50,57,84,244,140,176,157,84,84,49,49,48,48,56,54,53,84,244,140,177,129,84,84,49,49,48,48,56,55,55,84,244,140,177,141,84,84,49,49,48,48,56,55,57,84,244,140,177,143,84,84,49,49,48,48,56,56,48,84,244,140,177,144,84,84,49,49,48,48,56,57,51,84,244,140,177,157,84,84,49,49,48,48,57,50,57,84,244,140,178,129,84,84,49,49,48,48,57,52,49,84,244,140,178,141,84,84,49,49,48,48,57,52,51,84,244,140,178,143,84,84,49,49,48,48,57,52,52,84,244,140,178,144,84,84,49,49,48,48,57,53,55,84,244,140,178,157,84,84,49,49,48,48,57,57,51,84,244,140,179,129,84,84,49,49,48,49,48,48,53,84,244,140,179,141,84,84,49,49,48,49,48,48,55,84,244,140,179,143,84,84,49,49,48,49,48,48,56,84,244,140,179,144,84,84,49,49,48,49,48,50,49,84,244,140,179,157,84,84,49,49,48,49,48,53,55,84,244,140,180,129,84,84,49,49,48,49,48,54,57,84,244,140,180,141,84,84,49,49,48,49,48,55,49,84,244,140,180,143,84,84,49,49,48,49,48,55,50,84,244,140,180,144,84,84,49,49,48,49,48,56,53,84,244,140,180,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22810 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22810_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22810_s.txt", Encoding.UTF8);

    public Test22810() : base(recordedRequest, recordedResponse, "accounts8d43a0490823d21")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a0490823d21",
                        container: "containers0bd48f2ce8374f57b3f3c61b5595b35b",
                        blob: "Blob690a38328bcd4d7e949b403504956420",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20118 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20118_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20118_s.txt", Encoding.UTF8);

    public Test20118() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers02552a2396c44255a61dd19b9714b3b6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,49,57,57,56,57,84,243,185,129,149,84,84,49,48,49,57,57,57,48,84,243,185,129,150,84,84,49,48,49,57,57,57,49,84,243,185,129,151,84,84,49,48,49,57,57,57,50,84,243,185,129,152,84,84,49,48,49,57,57,57,51,84,243,185,129,153,84,84,49,48,49,57,57,57,52,84,243,185,129,154,84,84,49,48,49,57,57,57,53,84,243,185,129,155,84,84,49,48,49,57,57,57,54,84,243,185,129,156,84,84,49,48,49,57,57,57,55,84,243,185,129,157,84,84,49,48,49,57,57,57,56,84,243,185,129,158,84,84,49,48,49,57,57,57,57,84,243,185,129,159,84,84,49,48,50,48,48,48,48,84,243,185,129,160,84,84,49,48,50,48,48,48,49,84,243,185,129,161,84,84,49,48,50,48,48,48,50,84,243,185,129,162,84,84,49,48,50,48,48,48,51,84,243,185,129,163,84,84,49,48,50,48,48,48,52,84,243,185,129,164,84,84,49,48,50,48,48,48,53,84,243,185,129,165,84,84,49,48,50,48,48,48,54,84,243,185,129,166,84,84,49,48,50,48,48,48,55,84,243,185,129,167,84,84,49,48,50,48,48,48,56,84,243,185,129,168,84,84,49,48,50,48,48,48,57,84,243,185,129,169,84,84,49,48,50,48,48,49,48,84,243,185,129,170,84,84,49,48,50,48,48,49,49,84,243,185,129,171,84,84,49,48,50,48,48,49,50,84,243,185,129,172,84,84,49,48,50,48,48,49,51,84,243,185,129,173,84,84,49,48,50,48,48,49,52,84,243,185,129,174,84,84,49,48,50,48,48,49,53,84,243,185,129,175,84,84,49,48,50,48,48,49,54,84,243,185,129,176,84,84,49,48,50,48,48,49,55,84,243,185,129,177,84,84,49,48,50,48,48,49,56,84,243,185,129,178,84,84,49,48,50,48,48,49,57,84,243,185,129,179,84,84,49,48,50,48,48,50,48,84,243,185,129,180,84,84,49,48,50,48,48,50,49,84,243,185,129,181,84,84,49,48,50,48,48,50,50,84,243,185,129,182,84,84,49,48,50,48,48,50,51,84,243,185,129,183,84,84,49,48,50,48,48,50,52,84,243,185,129,184,84,84,49,48,50,48,48,50,53,84,243,185,129,185,84,84,49,48,50,48,48,50,54,84,243,185,129,186,84,84,49,48,50,48,48,50,55,84,243,185,129,187,84,84,49,48,50,48,48,50,56,84,243,185,129,188,84,84,49,48,50,48,48,50,57,84,243,185,129,189,84,84,49,48,50,48,48,51,48,84,243,185,129,190,84,84,49,48,50,48,48,51,49,84,243,185,129,191,84,84,49,48,50,48,48,51,51,84,243,185,130,129,84,84,49,48,50,48,48,52,53,84,243,185,130,141,84,84,49,48,50,48,48,52,55,84,243,185,130,143,84,84,49,48,50,48,48,52,56,84,243,185,130,144,84,84,49,48,50,48,48,54,49,84,243,185,130,157,84,84,49,48,50,48,48,57,55,84,243,185,131,129,84,84,49,48,50,48,49,48,57,84,243,185,131,141,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20846 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20846_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20846_s.txt", Encoding.UTF8);

    public Test20846() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersf4b0dcea8f7b4ccf92e1f36b952ddf93",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,51,50,49,57,84,244,141,149,179,84,84,49,49,48,51,50,50,48,84,244,141,149,180,84,84,49,49,48,51,50,50,49,84,244,141,149,181,84,84,49,49,48,51,50,50,50,84,244,141,149,182,84,84,49,49,48,51,50,50,51,84,244,141,149,183,84,84,49,49,48,51,50,50,52,84,244,141,149,184,84,84,49,49,48,51,50,50,53,84,244,141,149,185,84,84,49,49,48,51,50,50,54,84,244,141,149,186,84,84,49,49,48,51,50,50,55,84,244,141,149,187,84,84,49,49,48,51,50,50,56,84,244,141,149,188,84,84,49,49,48,51,50,50,57,84,244,141,149,189,84,84,49,49,48,51,50,51,48,84,244,141,149,190,84,84,49,49,48,51,50,51,49,84,244,141,149,191,84,84,49,49,48,51,50,51,50,84,244,141,150,128,84,84,49,49,48,51,50,51,51,84,244,141,150,129,84,84,49,49,48,51,50,51,52,84,244,141,150,130,84,84,49,49,48,51,50,51,53,84,244,141,150,131,84,84,49,49,48,51,50,51,54,84,244,141,150,132,84,84,49,49,48,51,50,51,55,84,244,141,150,133,84,84,49,49,48,51,50,51,56,84,244,141,150,134,84,84,49,49,48,51,50,51,57,84,244,141,150,135,84,84,49,49,48,51,50,52,48,84,244,141,150,136,84,84,49,49,48,51,50,52,49,84,244,141,150,137,84,84,49,49,48,51,50,52,50,84,244,141,150,138,84,84,49,49,48,51,50,52,51,84,244,141,150,139,84,84,49,49,48,51,50,52,52,84,244,141,150,140,84,84,49,49,48,51,50,52,53,84,244,141,150,141,84,84,49,49,48,51,50,52,54,84,244,141,150,142,84,84,49,49,48,51,50,52,55,84,244,141,150,143,84,84,49,49,48,51,50,52,56,84,244,141,150,144,84,84,49,49,48,51,50,52,57,84,244,141,150,145,84,84,49,49,48,51,50,53,48,84,244,141,150,146,84,84,49,49,48,51,50,53,49,84,244,141,150,147,84,84,49,49,48,51,50,53,50,84,244,141,150,148,84,84,49,49,48,51,50,53,51,84,244,141,150,149,84,84,49,49,48,51,50,53,52,84,244,141,150,150,84,84,49,49,48,51,50,53,53,84,244,141,150,151,84,84,49,49,48,51,50,53,54,84,244,141,150,152,84,84,49,49,48,51,50,53,55,84,244,141,150,153,84,84,49,49,48,51,50,53,56,84,244,141,150,154,84,84,49,49,48,51,50,53,57,84,244,141,150,155,84,84,49,49,48,51,50,54,48,84,244,141,150,156,84,84,49,49,48,51,50,54,49,84,244,141,150,157,84,84,49,49,48,51,50,54,50,84,244,141,150,158,84,84,49,49,48,51,50,54,51,84,244,141,150,159,84,84,49,49,48,51,50,54,52,84,244,141,150,160,84,84,49,49,48,51,50,54,53,84,244,141,150,161,84,84,49,49,48,51,50,54,54,84,244,141,150,162,84,84,49,49,48,51,50,54,55,84,244,141,150,163,84,84,49,49,48,51,50,54,56,84,244,141,150,164,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test23148 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\23148_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\23148_s.txt", Encoding.UTF8);

    public Test23148() : base(recordedRequest, recordedResponse, "accounts8d43a04974f294e")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a04974f294e",
                        container: "containersdb5f94a9ab374a6c85cb37561334bc2c",
                        blob: "Blob31f4d7006cfd4d2589d375a9bb9f5d15",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 594944,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22558 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22558_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22558_s.txt", Encoding.UTF8);

    public Test22558() : base(recordedRequest, recordedResponse, "accounts8d43a048d26afcd")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048d26afcd",
                        container: "containersddd934ca569845dc89778f0bd55316f0",
                        blob: "Blob650672b0ae994363af75b7aaebe3a42c",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20175 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20175_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20175_s.txt", Encoding.UTF8);

    public Test20175() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers4f3362aed9424bd2bfac6751ee820ab9",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,50,56,57,53,48,84,243,187,141,150,84,84,49,48,50,56,57,53,49,84,243,187,141,151,84,84,49,48,50,56,57,53,50,84,243,187,141,152,84,84,49,48,50,56,57,53,51,84,243,187,141,153,84,84,49,48,50,56,57,53,52,84,243,187,141,154,84,84,49,48,50,56,57,53,53,84,243,187,141,155,84,84,49,48,50,56,57,53,54,84,243,187,141,156,84,84,49,48,50,56,57,53,55,84,243,187,141,157,84,84,49,48,50,56,57,53,56,84,243,187,141,158,84,84,49,48,50,56,57,53,57,84,243,187,141,159,84,84,49,48,50,56,57,54,48,84,243,187,141,160,84,84,49,48,50,56,57,54,49,84,243,187,141,161,84,84,49,48,50,56,57,54,50,84,243,187,141,162,84,84,49,48,50,56,57,54,51,84,243,187,141,163,84,84,49,48,50,56,57,54,52,84,243,187,141,164,84,84,49,48,50,56,57,54,53,84,243,187,141,165,84,84,49,48,50,56,57,54,54,84,243,187,141,166,84,84,49,48,50,56,57,54,55,84,243,187,141,167,84,84,49,48,50,56,57,54,56,84,243,187,141,168,84,84,49,48,50,56,57,54,57,84,243,187,141,169,84,84,49,48,50,56,57,55,48,84,243,187,141,170,84,84,49,48,50,56,57,55,49,84,243,187,141,171,84,84,49,48,50,56,57,55,50,84,243,187,141,172,84,84,49,48,50,56,57,55,51,84,243,187,141,173,84,84,49,48,50,56,57,55,52,84,243,187,141,174,84,84,49,48,50,56,57,55,53,84,243,187,141,175,84,84,49,48,50,56,57,55,54,84,243,187,141,176,84,84,49,48,50,56,57,55,55,84,243,187,141,177,84,84,49,48,50,56,57,55,56,84,243,187,141,178,84,84,49,48,50,56,57,55,57,84,243,187,141,179,84,84,49,48,50,56,57,56,48,84,243,187,141,180,84,84,49,48,50,56,57,56,49,84,243,187,141,181,84,84,49,48,50,56,57,56,50,84,243,187,141,182,84,84,49,48,50,56,57,56,51,84,243,187,141,183,84,84,49,48,50,56,57,56,52,84,243,187,141,184,84,84,49,48,50,56,57,56,53,84,243,187,141,185,84,84,49,48,50,56,57,56,54,84,243,187,141,186,84,84,49,48,50,56,57,56,55,84,243,187,141,187,84,84,49,48,50,56,57,56,56,84,243,187,141,188,84,84,49,48,50,56,57,56,57,84,243,187,141,189,84,84,49,48,50,56,57,57,48,84,243,187,141,190,84,84,49,48,50,56,57,57,49,84,243,187,141,191,84,84,49,48,50,56,57,57,51,84,243,187,142,129,84,84,49,48,50,57,48,48,53,84,243,187,142,141,84,84,49,48,50,57,48,48,55,84,243,187,142,143,84,84,49,48,50,57,48,48,56,84,243,187,142,144,84,84,49,48,50,57,48,50,49,84,243,187,142,157,84,84,49,48,50,57,48,53,54,84,243,187,143,128,84,84,49,48,50,57,48,53,55,84,243,187,143,129,84,84,49,48,50,57,48,53,56,84,243,187,143,130,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19411 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19411_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19411_s.txt", Encoding.UTF8);

    public Test19411() : base(recordedRequest, recordedResponse, "accounts8d43a024a0ff30a")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a024a0ff30a",
                        container: "$root",
                        blob: "a",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20398 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20398_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20398_s.txt", Encoding.UTF8);

    public Test20398() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers7f83ba854dc4459da9078f97f691d28c",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,52,51,55,56,84,244,129,154,170,84,84,49,48,53,52,51,55,57,84,244,129,154,171,84,84,49,48,53,52,51,56,48,84,244,129,154,172,84,84,49,48,53,52,51,56,49,84,244,129,154,173,84,84,49,48,53,52,51,56,50,84,244,129,154,174,84,84,49,48,53,52,51,56,51,84,244,129,154,175,84,84,49,48,53,52,51,56,52,84,244,129,154,176,84,84,49,48,53,52,51,56,53,84,244,129,154,177,84,84,49,48,53,52,51,56,54,84,244,129,154,178,84,84,49,48,53,52,51,56,55,84,244,129,154,179,84,84,49,48,53,52,51,56,56,84,244,129,154,180,84,84,49,48,53,52,51,56,57,84,244,129,154,181,84,84,49,48,53,52,51,57,48,84,244,129,154,182,84,84,49,48,53,52,51,57,49,84,244,129,154,183,84,84,49,48,53,52,51,57,50,84,244,129,154,184,84,84,49,48,53,52,51,57,51,84,244,129,154,185,84,84,49,48,53,52,51,57,52,84,244,129,154,186,84,84,49,48,53,52,51,57,53,84,244,129,154,187,84,84,49,48,53,52,51,57,54,84,244,129,154,188,84,84,49,48,53,52,51,57,55,84,244,129,154,189,84,84,49,48,53,52,51,57,56,84,244,129,154,190,84,84,49,48,53,52,51,57,57,84,244,129,154,191,84,84,49,48,53,52,52,48,48,84,244,129,155,128,84,84,49,48,53,52,52,48,49,84,244,129,155,129,84,84,49,48,53,52,52,48,50,84,244,129,155,130,84,84,49,48,53,52,52,48,51,84,244,129,155,131,84,84,49,48,53,52,52,48,52,84,244,129,155,132,84,84,49,48,53,52,52,48,53,84,244,129,155,133,84,84,49,48,53,52,52,48,54,84,244,129,155,134,84,84,49,48,53,52,52,48,55,84,244,129,155,135,84,84,49,48,53,52,52,48,56,84,244,129,155,136,84,84,49,48,53,52,52,48,57,84,244,129,155,137,84,84,49,48,53,52,52,49,48,84,244,129,155,138,84,84,49,48,53,52,52,49,49,84,244,129,155,139,84,84,49,48,53,52,52,49,50,84,244,129,155,140,84,84,49,48,53,52,52,49,51,84,244,129,155,141,84,84,49,48,53,52,52,49,52,84,244,129,155,142,84,84,49,48,53,52,52,49,53,84,244,129,155,143,84,84,49,48,53,52,52,49,54,84,244,129,155,144,84,84,49,48,53,52,52,49,55,84,244,129,155,145,84,84,49,48,53,52,52,49,56,84,244,129,155,146,84,84,49,48,53,52,52,49,57,84,244,129,155,147,84,84,49,48,53,52,52,50,48,84,244,129,155,148,84,84,49,48,53,52,52,50,49,84,244,129,155,149,84,84,49,48,53,52,52,50,50,84,244,129,155,150,84,84,49,48,53,52,52,50,51,84,244,129,155,151,84,84,49,48,53,52,52,50,52,84,244,129,155,152,84,84,49,48,53,52,52,50,53,84,244,129,155,153,84,84,49,48,53,52,52,50,54,84,244,129,155,154,84,84,49,48,53,52,52,50,55,84,244,129,155,155,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19826 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19826_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19826_s.txt", Encoding.UTF8);

    public Test19826() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers3d1fce2fe43b489ca49e5d4066014499",
                        blob: Encoding.UTF8.GetString(new byte[]{84,54,48,49,49,49,84,238,171,143,84,84,54,48,49,49,50,84,238,171,144,84,84,54,48,49,50,53,84,238,171,157,84,84,54,48,49,54,49,84,238,172,129,84,84,54,48,49,55,51,84,238,172,141,84,84,54,48,49,55,53,84,238,172,143,84,84,54,48,49,55,54,84,238,172,144,84,84,54,48,49,56,57,84,238,172,157,84,84,54,48,50,50,53,84,238,173,129,84,84,54,48,50,51,55,84,238,173,141,84,84,54,48,50,51,57,84,238,173,143,84,84,54,48,50,52,48,84,238,173,144,84,84,54,48,50,53,51,84,238,173,157,84,84,54,48,50,56,57,84,238,174,129,84,84,54,48,51,48,49,84,238,174,141,84,84,54,48,51,48,51,84,238,174,143,84,84,54,48,51,48,52,84,238,174,144,84,84,54,48,51,49,55,84,238,174,157,84,84,54,48,51,53,51,84,238,175,129,84,84,54,48,51,54,53,84,238,175,141,84,84,54,48,51,54,55,84,238,175,143,84,84,54,48,51,54,56,84,238,175,144,84,84,54,48,51,56,49,84,238,175,157,84,84,54,48,52,49,55,84,238,176,129,84,84,54,48,52,50,57,84,238,176,141,84,84,54,48,52,51,49,84,238,176,143,84,84,54,48,52,51,50,84,238,176,144,84,84,54,48,52,52,53,84,238,176,157,84,84,54,48,52,56,49,84,238,177,129,84,84,54,48,52,57,51,84,238,177,141,84,84,54,48,52,57,53,84,238,177,143,84,84,54,48,52,57,54,84,238,177,144,84,84,54,48,53,48,57,84,238,177,157,84,84,54,48,53,52,53,84,238,178,129,84,84,54,48,53,53,55,84,238,178,141,84,84,54,48,53,53,57,84,238,178,143,84,84,54,48,53,54,48,84,238,178,144,84,84,54,48,53,55,51,84,238,178,157,84,84,54,48,54,48,57,84,238,179,129,84,84,54,48,54,50,49,84,238,179,141,84,84,54,48,54,50,51,84,238,179,143,84,84,54,48,54,50,52,84,238,179,144,84,84,54,48,54,51,55,84,238,179,157,84,84,54,48,54,55,51,84,238,180,129,84,84,54,48,54,56,53,84,238,180,141,84,84,54,48,54,56,55,84,238,180,143,84,84,54,48,54,56,56,84,238,180,144,84,84,54,48,55,48,49,84,238,180,157,84,84,54,48,55,51,55,84,238,181,129,84,84,54,48,55,52,57,84,238,181,141,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22559 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22559_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22559_s.txt", Encoding.UTF8);

    public Test22559() : base(recordedRequest, recordedResponse, "accounts8d43a048d26afcd")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048d26afcd",
                        container: "containersddd934ca569845dc89778f0bd55316f0",
                        blob: "Bloba46ceaef9ce54e409713d29b1294fbc0",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20497 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20497_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20497_s.txt", Encoding.UTF8);

    public Test20497() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers3bfa703d74a140e499ecce701b962b8c",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,54,55,50,56,84,244,129,191,152,84,84,49,48,53,54,55,50,57,84,244,129,191,153,84,84,49,48,53,54,55,51,48,84,244,129,191,154,84,84,49,48,53,54,55,51,49,84,244,129,191,155,84,84,49,48,53,54,55,51,50,84,244,129,191,156,84,84,49,48,53,54,55,51,51,84,244,129,191,157,84,84,49,48,53,54,55,51,52,84,244,129,191,158,84,84,49,48,53,54,55,51,53,84,244,129,191,159,84,84,49,48,53,54,55,51,54,84,244,129,191,160,84,84,49,48,53,54,55,51,55,84,244,129,191,161,84,84,49,48,53,54,55,51,56,84,244,129,191,162,84,84,49,48,53,54,55,51,57,84,244,129,191,163,84,84,49,48,53,54,55,52,48,84,244,129,191,164,84,84,49,48,53,54,55,52,49,84,244,129,191,165,84,84,49,48,53,54,55,52,50,84,244,129,191,166,84,84,49,48,53,54,55,52,51,84,244,129,191,167,84,84,49,48,53,54,55,52,52,84,244,129,191,168,84,84,49,48,53,54,55,52,53,84,244,129,191,169,84,84,49,48,53,54,55,52,54,84,244,129,191,170,84,84,49,48,53,54,55,52,55,84,244,129,191,171,84,84,49,48,53,54,55,52,56,84,244,129,191,172,84,84,49,48,53,54,55,52,57,84,244,129,191,173,84,84,49,48,53,54,55,53,48,84,244,129,191,174,84,84,49,48,53,54,55,53,49,84,244,129,191,175,84,84,49,48,53,54,55,53,50,84,244,129,191,176,84,84,49,48,53,54,55,53,51,84,244,129,191,177,84,84,49,48,53,54,55,53,52,84,244,129,191,178,84,84,49,48,53,54,55,53,53,84,244,129,191,179,84,84,49,48,53,54,55,53,54,84,244,129,191,180,84,84,49,48,53,54,55,53,55,84,244,129,191,181,84,84,49,48,53,54,55,53,56,84,244,129,191,182,84,84,49,48,53,54,55,53,57,84,244,129,191,183,84,84,49,48,53,54,55,54,48,84,244,129,191,184,84,84,49,48,53,54,55,54,49,84,244,129,191,185,84,84,49,48,53,54,55,54,50,84,244,129,191,186,84,84,49,48,53,54,55,54,51,84,244,129,191,187,84,84,49,48,53,54,55,54,52,84,244,129,191,188,84,84,49,48,53,54,55,54,53,84,244,129,191,189,84,84,49,48,53,54,55,54,54,84,244,129,191,190,84,84,49,48,53,54,55,54,55,84,244,129,191,191,84,84,49,48,53,54,55,54,57,84,244,130,128,129,84,84,49,48,53,54,55,56,49,84,244,130,128,141,84,84,49,48,53,54,55,56,51,84,244,130,128,143,84,84,49,48,53,54,55,56,52,84,244,130,128,144,84,84,49,48,53,54,55,57,55,84,244,130,128,157,84,84,49,48,53,54,56,51,50,84,244,130,129,128,84,84,49,48,53,54,56,51,51,84,244,130,129,129,84,84,49,48,53,54,56,51,52,84,244,130,129,130,84,84,49,48,53,54,56,51,53,84,244,130,129,131,84,84,49,48,53,54,56,51,54,84,244,130,129,132,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20433 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20433_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20433_s.txt", Encoding.UTF8);

    public Test20433() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers7f83ba854dc4459da9078f97f691d28c",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,53,50,50,56,84,244,129,167,188,84,84,49,48,53,53,50,50,57,84,244,129,167,189,84,84,49,48,53,53,50,51,48,84,244,129,167,190,84,84,49,48,53,53,50,51,49,84,244,129,167,191,84,84,49,48,53,53,50,51,50,84,244,129,168,128,84,84,49,48,53,53,50,51,51,84,244,129,168,129,84,84,49,48,53,53,50,51,52,84,244,129,168,130,84,84,49,48,53,53,50,51,53,84,244,129,168,131,84,84,49,48,53,53,50,51,54,84,244,129,168,132,84,84,49,48,53,53,50,51,55,84,244,129,168,133,84,84,49,48,53,53,50,51,56,84,244,129,168,134,84,84,49,48,53,53,50,51,57,84,244,129,168,135,84,84,49,48,53,53,50,52,48,84,244,129,168,136,84,84,49,48,53,53,50,52,49,84,244,129,168,137,84,84,49,48,53,53,50,52,50,84,244,129,168,138,84,84,49,48,53,53,50,52,51,84,244,129,168,139,84,84,49,48,53,53,50,52,52,84,244,129,168,140,84,84,49,48,53,53,50,52,53,84,244,129,168,141,84,84,49,48,53,53,50,52,54,84,244,129,168,142,84,84,49,48,53,53,50,52,55,84,244,129,168,143,84,84,49,48,53,53,50,52,56,84,244,129,168,144,84,84,49,48,53,53,50,52,57,84,244,129,168,145,84,84,49,48,53,53,50,53,48,84,244,129,168,146,84,84,49,48,53,53,50,53,49,84,244,129,168,147,84,84,49,48,53,53,50,53,50,84,244,129,168,148,84,84,49,48,53,53,50,53,51,84,244,129,168,149,84,84,49,48,53,53,50,53,52,84,244,129,168,150,84,84,49,48,53,53,50,53,53,84,244,129,168,151,84,84,49,48,53,53,50,53,54,84,244,129,168,152,84,84,49,48,53,53,50,53,55,84,244,129,168,153,84,84,49,48,53,53,50,53,56,84,244,129,168,154,84,84,49,48,53,53,50,53,57,84,244,129,168,155,84,84,49,48,53,53,50,54,48,84,244,129,168,156,84,84,49,48,53,53,50,54,49,84,244,129,168,157,84,84,49,48,53,53,50,54,50,84,244,129,168,158,84,84,49,48,53,53,50,54,51,84,244,129,168,159,84,84,49,48,53,53,50,54,52,84,244,129,168,160,84,84,49,48,53,53,50,54,53,84,244,129,168,161,84,84,49,48,53,53,50,54,54,84,244,129,168,162,84,84,49,48,53,53,50,54,55,84,244,129,168,163,84,84,49,48,53,53,50,54,56,84,244,129,168,164,84,84,49,48,53,53,50,54,57,84,244,129,168,165,84,84,49,48,53,53,50,55,48,84,244,129,168,166,84,84,49,48,53,53,50,55,49,84,244,129,168,167,84,84,49,48,53,53,50,55,50,84,244,129,168,168,84,84,49,48,53,53,50,55,51,84,244,129,168,169,84,84,49,48,53,53,50,55,52,84,244,129,168,170,84,84,49,48,53,53,50,55,53,84,244,129,168,171,84,84,49,48,53,53,50,55,54,84,244,129,168,172,84,84,49,48,53,53,50,55,55,84,244,129,168,173,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22811 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22811_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22811_s.txt", Encoding.UTF8);

    public Test22811() : base(recordedRequest, recordedResponse, "accounts8d43a0490823d21")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a0490823d21",
                        container: "containers0bd48f2ce8374f57b3f3c61b5595b35b",
                        blob: "Blob8f030fb36d0e48f39cb3daed3769b65f",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20080 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20080_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20080_s.txt", Encoding.UTF8);

    public Test20080() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersb3c703c6e551430d9c914c24c3792dd5",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,49,51,50,52,57,84,243,183,152,129,84,84,49,48,49,51,50,54,49,84,243,183,152,141,84,84,49,48,49,51,50,54,51,84,243,183,152,143,84,84,49,48,49,51,50,54,52,84,243,183,152,144,84,84,49,48,49,51,50,55,55,84,243,183,152,157,84,84,49,48,49,51,51,49,51,84,243,183,153,129,84,84,49,48,49,51,51,50,53,84,243,183,153,141,84,84,49,48,49,51,51,50,55,84,243,183,153,143,84,84,49,48,49,51,51,50,56,84,243,183,153,144,84,84,49,48,49,51,51,52,49,84,243,183,153,157,84,84,49,48,49,51,51,55,55,84,243,183,154,129,84,84,49,48,49,51,51,56,57,84,243,183,154,141,84,84,49,48,49,51,51,57,49,84,243,183,154,143,84,84,49,48,49,51,51,57,50,84,243,183,154,144,84,84,49,48,49,51,52,48,53,84,243,183,154,157,84,84,49,48,49,51,52,52,49,84,243,183,155,129,84,84,49,48,49,51,52,53,51,84,243,183,155,141,84,84,49,48,49,51,52,53,53,84,243,183,155,143,84,84,49,48,49,51,52,53,54,84,243,183,155,144,84,84,49,48,49,51,52,54,57,84,243,183,155,157,84,84,49,48,49,51,53,48,53,84,243,183,156,129,84,84,49,48,49,51,53,49,55,84,243,183,156,141,84,84,49,48,49,51,53,49,57,84,243,183,156,143,84,84,49,48,49,51,53,50,48,84,243,183,156,144,84,84,49,48,49,51,53,51,51,84,243,183,156,157,84,84,49,48,49,51,53,54,56,84,243,183,157,128,84,84,49,48,49,51,53,54,57,84,243,183,157,129,84,84,49,48,49,51,53,55,48,84,243,183,157,130,84,84,49,48,49,51,53,55,49,84,243,183,157,131,84,84,49,48,49,51,53,55,50,84,243,183,157,132,84,84,49,48,49,51,53,55,51,84,243,183,157,133,84,84,49,48,49,51,53,55,52,84,243,183,157,134,84,84,49,48,49,51,53,55,53,84,243,183,157,135,84,84,49,48,49,51,53,55,54,84,243,183,157,136,84,84,49,48,49,51,53,55,55,84,243,183,157,137,84,84,49,48,49,51,53,55,56,84,243,183,157,138,84,84,49,48,49,51,53,55,57,84,243,183,157,139,84,84,49,48,49,51,53,56,48,84,243,183,157,140,84,84,49,48,49,51,53,56,49,84,243,183,157,141,84,84,49,48,49,51,53,56,50,84,243,183,157,142,84,84,49,48,49,51,53,56,51,84,243,183,157,143,84,84,49,48,49,51,53,56,52,84,243,183,157,144,84,84,49,48,49,51,53,56,53,84,243,183,157,145,84,84,49,48,49,51,53,56,54,84,243,183,157,146,84,84,49,48,49,51,53,56,55,84,243,183,157,147,84,84,49,48,49,51,53,56,56,84,243,183,157,148,84,84,49,48,49,51,53,56,57,84,243,183,157,149,84,84,49,48,49,51,53,57,48,84,243,183,157,150,84,84,49,48,49,51,53,57,49,84,243,183,157,151,84,84,49,48,49,51,53,57,50,84,243,183,157,152,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20243 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20243_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20243_s.txt", Encoding.UTF8);

    public Test20243() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersca1800aaa567470781b999118df6ba97",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,51,57,49,49,55,84,243,189,172,141,84,84,49,48,51,57,49,49,57,84,243,189,172,143,84,84,49,48,51,57,49,50,48,84,243,189,172,144,84,84,49,48,51,57,49,51,51,84,243,189,172,157,84,84,49,48,51,57,49,54,57,84,243,189,173,129,84,84,49,48,51,57,49,56,49,84,243,189,173,141,84,84,49,48,51,57,49,56,51,84,243,189,173,143,84,84,49,48,51,57,49,56,52,84,243,189,173,144,84,84,49,48,51,57,49,57,55,84,243,189,173,157,84,84,49,48,51,57,50,51,51,84,243,189,174,129,84,84,49,48,51,57,50,52,53,84,243,189,174,141,84,84,49,48,51,57,50,52,55,84,243,189,174,143,84,84,49,48,51,57,50,52,56,84,243,189,174,144,84,84,49,48,51,57,50,54,49,84,243,189,174,157,84,84,49,48,51,57,50,57,55,84,243,189,175,129,84,84,49,48,51,57,51,48,57,84,243,189,175,141,84,84,49,48,51,57,51,49,49,84,243,189,175,143,84,84,49,48,51,57,51,49,50,84,243,189,175,144,84,84,49,48,51,57,51,50,53,84,243,189,175,157,84,84,49,48,51,57,51,54,49,84,243,189,176,129,84,84,49,48,51,57,51,55,51,84,243,189,176,141,84,84,49,48,51,57,51,55,53,84,243,189,176,143,84,84,49,48,51,57,51,55,54,84,243,189,176,144,84,84,49,48,51,57,51,56,57,84,243,189,176,157,84,84,49,48,51,57,52,50,53,84,243,189,177,129,84,84,49,48,51,57,52,51,55,84,243,189,177,141,84,84,49,48,51,57,52,51,57,84,243,189,177,143,84,84,49,48,51,57,52,52,48,84,243,189,177,144,84,84,49,48,51,57,52,53,51,84,243,189,177,157,84,84,49,48,51,57,52,56,57,84,243,189,178,129,84,84,49,48,51,57,53,48,49,84,243,189,178,141,84,84,49,48,51,57,53,48,51,84,243,189,178,143,84,84,49,48,51,57,53,48,52,84,243,189,178,144,84,84,49,48,51,57,53,49,55,84,243,189,178,157,84,84,49,48,51,57,53,53,51,84,243,189,179,129,84,84,49,48,51,57,53,54,53,84,243,189,179,141,84,84,49,48,51,57,53,54,55,84,243,189,179,143,84,84,49,48,51,57,53,54,56,84,243,189,179,144,84,84,49,48,51,57,53,56,49,84,243,189,179,157,84,84,49,48,51,57,54,49,55,84,243,189,180,129,84,84,49,48,51,57,54,50,57,84,243,189,180,141,84,84,49,48,51,57,54,51,49,84,243,189,180,143,84,84,49,48,51,57,54,51,50,84,243,189,180,144,84,84,49,48,51,57,54,52,53,84,243,189,180,157,84,84,49,48,51,57,54,56,49,84,243,189,181,129,84,84,49,48,51,57,54,57,51,84,243,189,181,141,84,84,49,48,51,57,54,57,53,84,243,189,181,143,84,84,49,48,51,57,54,57,54,84,243,189,181,144,84,84,49,48,51,57,55,48,57,84,243,189,181,157,84,84,49,48,51,57,55,52,53,84,243,189,182,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20594 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20594_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20594_s.txt", Encoding.UTF8);

    public Test20594() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers2997cf743a0f481c9f696984938aa742",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,55,48,54,56,53,84,244,133,153,157,84,84,49,48,55,48,55,50,49,84,244,133,154,129,84,84,49,48,55,48,55,51,51,84,244,133,154,141,84,84,49,48,55,48,55,51,53,84,244,133,154,143,84,84,49,48,55,48,55,51,54,84,244,133,154,144,84,84,49,48,55,48,55,52,57,84,244,133,154,157,84,84,49,48,55,48,55,56,53,84,244,133,155,129,84,84,49,48,55,48,55,57,55,84,244,133,155,141,84,84,49,48,55,48,55,57,57,84,244,133,155,143,84,84,49,48,55,48,56,48,48,84,244,133,155,144,84,84,49,48,55,48,56,49,51,84,244,133,155,157,84,84,49,48,55,48,56,52,57,84,244,133,156,129,84,84,49,48,55,48,56,54,49,84,244,133,156,141,84,84,49,48,55,48,56,54,51,84,244,133,156,143,84,84,49,48,55,48,56,54,52,84,244,133,156,144,84,84,49,48,55,48,56,55,55,84,244,133,156,157,84,84,49,48,55,48,57,49,50,84,244,133,157,128,84,84,49,48,55,48,57,49,51,84,244,133,157,129,84,84,49,48,55,48,57,49,52,84,244,133,157,130,84,84,49,48,55,48,57,49,53,84,244,133,157,131,84,84,49,48,55,48,57,49,54,84,244,133,157,132,84,84,49,48,55,48,57,49,55,84,244,133,157,133,84,84,49,48,55,48,57,49,56,84,244,133,157,134,84,84,49,48,55,48,57,49,57,84,244,133,157,135,84,84,49,48,55,48,57,50,48,84,244,133,157,136,84,84,49,48,55,48,57,50,49,84,244,133,157,137,84,84,49,48,55,48,57,50,50,84,244,133,157,138,84,84,49,48,55,48,57,50,51,84,244,133,157,139,84,84,49,48,55,48,57,50,52,84,244,133,157,140,84,84,49,48,55,48,57,50,53,84,244,133,157,141,84,84,49,48,55,48,57,50,54,84,244,133,157,142,84,84,49,48,55,48,57,50,55,84,244,133,157,143,84,84,49,48,55,48,57,50,56,84,244,133,157,144,84,84,49,48,55,48,57,50,57,84,244,133,157,145,84,84,49,48,55,48,57,51,48,84,244,133,157,146,84,84,49,48,55,48,57,51,49,84,244,133,157,147,84,84,49,48,55,48,57,51,50,84,244,133,157,148,84,84,49,48,55,48,57,51,51,84,244,133,157,149,84,84,49,48,55,48,57,51,52,84,244,133,157,150,84,84,49,48,55,48,57,51,53,84,244,133,157,151,84,84,49,48,55,48,57,51,54,84,244,133,157,152,84,84,49,48,55,48,57,51,55,84,244,133,157,153,84,84,49,48,55,48,57,51,56,84,244,133,157,154,84,84,49,48,55,48,57,51,57,84,244,133,157,155,84,84,49,48,55,48,57,52,48,84,244,133,157,156,84,84,49,48,55,48,57,52,49,84,244,133,157,157,84,84,49,48,55,48,57,52,50,84,244,133,157,158,84,84,49,48,55,48,57,52,51,84,244,133,157,159,84,84,49,48,55,48,57,52,52,84,244,133,157,160,84,84,49,48,55,48,57,52,53,84,244,133,157,161,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19953 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19953_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19953_s.txt", Encoding.UTF8);

    public Test19953() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersbf5ecfbea5a24d8a8188936c9be6fa20",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,57,51,49,51,56,84,243,178,157,178,84,84,57,57,51,49,51,57,84,243,178,157,179,84,84,57,57,51,49,52,48,84,243,178,157,180,84,84,57,57,51,49,52,49,84,243,178,157,181,84,84,57,57,51,49,52,50,84,243,178,157,182,84,84,57,57,51,49,52,51,84,243,178,157,183,84,84,57,57,51,49,52,52,84,243,178,157,184,84,84,57,57,51,49,52,53,84,243,178,157,185,84,84,57,57,51,49,52,54,84,243,178,157,186,84,84,57,57,51,49,52,55,84,243,178,157,187,84,84,57,57,51,49,52,56,84,243,178,157,188,84,84,57,57,51,49,52,57,84,243,178,157,189,84,84,57,57,51,49,53,48,84,243,178,157,190,84,84,57,57,51,49,53,49,84,243,178,157,191,84,84,57,57,51,49,53,51,84,243,178,158,129,84,84,57,57,51,49,54,53,84,243,178,158,141,84,84,57,57,51,49,54,55,84,243,178,158,143,84,84,57,57,51,49,54,56,84,243,178,158,144,84,84,57,57,51,49,56,49,84,243,178,158,157,84,84,57,57,51,50,49,55,84,243,178,159,129,84,84,57,57,51,50,50,57,84,243,178,159,141,84,84,57,57,51,50,51,49,84,243,178,159,143,84,84,57,57,51,50,51,50,84,243,178,159,144,84,84,57,57,51,50,52,53,84,243,178,159,157,84,84,57,57,51,50,56,49,84,243,178,160,129,84,84,57,57,51,50,57,51,84,243,178,160,141,84,84,57,57,51,50,57,53,84,243,178,160,143,84,84,57,57,51,50,57,54,84,243,178,160,144,84,84,57,57,51,51,48,57,84,243,178,160,157,84,84,57,57,51,51,52,53,84,243,178,161,129,84,84,57,57,51,51,53,55,84,243,178,161,141,84,84,57,57,51,51,53,57,84,243,178,161,143,84,84,57,57,51,51,54,48,84,243,178,161,144,84,84,57,57,51,51,55,51,84,243,178,161,157,84,84,57,57,51,52,48,57,84,243,178,162,129,84,84,57,57,51,52,50,49,84,243,178,162,141,84,84,57,57,51,52,50,51,84,243,178,162,143,84,84,57,57,51,52,50,52,84,243,178,162,144,84,84,57,57,51,52,51,55,84,243,178,162,157,84,84,57,57,51,52,55,51,84,243,178,163,129,84,84,57,57,51,52,56,53,84,243,178,163,141,84,84,57,57,51,52,56,55,84,243,178,163,143,84,84,57,57,51,52,56,56,84,243,178,163,144,84,84,57,57,51,53,48,49,84,243,178,163,157,84,84,57,57,51,53,51,55,84,243,178,164,129,84,84,57,57,51,53,52,57,84,243,178,164,141,84,84,57,57,51,53,53,49,84,243,178,164,143,84,84,57,57,51,53,53,50,84,243,178,164,144,84,84,57,57,51,53,54,53,84,243,178,164,157,84,84,57,57,51,54,48,49,84,243,178,165,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20687 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20687_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20687_s.txt", Encoding.UTF8);

    public Test20687() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers9df780a74f2549dda8f9f337dadb7946",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,56,54,48,50,57,84,244,137,137,141,84,84,49,48,56,54,48,51,49,84,244,137,137,143,84,84,49,48,56,54,48,51,50,84,244,137,137,144,84,84,49,48,56,54,48,52,53,84,244,137,137,157,84,84,49,48,56,54,48,56,49,84,244,137,138,129,84,84,49,48,56,54,48,57,51,84,244,137,138,141,84,84,49,48,56,54,48,57,53,84,244,137,138,143,84,84,49,48,56,54,48,57,54,84,244,137,138,144,84,84,49,48,56,54,49,48,57,84,244,137,138,157,84,84,49,48,56,54,49,52,53,84,244,137,139,129,84,84,49,48,56,54,49,53,55,84,244,137,139,141,84,84,49,48,56,54,49,53,57,84,244,137,139,143,84,84,49,48,56,54,49,54,48,84,244,137,139,144,84,84,49,48,56,54,49,55,51,84,244,137,139,157,84,84,49,48,56,54,50,48,57,84,244,137,140,129,84,84,49,48,56,54,50,50,49,84,244,137,140,141,84,84,49,48,56,54,50,50,51,84,244,137,140,143,84,84,49,48,56,54,50,50,52,84,244,137,140,144,84,84,49,48,56,54,50,51,55,84,244,137,140,157,84,84,49,48,56,54,50,55,50,84,244,137,141,128,84,84,49,48,56,54,50,55,51,84,244,137,141,129,84,84,49,48,56,54,50,55,52,84,244,137,141,130,84,84,49,48,56,54,50,55,53,84,244,137,141,131,84,84,49,48,56,54,50,55,54,84,244,137,141,132,84,84,49,48,56,54,50,55,55,84,244,137,141,133,84,84,49,48,56,54,50,55,56,84,244,137,141,134,84,84,49,48,56,54,50,55,57,84,244,137,141,135,84,84,49,48,56,54,50,56,48,84,244,137,141,136,84,84,49,48,56,54,50,56,49,84,244,137,141,137,84,84,49,48,56,54,50,56,50,84,244,137,141,138,84,84,49,48,56,54,50,56,51,84,244,137,141,139,84,84,49,48,56,54,50,56,52,84,244,137,141,140,84,84,49,48,56,54,50,56,53,84,244,137,141,141,84,84,49,48,56,54,50,56,54,84,244,137,141,142,84,84,49,48,56,54,50,56,55,84,244,137,141,143,84,84,49,48,56,54,50,56,56,84,244,137,141,144,84,84,49,48,56,54,50,56,57,84,244,137,141,145,84,84,49,48,56,54,50,57,48,84,244,137,141,146,84,84,49,48,56,54,50,57,49,84,244,137,141,147,84,84,49,48,56,54,50,57,50,84,244,137,141,148,84,84,49,48,56,54,50,57,51,84,244,137,141,149,84,84,49,48,56,54,50,57,52,84,244,137,141,150,84,84,49,48,56,54,50,57,53,84,244,137,141,151,84,84,49,48,56,54,50,57,54,84,244,137,141,152,84,84,49,48,56,54,50,57,55,84,244,137,141,153,84,84,49,48,56,54,50,57,56,84,244,137,141,154,84,84,49,48,56,54,50,57,57,84,244,137,141,155,84,84,49,48,56,54,51,48,48,84,244,137,141,156,84,84,49,48,56,54,51,48,49,84,244,137,141,157,84,84,49,48,56,54,51,48,50,84,244,137,141,158,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19896 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19896_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19896_s.txt", Encoding.UTF8);

    public Test19896() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersf0a96ab3064046f8a2fc77e6e3ebae9e",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,56,52,49,49,56,84,243,176,144,182,84,84,57,56,52,49,49,57,84,243,176,144,183,84,84,57,56,52,49,50,48,84,243,176,144,184,84,84,57,56,52,49,50,49,84,243,176,144,185,84,84,57,56,52,49,50,50,84,243,176,144,186,84,84,57,56,52,49,50,51,84,243,176,144,187,84,84,57,56,52,49,50,52,84,243,176,144,188,84,84,57,56,52,49,50,53,84,243,176,144,189,84,84,57,56,52,49,50,54,84,243,176,144,190,84,84,57,56,52,49,50,55,84,243,176,144,191,84,84,57,56,52,49,50,57,84,243,176,145,129,84,84,57,56,52,49,52,49,84,243,176,145,141,84,84,57,56,52,49,52,51,84,243,176,145,143,84,84,57,56,52,49,52,52,84,243,176,145,144,84,84,57,56,52,49,53,55,84,243,176,145,157,84,84,57,56,52,49,57,51,84,243,176,146,129,84,84,57,56,52,50,48,53,84,243,176,146,141,84,84,57,56,52,50,48,55,84,243,176,146,143,84,84,57,56,52,50,48,56,84,243,176,146,144,84,84,57,56,52,50,50,49,84,243,176,146,157,84,84,57,56,52,50,53,55,84,243,176,147,129,84,84,57,56,52,50,54,57,84,243,176,147,141,84,84,57,56,52,50,55,49,84,243,176,147,143,84,84,57,56,52,50,55,50,84,243,176,147,144,84,84,57,56,52,50,56,53,84,243,176,147,157,84,84,57,56,52,51,50,49,84,243,176,148,129,84,84,57,56,52,51,51,51,84,243,176,148,141,84,84,57,56,52,51,51,53,84,243,176,148,143,84,84,57,56,52,51,51,54,84,243,176,148,144,84,84,57,56,52,51,52,57,84,243,176,148,157,84,84,57,56,52,51,56,53,84,243,176,149,129,84,84,57,56,52,51,57,55,84,243,176,149,141,84,84,57,56,52,51,57,57,84,243,176,149,143,84,84,57,56,52,52,48,48,84,243,176,149,144,84,84,57,56,52,52,49,51,84,243,176,149,157,84,84,57,56,52,52,52,57,84,243,176,150,129,84,84,57,56,52,52,54,49,84,243,176,150,141,84,84,57,56,52,52,54,51,84,243,176,150,143,84,84,57,56,52,52,54,52,84,243,176,150,144,84,84,57,56,52,52,55,55,84,243,176,150,157,84,84,57,56,52,53,49,51,84,243,176,151,129,84,84,57,56,52,53,50,53,84,243,176,151,141,84,84,57,56,52,53,50,55,84,243,176,151,143,84,84,57,56,52,53,50,56,84,243,176,151,144,84,84,57,56,52,53,52,49,84,243,176,151,157,84,84,57,56,52,53,55,55,84,243,176,152,129,84,84,57,56,52,53,56,57,84,243,176,152,141,84,84,57,56,52,53,57,49,84,243,176,152,143,84,84,57,56,52,53,57,50,84,243,176,152,144,84,84,57,56,52,54,48,53,84,243,176,152,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22560 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22560_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22560_s.txt", Encoding.UTF8);

    public Test22560() : base(recordedRequest, recordedResponse, "accounts8d43a048d26afcd")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048d26afcd",
                        container: "containersddd934ca569845dc89778f0bd55316f0",
                        blob: "Blobca9dfbc9fe8b4035b0c45ea41df15bb2",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20755 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20755_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20755_s.txt", Encoding.UTF8);

    public Test20755() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersc5ae22b09f3f4a3eaff829adc5876203",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,57,53,57,51,55,84,244,139,164,129,84,84,49,48,57,53,57,52,57,84,244,139,164,141,84,84,49,48,57,53,57,53,49,84,244,139,164,143,84,84,49,48,57,53,57,53,50,84,244,139,164,144,84,84,49,48,57,53,57,54,53,84,244,139,164,157,84,84,49,48,57,54,48,48,49,84,244,139,165,129,84,84,49,48,57,54,48,49,51,84,244,139,165,141,84,84,49,48,57,54,48,49,53,84,244,139,165,143,84,84,49,48,57,54,48,49,54,84,244,139,165,144,84,84,49,48,57,54,48,50,57,84,244,139,165,157,84,84,49,48,57,54,48,54,53,84,244,139,166,129,84,84,49,48,57,54,48,55,55,84,244,139,166,141,84,84,49,48,57,54,48,55,57,84,244,139,166,143,84,84,49,48,57,54,48,56,48,84,244,139,166,144,84,84,49,48,57,54,48,57,51,84,244,139,166,157,84,84,49,48,57,54,49,50,57,84,244,139,167,129,84,84,49,48,57,54,49,52,49,84,244,139,167,141,84,84,49,48,57,54,49,52,51,84,244,139,167,143,84,84,49,48,57,54,49,52,52,84,244,139,167,144,84,84,49,48,57,54,49,53,55,84,244,139,167,157,84,84,49,48,57,54,49,57,51,84,244,139,168,129,84,84,49,48,57,54,50,48,53,84,244,139,168,141,84,84,49,48,57,54,50,48,55,84,244,139,168,143,84,84,49,48,57,54,50,48,56,84,244,139,168,144,84,84,49,48,57,54,50,50,49,84,244,139,168,157,84,84,49,48,57,54,50,53,55,84,244,139,169,129,84,84,49,48,57,54,50,54,57,84,244,139,169,141,84,84,49,48,57,54,50,55,49,84,244,139,169,143,84,84,49,48,57,54,50,55,50,84,244,139,169,144,84,84,49,48,57,54,50,56,53,84,244,139,169,157,84,84,49,48,57,54,51,50,49,84,244,139,170,129,84,84,49,48,57,54,51,51,51,84,244,139,170,141,84,84,49,48,57,54,51,51,53,84,244,139,170,143,84,84,49,48,57,54,51,51,54,84,244,139,170,144,84,84,49,48,57,54,51,52,57,84,244,139,170,157,84,84,49,48,57,54,51,56,53,84,244,139,171,129,84,84,49,48,57,54,51,57,55,84,244,139,171,141,84,84,49,48,57,54,51,57,57,84,244,139,171,143,84,84,49,48,57,54,52,48,48,84,244,139,171,144,84,84,49,48,57,54,52,49,51,84,244,139,171,157,84,84,49,48,57,54,52,52,57,84,244,139,172,129,84,84,49,48,57,54,52,54,49,84,244,139,172,141,84,84,49,48,57,54,52,54,51,84,244,139,172,143,84,84,49,48,57,54,52,54,52,84,244,139,172,144,84,84,49,48,57,54,52,55,55,84,244,139,172,157,84,84,49,48,57,54,53,49,51,84,244,139,173,129,84,84,49,48,57,54,53,50,53,84,244,139,173,141,84,84,49,48,57,54,53,50,55,84,244,139,173,143,84,84,49,48,57,54,53,50,56,84,244,139,173,144,84,84,49,48,57,54,53,52,49,84,244,139,173,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22628 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22628_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22628_s.txt", Encoding.UTF8);

    public Test22628() : base(recordedRequest, recordedResponse, "accounts8d43a048e2beca5")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048e2beca5",
                        container: "containers3974e1da6923423a9845f2ce644df77d",
                        blob: "Blob73a179a744bd42d2a09600df2e0d6485",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22561 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22561_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22561_s.txt", Encoding.UTF8);

    public Test22561() : base(recordedRequest, recordedResponse, "accounts8d43a048d26afcd")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048d26afcd",
                        container: "containersddd934ca569845dc89778f0bd55316f0",
                        blob: "Blob297bf529986644f4a9abdba6288964f5",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22812 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22812_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22812_s.txt", Encoding.UTF8);

    public Test22812() : base(recordedRequest, recordedResponse, "accounts8d43a0490823d21")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a0490823d21",
                        container: "containers0bd48f2ce8374f57b3f3c61b5595b35b",
                        blob: "Blobd19ecb4aa39b4a6c80637ac2a90cf3aa",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20338 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20338_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20338_s.txt", Encoding.UTF8);

    public Test20338() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers412024b733e349978217e6093afed677",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,50,57,55,56,84,244,129,132,178,84,84,49,48,53,50,57,55,57,84,244,129,132,179,84,84,49,48,53,50,57,56,48,84,244,129,132,180,84,84,49,48,53,50,57,56,49,84,244,129,132,181,84,84,49,48,53,50,57,56,50,84,244,129,132,182,84,84,49,48,53,50,57,56,51,84,244,129,132,183,84,84,49,48,53,50,57,56,52,84,244,129,132,184,84,84,49,48,53,50,57,56,53,84,244,129,132,185,84,84,49,48,53,50,57,56,54,84,244,129,132,186,84,84,49,48,53,50,57,56,55,84,244,129,132,187,84,84,49,48,53,50,57,56,56,84,244,129,132,188,84,84,49,48,53,50,57,56,57,84,244,129,132,189,84,84,49,48,53,50,57,57,48,84,244,129,132,190,84,84,49,48,53,50,57,57,49,84,244,129,132,191,84,84,49,48,53,50,57,57,50,84,244,129,133,128,84,84,49,48,53,50,57,57,51,84,244,129,133,129,84,84,49,48,53,50,57,57,52,84,244,129,133,130,84,84,49,48,53,50,57,57,53,84,244,129,133,131,84,84,49,48,53,50,57,57,54,84,244,129,133,132,84,84,49,48,53,50,57,57,55,84,244,129,133,133,84,84,49,48,53,50,57,57,56,84,244,129,133,134,84,84,49,48,53,50,57,57,57,84,244,129,133,135,84,84,49,48,53,51,48,48,48,84,244,129,133,136,84,84,49,48,53,51,48,48,49,84,244,129,133,137,84,84,49,48,53,51,48,48,50,84,244,129,133,138,84,84,49,48,53,51,48,48,51,84,244,129,133,139,84,84,49,48,53,51,48,48,52,84,244,129,133,140,84,84,49,48,53,51,48,48,53,84,244,129,133,141,84,84,49,48,53,51,48,48,54,84,244,129,133,142,84,84,49,48,53,51,48,48,55,84,244,129,133,143,84,84,49,48,53,51,48,48,56,84,244,129,133,144,84,84,49,48,53,51,48,48,57,84,244,129,133,145,84,84,49,48,53,51,48,49,48,84,244,129,133,146,84,84,49,48,53,51,48,49,49,84,244,129,133,147,84,84,49,48,53,51,48,49,50,84,244,129,133,148,84,84,49,48,53,51,48,49,51,84,244,129,133,149,84,84,49,48,53,51,48,49,52,84,244,129,133,150,84,84,49,48,53,51,48,49,53,84,244,129,133,151,84,84,49,48,53,51,48,49,54,84,244,129,133,152,84,84,49,48,53,51,48,49,55,84,244,129,133,153,84,84,49,48,53,51,48,49,56,84,244,129,133,154,84,84,49,48,53,51,48,49,57,84,244,129,133,155,84,84,49,48,53,51,48,50,48,84,244,129,133,156,84,84,49,48,53,51,48,50,49,84,244,129,133,157,84,84,49,48,53,51,48,50,50,84,244,129,133,158,84,84,49,48,53,51,48,50,51,84,244,129,133,159,84,84,49,48,53,51,48,50,52,84,244,129,133,160,84,84,49,48,53,51,48,50,53,84,244,129,133,161,84,84,49,48,53,51,48,50,54,84,244,129,133,162,84,84,49,48,53,51,48,50,55,84,244,129,133,163,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22629 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22629_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22629_s.txt", Encoding.UTF8);

    public Test22629() : base(recordedRequest, recordedResponse, "accounts8d43a048e2beca5")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048e2beca5",
                        container: "containers3974e1da6923423a9845f2ce644df77d",
                        blob: "Blobffc869f4c036497ab5c06d71f53f13c0",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22562 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22562_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22562_s.txt", Encoding.UTF8);

    public Test22562() : base(recordedRequest, recordedResponse, "accounts8d43a048d26afcd")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048d26afcd",
                        container: "containersddd934ca569845dc89778f0bd55316f0",
                        blob: "Blobccc3e61bada943c6974a4464557574e8",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22563 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22563_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22563_s.txt", Encoding.UTF8);

    public Test22563() : base(recordedRequest, recordedResponse, "accounts8d43a048d26afcd")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048d26afcd",
                        container: "containersddd934ca569845dc89778f0bd55316f0",
                        blob: "Blob06816594fd2141ca9ce72b4825957779",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20626 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20626_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20626_s.txt", Encoding.UTF8);

    public Test20626() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers5f5b393ed8e742338d6031fb2e225092",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,55,53,55,55,55,84,244,134,169,129,84,84,49,48,55,53,55,56,57,84,244,134,169,141,84,84,49,48,55,53,55,57,49,84,244,134,169,143,84,84,49,48,55,53,55,57,50,84,244,134,169,144,84,84,49,48,55,53,56,48,53,84,244,134,169,157,84,84,49,48,55,53,56,52,49,84,244,134,170,129,84,84,49,48,55,53,56,53,51,84,244,134,170,141,84,84,49,48,55,53,56,53,53,84,244,134,170,143,84,84,49,48,55,53,56,53,54,84,244,134,170,144,84,84,49,48,55,53,56,54,57,84,244,134,170,157,84,84,49,48,55,53,57,48,53,84,244,134,171,129,84,84,49,48,55,53,57,49,55,84,244,134,171,141,84,84,49,48,55,53,57,49,57,84,244,134,171,143,84,84,49,48,55,53,57,50,48,84,244,134,171,144,84,84,49,48,55,53,57,51,51,84,244,134,171,157,84,84,49,48,55,53,57,54,57,84,244,134,172,129,84,84,49,48,55,53,57,56,49,84,244,134,172,141,84,84,49,48,55,53,57,56,51,84,244,134,172,143,84,84,49,48,55,53,57,56,52,84,244,134,172,144,84,84,49,48,55,53,57,57,55,84,244,134,172,157,84,84,49,48,55,54,48,51,51,84,244,134,173,129,84,84,49,48,55,54,48,52,53,84,244,134,173,141,84,84,49,48,55,54,48,52,55,84,244,134,173,143,84,84,49,48,55,54,48,52,56,84,244,134,173,144,84,84,49,48,55,54,48,54,49,84,244,134,173,157,84,84,49,48,55,54,48,57,55,84,244,134,174,129,84,84,49,48,55,54,49,48,57,84,244,134,174,141,84,84,49,48,55,54,49,49,49,84,244,134,174,143,84,84,49,48,55,54,49,49,50,84,244,134,174,144,84,84,49,48,55,54,49,50,53,84,244,134,174,157,84,84,49,48,55,54,49,54,49,84,244,134,175,129,84,84,49,48,55,54,49,55,51,84,244,134,175,141,84,84,49,48,55,54,49,55,53,84,244,134,175,143,84,84,49,48,55,54,49,55,54,84,244,134,175,144,84,84,49,48,55,54,49,56,57,84,244,134,175,157,84,84,49,48,55,54,50,50,53,84,244,134,176,129,84,84,49,48,55,54,50,51,55,84,244,134,176,141,84,84,49,48,55,54,50,51,57,84,244,134,176,143,84,84,49,48,55,54,50,52,48,84,244,134,176,144,84,84,49,48,55,54,50,53,51,84,244,134,176,157,84,84,49,48,55,54,50,56,57,84,244,134,177,129,84,84,49,48,55,54,51,48,49,84,244,134,177,141,84,84,49,48,55,54,51,48,51,84,244,134,177,143,84,84,49,48,55,54,51,48,52,84,244,134,177,144,84,84,49,48,55,54,51,49,55,84,244,134,177,157,84,84,49,48,55,54,51,53,51,84,244,134,178,129,84,84,49,48,55,54,51,54,53,84,244,134,178,141,84,84,49,48,55,54,51,54,55,84,244,134,178,143,84,84,49,48,55,54,51,54,56,84,244,134,178,144,84,84,49,48,55,54,51,56,49,84,244,134,178,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20302 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20302_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20302_s.txt", Encoding.UTF8);

    public Test20302() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers712afb35b54344eb8fa90647f752cd92",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,52,56,55,49,57,84,244,128,130,143,84,84,49,48,52,56,55,50,48,84,244,128,130,144,84,84,49,48,52,56,55,51,51,84,244,128,130,157,84,84,49,48,52,56,55,54,57,84,244,128,131,129,84,84,49,48,52,56,55,56,49,84,244,128,131,141,84,84,49,48,52,56,55,56,51,84,244,128,131,143,84,84,49,48,52,56,55,56,52,84,244,128,131,144,84,84,49,48,52,56,55,57,55,84,244,128,131,157,84,84,49,48,52,56,56,51,51,84,244,128,132,129,84,84,49,48,52,56,56,52,53,84,244,128,132,141,84,84,49,48,52,56,56,52,55,84,244,128,132,143,84,84,49,48,52,56,56,52,56,84,244,128,132,144,84,84,49,48,52,56,56,54,49,84,244,128,132,157,84,84,49,48,52,56,56,57,55,84,244,128,133,129,84,84,49,48,52,56,57,48,57,84,244,128,133,141,84,84,49,48,52,56,57,49,49,84,244,128,133,143,84,84,49,48,52,56,57,49,50,84,244,128,133,144,84,84,49,48,52,56,57,50,53,84,244,128,133,157,84,84,49,48,52,56,57,54,49,84,244,128,134,129,84,84,49,48,52,56,57,55,51,84,244,128,134,141,84,84,49,48,52,56,57,55,53,84,244,128,134,143,84,84,49,48,52,56,57,55,54,84,244,128,134,144,84,84,49,48,52,56,57,56,57,84,244,128,134,157,84,84,49,48,52,57,48,50,53,84,244,128,135,129,84,84,49,48,52,57,48,51,55,84,244,128,135,141,84,84,49,48,52,57,48,51,57,84,244,128,135,143,84,84,49,48,52,57,48,52,48,84,244,128,135,144,84,84,49,48,52,57,48,53,51,84,244,128,135,157,84,84,49,48,52,57,48,56,57,84,244,128,136,129,84,84,49,48,52,57,49,48,49,84,244,128,136,141,84,84,49,48,52,57,49,48,51,84,244,128,136,143,84,84,49,48,52,57,49,48,52,84,244,128,136,144,84,84,49,48,52,57,49,49,55,84,244,128,136,157,84,84,49,48,52,57,49,53,51,84,244,128,137,129,84,84,49,48,52,57,49,54,53,84,244,128,137,141,84,84,49,48,52,57,49,54,55,84,244,128,137,143,84,84,49,48,52,57,49,54,56,84,244,128,137,144,84,84,49,48,52,57,49,56,49,84,244,128,137,157,84,84,49,48,52,57,50,49,55,84,244,128,138,129,84,84,49,48,52,57,50,50,57,84,244,128,138,141,84,84,49,48,52,57,50,51,49,84,244,128,138,143,84,84,49,48,52,57,50,51,50,84,244,128,138,144,84,84,49,48,52,57,50,52,53,84,244,128,138,157,84,84,49,48,52,57,50,56,49,84,244,128,139,129,84,84,49,48,52,57,50,57,51,84,244,128,139,141,84,84,49,48,52,57,50,57,53,84,244,128,139,143,84,84,49,48,52,57,50,57,54,84,244,128,139,144,84,84,49,48,52,57,51,48,57,84,244,128,139,157,84,84,49,48,52,57,51,52,53,84,244,128,140,129,84,84,49,48,52,57,51,53,55,84,244,128,140,141,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19828 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19828_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19828_s.txt", Encoding.UTF8);

    public Test19828() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers3d1fce2fe43b489ca49e5d4066014499",
                        blob: Encoding.UTF8.GetString(new byte[]{84,54,48,55,53,49,84,238,181,143,84,84,54,48,55,53,50,84,238,181,144,84,84,54,48,55,54,53,84,238,181,157,84,84,54,48,56,48,49,84,238,182,129,84,84,54,48,56,49,51,84,238,182,141,84,84,54,48,56,49,53,84,238,182,143,84,84,54,48,56,49,54,84,238,182,144,84,84,54,48,56,50,57,84,238,182,157,84,84,54,48,56,54,53,84,238,183,129,84,84,54,48,56,55,55,84,238,183,141,84,84,54,48,56,55,57,84,238,183,143,84,84,54,48,56,56,48,84,238,183,144,84,84,54,48,56,57,51,84,238,183,157,84,84,54,48,57,50,57,84,238,184,129,84,84,54,48,57,52,49,84,238,184,141,84,84,54,48,57,52,51,84,238,184,143,84,84,54,48,57,52,52,84,238,184,144,84,84,54,48,57,53,55,84,238,184,157,84,84,54,48,57,57,51,84,238,185,129,84,84,54,49,48,48,53,84,238,185,141,84,84,54,49,48,48,55,84,238,185,143,84,84,54,49,48,48,56,84,238,185,144,84,84,54,49,48,50,49,84,238,185,157,84,84,54,49,48,53,55,84,238,186,129,84,84,54,49,48,54,57,84,238,186,141,84,84,54,49,48,55,49,84,238,186,143,84,84,54,49,48,55,50,84,238,186,144,84,84,54,49,48,56,53,84,238,186,157,84,84,54,49,49,50,49,84,238,187,129,84,84,54,49,49,51,51,84,238,187,141,84,84,54,49,49,51,53,84,238,187,143,84,84,54,49,49,51,54,84,238,187,144,84,84,54,49,49,52,57,84,238,187,157,84,84,54,49,49,56,53,84,238,188,129,84,84,54,49,49,57,55,84,238,188,141,84,84,54,49,49,57,57,84,238,188,143,84,84,54,49,50,48,48,84,238,188,144,84,84,54,49,50,49,51,84,238,188,157,84,84,54,49,50,52,57,84,238,189,129,84,84,54,49,50,54,49,84,238,189,141,84,84,54,49,50,54,51,84,238,189,143,84,84,54,49,50,54,52,84,238,189,144,84,84,54,49,50,55,55,84,238,189,157,84,84,54,49,51,49,51,84,238,190,129,84,84,54,49,51,50,53,84,238,190,141,84,84,54,49,51,50,55,84,238,190,143,84,84,54,49,51,50,56,84,238,190,144,84,84,54,49,51,52,49,84,238,190,157,84,84,54,49,51,55,55,84,238,191,129,84,84,54,49,51,56,57,84,238,191,141,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20019 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20019_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20019_s.txt", Encoding.UTF8);

    public Test20019() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers612d6939acd44cdbbba30cffbd18a713",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,48,52,51,54,52,84,243,181,141,140,84,84,49,48,48,52,51,54,53,84,243,181,141,141,84,84,49,48,48,52,51,54,54,84,243,181,141,142,84,84,49,48,48,52,51,54,55,84,243,181,141,143,84,84,49,48,48,52,51,54,56,84,243,181,141,144,84,84,49,48,48,52,51,54,57,84,243,181,141,145,84,84,49,48,48,52,51,55,48,84,243,181,141,146,84,84,49,48,48,52,51,55,49,84,243,181,141,147,84,84,49,48,48,52,51,55,50,84,243,181,141,148,84,84,49,48,48,52,51,55,51,84,243,181,141,149,84,84,49,48,48,52,51,55,52,84,243,181,141,150,84,84,49,48,48,52,51,55,53,84,243,181,141,151,84,84,49,48,48,52,51,55,54,84,243,181,141,152,84,84,49,48,48,52,51,55,55,84,243,181,141,153,84,84,49,48,48,52,51,55,56,84,243,181,141,154,84,84,49,48,48,52,51,55,57,84,243,181,141,155,84,84,49,48,48,52,51,56,48,84,243,181,141,156,84,84,49,48,48,52,51,56,49,84,243,181,141,157,84,84,49,48,48,52,51,56,50,84,243,181,141,158,84,84,49,48,48,52,51,56,51,84,243,181,141,159,84,84,49,48,48,52,51,56,52,84,243,181,141,160,84,84,49,48,48,52,51,56,53,84,243,181,141,161,84,84,49,48,48,52,51,56,54,84,243,181,141,162,84,84,49,48,48,52,51,56,55,84,243,181,141,163,84,84,49,48,48,52,51,56,56,84,243,181,141,164,84,84,49,48,48,52,51,56,57,84,243,181,141,165,84,84,49,48,48,52,51,57,48,84,243,181,141,166,84,84,49,48,48,52,51,57,49,84,243,181,141,167,84,84,49,48,48,52,51,57,50,84,243,181,141,168,84,84,49,48,48,52,51,57,51,84,243,181,141,169,84,84,49,48,48,52,51,57,52,84,243,181,141,170,84,84,49,48,48,52,51,57,53,84,243,181,141,171,84,84,49,48,48,52,51,57,54,84,243,181,141,172,84,84,49,48,48,52,51,57,55,84,243,181,141,173,84,84,49,48,48,52,51,57,56,84,243,181,141,174,84,84,49,48,48,52,51,57,57,84,243,181,141,175,84,84,49,48,48,52,52,48,48,84,243,181,141,176,84,84,49,48,48,52,52,48,49,84,243,181,141,177,84,84,49,48,48,52,52,48,50,84,243,181,141,178,84,84,49,48,48,52,52,48,51,84,243,181,141,179,84,84,49,48,48,52,52,48,52,84,243,181,141,180,84,84,49,48,48,52,52,48,53,84,243,181,141,181,84,84,49,48,48,52,52,48,54,84,243,181,141,182,84,84,49,48,48,52,52,48,55,84,243,181,141,183,84,84,49,48,48,52,52,48,56,84,243,181,141,184,84,84,49,48,48,52,52,48,57,84,243,181,141,185,84,84,49,48,48,52,52,49,48,84,243,181,141,186,84,84,49,48,48,52,52,49,49,84,243,181,141,187,84,84,49,48,48,52,52,49,50,84,243,181,141,188,84,84,49,48,48,52,52,49,51,84,243,181,141,189,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22630 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22630_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22630_s.txt", Encoding.UTF8);

    public Test22630() : base(recordedRequest, recordedResponse, "accounts8d43a048e2beca5")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048e2beca5",
                        container: "containers3974e1da6923423a9845f2ce644df77d",
                        blob: "Blobf6c5d4b1e68c4589afc752d61a5234ee",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20786 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20786_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20786_s.txt", Encoding.UTF8);

    public Test20786() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers8240a720eb234783afd6a68d24f64161",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,49,49,50,49,84,244,140,181,129,84,84,49,49,48,49,49,51,51,84,244,140,181,141,84,84,49,49,48,49,49,51,53,84,244,140,181,143,84,84,49,49,48,49,49,51,54,84,244,140,181,144,84,84,49,49,48,49,49,52,57,84,244,140,181,157,84,84,49,49,48,49,49,56,53,84,244,140,182,129,84,84,49,49,48,49,49,57,55,84,244,140,182,141,84,84,49,49,48,49,49,57,57,84,244,140,182,143,84,84,49,49,48,49,50,48,48,84,244,140,182,144,84,84,49,49,48,49,50,49,51,84,244,140,182,157,84,84,49,49,48,49,50,52,57,84,244,140,183,129,84,84,49,49,48,49,50,54,49,84,244,140,183,141,84,84,49,49,48,49,50,54,51,84,244,140,183,143,84,84,49,49,48,49,50,54,52,84,244,140,183,144,84,84,49,49,48,49,50,55,55,84,244,140,183,157,84,84,49,49,48,49,51,49,51,84,244,140,184,129,84,84,49,49,48,49,51,50,53,84,244,140,184,141,84,84,49,49,48,49,51,50,55,84,244,140,184,143,84,84,49,49,48,49,51,50,56,84,244,140,184,144,84,84,49,49,48,49,51,52,49,84,244,140,184,157,84,84,49,49,48,49,51,55,55,84,244,140,185,129,84,84,49,49,48,49,51,56,57,84,244,140,185,141,84,84,49,49,48,49,51,57,49,84,244,140,185,143,84,84,49,49,48,49,51,57,50,84,244,140,185,144,84,84,49,49,48,49,52,48,53,84,244,140,185,157,84,84,49,49,48,49,52,52,49,84,244,140,186,129,84,84,49,49,48,49,52,53,51,84,244,140,186,141,84,84,49,49,48,49,52,53,53,84,244,140,186,143,84,84,49,49,48,49,52,53,54,84,244,140,186,144,84,84,49,49,48,49,52,54,57,84,244,140,186,157,84,84,49,49,48,49,53,48,53,84,244,140,187,129,84,84,49,49,48,49,53,49,55,84,244,140,187,141,84,84,49,49,48,49,53,49,57,84,244,140,187,143,84,84,49,49,48,49,53,50,48,84,244,140,187,144,84,84,49,49,48,49,53,51,51,84,244,140,187,157,84,84,49,49,48,49,53,54,57,84,244,140,188,129,84,84,49,49,48,49,53,56,49,84,244,140,188,141,84,84,49,49,48,49,53,56,51,84,244,140,188,143,84,84,49,49,48,49,53,56,52,84,244,140,188,144,84,84,49,49,48,49,53,57,55,84,244,140,188,157,84,84,49,49,48,49,54,51,51,84,244,140,189,129,84,84,49,49,48,49,54,52,53,84,244,140,189,141,84,84,49,49,48,49,54,52,55,84,244,140,189,143,84,84,49,49,48,49,54,52,56,84,244,140,189,144,84,84,49,49,48,49,54,54,49,84,244,140,189,157,84,84,49,49,48,49,54,57,55,84,244,140,190,129,84,84,49,49,48,49,55,48,57,84,244,140,190,141,84,84,49,49,48,49,55,49,49,84,244,140,190,143,84,84,49,49,48,49,55,49,50,84,244,140,190,144,84,84,49,49,48,49,55,50,53,84,244,140,190,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19898 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19898_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19898_s.txt", Encoding.UTF8);

    public Test19898() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersf0a96ab3064046f8a2fc77e6e3ebae9e",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,56,52,54,52,49,84,243,176,153,129,84,84,57,56,52,54,53,51,84,243,176,153,141,84,84,57,56,52,54,53,53,84,243,176,153,143,84,84,57,56,52,54,53,54,84,243,176,153,144,84,84,57,56,52,54,54,57,84,243,176,153,157,84,84,57,56,52,55,48,53,84,243,176,154,129,84,84,57,56,52,55,49,55,84,243,176,154,141,84,84,57,56,52,55,49,57,84,243,176,154,143,84,84,57,56,52,55,50,48,84,243,176,154,144,84,84,57,56,52,55,51,51,84,243,176,154,157,84,84,57,56,52,55,54,57,84,243,176,155,129,84,84,57,56,52,55,56,49,84,243,176,155,141,84,84,57,56,52,55,56,51,84,243,176,155,143,84,84,57,56,52,55,56,52,84,243,176,155,144,84,84,57,56,52,55,57,55,84,243,176,155,157,84,84,57,56,52,56,51,51,84,243,176,156,129,84,84,57,56,52,56,52,53,84,243,176,156,141,84,84,57,56,52,56,52,55,84,243,176,156,143,84,84,57,56,52,56,52,56,84,243,176,156,144,84,84,57,56,52,56,54,49,84,243,176,156,157,84,84,57,56,52,56,57,54,84,243,176,157,128,84,84,57,56,52,56,57,55,84,243,176,157,129,84,84,57,56,52,56,57,56,84,243,176,157,130,84,84,57,56,52,56,57,57,84,243,176,157,131,84,84,57,56,52,57,48,48,84,243,176,157,132,84,84,57,56,52,57,48,49,84,243,176,157,133,84,84,57,56,52,57,48,50,84,243,176,157,134,84,84,57,56,52,57,48,51,84,243,176,157,135,84,84,57,56,52,57,48,52,84,243,176,157,136,84,84,57,56,52,57,48,53,84,243,176,157,137,84,84,57,56,52,57,48,54,84,243,176,157,138,84,84,57,56,52,57,48,55,84,243,176,157,139,84,84,57,56,52,57,48,56,84,243,176,157,140,84,84,57,56,52,57,48,57,84,243,176,157,141,84,84,57,56,52,57,49,48,84,243,176,157,142,84,84,57,56,52,57,49,49,84,243,176,157,143,84,84,57,56,52,57,49,50,84,243,176,157,144,84,84,57,56,52,57,49,51,84,243,176,157,145,84,84,57,56,52,57,49,52,84,243,176,157,146,84,84,57,56,52,57,49,53,84,243,176,157,147,84,84,57,56,52,57,49,54,84,243,176,157,148,84,84,57,56,52,57,49,55,84,243,176,157,149,84,84,57,56,52,57,49,56,84,243,176,157,150,84,84,57,56,52,57,49,57,84,243,176,157,151,84,84,57,56,52,57,50,48,84,243,176,157,152,84,84,57,56,52,57,50,49,84,243,176,157,153,84,84,57,56,52,57,50,50,84,243,176,157,154,84,84,57,56,52,57,50,51,84,243,176,157,155,84,84,57,56,52,57,50,52,84,243,176,157,156,84,84,57,56,52,57,50,53,84,243,176,157,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20848 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20848_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20848_s.txt", Encoding.UTF8);

    public Test20848() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersf4b0dcea8f7b4ccf92e1f36b952ddf93",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,51,50,54,57,84,244,141,150,165,84,84,49,49,48,51,50,55,48,84,244,141,150,166,84,84,49,49,48,51,50,55,49,84,244,141,150,167,84,84,49,49,48,51,50,55,50,84,244,141,150,168,84,84,49,49,48,51,50,55,51,84,244,141,150,169,84,84,49,49,48,51,50,55,52,84,244,141,150,170,84,84,49,49,48,51,50,55,53,84,244,141,150,171,84,84,49,49,48,51,50,55,54,84,244,141,150,172,84,84,49,49,48,51,50,55,55,84,244,141,150,173,84,84,49,49,48,51,50,55,56,84,244,141,150,174,84,84,49,49,48,51,50,55,57,84,244,141,150,175,84,84,49,49,48,51,50,56,48,84,244,141,150,176,84,84,49,49,48,51,50,56,49,84,244,141,150,177,84,84,49,49,48,51,50,56,50,84,244,141,150,178,84,84,49,49,48,51,50,56,51,84,244,141,150,179,84,84,49,49,48,51,50,56,52,84,244,141,150,180,84,84,49,49,48,51,50,56,53,84,244,141,150,181,84,84,49,49,48,51,50,56,54,84,244,141,150,182,84,84,49,49,48,51,50,56,55,84,244,141,150,183,84,84,49,49,48,51,50,56,56,84,244,141,150,184,84,84,49,49,48,51,50,56,57,84,244,141,150,185,84,84,49,49,48,51,50,57,48,84,244,141,150,186,84,84,49,49,48,51,50,57,49,84,244,141,150,187,84,84,49,49,48,51,50,57,50,84,244,141,150,188,84,84,49,49,48,51,50,57,51,84,244,141,150,189,84,84,49,49,48,51,50,57,52,84,244,141,150,190,84,84,49,49,48,51,50,57,53,84,244,141,150,191,84,84,49,49,48,51,50,57,54,84,244,141,151,128,84,84,49,49,48,51,50,57,55,84,244,141,151,129,84,84,49,49,48,51,50,57,56,84,244,141,151,130,84,84,49,49,48,51,50,57,57,84,244,141,151,131,84,84,49,49,48,51,51,48,48,84,244,141,151,132,84,84,49,49,48,51,51,48,49,84,244,141,151,133,84,84,49,49,48,51,51,48,50,84,244,141,151,134,84,84,49,49,48,51,51,48,51,84,244,141,151,135,84,84,49,49,48,51,51,48,52,84,244,141,151,136,84,84,49,49,48,51,51,48,53,84,244,141,151,137,84,84,49,49,48,51,51,48,54,84,244,141,151,138,84,84,49,49,48,51,51,48,55,84,244,141,151,139,84,84,49,49,48,51,51,48,56,84,244,141,151,140,84,84,49,49,48,51,51,48,57,84,244,141,151,141,84,84,49,49,48,51,51,49,48,84,244,141,151,142,84,84,49,49,48,51,51,49,49,84,244,141,151,143,84,84,49,49,48,51,51,49,50,84,244,141,151,144,84,84,49,49,48,51,51,49,51,84,244,141,151,145,84,84,49,49,48,51,51,49,52,84,244,141,151,146,84,84,49,49,48,51,51,49,53,84,244,141,151,147,84,84,49,49,48,51,51,49,54,84,244,141,151,148,84,84,49,49,48,51,51,49,55,84,244,141,151,149,84,84,49,49,48,51,51,49,56,84,244,141,151,150,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22564 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22564_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22564_s.txt", Encoding.UTF8);

    public Test22564() : base(recordedRequest, recordedResponse, "accounts8d43a048d26afcd")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048d26afcd",
                        container: "containersddd934ca569845dc89778f0bd55316f0",
                        blob: "Blob42d7f81e65564f01b788d9309b8c32cf",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22813 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22813_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22813_s.txt", Encoding.UTF8);

    public Test22813() : base(recordedRequest, recordedResponse, "accounts8d43a0490823d21")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a0490823d21",
                        container: "containers0bd48f2ce8374f57b3f3c61b5595b35b",
                        blob: "Blobd142535f70b1446fa9b17f12274454d9",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21044 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21044_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21044_s.txt", Encoding.UTF8);

    public Test21044() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers98fd3eef9d4b4edcb3855acb5ae8645d",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,49,51,53,48,84,244,143,148,182,84,84,49,49,49,49,51,53,49,84,244,143,148,183,84,84,49,49,49,49,51,53,50,84,244,143,148,184,84,84,49,49,49,49,51,53,51,84,244,143,148,185,84,84,49,49,49,49,51,53,52,84,244,143,148,186,84,84,49,49,49,49,51,53,53,84,244,143,148,187,84,84,49,49,49,49,51,53,54,84,244,143,148,188,84,84,49,49,49,49,51,53,55,84,244,143,148,189,84,84,49,49,49,49,51,53,56,84,244,143,148,190,84,84,49,49,49,49,51,53,57,84,244,143,148,191,84,84,49,49,49,49,51,54,48,84,244,143,149,128,84,84,49,49,49,49,51,54,49,84,244,143,149,129,84,84,49,49,49,49,51,54,50,84,244,143,149,130,84,84,49,49,49,49,51,54,51,84,244,143,149,131,84,84,49,49,49,49,51,54,52,84,244,143,149,132,84,84,49,49,49,49,51,54,53,84,244,143,149,133,84,84,49,49,49,49,51,54,54,84,244,143,149,134,84,84,49,49,49,49,51,54,55,84,244,143,149,135,84,84,49,49,49,49,51,54,56,84,244,143,149,136,84,84,49,49,49,49,51,54,57,84,244,143,149,137,84,84,49,49,49,49,51,55,48,84,244,143,149,138,84,84,49,49,49,49,51,55,49,84,244,143,149,139,84,84,49,49,49,49,51,55,50,84,244,143,149,140,84,84,49,49,49,49,51,55,51,84,244,143,149,141,84,84,49,49,49,49,51,55,52,84,244,143,149,142,84,84,49,49,49,49,51,55,53,84,244,143,149,143,84,84,49,49,49,49,51,55,54,84,244,143,149,144,84,84,49,49,49,49,51,55,55,84,244,143,149,145,84,84,49,49,49,49,51,55,56,84,244,143,149,146,84,84,49,49,49,49,51,55,57,84,244,143,149,147,84,84,49,49,49,49,51,56,48,84,244,143,149,148,84,84,49,49,49,49,51,56,49,84,244,143,149,149,84,84,49,49,49,49,51,56,50,84,244,143,149,150,84,84,49,49,49,49,51,56,51,84,244,143,149,151,84,84,49,49,49,49,51,56,52,84,244,143,149,152,84,84,49,49,49,49,51,56,53,84,244,143,149,153,84,84,49,49,49,49,51,56,54,84,244,143,149,154,84,84,49,49,49,49,51,56,55,84,244,143,149,155,84,84,49,49,49,49,51,56,56,84,244,143,149,156,84,84,49,49,49,49,51,56,57,84,244,143,149,157,84,84,49,49,49,49,51,57,48,84,244,143,149,158,84,84,49,49,49,49,51,57,49,84,244,143,149,159,84,84,49,49,49,49,51,57,50,84,244,143,149,160,84,84,49,49,49,49,51,57,51,84,244,143,149,161,84,84,49,49,49,49,51,57,52,84,244,143,149,162,84,84,49,49,49,49,51,57,53,84,244,143,149,163,84,84,49,49,49,49,51,57,54,84,244,143,149,164,84,84,49,49,49,49,51,57,55,84,244,143,149,165,84,84,49,49,49,49,51,57,56,84,244,143,149,166,84,84,49,49,49,49,51,57,57,84,244,143,149,167,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20909 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20909_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20909_s.txt", Encoding.UTF8);

    public Test20909() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers9e891393b2624599aedf317812121dcf",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,52,54,54,57,84,244,141,172,157,84,84,49,49,48,52,54,55,48,84,244,141,172,158,84,84,49,49,48,52,54,55,49,84,244,141,172,159,84,84,49,49,48,52,54,55,50,84,244,141,172,160,84,84,49,49,48,52,54,55,51,84,244,141,172,161,84,84,49,49,48,52,54,55,52,84,244,141,172,162,84,84,49,49,48,52,54,55,53,84,244,141,172,163,84,84,49,49,48,52,54,55,54,84,244,141,172,164,84,84,49,49,48,52,54,55,55,84,244,141,172,165,84,84,49,49,48,52,54,55,56,84,244,141,172,166,84,84,49,49,48,52,54,55,57,84,244,141,172,167,84,84,49,49,48,52,54,56,48,84,244,141,172,168,84,84,49,49,48,52,54,56,49,84,244,141,172,169,84,84,49,49,48,52,54,56,50,84,244,141,172,170,84,84,49,49,48,52,54,56,51,84,244,141,172,171,84,84,49,49,48,52,54,56,52,84,244,141,172,172,84,84,49,49,48,52,54,56,53,84,244,141,172,173,84,84,49,49,48,52,54,56,54,84,244,141,172,174,84,84,49,49,48,52,54,56,55,84,244,141,172,175,84,84,49,49,48,52,54,56,56,84,244,141,172,176,84,84,49,49,48,52,54,56,57,84,244,141,172,177,84,84,49,49,48,52,54,57,48,84,244,141,172,178,84,84,49,49,48,52,54,57,49,84,244,141,172,179,84,84,49,49,48,52,54,57,50,84,244,141,172,180,84,84,49,49,48,52,54,57,51,84,244,141,172,181,84,84,49,49,48,52,54,57,52,84,244,141,172,182,84,84,49,49,48,52,54,57,53,84,244,141,172,183,84,84,49,49,48,52,54,57,54,84,244,141,172,184,84,84,49,49,48,52,54,57,55,84,244,141,172,185,84,84,49,49,48,52,54,57,56,84,244,141,172,186,84,84,49,49,48,52,54,57,57,84,244,141,172,187,84,84,49,49,48,52,55,48,48,84,244,141,172,188,84,84,49,49,48,52,55,48,49,84,244,141,172,189,84,84,49,49,48,52,55,48,50,84,244,141,172,190,84,84,49,49,48,52,55,48,51,84,244,141,172,191,84,84,49,49,48,52,55,48,52,84,244,141,173,128,84,84,49,49,48,52,55,48,53,84,244,141,173,129,84,84,49,49,48,52,55,48,54,84,244,141,173,130,84,84,49,49,48,52,55,48,55,84,244,141,173,131,84,84,49,49,48,52,55,48,56,84,244,141,173,132,84,84,49,49,48,52,55,48,57,84,244,141,173,133,84,84,49,49,48,52,55,49,48,84,244,141,173,134,84,84,49,49,48,52,55,49,49,84,244,141,173,135,84,84,49,49,48,52,55,49,50,84,244,141,173,136,84,84,49,49,48,52,55,49,51,84,244,141,173,137,84,84,49,49,48,52,55,49,52,84,244,141,173,138,84,84,49,49,48,52,55,49,53,84,244,141,173,139,84,84,49,49,48,52,55,49,54,84,244,141,173,140,84,84,49,49,48,52,55,49,55,84,244,141,173,141,84,84,49,49,48,52,55,49,56,84,244,141,173,142,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20082 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20082_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20082_s.txt", Encoding.UTF8);

    public Test20082() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersb3c703c6e551430d9c914c24c3792dd5",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,49,51,53,57,51,84,243,183,157,153,84,84,49,48,49,51,53,57,52,84,243,183,157,154,84,84,49,48,49,51,53,57,53,84,243,183,157,155,84,84,49,48,49,51,53,57,54,84,243,183,157,156,84,84,49,48,49,51,53,57,55,84,243,183,157,157,84,84,49,48,49,51,53,57,56,84,243,183,157,158,84,84,49,48,49,51,53,57,57,84,243,183,157,159,84,84,49,48,49,51,54,48,48,84,243,183,157,160,84,84,49,48,49,51,54,48,49,84,243,183,157,161,84,84,49,48,49,51,54,48,50,84,243,183,157,162,84,84,49,48,49,51,54,48,51,84,243,183,157,163,84,84,49,48,49,51,54,48,52,84,243,183,157,164,84,84,49,48,49,51,54,48,53,84,243,183,157,165,84,84,49,48,49,51,54,48,54,84,243,183,157,166,84,84,49,48,49,51,54,48,55,84,243,183,157,167,84,84,49,48,49,51,54,48,56,84,243,183,157,168,84,84,49,48,49,51,54,48,57,84,243,183,157,169,84,84,49,48,49,51,54,49,48,84,243,183,157,170,84,84,49,48,49,51,54,49,49,84,243,183,157,171,84,84,49,48,49,51,54,49,50,84,243,183,157,172,84,84,49,48,49,51,54,49,51,84,243,183,157,173,84,84,49,48,49,51,54,49,52,84,243,183,157,174,84,84,49,48,49,51,54,49,53,84,243,183,157,175,84,84,49,48,49,51,54,49,54,84,243,183,157,176,84,84,49,48,49,51,54,49,55,84,243,183,157,177,84,84,49,48,49,51,54,49,56,84,243,183,157,178,84,84,49,48,49,51,54,49,57,84,243,183,157,179,84,84,49,48,49,51,54,50,48,84,243,183,157,180,84,84,49,48,49,51,54,50,49,84,243,183,157,181,84,84,49,48,49,51,54,50,50,84,243,183,157,182,84,84,49,48,49,51,54,50,51,84,243,183,157,183,84,84,49,48,49,51,54,50,52,84,243,183,157,184,84,84,49,48,49,51,54,50,53,84,243,183,157,185,84,84,49,48,49,51,54,50,54,84,243,183,157,186,84,84,49,48,49,51,54,50,55,84,243,183,157,187,84,84,49,48,49,51,54,50,56,84,243,183,157,188,84,84,49,48,49,51,54,50,57,84,243,183,157,189,84,84,49,48,49,51,54,51,48,84,243,183,157,190,84,84,49,48,49,51,54,51,49,84,243,183,157,191,84,84,49,48,49,51,54,51,51,84,243,183,158,129,84,84,49,48,49,51,54,52,53,84,243,183,158,141,84,84,49,48,49,51,54,52,55,84,243,183,158,143,84,84,49,48,49,51,54,52,56,84,243,183,158,144,84,84,49,48,49,51,54,54,49,84,243,183,158,157,84,84,49,48,49,51,54,57,55,84,243,183,159,129,84,84,49,48,49,51,55,48,57,84,243,183,159,141,84,84,49,48,49,51,55,49,49,84,243,183,159,143,84,84,49,48,49,51,55,49,50,84,243,183,159,144,84,84,49,48,49,51,55,50,53,84,243,183,159,157,84,84,49,48,49,51,55,54,49,84,243,183,160,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22565 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22565_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22565_s.txt", Encoding.UTF8);

    public Test22565() : base(recordedRequest, recordedResponse, "accounts8d43a048d26afcd")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048d26afcd",
                        container: "containersddd934ca569845dc89778f0bd55316f0",
                        blob: "Blobb08b7ad86f4f4287b6446a977729c3aa",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22566 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22566_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22566_s.txt", Encoding.UTF8);

    public Test22566() : base(recordedRequest, recordedResponse, "accounts8d43a048d26afcd")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048d26afcd",
                        container: "containersddd934ca569845dc89778f0bd55316f0",
                        blob: "Blob07e22e2ffe804b4c85b4706e9ce57c6f",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21102 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21102_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21102_s.txt", Encoding.UTF8);

    public Test21102() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers79aa3dd90e344ebe9466f3cb0c56378a",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,50,55,53,48,84,244,143,170,174,84,84,49,49,49,50,55,53,49,84,244,143,170,175,84,84,49,49,49,50,55,53,50,84,244,143,170,176,84,84,49,49,49,50,55,53,51,84,244,143,170,177,84,84,49,49,49,50,55,53,52,84,244,143,170,178,84,84,49,49,49,50,55,53,53,84,244,143,170,179,84,84,49,49,49,50,55,53,54,84,244,143,170,180,84,84,49,49,49,50,55,53,55,84,244,143,170,181,84,84,49,49,49,50,55,53,56,84,244,143,170,182,84,84,49,49,49,50,55,53,57,84,244,143,170,183,84,84,49,49,49,50,55,54,48,84,244,143,170,184,84,84,49,49,49,50,55,54,49,84,244,143,170,185,84,84,49,49,49,50,55,54,50,84,244,143,170,186,84,84,49,49,49,50,55,54,51,84,244,143,170,187,84,84,49,49,49,50,55,54,52,84,244,143,170,188,84,84,49,49,49,50,55,54,53,84,244,143,170,189,84,84,49,49,49,50,55,54,54,84,244,143,170,190,84,84,49,49,49,50,55,54,55,84,244,143,170,191,84,84,49,49,49,50,55,54,56,84,244,143,171,128,84,84,49,49,49,50,55,54,57,84,244,143,171,129,84,84,49,49,49,50,55,55,48,84,244,143,171,130,84,84,49,49,49,50,55,55,49,84,244,143,171,131,84,84,49,49,49,50,55,55,50,84,244,143,171,132,84,84,49,49,49,50,55,55,51,84,244,143,171,133,84,84,49,49,49,50,55,55,52,84,244,143,171,134,84,84,49,49,49,50,55,55,53,84,244,143,171,135,84,84,49,49,49,50,55,55,54,84,244,143,171,136,84,84,49,49,49,50,55,55,55,84,244,143,171,137,84,84,49,49,49,50,55,55,56,84,244,143,171,138,84,84,49,49,49,50,55,55,57,84,244,143,171,139,84,84,49,49,49,50,55,56,48,84,244,143,171,140,84,84,49,49,49,50,55,56,49,84,244,143,171,141,84,84,49,49,49,50,55,56,50,84,244,143,171,142,84,84,49,49,49,50,55,56,51,84,244,143,171,143,84,84,49,49,49,50,55,56,52,84,244,143,171,144,84,84,49,49,49,50,55,56,53,84,244,143,171,145,84,84,49,49,49,50,55,56,54,84,244,143,171,146,84,84,49,49,49,50,55,56,55,84,244,143,171,147,84,84,49,49,49,50,55,56,56,84,244,143,171,148,84,84,49,49,49,50,55,56,57,84,244,143,171,149,84,84,49,49,49,50,55,57,48,84,244,143,171,150,84,84,49,49,49,50,55,57,49,84,244,143,171,151,84,84,49,49,49,50,55,57,50,84,244,143,171,152,84,84,49,49,49,50,55,57,51,84,244,143,171,153,84,84,49,49,49,50,55,57,52,84,244,143,171,154,84,84,49,49,49,50,55,57,53,84,244,143,171,155,84,84,49,49,49,50,55,57,54,84,244,143,171,156,84,84,49,49,49,50,55,57,55,84,244,143,171,157,84,84,49,49,49,50,55,57,56,84,244,143,171,158,84,84,49,49,49,50,55,57,57,84,244,143,171,159,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20340 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20340_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20340_s.txt", Encoding.UTF8);

    public Test20340() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers412024b733e349978217e6093afed677",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,51,48,50,56,84,244,129,133,164,84,84,49,48,53,51,48,50,57,84,244,129,133,165,84,84,49,48,53,51,48,51,48,84,244,129,133,166,84,84,49,48,53,51,48,51,49,84,244,129,133,167,84,84,49,48,53,51,48,51,50,84,244,129,133,168,84,84,49,48,53,51,48,51,51,84,244,129,133,169,84,84,49,48,53,51,48,51,52,84,244,129,133,170,84,84,49,48,53,51,48,51,53,84,244,129,133,171,84,84,49,48,53,51,48,51,54,84,244,129,133,172,84,84,49,48,53,51,48,51,55,84,244,129,133,173,84,84,49,48,53,51,48,51,56,84,244,129,133,174,84,84,49,48,53,51,48,51,57,84,244,129,133,175,84,84,49,48,53,51,48,52,48,84,244,129,133,176,84,84,49,48,53,51,48,52,49,84,244,129,133,177,84,84,49,48,53,51,48,52,50,84,244,129,133,178,84,84,49,48,53,51,48,52,51,84,244,129,133,179,84,84,49,48,53,51,48,52,52,84,244,129,133,180,84,84,49,48,53,51,48,52,53,84,244,129,133,181,84,84,49,48,53,51,48,52,54,84,244,129,133,182,84,84,49,48,53,51,48,52,55,84,244,129,133,183,84,84,49,48,53,51,48,52,56,84,244,129,133,184,84,84,49,48,53,51,48,52,57,84,244,129,133,185,84,84,49,48,53,51,48,53,48,84,244,129,133,186,84,84,49,48,53,51,48,53,49,84,244,129,133,187,84,84,49,48,53,51,48,53,50,84,244,129,133,188,84,84,49,48,53,51,48,53,51,84,244,129,133,189,84,84,49,48,53,51,48,53,52,84,244,129,133,190,84,84,49,48,53,51,48,53,53,84,244,129,133,191,84,84,49,48,53,51,48,53,54,84,244,129,134,128,84,84,49,48,53,51,48,53,55,84,244,129,134,129,84,84,49,48,53,51,48,53,56,84,244,129,134,130,84,84,49,48,53,51,48,53,57,84,244,129,134,131,84,84,49,48,53,51,48,54,48,84,244,129,134,132,84,84,49,48,53,51,48,54,49,84,244,129,134,133,84,84,49,48,53,51,48,54,50,84,244,129,134,134,84,84,49,48,53,51,48,54,51,84,244,129,134,135,84,84,49,48,53,51,48,54,52,84,244,129,134,136,84,84,49,48,53,51,48,54,53,84,244,129,134,137,84,84,49,48,53,51,48,54,54,84,244,129,134,138,84,84,49,48,53,51,48,54,55,84,244,129,134,139,84,84,49,48,53,51,48,54,56,84,244,129,134,140,84,84,49,48,53,51,48,54,57,84,244,129,134,141,84,84,49,48,53,51,48,55,48,84,244,129,134,142,84,84,49,48,53,51,48,55,49,84,244,129,134,143,84,84,49,48,53,51,48,55,50,84,244,129,134,144,84,84,49,48,53,51,48,55,51,84,244,129,134,145,84,84,49,48,53,51,48,55,52,84,244,129,134,146,84,84,49,48,53,51,48,55,53,84,244,129,134,147,84,84,49,48,53,51,48,55,54,84,244,129,134,148,84,84,49,48,53,51,48,55,55,84,244,129,134,149,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22567 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22567_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22567_s.txt", Encoding.UTF8);

    public Test22567() : base(recordedRequest, recordedResponse, "accounts8d43a048d26afcd")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048d26afcd",
                        container: "containersddd934ca569845dc89778f0bd55316f0",
                        blob: "Blob148fe042789d4199ad0e9ae40f516472",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20596 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20596_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20596_s.txt", Encoding.UTF8);

    public Test20596() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers2997cf743a0f481c9f696984938aa742",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,55,48,57,52,54,84,244,133,157,162,84,84,49,48,55,48,57,52,55,84,244,133,157,163,84,84,49,48,55,48,57,52,56,84,244,133,157,164,84,84,49,48,55,48,57,52,57,84,244,133,157,165,84,84,49,48,55,48,57,53,48,84,244,133,157,166,84,84,49,48,55,48,57,53,49,84,244,133,157,167,84,84,49,48,55,48,57,53,50,84,244,133,157,168,84,84,49,48,55,48,57,53,51,84,244,133,157,169,84,84,49,48,55,48,57,53,52,84,244,133,157,170,84,84,49,48,55,48,57,53,53,84,244,133,157,171,84,84,49,48,55,48,57,53,54,84,244,133,157,172,84,84,49,48,55,48,57,53,55,84,244,133,157,173,84,84,49,48,55,48,57,53,56,84,244,133,157,174,84,84,49,48,55,48,57,53,57,84,244,133,157,175,84,84,49,48,55,48,57,54,48,84,244,133,157,176,84,84,49,48,55,48,57,54,49,84,244,133,157,177,84,84,49,48,55,48,57,54,50,84,244,133,157,178,84,84,49,48,55,48,57,54,51,84,244,133,157,179,84,84,49,48,55,48,57,54,52,84,244,133,157,180,84,84,49,48,55,48,57,54,53,84,244,133,157,181,84,84,49,48,55,48,57,54,54,84,244,133,157,182,84,84,49,48,55,48,57,54,55,84,244,133,157,183,84,84,49,48,55,48,57,54,56,84,244,133,157,184,84,84,49,48,55,48,57,54,57,84,244,133,157,185,84,84,49,48,55,48,57,55,48,84,244,133,157,186,84,84,49,48,55,48,57,55,49,84,244,133,157,187,84,84,49,48,55,48,57,55,50,84,244,133,157,188,84,84,49,48,55,48,57,55,51,84,244,133,157,189,84,84,49,48,55,48,57,55,52,84,244,133,157,190,84,84,49,48,55,48,57,55,53,84,244,133,157,191,84,84,49,48,55,48,57,55,55,84,244,133,158,129,84,84,49,48,55,48,57,56,57,84,244,133,158,141,84,84,49,48,55,48,57,57,49,84,244,133,158,143,84,84,49,48,55,48,57,57,50,84,244,133,158,144,84,84,49,48,55,49,48,48,53,84,244,133,158,157,84,84,49,48,55,49,48,52,49,84,244,133,159,129,84,84,49,48,55,49,48,53,51,84,244,133,159,141,84,84,49,48,55,49,48,53,53,84,244,133,159,143,84,84,49,48,55,49,48,53,54,84,244,133,159,144,84,84,49,48,55,49,48,54,57,84,244,133,159,157,84,84,49,48,55,49,49,48,53,84,244,133,160,129,84,84,49,48,55,49,49,49,55,84,244,133,160,141,84,84,49,48,55,49,49,49,57,84,244,133,160,143,84,84,49,48,55,49,49,50,48,84,244,133,160,144,84,84,49,48,55,49,49,51,51,84,244,133,160,157,84,84,49,48,55,49,49,54,57,84,244,133,161,129,84,84,49,48,55,49,49,56,49,84,244,133,161,141,84,84,49,48,55,49,49,56,51,84,244,133,161,143,84,84,49,48,55,49,49,56,52,84,244,133,161,144,84,84,49,48,55,49,49,57,55,84,244,133,161,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20245 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20245_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20245_s.txt", Encoding.UTF8);

    public Test20245() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersca1800aaa567470781b999118df6ba97",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,51,57,55,53,55,84,243,189,182,141,84,84,49,48,51,57,55,53,57,84,243,189,182,143,84,84,49,48,51,57,55,54,48,84,243,189,182,144,84,84,49,48,51,57,55,55,51,84,243,189,182,157,84,84,49,48,51,57,56,48,57,84,243,189,183,129,84,84,49,48,51,57,56,50,49,84,243,189,183,141,84,84,49,48,51,57,56,50,51,84,243,189,183,143,84,84,49,48,51,57,56,50,52,84,243,189,183,144,84,84,49,48,51,57,56,51,55,84,243,189,183,157,84,84,49,48,51,57,56,55,51,84,243,189,184,129,84,84,49,48,51,57,56,56,53,84,243,189,184,141,84,84,49,48,51,57,56,56,55,84,243,189,184,143,84,84,49,48,51,57,56,56,56,84,243,189,184,144,84,84,49,48,51,57,57,48,49,84,243,189,184,157,84,84,49,48,51,57,57,51,55,84,243,189,185,129,84,84,49,48,51,57,57,52,57,84,243,189,185,141,84,84,49,48,51,57,57,53,49,84,243,189,185,143,84,84,49,48,51,57,57,53,50,84,243,189,185,144,84,84,49,48,51,57,57,54,53,84,243,189,185,157,84,84,49,48,52,48,48,48,49,84,243,189,186,129,84,84,49,48,52,48,48,49,51,84,243,189,186,141,84,84,49,48,52,48,48,49,53,84,243,189,186,143,84,84,49,48,52,48,48,49,54,84,243,189,186,144,84,84,49,48,52,48,48,50,57,84,243,189,186,157,84,84,49,48,52,48,48,54,53,84,243,189,187,129,84,84,49,48,52,48,48,55,55,84,243,189,187,141,84,84,49,48,52,48,48,55,57,84,243,189,187,143,84,84,49,48,52,48,48,56,48,84,243,189,187,144,84,84,49,48,52,48,48,57,51,84,243,189,187,157,84,84,49,48,52,48,49,50,57,84,243,189,188,129,84,84,49,48,52,48,49,52,49,84,243,189,188,141,84,84,49,48,52,48,49,52,51,84,243,189,188,143,84,84,49,48,52,48,49,52,52,84,243,189,188,144,84,84,49,48,52,48,49,53,55,84,243,189,188,157,84,84,49,48,52,48,49,57,51,84,243,189,189,129,84,84,49,48,52,48,50,48,53,84,243,189,189,141,84,84,49,48,52,48,50,48,55,84,243,189,189,143,84,84,49,48,52,48,50,48,56,84,243,189,189,144,84,84,49,48,52,48,50,50,49,84,243,189,189,157,84,84,49,48,52,48,50,53,55,84,243,189,190,129,84,84,49,48,52,48,50,54,57,84,243,189,190,141,84,84,49,48,52,48,50,55,49,84,243,189,190,143,84,84,49,48,52,48,50,55,50,84,243,189,190,144,84,84,49,48,52,48,50,56,53,84,243,189,190,157,84,84,49,48,52,48,51,50,49,84,243,189,191,129,84,84,49,48,52,48,51,51,51,84,243,189,191,141,84,84,49,48,52,48,51,51,53,84,243,189,191,143,84,84,49,48,52,48,51,51,54,84,243,189,191,144,84,84,49,48,52,48,51,52,57,84,243,189,191,157,84,84,49,48,52,48,51,56,53,84,243,190,128,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20689 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20689_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20689_s.txt", Encoding.UTF8);

    public Test20689() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers9df780a74f2549dda8f9f337dadb7946",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,56,54,51,48,51,84,244,137,141,159,84,84,49,48,56,54,51,48,52,84,244,137,141,160,84,84,49,48,56,54,51,48,53,84,244,137,141,161,84,84,49,48,56,54,51,48,54,84,244,137,141,162,84,84,49,48,56,54,51,48,55,84,244,137,141,163,84,84,49,48,56,54,51,48,56,84,244,137,141,164,84,84,49,48,56,54,51,48,57,84,244,137,141,165,84,84,49,48,56,54,51,49,48,84,244,137,141,166,84,84,49,48,56,54,51,49,49,84,244,137,141,167,84,84,49,48,56,54,51,49,50,84,244,137,141,168,84,84,49,48,56,54,51,49,51,84,244,137,141,169,84,84,49,48,56,54,51,49,52,84,244,137,141,170,84,84,49,48,56,54,51,49,53,84,244,137,141,171,84,84,49,48,56,54,51,49,54,84,244,137,141,172,84,84,49,48,56,54,51,49,55,84,244,137,141,173,84,84,49,48,56,54,51,49,56,84,244,137,141,174,84,84,49,48,56,54,51,49,57,84,244,137,141,175,84,84,49,48,56,54,51,50,48,84,244,137,141,176,84,84,49,48,56,54,51,50,49,84,244,137,141,177,84,84,49,48,56,54,51,50,50,84,244,137,141,178,84,84,49,48,56,54,51,50,51,84,244,137,141,179,84,84,49,48,56,54,51,50,52,84,244,137,141,180,84,84,49,48,56,54,51,50,53,84,244,137,141,181,84,84,49,48,56,54,51,50,54,84,244,137,141,182,84,84,49,48,56,54,51,50,55,84,244,137,141,183,84,84,49,48,56,54,51,50,56,84,244,137,141,184,84,84,49,48,56,54,51,50,57,84,244,137,141,185,84,84,49,48,56,54,51,51,48,84,244,137,141,186,84,84,49,48,56,54,51,51,49,84,244,137,141,187,84,84,49,48,56,54,51,51,50,84,244,137,141,188,84,84,49,48,56,54,51,51,51,84,244,137,141,189,84,84,49,48,56,54,51,51,52,84,244,137,141,190,84,84,49,48,56,54,51,51,53,84,244,137,141,191,84,84,49,48,56,54,51,51,55,84,244,137,142,129,84,84,49,48,56,54,51,52,57,84,244,137,142,141,84,84,49,48,56,54,51,53,49,84,244,137,142,143,84,84,49,48,56,54,51,53,50,84,244,137,142,144,84,84,49,48,56,54,51,54,53,84,244,137,142,157,84,84,49,48,56,54,52,48,48,84,244,137,143,128,84,84,49,48,56,54,52,48,49,84,244,137,143,129,84,84,49,48,56,54,52,48,50,84,244,137,143,130,84,84,49,48,56,54,52,48,51,84,244,137,143,131,84,84,49,48,56,54,52,48,52,84,244,137,143,132,84,84,49,48,56,54,52,48,53,84,244,137,143,133,84,84,49,48,56,54,52,48,54,84,244,137,143,134,84,84,49,48,56,54,52,48,55,84,244,137,143,135,84,84,49,48,56,54,52,48,56,84,244,137,143,136,84,84,49,48,56,54,52,48,57,84,244,137,143,137,84,84,49,48,56,54,52,49,48,84,244,137,143,138,84,84,49,48,56,54,52,49,49,84,244,137,143,139,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20177 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20177_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20177_s.txt", Encoding.UTF8);

    public Test20177() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers4f3362aed9424bd2bfac6751ee820ab9",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,50,57,48,53,57,84,243,187,143,131,84,84,49,48,50,57,48,54,48,84,243,187,143,132,84,84,49,48,50,57,48,54,49,84,243,187,143,133,84,84,49,48,50,57,48,54,50,84,243,187,143,134,84,84,49,48,50,57,48,54,51,84,243,187,143,135,84,84,49,48,50,57,48,54,52,84,243,187,143,136,84,84,49,48,50,57,48,54,53,84,243,187,143,137,84,84,49,48,50,57,48,54,54,84,243,187,143,138,84,84,49,48,50,57,48,54,55,84,243,187,143,139,84,84,49,48,50,57,48,54,56,84,243,187,143,140,84,84,49,48,50,57,48,54,57,84,243,187,143,141,84,84,49,48,50,57,48,55,48,84,243,187,143,142,84,84,49,48,50,57,48,55,49,84,243,187,143,143,84,84,49,48,50,57,48,55,50,84,243,187,143,144,84,84,49,48,50,57,48,55,51,84,243,187,143,145,84,84,49,48,50,57,48,55,52,84,243,187,143,146,84,84,49,48,50,57,48,55,53,84,243,187,143,147,84,84,49,48,50,57,48,55,54,84,243,187,143,148,84,84,49,48,50,57,48,55,55,84,243,187,143,149,84,84,49,48,50,57,48,55,56,84,243,187,143,150,84,84,49,48,50,57,48,55,57,84,243,187,143,151,84,84,49,48,50,57,48,56,48,84,243,187,143,152,84,84,49,48,50,57,48,56,49,84,243,187,143,153,84,84,49,48,50,57,48,56,50,84,243,187,143,154,84,84,49,48,50,57,48,56,51,84,243,187,143,155,84,84,49,48,50,57,48,56,52,84,243,187,143,156,84,84,49,48,50,57,48,56,53,84,243,187,143,157,84,84,49,48,50,57,48,56,54,84,243,187,143,158,84,84,49,48,50,57,48,56,55,84,243,187,143,159,84,84,49,48,50,57,48,56,56,84,243,187,143,160,84,84,49,48,50,57,48,56,57,84,243,187,143,161,84,84,49,48,50,57,48,57,48,84,243,187,143,162,84,84,49,48,50,57,48,57,49,84,243,187,143,163,84,84,49,48,50,57,48,57,50,84,243,187,143,164,84,84,49,48,50,57,48,57,51,84,243,187,143,165,84,84,49,48,50,57,48,57,52,84,243,187,143,166,84,84,49,48,50,57,48,57,53,84,243,187,143,167,84,84,49,48,50,57,48,57,54,84,243,187,143,168,84,84,49,48,50,57,48,57,55,84,243,187,143,169,84,84,49,48,50,57,48,57,56,84,243,187,143,170,84,84,49,48,50,57,48,57,57,84,243,187,143,171,84,84,49,48,50,57,49,48,48,84,243,187,143,172,84,84,49,48,50,57,49,48,49,84,243,187,143,173,84,84,49,48,50,57,49,48,50,84,243,187,143,174,84,84,49,48,50,57,49,48,51,84,243,187,143,175,84,84,49,48,50,57,49,48,52,84,243,187,143,176,84,84,49,48,50,57,49,48,53,84,243,187,143,177,84,84,49,48,50,57,49,48,54,84,243,187,143,178,84,84,49,48,50,57,49,48,55,84,243,187,143,179,84,84,49,48,50,57,49,48,56,84,243,187,143,180,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20499 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20499_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20499_s.txt", Encoding.UTF8);

    public Test20499() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers3bfa703d74a140e499ecce701b962b8c",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,54,56,51,55,84,244,130,129,133,84,84,49,48,53,54,56,51,56,84,244,130,129,134,84,84,49,48,53,54,56,51,57,84,244,130,129,135,84,84,49,48,53,54,56,52,48,84,244,130,129,136,84,84,49,48,53,54,56,52,49,84,244,130,129,137,84,84,49,48,53,54,56,52,50,84,244,130,129,138,84,84,49,48,53,54,56,52,51,84,244,130,129,139,84,84,49,48,53,54,56,52,52,84,244,130,129,140,84,84,49,48,53,54,56,52,53,84,244,130,129,141,84,84,49,48,53,54,56,52,54,84,244,130,129,142,84,84,49,48,53,54,56,52,55,84,244,130,129,143,84,84,49,48,53,54,56,52,56,84,244,130,129,144,84,84,49,48,53,54,56,52,57,84,244,130,129,145,84,84,49,48,53,54,56,53,48,84,244,130,129,146,84,84,49,48,53,54,56,53,49,84,244,130,129,147,84,84,49,48,53,54,56,53,50,84,244,130,129,148,84,84,49,48,53,54,56,53,51,84,244,130,129,149,84,84,49,48,53,54,56,53,52,84,244,130,129,150,84,84,49,48,53,54,56,53,53,84,244,130,129,151,84,84,49,48,53,54,56,53,54,84,244,130,129,152,84,84,49,48,53,54,56,53,55,84,244,130,129,153,84,84,49,48,53,54,56,53,56,84,244,130,129,154,84,84,49,48,53,54,56,53,57,84,244,130,129,155,84,84,49,48,53,54,56,54,48,84,244,130,129,156,84,84,49,48,53,54,56,54,49,84,244,130,129,157,84,84,49,48,53,54,56,54,50,84,244,130,129,158,84,84,49,48,53,54,56,54,51,84,244,130,129,159,84,84,49,48,53,54,56,54,52,84,244,130,129,160,84,84,49,48,53,54,56,54,53,84,244,130,129,161,84,84,49,48,53,54,56,54,54,84,244,130,129,162,84,84,49,48,53,54,56,54,55,84,244,130,129,163,84,84,49,48,53,54,56,54,56,84,244,130,129,164,84,84,49,48,53,54,56,54,57,84,244,130,129,165,84,84,49,48,53,54,56,55,48,84,244,130,129,166,84,84,49,48,53,54,56,55,49,84,244,130,129,167,84,84,49,48,53,54,56,55,50,84,244,130,129,168,84,84,49,48,53,54,56,55,51,84,244,130,129,169,84,84,49,48,53,54,56,55,52,84,244,130,129,170,84,84,49,48,53,54,56,55,53,84,244,130,129,171,84,84,49,48,53,54,56,55,54,84,244,130,129,172,84,84,49,48,53,54,56,55,55,84,244,130,129,173,84,84,49,48,53,54,56,55,56,84,244,130,129,174,84,84,49,48,53,54,56,55,57,84,244,130,129,175,84,84,49,48,53,54,56,56,48,84,244,130,129,176,84,84,49,48,53,54,56,56,49,84,244,130,129,177,84,84,49,48,53,54,56,56,50,84,244,130,129,178,84,84,49,48,53,54,56,56,51,84,244,130,129,179,84,84,49,48,53,54,56,56,52,84,244,130,129,180,84,84,49,48,53,54,56,56,53,84,244,130,129,181,84,84,49,48,53,54,56,56,54,84,244,130,129,182,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22631 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22631_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22631_s.txt", Encoding.UTF8);

    public Test22631() : base(recordedRequest, recordedResponse, "accounts8d43a048e2beca5")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048e2beca5",
                        container: "containers3974e1da6923423a9845f2ce644df77d",
                        blob: "Blob30bcd46fcd03473cb52f777e93691da5",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20558 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20558_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20558_s.txt", Encoding.UTF8);

    public Test20558() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers169b02be047c4c76acbb586fdc8886c6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,54,53,56,52,56,84,244,132,141,184,84,84,49,48,54,53,56,52,57,84,244,132,141,185,84,84,49,48,54,53,56,53,48,84,244,132,141,186,84,84,49,48,54,53,56,53,49,84,244,132,141,187,84,84,49,48,54,53,56,53,50,84,244,132,141,188,84,84,49,48,54,53,56,53,51,84,244,132,141,189,84,84,49,48,54,53,56,53,52,84,244,132,141,190,84,84,49,48,54,53,56,53,53,84,244,132,141,191,84,84,49,48,54,53,56,53,55,84,244,132,142,129,84,84,49,48,54,53,56,54,57,84,244,132,142,141,84,84,49,48,54,53,56,55,49,84,244,132,142,143,84,84,49,48,54,53,56,55,50,84,244,132,142,144,84,84,49,48,54,53,56,56,53,84,244,132,142,157,84,84,49,48,54,53,57,50,48,84,244,132,143,128,84,84,49,48,54,53,57,50,49,84,244,132,143,129,84,84,49,48,54,53,57,50,50,84,244,132,143,130,84,84,49,48,54,53,57,50,51,84,244,132,143,131,84,84,49,48,54,53,57,50,52,84,244,132,143,132,84,84,49,48,54,53,57,50,53,84,244,132,143,133,84,84,49,48,54,53,57,50,54,84,244,132,143,134,84,84,49,48,54,53,57,50,55,84,244,132,143,135,84,84,49,48,54,53,57,50,56,84,244,132,143,136,84,84,49,48,54,53,57,50,57,84,244,132,143,137,84,84,49,48,54,53,57,51,48,84,244,132,143,138,84,84,49,48,54,53,57,51,49,84,244,132,143,139,84,84,49,48,54,53,57,51,50,84,244,132,143,140,84,84,49,48,54,53,57,51,51,84,244,132,143,141,84,84,49,48,54,53,57,51,52,84,244,132,143,142,84,84,49,48,54,53,57,51,53,84,244,132,143,143,84,84,49,48,54,53,57,51,54,84,244,132,143,144,84,84,49,48,54,53,57,51,55,84,244,132,143,145,84,84,49,48,54,53,57,51,56,84,244,132,143,146,84,84,49,48,54,53,57,51,57,84,244,132,143,147,84,84,49,48,54,53,57,52,48,84,244,132,143,148,84,84,49,48,54,53,57,52,49,84,244,132,143,149,84,84,49,48,54,53,57,52,50,84,244,132,143,150,84,84,49,48,54,53,57,52,51,84,244,132,143,151,84,84,49,48,54,53,57,52,52,84,244,132,143,152,84,84,49,48,54,53,57,52,53,84,244,132,143,153,84,84,49,48,54,53,57,52,54,84,244,132,143,154,84,84,49,48,54,53,57,52,55,84,244,132,143,155,84,84,49,48,54,53,57,52,56,84,244,132,143,156,84,84,49,48,54,53,57,52,57,84,244,132,143,157,84,84,49,48,54,53,57,53,48,84,244,132,143,158,84,84,49,48,54,53,57,53,49,84,244,132,143,159,84,84,49,48,54,53,57,53,50,84,244,132,143,160,84,84,49,48,54,53,57,53,51,84,244,132,143,161,84,84,49,48,54,53,57,53,52,84,244,132,143,162,84,84,49,48,54,53,57,53,53,84,244,132,143,163,84,84,49,48,54,53,57,53,54,84,244,132,143,164,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20530 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20530_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20530_s.txt", Encoding.UTF8);

    public Test20530() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers169b02be047c4c76acbb586fdc8886c6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,54,49,51,50,53,84,244,131,135,141,84,84,49,48,54,49,51,50,55,84,244,131,135,143,84,84,49,48,54,49,51,50,56,84,244,131,135,144,84,84,49,48,54,49,51,52,49,84,244,131,135,157,84,84,49,48,54,49,51,55,55,84,244,131,136,129,84,84,49,48,54,49,51,56,57,84,244,131,136,141,84,84,49,48,54,49,51,57,49,84,244,131,136,143,84,84,49,48,54,49,51,57,50,84,244,131,136,144,84,84,49,48,54,49,52,48,53,84,244,131,136,157,84,84,49,48,54,49,52,52,49,84,244,131,137,129,84,84,49,48,54,49,52,53,51,84,244,131,137,141,84,84,49,48,54,49,52,53,53,84,244,131,137,143,84,84,49,48,54,49,52,53,54,84,244,131,137,144,84,84,49,48,54,49,52,54,57,84,244,131,137,157,84,84,49,48,54,49,53,48,53,84,244,131,138,129,84,84,49,48,54,49,53,49,55,84,244,131,138,141,84,84,49,48,54,49,53,49,57,84,244,131,138,143,84,84,49,48,54,49,53,50,48,84,244,131,138,144,84,84,49,48,54,49,53,51,51,84,244,131,138,157,84,84,49,48,54,49,53,54,57,84,244,131,139,129,84,84,49,48,54,49,53,56,49,84,244,131,139,141,84,84,49,48,54,49,53,56,51,84,244,131,139,143,84,84,49,48,54,49,53,56,52,84,244,131,139,144,84,84,49,48,54,49,53,57,55,84,244,131,139,157,84,84,49,48,54,49,54,51,51,84,244,131,140,129,84,84,49,48,54,49,54,52,53,84,244,131,140,141,84,84,49,48,54,49,54,52,55,84,244,131,140,143,84,84,49,48,54,49,54,52,56,84,244,131,140,144,84,84,49,48,54,49,54,54,49,84,244,131,140,157,84,84,49,48,54,49,54,57,54,84,244,131,141,128,84,84,49,48,54,49,54,57,55,84,244,131,141,129,84,84,49,48,54,49,54,57,56,84,244,131,141,130,84,84,49,48,54,49,54,57,57,84,244,131,141,131,84,84,49,48,54,49,55,48,48,84,244,131,141,132,84,84,49,48,54,49,55,48,49,84,244,131,141,133,84,84,49,48,54,49,55,48,50,84,244,131,141,134,84,84,49,48,54,49,55,48,51,84,244,131,141,135,84,84,49,48,54,49,55,48,52,84,244,131,141,136,84,84,49,48,54,49,55,48,53,84,244,131,141,137,84,84,49,48,54,49,55,48,54,84,244,131,141,138,84,84,49,48,54,49,55,48,55,84,244,131,141,139,84,84,49,48,54,49,55,48,56,84,244,131,141,140,84,84,49,48,54,49,55,48,57,84,244,131,141,141,84,84,49,48,54,49,55,49,48,84,244,131,141,142,84,84,49,48,54,49,55,49,49,84,244,131,141,143,84,84,49,48,54,49,55,49,50,84,244,131,141,144,84,84,49,48,54,49,55,49,51,84,244,131,141,145,84,84,49,48,54,49,55,49,52,84,244,131,141,146,84,84,49,48,54,49,55,49,53,84,244,131,141,147,84,84,49,48,54,49,55,49,54,84,244,131,141,148,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22814 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22814_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22814_s.txt", Encoding.UTF8);

    public Test22814() : base(recordedRequest, recordedResponse, "accounts8d43a0490823d21")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a0490823d21",
                        container: "containers0bd48f2ce8374f57b3f3c61b5595b35b",
                        blob: "Blob91a862f6209b4f358f2ca670574e368c",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20120 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20120_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20120_s.txt", Encoding.UTF8);

    public Test20120() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers02552a2396c44255a61dd19b9714b3b6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,50,48,49,49,49,84,243,185,131,143,84,84,49,48,50,48,49,49,50,84,243,185,131,144,84,84,49,48,50,48,49,50,53,84,243,185,131,157,84,84,49,48,50,48,49,54,49,84,243,185,132,129,84,84,49,48,50,48,49,55,51,84,243,185,132,141,84,84,49,48,50,48,49,55,53,84,243,185,132,143,84,84,49,48,50,48,49,55,54,84,243,185,132,144,84,84,49,48,50,48,49,56,57,84,243,185,132,157,84,84,49,48,50,48,50,50,53,84,243,185,133,129,84,84,49,48,50,48,50,51,55,84,243,185,133,141,84,84,49,48,50,48,50,51,57,84,243,185,133,143,84,84,49,48,50,48,50,52,48,84,243,185,133,144,84,84,49,48,50,48,50,53,51,84,243,185,133,157,84,84,49,48,50,48,50,56,57,84,243,185,134,129,84,84,49,48,50,48,51,48,49,84,243,185,134,141,84,84,49,48,50,48,51,48,51,84,243,185,134,143,84,84,49,48,50,48,51,48,52,84,243,185,134,144,84,84,49,48,50,48,51,49,55,84,243,185,134,157,84,84,49,48,50,48,51,53,51,84,243,185,135,129,84,84,49,48,50,48,51,54,53,84,243,185,135,141,84,84,49,48,50,48,51,54,55,84,243,185,135,143,84,84,49,48,50,48,51,54,56,84,243,185,135,144,84,84,49,48,50,48,51,56,49,84,243,185,135,157,84,84,49,48,50,48,52,49,55,84,243,185,136,129,84,84,49,48,50,48,52,50,57,84,243,185,136,141,84,84,49,48,50,48,52,51,49,84,243,185,136,143,84,84,49,48,50,48,52,51,50,84,243,185,136,144,84,84,49,48,50,48,52,52,53,84,243,185,136,157,84,84,49,48,50,48,52,56,49,84,243,185,137,129,84,84,49,48,50,48,52,57,51,84,243,185,137,141,84,84,49,48,50,48,52,57,53,84,243,185,137,143,84,84,49,48,50,48,52,57,54,84,243,185,137,144,84,84,49,48,50,48,53,48,57,84,243,185,137,157,84,84,49,48,50,48,53,52,53,84,243,185,138,129,84,84,49,48,50,48,53,53,55,84,243,185,138,141,84,84,49,48,50,48,53,53,57,84,243,185,138,143,84,84,49,48,50,48,53,54,48,84,243,185,138,144,84,84,49,48,50,48,53,55,51,84,243,185,138,157,84,84,49,48,50,48,54,48,57,84,243,185,139,129,84,84,49,48,50,48,54,50,49,84,243,185,139,141,84,84,49,48,50,48,54,50,51,84,243,185,139,143,84,84,49,48,50,48,54,50,52,84,243,185,139,144,84,84,49,48,50,48,54,51,55,84,243,185,139,157,84,84,49,48,50,48,54,55,51,84,243,185,140,129,84,84,49,48,50,48,54,56,53,84,243,185,140,141,84,84,49,48,50,48,54,56,55,84,243,185,140,143,84,84,49,48,50,48,54,56,56,84,243,185,140,144,84,84,49,48,50,48,55,48,49,84,243,185,140,157,84,84,49,48,50,48,55,51,54,84,243,185,141,128,84,84,49,48,50,48,55,51,55,84,243,185,141,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20400 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20400_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20400_s.txt", Encoding.UTF8);

    public Test20400() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers7f83ba854dc4459da9078f97f691d28c",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,52,52,50,56,84,244,129,155,156,84,84,49,48,53,52,52,50,57,84,244,129,155,157,84,84,49,48,53,52,52,51,48,84,244,129,155,158,84,84,49,48,53,52,52,51,49,84,244,129,155,159,84,84,49,48,53,52,52,51,50,84,244,129,155,160,84,84,49,48,53,52,52,51,51,84,244,129,155,161,84,84,49,48,53,52,52,51,52,84,244,129,155,162,84,84,49,48,53,52,52,51,53,84,244,129,155,163,84,84,49,48,53,52,52,51,54,84,244,129,155,164,84,84,49,48,53,52,52,51,55,84,244,129,155,165,84,84,49,48,53,52,52,51,56,84,244,129,155,166,84,84,49,48,53,52,52,51,57,84,244,129,155,167,84,84,49,48,53,52,52,52,48,84,244,129,155,168,84,84,49,48,53,52,52,52,49,84,244,129,155,169,84,84,49,48,53,52,52,52,50,84,244,129,155,170,84,84,49,48,53,52,52,52,51,84,244,129,155,171,84,84,49,48,53,52,52,52,52,84,244,129,155,172,84,84,49,48,53,52,52,52,53,84,244,129,155,173,84,84,49,48,53,52,52,52,54,84,244,129,155,174,84,84,49,48,53,52,52,52,55,84,244,129,155,175,84,84,49,48,53,52,52,52,56,84,244,129,155,176,84,84,49,48,53,52,52,52,57,84,244,129,155,177,84,84,49,48,53,52,52,53,48,84,244,129,155,178,84,84,49,48,53,52,52,53,49,84,244,129,155,179,84,84,49,48,53,52,52,53,50,84,244,129,155,180,84,84,49,48,53,52,52,53,51,84,244,129,155,181,84,84,49,48,53,52,52,53,52,84,244,129,155,182,84,84,49,48,53,52,52,53,53,84,244,129,155,183,84,84,49,48,53,52,52,53,54,84,244,129,155,184,84,84,49,48,53,52,52,53,55,84,244,129,155,185,84,84,49,48,53,52,52,53,56,84,244,129,155,186,84,84,49,48,53,52,52,53,57,84,244,129,155,187,84,84,49,48,53,52,52,54,48,84,244,129,155,188,84,84,49,48,53,52,52,54,49,84,244,129,155,189,84,84,49,48,53,52,52,54,50,84,244,129,155,190,84,84,49,48,53,52,52,54,51,84,244,129,155,191,84,84,49,48,53,52,52,54,52,84,244,129,156,128,84,84,49,48,53,52,52,54,53,84,244,129,156,129,84,84,49,48,53,52,52,54,54,84,244,129,156,130,84,84,49,48,53,52,52,54,55,84,244,129,156,131,84,84,49,48,53,52,52,54,56,84,244,129,156,132,84,84,49,48,53,52,52,54,57,84,244,129,156,133,84,84,49,48,53,52,52,55,48,84,244,129,156,134,84,84,49,48,53,52,52,55,49,84,244,129,156,135,84,84,49,48,53,52,52,55,50,84,244,129,156,136,84,84,49,48,53,52,52,55,51,84,244,129,156,137,84,84,49,48,53,52,52,55,52,84,244,129,156,138,84,84,49,48,53,52,52,55,53,84,244,129,156,139,84,84,49,48,53,52,52,55,54,84,244,129,156,140,84,84,49,48,53,52,52,55,55,84,244,129,156,141,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22568 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22568_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22568_s.txt", Encoding.UTF8);

    public Test22568() : base(recordedRequest, recordedResponse, "accounts8d43a048d26afcd")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048d26afcd",
                        container: "containersddd934ca569845dc89778f0bd55316f0",
                        blob: "Blob91faba3dd15f4490b8271911709e8d0f",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19955 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19955_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19955_s.txt", Encoding.UTF8);

    public Test19955() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersbf5ecfbea5a24d8a8188936c9be6fa20",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,57,51,54,49,51,84,243,178,165,141,84,84,57,57,51,54,49,53,84,243,178,165,143,84,84,57,57,51,54,49,54,84,243,178,165,144,84,84,57,57,51,54,50,57,84,243,178,165,157,84,84,57,57,51,54,54,53,84,243,178,166,129,84,84,57,57,51,54,55,55,84,243,178,166,141,84,84,57,57,51,54,55,57,84,243,178,166,143,84,84,57,57,51,54,56,48,84,243,178,166,144,84,84,57,57,51,54,57,51,84,243,178,166,157,84,84,57,57,51,55,50,57,84,243,178,167,129,84,84,57,57,51,55,52,49,84,243,178,167,141,84,84,57,57,51,55,52,51,84,243,178,167,143,84,84,57,57,51,55,52,52,84,243,178,167,144,84,84,57,57,51,55,53,55,84,243,178,167,157,84,84,57,57,51,55,57,51,84,243,178,168,129,84,84,57,57,51,56,48,53,84,243,178,168,141,84,84,57,57,51,56,48,55,84,243,178,168,143,84,84,57,57,51,56,48,56,84,243,178,168,144,84,84,57,57,51,56,50,49,84,243,178,168,157,84,84,57,57,51,56,53,55,84,243,178,169,129,84,84,57,57,51,56,54,57,84,243,178,169,141,84,84,57,57,51,56,55,49,84,243,178,169,143,84,84,57,57,51,56,55,50,84,243,178,169,144,84,84,57,57,51,56,56,53,84,243,178,169,157,84,84,57,57,51,57,50,49,84,243,178,170,129,84,84,57,57,51,57,51,51,84,243,178,170,141,84,84,57,57,51,57,51,53,84,243,178,170,143,84,84,57,57,51,57,51,54,84,243,178,170,144,84,84,57,57,51,57,52,57,84,243,178,170,157,84,84,57,57,51,57,56,53,84,243,178,171,129,84,84,57,57,51,57,57,55,84,243,178,171,141,84,84,57,57,51,57,57,57,84,243,178,171,143,84,84,57,57,52,48,48,48,84,243,178,171,144,84,84,57,57,52,48,49,51,84,243,178,171,157,84,84,57,57,52,48,52,57,84,243,178,172,129,84,84,57,57,52,48,54,49,84,243,178,172,141,84,84,57,57,52,48,54,51,84,243,178,172,143,84,84,57,57,52,48,54,52,84,243,178,172,144,84,84,57,57,52,48,55,55,84,243,178,172,157,84,84,57,57,52,49,49,51,84,243,178,173,129,84,84,57,57,52,49,50,53,84,243,178,173,141,84,84,57,57,52,49,50,55,84,243,178,173,143,84,84,57,57,52,49,50,56,84,243,178,173,144,84,84,57,57,52,49,52,49,84,243,178,173,157,84,84,57,57,52,49,55,55,84,243,178,174,129,84,84,57,57,52,49,56,57,84,243,178,174,141,84,84,57,57,52,49,57,49,84,243,178,174,143,84,84,57,57,52,49,57,50,84,243,178,174,144,84,84,57,57,52,50,48,53,84,243,178,174,157,84,84,57,57,52,50,52,49,84,243,178,175,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22815 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22815_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22815_s.txt", Encoding.UTF8);

    public Test22815() : base(recordedRequest, recordedResponse, "accounts8d43a0490823d21")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a0490823d21",
                        container: "containers0bd48f2ce8374f57b3f3c61b5595b35b",
                        blob: "Blob764e5782dc7c4ea2a5655da08463be81",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22632 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22632_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22632_s.txt", Encoding.UTF8);

    public Test22632() : base(recordedRequest, recordedResponse, "accounts8d43a048e2beca5")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048e2beca5",
                        container: "containers3974e1da6923423a9845f2ce644df77d",
                        blob: "Blobbcd80a5d6c59492c9ee9dcd2f1614ea6",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20021 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20021_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20021_s.txt", Encoding.UTF8);

    public Test20021() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers612d6939acd44cdbbba30cffbd18a713",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,48,52,52,49,52,84,243,181,141,190,84,84,49,48,48,52,52,49,53,84,243,181,141,191,84,84,49,48,48,52,52,49,55,84,243,181,142,129,84,84,49,48,48,52,52,50,57,84,243,181,142,141,84,84,49,48,48,52,52,51,49,84,243,181,142,143,84,84,49,48,48,52,52,51,50,84,243,181,142,144,84,84,49,48,48,52,52,52,53,84,243,181,142,157,84,84,49,48,48,52,52,56,48,84,243,181,143,128,84,84,49,48,48,52,52,56,49,84,243,181,143,129,84,84,49,48,48,52,52,56,50,84,243,181,143,130,84,84,49,48,48,52,52,56,51,84,243,181,143,131,84,84,49,48,48,52,52,56,52,84,243,181,143,132,84,84,49,48,48,52,52,56,53,84,243,181,143,133,84,84,49,48,48,52,52,56,54,84,243,181,143,134,84,84,49,48,48,52,52,56,55,84,243,181,143,135,84,84,49,48,48,52,52,56,56,84,243,181,143,136,84,84,49,48,48,52,52,56,57,84,243,181,143,137,84,84,49,48,48,52,52,57,48,84,243,181,143,138,84,84,49,48,48,52,52,57,49,84,243,181,143,139,84,84,49,48,48,52,52,57,50,84,243,181,143,140,84,84,49,48,48,52,52,57,51,84,243,181,143,141,84,84,49,48,48,52,52,57,52,84,243,181,143,142,84,84,49,48,48,52,52,57,53,84,243,181,143,143,84,84,49,48,48,52,52,57,54,84,243,181,143,144,84,84,49,48,48,52,52,57,55,84,243,181,143,145,84,84,49,48,48,52,52,57,56,84,243,181,143,146,84,84,49,48,48,52,52,57,57,84,243,181,143,147,84,84,49,48,48,52,53,48,48,84,243,181,143,148,84,84,49,48,48,52,53,48,49,84,243,181,143,149,84,84,49,48,48,52,53,48,50,84,243,181,143,150,84,84,49,48,48,52,53,48,51,84,243,181,143,151,84,84,49,48,48,52,53,48,52,84,243,181,143,152,84,84,49,48,48,52,53,48,53,84,243,181,143,153,84,84,49,48,48,52,53,48,54,84,243,181,143,154,84,84,49,48,48,52,53,48,55,84,243,181,143,155,84,84,49,48,48,52,53,48,56,84,243,181,143,156,84,84,49,48,48,52,53,48,57,84,243,181,143,157,84,84,49,48,48,52,53,49,48,84,243,181,143,158,84,84,49,48,48,52,53,49,49,84,243,181,143,159,84,84,49,48,48,52,53,49,50,84,243,181,143,160,84,84,49,48,48,52,53,49,51,84,243,181,143,161,84,84,49,48,48,52,53,49,52,84,243,181,143,162,84,84,49,48,48,52,53,49,53,84,243,181,143,163,84,84,49,48,48,52,53,49,54,84,243,181,143,164,84,84,49,48,48,52,53,49,55,84,243,181,143,165,84,84,49,48,48,52,53,49,56,84,243,181,143,166,84,84,49,48,48,52,53,49,57,84,243,181,143,167,84,84,49,48,48,52,53,50,48,84,243,181,143,168,84,84,49,48,48,52,53,50,49,84,243,181,143,169,84,84,49,48,48,52,53,50,50,84,243,181,143,170,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22633 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22633_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22633_s.txt", Encoding.UTF8);

    public Test22633() : base(recordedRequest, recordedResponse, "accounts8d43a048e2beca5")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048e2beca5",
                        container: "containers3974e1da6923423a9845f2ce644df77d",
                        blob: "Blob3750f80eb2a44586950f77d6cc9f1499",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19413 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19413_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19413_s.txt", Encoding.UTF8);

    public Test19413() : base(recordedRequest, recordedResponse, "accounts8d43a024a0ff30a")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a024a0ff30a",
                        container: "$root",
                        blob: "a",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20437 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20437_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20437_s.txt", Encoding.UTF8);

    public Test20437() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersee5ddc6232b847869028904d3d06a0f3",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,53,50,55,56,84,244,129,168,174,84,84,49,48,53,53,50,55,57,84,244,129,168,175,84,84,49,48,53,53,50,56,48,84,244,129,168,176,84,84,49,48,53,53,50,56,49,84,244,129,168,177,84,84,49,48,53,53,50,56,50,84,244,129,168,178,84,84,49,48,53,53,50,56,51,84,244,129,168,179,84,84,49,48,53,53,50,56,52,84,244,129,168,180,84,84,49,48,53,53,50,56,53,84,244,129,168,181,84,84,49,48,53,53,50,56,54,84,244,129,168,182,84,84,49,48,53,53,50,56,55,84,244,129,168,183,84,84,49,48,53,53,50,56,56,84,244,129,168,184,84,84,49,48,53,53,50,56,57,84,244,129,168,185,84,84,49,48,53,53,50,57,48,84,244,129,168,186,84,84,49,48,53,53,50,57,49,84,244,129,168,187,84,84,49,48,53,53,50,57,50,84,244,129,168,188,84,84,49,48,53,53,50,57,51,84,244,129,168,189,84,84,49,48,53,53,50,57,52,84,244,129,168,190,84,84,49,48,53,53,50,57,53,84,244,129,168,191,84,84,49,48,53,53,50,57,54,84,244,129,169,128,84,84,49,48,53,53,50,57,55,84,244,129,169,129,84,84,49,48,53,53,50,57,56,84,244,129,169,130,84,84,49,48,53,53,50,57,57,84,244,129,169,131,84,84,49,48,53,53,51,48,48,84,244,129,169,132,84,84,49,48,53,53,51,48,49,84,244,129,169,133,84,84,49,48,53,53,51,48,50,84,244,129,169,134,84,84,49,48,53,53,51,48,51,84,244,129,169,135,84,84,49,48,53,53,51,48,52,84,244,129,169,136,84,84,49,48,53,53,51,48,53,84,244,129,169,137,84,84,49,48,53,53,51,48,54,84,244,129,169,138,84,84,49,48,53,53,51,48,55,84,244,129,169,139,84,84,49,48,53,53,51,48,56,84,244,129,169,140,84,84,49,48,53,53,51,48,57,84,244,129,169,141,84,84,49,48,53,53,51,49,48,84,244,129,169,142,84,84,49,48,53,53,51,49,49,84,244,129,169,143,84,84,49,48,53,53,51,49,50,84,244,129,169,144,84,84,49,48,53,53,51,49,51,84,244,129,169,145,84,84,49,48,53,53,51,49,52,84,244,129,169,146,84,84,49,48,53,53,51,49,53,84,244,129,169,147,84,84,49,48,53,53,51,49,54,84,244,129,169,148,84,84,49,48,53,53,51,49,55,84,244,129,169,149,84,84,49,48,53,53,51,49,56,84,244,129,169,150,84,84,49,48,53,53,51,49,57,84,244,129,169,151,84,84,49,48,53,53,51,50,48,84,244,129,169,152,84,84,49,48,53,53,51,50,49,84,244,129,169,153,84,84,49,48,53,53,51,50,50,84,244,129,169,154,84,84,49,48,53,53,51,50,51,84,244,129,169,155,84,84,49,48,53,53,51,50,52,84,244,129,169,156,84,84,49,48,53,53,51,50,53,84,244,129,169,157,84,84,49,48,53,53,51,50,54,84,244,129,169,158,84,84,49,48,53,53,51,50,55,84,244,129,169,159,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20247 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20247_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20247_s.txt", Encoding.UTF8);

    public Test20247() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersca1800aaa567470781b999118df6ba97",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,52,48,51,57,55,84,243,190,128,141,84,84,49,48,52,48,51,57,57,84,243,190,128,143,84,84,49,48,52,48,52,48,48,84,243,190,128,144,84,84,49,48,52,48,52,49,51,84,243,190,128,157,84,84,49,48,52,48,52,52,56,84,243,190,129,128,84,84,49,48,52,48,52,52,57,84,243,190,129,129,84,84,49,48,52,48,52,53,48,84,243,190,129,130,84,84,49,48,52,48,52,53,49,84,243,190,129,131,84,84,49,48,52,48,52,53,50,84,243,190,129,132,84,84,49,48,52,48,52,53,51,84,243,190,129,133,84,84,49,48,52,48,52,53,52,84,243,190,129,134,84,84,49,48,52,48,52,53,53,84,243,190,129,135,84,84,49,48,52,48,52,53,54,84,243,190,129,136,84,84,49,48,52,48,52,53,55,84,243,190,129,137,84,84,49,48,52,48,52,53,56,84,243,190,129,138,84,84,49,48,52,48,52,53,57,84,243,190,129,139,84,84,49,48,52,48,52,54,48,84,243,190,129,140,84,84,49,48,52,48,52,54,49,84,243,190,129,141,84,84,49,48,52,48,52,54,50,84,243,190,129,142,84,84,49,48,52,48,52,54,51,84,243,190,129,143,84,84,49,48,52,48,52,54,52,84,243,190,129,144,84,84,49,48,52,48,52,54,53,84,243,190,129,145,84,84,49,48,52,48,52,54,54,84,243,190,129,146,84,84,49,48,52,48,52,54,55,84,243,190,129,147,84,84,49,48,52,48,52,54,56,84,243,190,129,148,84,84,49,48,52,48,52,54,57,84,243,190,129,149,84,84,49,48,52,48,52,55,48,84,243,190,129,150,84,84,49,48,52,48,52,55,49,84,243,190,129,151,84,84,49,48,52,48,52,55,50,84,243,190,129,152,84,84,49,48,52,48,52,55,51,84,243,190,129,153,84,84,49,48,52,48,52,55,52,84,243,190,129,154,84,84,49,48,52,48,52,55,53,84,243,190,129,155,84,84,49,48,52,48,52,55,54,84,243,190,129,156,84,84,49,48,52,48,52,55,55,84,243,190,129,157,84,84,49,48,52,48,52,55,56,84,243,190,129,158,84,84,49,48,52,48,52,55,57,84,243,190,129,159,84,84,49,48,52,48,52,56,48,84,243,190,129,160,84,84,49,48,52,48,52,56,49,84,243,190,129,161,84,84,49,48,52,48,52,56,50,84,243,190,129,162,84,84,49,48,52,48,52,56,51,84,243,190,129,163,84,84,49,48,52,48,52,56,52,84,243,190,129,164,84,84,49,48,52,48,52,56,53,84,243,190,129,165,84,84,49,48,52,48,52,56,54,84,243,190,129,166,84,84,49,48,52,48,52,56,55,84,243,190,129,167,84,84,49,48,52,48,52,56,56,84,243,190,129,168,84,84,49,48,52,48,52,56,57,84,243,190,129,169,84,84,49,48,52,48,52,57,48,84,243,190,129,170,84,84,49,48,52,48,52,57,49,84,243,190,129,171,84,84,49,48,52,48,52,57,50,84,243,190,129,172,84,84,49,48,52,48,52,57,51,84,243,190,129,173,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20501 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20501_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20501_s.txt", Encoding.UTF8);

    public Test20501() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers3bfa703d74a140e499ecce701b962b8c",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,54,56,56,55,84,244,130,129,183,84,84,49,48,53,54,56,56,56,84,244,130,129,184,84,84,49,48,53,54,56,56,57,84,244,130,129,185,84,84,49,48,53,54,56,57,48,84,244,130,129,186,84,84,49,48,53,54,56,57,49,84,244,130,129,187,84,84,49,48,53,54,56,57,50,84,244,130,129,188,84,84,49,48,53,54,56,57,51,84,244,130,129,189,84,84,49,48,53,54,56,57,52,84,244,130,129,190,84,84,49,48,53,54,56,57,53,84,244,130,129,191,84,84,49,48,53,54,56,57,55,84,244,130,130,129,84,84,49,48,53,54,57,48,57,84,244,130,130,141,84,84,49,48,53,54,57,49,49,84,244,130,130,143,84,84,49,48,53,54,57,49,50,84,244,130,130,144,84,84,49,48,53,54,57,50,53,84,244,130,130,157,84,84,49,48,53,54,57,54,49,84,244,130,131,129,84,84,49,48,53,54,57,55,51,84,244,130,131,141,84,84,49,48,53,54,57,55,53,84,244,130,131,143,84,84,49,48,53,54,57,55,54,84,244,130,131,144,84,84,49,48,53,54,57,56,57,84,244,130,131,157,84,84,49,48,53,55,48,50,53,84,244,130,132,129,84,84,49,48,53,55,48,51,55,84,244,130,132,141,84,84,49,48,53,55,48,51,57,84,244,130,132,143,84,84,49,48,53,55,48,52,48,84,244,130,132,144,84,84,49,48,53,55,48,53,51,84,244,130,132,157,84,84,49,48,53,55,48,56,57,84,244,130,133,129,84,84,49,48,53,55,49,48,49,84,244,130,133,141,84,84,49,48,53,55,49,48,51,84,244,130,133,143,84,84,49,48,53,55,49,48,52,84,244,130,133,144,84,84,49,48,53,55,49,49,55,84,244,130,133,157,84,84,49,48,53,55,49,53,51,84,244,130,134,129,84,84,49,48,53,55,49,54,53,84,244,130,134,141,84,84,49,48,53,55,49,54,55,84,244,130,134,143,84,84,49,48,53,55,49,54,56,84,244,130,134,144,84,84,49,48,53,55,49,56,49,84,244,130,134,157,84,84,49,48,53,55,50,49,55,84,244,130,135,129,84,84,49,48,53,55,50,50,57,84,244,130,135,141,84,84,49,48,53,55,50,51,49,84,244,130,135,143,84,84,49,48,53,55,50,51,50,84,244,130,135,144,84,84,49,48,53,55,50,52,53,84,244,130,135,157,84,84,49,48,53,55,50,56,49,84,244,130,136,129,84,84,49,48,53,55,50,57,51,84,244,130,136,141,84,84,49,48,53,55,50,57,53,84,244,130,136,143,84,84,49,48,53,55,50,57,54,84,244,130,136,144,84,84,49,48,53,55,51,48,57,84,244,130,136,157,84,84,49,48,53,55,51,52,53,84,244,130,137,129,84,84,49,48,53,55,51,53,55,84,244,130,137,141,84,84,49,48,53,55,51,53,57,84,244,130,137,143,84,84,49,48,53,55,51,54,48,84,244,130,137,144,84,84,49,48,53,55,51,55,51,84,244,130,137,157,84,84,49,48,53,55,52,48,57,84,244,130,138,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20757 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20757_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20757_s.txt", Encoding.UTF8);

    public Test20757() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersc5ae22b09f3f4a3eaff829adc5876203",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,57,54,53,55,55,84,244,139,174,129,84,84,49,48,57,54,53,56,57,84,244,139,174,141,84,84,49,48,57,54,53,57,49,84,244,139,174,143,84,84,49,48,57,54,53,57,50,84,244,139,174,144,84,84,49,48,57,54,54,48,53,84,244,139,174,157,84,84,49,48,57,54,54,52,49,84,244,139,175,129,84,84,49,48,57,54,54,53,51,84,244,139,175,141,84,84,49,48,57,54,54,53,53,84,244,139,175,143,84,84,49,48,57,54,54,53,54,84,244,139,175,144,84,84,49,48,57,54,54,54,57,84,244,139,175,157,84,84,49,48,57,54,55,48,53,84,244,139,176,129,84,84,49,48,57,54,55,49,55,84,244,139,176,141,84,84,49,48,57,54,55,49,57,84,244,139,176,143,84,84,49,48,57,54,55,50,48,84,244,139,176,144,84,84,49,48,57,54,55,51,51,84,244,139,176,157,84,84,49,48,57,54,55,54,57,84,244,139,177,129,84,84,49,48,57,54,55,56,49,84,244,139,177,141,84,84,49,48,57,54,55,56,51,84,244,139,177,143,84,84,49,48,57,54,55,56,52,84,244,139,177,144,84,84,49,48,57,54,55,57,55,84,244,139,177,157,84,84,49,48,57,54,56,51,51,84,244,139,178,129,84,84,49,48,57,54,56,52,53,84,244,139,178,141,84,84,49,48,57,54,56,52,55,84,244,139,178,143,84,84,49,48,57,54,56,52,56,84,244,139,178,144,84,84,49,48,57,54,56,54,49,84,244,139,178,157,84,84,49,48,57,54,56,57,55,84,244,139,179,129,84,84,49,48,57,54,57,48,57,84,244,139,179,141,84,84,49,48,57,54,57,49,49,84,244,139,179,143,84,84,49,48,57,54,57,49,50,84,244,139,179,144,84,84,49,48,57,54,57,50,53,84,244,139,179,157,84,84,49,48,57,54,57,54,49,84,244,139,180,129,84,84,49,48,57,54,57,55,51,84,244,139,180,141,84,84,49,48,57,54,57,55,53,84,244,139,180,143,84,84,49,48,57,54,57,55,54,84,244,139,180,144,84,84,49,48,57,54,57,56,57,84,244,139,180,157,84,84,49,48,57,55,48,50,53,84,244,139,181,129,84,84,49,48,57,55,48,51,55,84,244,139,181,141,84,84,49,48,57,55,48,51,57,84,244,139,181,143,84,84,49,48,57,55,48,52,48,84,244,139,181,144,84,84,49,48,57,55,48,53,51,84,244,139,181,157,84,84,49,48,57,55,48,56,57,84,244,139,182,129,84,84,49,48,57,55,49,48,49,84,244,139,182,141,84,84,49,48,57,55,49,48,51,84,244,139,182,143,84,84,49,48,57,55,49,48,52,84,244,139,182,144,84,84,49,48,57,55,49,49,55,84,244,139,182,157,84,84,49,48,57,55,49,53,51,84,244,139,183,129,84,84,49,48,57,55,49,54,53,84,244,139,183,141,84,84,49,48,57,55,49,54,55,84,244,139,183,143,84,84,49,48,57,55,49,54,56,84,244,139,183,144,84,84,49,48,57,55,49,56,49,84,244,139,183,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22634 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22634_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22634_s.txt", Encoding.UTF8);

    public Test22634() : base(recordedRequest, recordedResponse, "accounts8d43a048e2beca5")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048e2beca5",
                        container: "containers3974e1da6923423a9845f2ce644df77d",
                        blob: "Blob96880c9c9c134ce58c23663f400029f9",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22272 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22272_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22272_s.txt", Encoding.UTF8);

    public Test22272() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(Encoding.UTF8.GetString(new byte[]{239,191,189,53,73,239,191,189,82,2,16,112,4,77})));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersf65a88beef1c4805ac8c9646ef5f03ef",
                        blob: "Blob25a7f8f7ddef49ff9e91787821422239",
                        blobType: "BlockBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "BlockBlob"),
                        body: body,
                        timeout: 30,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20179 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20179_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20179_s.txt", Encoding.UTF8);

    public Test20179() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers4f3362aed9424bd2bfac6751ee820ab9",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,50,57,49,48,57,84,243,187,143,181,84,84,49,48,50,57,49,49,48,84,243,187,143,182,84,84,49,48,50,57,49,49,49,84,243,187,143,183,84,84,49,48,50,57,49,49,50,84,243,187,143,184,84,84,49,48,50,57,49,49,51,84,243,187,143,185,84,84,49,48,50,57,49,49,52,84,243,187,143,186,84,84,49,48,50,57,49,49,53,84,243,187,143,187,84,84,49,48,50,57,49,49,54,84,243,187,143,188,84,84,49,48,50,57,49,49,55,84,243,187,143,189,84,84,49,48,50,57,49,49,56,84,243,187,143,190,84,84,49,48,50,57,49,49,57,84,243,187,143,191,84,84,49,48,50,57,49,50,48,84,243,187,144,128,84,84,49,48,50,57,49,50,49,84,243,187,144,129,84,84,49,48,50,57,49,50,50,84,243,187,144,130,84,84,49,48,50,57,49,50,51,84,243,187,144,131,84,84,49,48,50,57,49,50,52,84,243,187,144,132,84,84,49,48,50,57,49,50,53,84,243,187,144,133,84,84,49,48,50,57,49,50,54,84,243,187,144,134,84,84,49,48,50,57,49,50,55,84,243,187,144,135,84,84,49,48,50,57,49,50,56,84,243,187,144,136,84,84,49,48,50,57,49,50,57,84,243,187,144,137,84,84,49,48,50,57,49,51,48,84,243,187,144,138,84,84,49,48,50,57,49,51,49,84,243,187,144,139,84,84,49,48,50,57,49,51,50,84,243,187,144,140,84,84,49,48,50,57,49,51,51,84,243,187,144,141,84,84,49,48,50,57,49,51,52,84,243,187,144,142,84,84,49,48,50,57,49,51,53,84,243,187,144,143,84,84,49,48,50,57,49,51,54,84,243,187,144,144,84,84,49,48,50,57,49,51,55,84,243,187,144,145,84,84,49,48,50,57,49,51,56,84,243,187,144,146,84,84,49,48,50,57,49,51,57,84,243,187,144,147,84,84,49,48,50,57,49,52,48,84,243,187,144,148,84,84,49,48,50,57,49,52,49,84,243,187,144,149,84,84,49,48,50,57,49,52,50,84,243,187,144,150,84,84,49,48,50,57,49,52,51,84,243,187,144,151,84,84,49,48,50,57,49,52,52,84,243,187,144,152,84,84,49,48,50,57,49,52,53,84,243,187,144,153,84,84,49,48,50,57,49,52,54,84,243,187,144,154,84,84,49,48,50,57,49,52,55,84,243,187,144,155,84,84,49,48,50,57,49,52,56,84,243,187,144,156,84,84,49,48,50,57,49,52,57,84,243,187,144,157,84,84,49,48,50,57,49,53,48,84,243,187,144,158,84,84,49,48,50,57,49,53,49,84,243,187,144,159,84,84,49,48,50,57,49,53,50,84,243,187,144,160,84,84,49,48,50,57,49,53,51,84,243,187,144,161,84,84,49,48,50,57,49,53,52,84,243,187,144,162,84,84,49,48,50,57,49,53,53,84,243,187,144,163,84,84,49,48,50,57,49,53,54,84,243,187,144,164,84,84,49,48,50,57,49,53,55,84,243,187,144,165,84,84,49,48,50,57,49,53,56,84,243,187,144,166,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20975 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20975_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20975_s.txt", Encoding.UTF8);

    public Test20975() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersdf87e0f5374149afa792ac52b484870e",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,55,51,52,52,84,244,142,150,144,84,84,49,49,48,55,51,53,55,84,244,142,150,157,84,84,49,49,48,55,51,57,51,84,244,142,151,129,84,84,49,49,48,55,52,48,53,84,244,142,151,141,84,84,49,49,48,55,52,48,55,84,244,142,151,143,84,84,49,49,48,55,52,48,56,84,244,142,151,144,84,84,49,49,48,55,52,50,49,84,244,142,151,157,84,84,49,49,48,55,52,53,55,84,244,142,152,129,84,84,49,49,48,55,52,54,57,84,244,142,152,141,84,84,49,49,48,55,52,55,49,84,244,142,152,143,84,84,49,49,48,55,52,55,50,84,244,142,152,144,84,84,49,49,48,55,52,56,53,84,244,142,152,157,84,84,49,49,48,55,53,50,49,84,244,142,153,129,84,84,49,49,48,55,53,51,51,84,244,142,153,141,84,84,49,49,48,55,53,51,53,84,244,142,153,143,84,84,49,49,48,55,53,51,54,84,244,142,153,144,84,84,49,49,48,55,53,52,57,84,244,142,153,157,84,84,49,49,48,55,53,56,53,84,244,142,154,129,84,84,49,49,48,55,53,57,55,84,244,142,154,141,84,84,49,49,48,55,53,57,57,84,244,142,154,143,84,84,49,49,48,55,54,48,48,84,244,142,154,144,84,84,49,49,48,55,54,49,51,84,244,142,154,157,84,84,49,49,48,55,54,52,57,84,244,142,155,129,84,84,49,49,48,55,54,54,49,84,244,142,155,141,84,84,49,49,48,55,54,54,51,84,244,142,155,143,84,84,49,49,48,55,54,54,52,84,244,142,155,144,84,84,49,49,48,55,54,55,55,84,244,142,155,157,84,84,49,49,48,55,55,49,51,84,244,142,156,129,84,84,49,49,48,55,55,50,53,84,244,142,156,141,84,84,49,49,48,55,55,50,55,84,244,142,156,143,84,84,49,49,48,55,55,50,56,84,244,142,156,144,84,84,49,49,48,55,55,52,49,84,244,142,156,157,84,84,49,49,48,55,55,55,54,84,244,142,157,128,84,84,49,49,48,55,55,55,55,84,244,142,157,129,84,84,49,49,48,55,55,55,56,84,244,142,157,130,84,84,49,49,48,55,55,55,57,84,244,142,157,131,84,84,49,49,48,55,55,56,48,84,244,142,157,132,84,84,49,49,48,55,55,56,49,84,244,142,157,133,84,84,49,49,48,55,55,56,50,84,244,142,157,134,84,84,49,49,48,55,55,56,51,84,244,142,157,135,84,84,49,49,48,55,55,56,52,84,244,142,157,136,84,84,49,49,48,55,55,56,53,84,244,142,157,137,84,84,49,49,48,55,55,56,54,84,244,142,157,138,84,84,49,49,48,55,55,56,55,84,244,142,157,139,84,84,49,49,48,55,55,56,56,84,244,142,157,140,84,84,49,49,48,55,55,56,57,84,244,142,157,141,84,84,49,49,48,55,55,57,48,84,244,142,157,142,84,84,49,49,48,55,55,57,49,84,244,142,157,143,84,84,49,49,48,55,55,57,50,84,244,142,157,144,84,84,49,49,48,55,55,57,51,84,244,142,157,145,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20628 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20628_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20628_s.txt", Encoding.UTF8);

    public Test20628() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers5f5b393ed8e742338d6031fb2e225092",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,55,54,52,49,55,84,244,134,179,129,84,84,49,48,55,54,52,50,57,84,244,134,179,141,84,84,49,48,55,54,52,51,49,84,244,134,179,143,84,84,49,48,55,54,52,51,50,84,244,134,179,144,84,84,49,48,55,54,52,52,53,84,244,134,179,157,84,84,49,48,55,54,52,56,49,84,244,134,180,129,84,84,49,48,55,54,52,57,51,84,244,134,180,141,84,84,49,48,55,54,52,57,53,84,244,134,180,143,84,84,49,48,55,54,52,57,54,84,244,134,180,144,84,84,49,48,55,54,53,48,57,84,244,134,180,157,84,84,49,48,55,54,53,52,53,84,244,134,181,129,84,84,49,48,55,54,53,53,55,84,244,134,181,141,84,84,49,48,55,54,53,53,57,84,244,134,181,143,84,84,49,48,55,54,53,54,48,84,244,134,181,144,84,84,49,48,55,54,53,55,51,84,244,134,181,157,84,84,49,48,55,54,54,48,57,84,244,134,182,129,84,84,49,48,55,54,54,50,49,84,244,134,182,141,84,84,49,48,55,54,54,50,51,84,244,134,182,143,84,84,49,48,55,54,54,50,52,84,244,134,182,144,84,84,49,48,55,54,54,51,55,84,244,134,182,157,84,84,49,48,55,54,54,55,51,84,244,134,183,129,84,84,49,48,55,54,54,56,53,84,244,134,183,141,84,84,49,48,55,54,54,56,55,84,244,134,183,143,84,84,49,48,55,54,54,56,56,84,244,134,183,144,84,84,49,48,55,54,55,48,49,84,244,134,183,157,84,84,49,48,55,54,55,51,55,84,244,134,184,129,84,84,49,48,55,54,55,52,57,84,244,134,184,141,84,84,49,48,55,54,55,53,49,84,244,134,184,143,84,84,49,48,55,54,55,53,50,84,244,134,184,144,84,84,49,48,55,54,55,54,53,84,244,134,184,157,84,84,49,48,55,54,56,48,49,84,244,134,185,129,84,84,49,48,55,54,56,49,51,84,244,134,185,141,84,84,49,48,55,54,56,49,53,84,244,134,185,143,84,84,49,48,55,54,56,49,54,84,244,134,185,144,84,84,49,48,55,54,56,50,57,84,244,134,185,157,84,84,49,48,55,54,56,54,53,84,244,134,186,129,84,84,49,48,55,54,56,55,55,84,244,134,186,141,84,84,49,48,55,54,56,55,57,84,244,134,186,143,84,84,49,48,55,54,56,56,48,84,244,134,186,144,84,84,49,48,55,54,56,57,51,84,244,134,186,157,84,84,49,48,55,54,57,50,57,84,244,134,187,129,84,84,49,48,55,54,57,52,49,84,244,134,187,141,84,84,49,48,55,54,57,52,51,84,244,134,187,143,84,84,49,48,55,54,57,52,52,84,244,134,187,144,84,84,49,48,55,54,57,53,55,84,244,134,187,157,84,84,49,48,55,54,57,57,51,84,244,134,188,129,84,84,49,48,55,55,48,48,53,84,244,134,188,141,84,84,49,48,55,55,48,48,55,84,244,134,188,143,84,84,49,48,55,55,48,48,56,84,244,134,188,144,84,84,49,48,55,55,48,50,49,84,244,134,188,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20342 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20342_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20342_s.txt", Encoding.UTF8);

    public Test20342() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers412024b733e349978217e6093afed677",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,51,48,55,56,84,244,129,134,150,84,84,49,48,53,51,48,55,57,84,244,129,134,151,84,84,49,48,53,51,48,56,48,84,244,129,134,152,84,84,49,48,53,51,48,56,49,84,244,129,134,153,84,84,49,48,53,51,48,56,50,84,244,129,134,154,84,84,49,48,53,51,48,56,51,84,244,129,134,155,84,84,49,48,53,51,48,56,52,84,244,129,134,156,84,84,49,48,53,51,48,56,53,84,244,129,134,157,84,84,49,48,53,51,48,56,54,84,244,129,134,158,84,84,49,48,53,51,48,56,55,84,244,129,134,159,84,84,49,48,53,51,48,56,56,84,244,129,134,160,84,84,49,48,53,51,48,56,57,84,244,129,134,161,84,84,49,48,53,51,48,57,48,84,244,129,134,162,84,84,49,48,53,51,48,57,49,84,244,129,134,163,84,84,49,48,53,51,48,57,50,84,244,129,134,164,84,84,49,48,53,51,48,57,51,84,244,129,134,165,84,84,49,48,53,51,48,57,52,84,244,129,134,166,84,84,49,48,53,51,48,57,53,84,244,129,134,167,84,84,49,48,53,51,48,57,54,84,244,129,134,168,84,84,49,48,53,51,48,57,55,84,244,129,134,169,84,84,49,48,53,51,48,57,56,84,244,129,134,170,84,84,49,48,53,51,48,57,57,84,244,129,134,171,84,84,49,48,53,51,49,48,48,84,244,129,134,172,84,84,49,48,53,51,49,48,49,84,244,129,134,173,84,84,49,48,53,51,49,48,50,84,244,129,134,174,84,84,49,48,53,51,49,48,51,84,244,129,134,175,84,84,49,48,53,51,49,48,52,84,244,129,134,176,84,84,49,48,53,51,49,48,53,84,244,129,134,177,84,84,49,48,53,51,49,48,54,84,244,129,134,178,84,84,49,48,53,51,49,48,55,84,244,129,134,179,84,84,49,48,53,51,49,48,56,84,244,129,134,180,84,84,49,48,53,51,49,48,57,84,244,129,134,181,84,84,49,48,53,51,49,49,48,84,244,129,134,182,84,84,49,48,53,51,49,49,49,84,244,129,134,183,84,84,49,48,53,51,49,49,50,84,244,129,134,184,84,84,49,48,53,51,49,49,51,84,244,129,134,185,84,84,49,48,53,51,49,49,52,84,244,129,134,186,84,84,49,48,53,51,49,49,53,84,244,129,134,187,84,84,49,48,53,51,49,49,54,84,244,129,134,188,84,84,49,48,53,51,49,49,55,84,244,129,134,189,84,84,49,48,53,51,49,49,56,84,244,129,134,190,84,84,49,48,53,51,49,49,57,84,244,129,134,191,84,84,49,48,53,51,49,50,48,84,244,129,135,128,84,84,49,48,53,51,49,50,49,84,244,129,135,129,84,84,49,48,53,51,49,50,50,84,244,129,135,130,84,84,49,48,53,51,49,50,51,84,244,129,135,131,84,84,49,48,53,51,49,50,52,84,244,129,135,132,84,84,49,48,53,51,49,50,53,84,244,129,135,133,84,84,49,48,53,51,49,50,54,84,244,129,135,134,84,84,49,48,53,51,49,50,55,84,244,129,135,135,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22569 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22569_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22569_s.txt", Encoding.UTF8);

    public Test22569() : base(recordedRequest, recordedResponse, "accounts8d43a048d26afcd")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048d26afcd",
                        container: "containersddd934ca569845dc89778f0bd55316f0",
                        blob: "Blob3cdd4fc03d41447a93d5d7b2ae65b5a7",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19830 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19830_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19830_s.txt", Encoding.UTF8);

    public Test19830() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers3d1fce2fe43b489ca49e5d4066014499",
                        blob: Encoding.UTF8.GetString(new byte[]{84,54,49,51,57,49,84,238,191,143,84,84,54,49,51,57,50,84,238,191,144,84,84,54,49,52,48,53,84,238,191,157,84,84,54,49,52,52,49,84,239,128,129,84,84,54,49,52,53,51,84,239,128,141,84,84,54,49,52,53,53,84,239,128,143,84,84,54,49,52,53,54,84,239,128,144,84,84,54,49,52,54,57,84,239,128,157,84,84,54,49,53,48,52,84,239,129,128,84,84,54,49,53,48,53,84,239,129,129,84,84,54,49,53,48,54,84,239,129,130,84,84,54,49,53,48,55,84,239,129,131,84,84,54,49,53,48,56,84,239,129,132,84,84,54,49,53,48,57,84,239,129,133,84,84,54,49,53,49,48,84,239,129,134,84,84,54,49,53,49,49,84,239,129,135,84,84,54,49,53,49,50,84,239,129,136,84,84,54,49,53,49,51,84,239,129,137,84,84,54,49,53,49,52,84,239,129,138,84,84,54,49,53,49,53,84,239,129,139,84,84,54,49,53,49,54,84,239,129,140,84,84,54,49,53,49,55,84,239,129,141,84,84,54,49,53,49,56,84,239,129,142,84,84,54,49,53,49,57,84,239,129,143,84,84,54,49,53,50,48,84,239,129,144,84,84,54,49,53,50,49,84,239,129,145,84,84,54,49,53,50,50,84,239,129,146,84,84,54,49,53,50,51,84,239,129,147,84,84,54,49,53,50,52,84,239,129,148,84,84,54,49,53,50,53,84,239,129,149,84,84,54,49,53,50,54,84,239,129,150,84,84,54,49,53,50,55,84,239,129,151,84,84,54,49,53,50,56,84,239,129,152,84,84,54,49,53,50,57,84,239,129,153,84,84,54,49,53,51,48,84,239,129,154,84,84,54,49,53,51,49,84,239,129,155,84,84,54,49,53,51,50,84,239,129,156,84,84,54,49,53,51,51,84,239,129,157,84,84,54,49,53,51,52,84,239,129,158,84,84,54,49,53,51,53,84,239,129,159,84,84,54,49,53,51,54,84,239,129,160,84,84,54,49,53,51,55,84,239,129,161,84,84,54,49,53,51,56,84,239,129,162,84,84,54,49,53,51,57,84,239,129,163,84,84,54,49,53,52,48,84,239,129,164,84,84,54,49,53,52,49,84,239,129,165,84,84,54,49,53,52,50,84,239,129,166,84,84,54,49,53,52,51,84,239,129,167,84,84,54,49,53,52,52,84,239,129,168,84,84,54,49,53,52,53,84,239,129,169,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22635 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22635_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22635_s.txt", Encoding.UTF8);

    public Test22635() : base(recordedRequest, recordedResponse, "accounts8d43a048e2beca5")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048e2beca5",
                        container: "containers3974e1da6923423a9845f2ce644df77d",
                        blob: "Blob14627bdf0dc04b45a0bb3cc03c04416a",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21104 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21104_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21104_s.txt", Encoding.UTF8);

    public Test21104() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers79aa3dd90e344ebe9466f3cb0c56378a",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,50,56,48,48,84,244,143,171,160,84,84,49,49,49,50,56,48,49,84,244,143,171,161,84,84,49,49,49,50,56,48,50,84,244,143,171,162,84,84,49,49,49,50,56,48,51,84,244,143,171,163,84,84,49,49,49,50,56,48,52,84,244,143,171,164,84,84,49,49,49,50,56,48,53,84,244,143,171,165,84,84,49,49,49,50,56,48,54,84,244,143,171,166,84,84,49,49,49,50,56,48,55,84,244,143,171,167,84,84,49,49,49,50,56,48,56,84,244,143,171,168,84,84,49,49,49,50,56,48,57,84,244,143,171,169,84,84,49,49,49,50,56,49,48,84,244,143,171,170,84,84,49,49,49,50,56,49,49,84,244,143,171,171,84,84,49,49,49,50,56,49,50,84,244,143,171,172,84,84,49,49,49,50,56,49,51,84,244,143,171,173,84,84,49,49,49,50,56,49,52,84,244,143,171,174,84,84,49,49,49,50,56,49,53,84,244,143,171,175,84,84,49,49,49,50,56,49,54,84,244,143,171,176,84,84,49,49,49,50,56,49,55,84,244,143,171,177,84,84,49,49,49,50,56,49,56,84,244,143,171,178,84,84,49,49,49,50,56,49,57,84,244,143,171,179,84,84,49,49,49,50,56,50,48,84,244,143,171,180,84,84,49,49,49,50,56,50,49,84,244,143,171,181,84,84,49,49,49,50,56,50,50,84,244,143,171,182,84,84,49,49,49,50,56,50,51,84,244,143,171,183,84,84,49,49,49,50,56,50,52,84,244,143,171,184,84,84,49,49,49,50,56,50,53,84,244,143,171,185,84,84,49,49,49,50,56,50,54,84,244,143,171,186,84,84,49,49,49,50,56,50,55,84,244,143,171,187,84,84,49,49,49,50,56,50,56,84,244,143,171,188,84,84,49,49,49,50,56,50,57,84,244,143,171,189,84,84,49,49,49,50,56,51,48,84,244,143,171,190,84,84,49,49,49,50,56,51,49,84,244,143,171,191,84,84,49,49,49,50,56,51,50,84,244,143,172,128,84,84,49,49,49,50,56,51,51,84,244,143,172,129,84,84,49,49,49,50,56,51,52,84,244,143,172,130,84,84,49,49,49,50,56,51,53,84,244,143,172,131,84,84,49,49,49,50,56,51,54,84,244,143,172,132,84,84,49,49,49,50,56,51,55,84,244,143,172,133,84,84,49,49,49,50,56,51,56,84,244,143,172,134,84,84,49,49,49,50,56,51,57,84,244,143,172,135,84,84,49,49,49,50,56,52,48,84,244,143,172,136,84,84,49,49,49,50,56,52,49,84,244,143,172,137,84,84,49,49,49,50,56,52,50,84,244,143,172,138,84,84,49,49,49,50,56,52,51,84,244,143,172,139,84,84,49,49,49,50,56,52,52,84,244,143,172,140,84,84,49,49,49,50,56,52,53,84,244,143,172,141,84,84,49,49,49,50,56,52,54,84,244,143,172,142,84,84,49,49,49,50,56,52,55,84,244,143,172,143,84,84,49,49,49,50,56,52,56,84,244,143,172,144,84,84,49,49,49,50,56,52,57,84,244,143,172,145,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20304 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20304_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20304_s.txt", Encoding.UTF8);

    public Test20304() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers712afb35b54344eb8fa90647f752cd92",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,52,57,51,53,57,84,244,128,140,143,84,84,49,48,52,57,51,54,48,84,244,128,140,144,84,84,49,48,52,57,51,55,51,84,244,128,140,157,84,84,49,48,52,57,52,48,56,84,244,128,141,128,84,84,49,48,52,57,52,48,57,84,244,128,141,129,84,84,49,48,52,57,52,49,48,84,244,128,141,130,84,84,49,48,52,57,52,49,49,84,244,128,141,131,84,84,49,48,52,57,52,49,50,84,244,128,141,132,84,84,49,48,52,57,52,49,51,84,244,128,141,133,84,84,49,48,52,57,52,49,52,84,244,128,141,134,84,84,49,48,52,57,52,49,53,84,244,128,141,135,84,84,49,48,52,57,52,49,54,84,244,128,141,136,84,84,49,48,52,57,52,49,55,84,244,128,141,137,84,84,49,48,52,57,52,49,56,84,244,128,141,138,84,84,49,48,52,57,52,49,57,84,244,128,141,139,84,84,49,48,52,57,52,50,48,84,244,128,141,140,84,84,49,48,52,57,52,50,49,84,244,128,141,141,84,84,49,48,52,57,52,50,50,84,244,128,141,142,84,84,49,48,52,57,52,50,51,84,244,128,141,143,84,84,49,48,52,57,52,50,52,84,244,128,141,144,84,84,49,48,52,57,52,50,53,84,244,128,141,145,84,84,49,48,52,57,52,50,54,84,244,128,141,146,84,84,49,48,52,57,52,50,55,84,244,128,141,147,84,84,49,48,52,57,52,50,56,84,244,128,141,148,84,84,49,48,52,57,52,50,57,84,244,128,141,149,84,84,49,48,52,57,52,51,48,84,244,128,141,150,84,84,49,48,52,57,52,51,49,84,244,128,141,151,84,84,49,48,52,57,52,51,50,84,244,128,141,152,84,84,49,48,52,57,52,51,51,84,244,128,141,153,84,84,49,48,52,57,52,51,52,84,244,128,141,154,84,84,49,48,52,57,52,51,53,84,244,128,141,155,84,84,49,48,52,57,52,51,54,84,244,128,141,156,84,84,49,48,52,57,52,51,55,84,244,128,141,157,84,84,49,48,52,57,52,51,56,84,244,128,141,158,84,84,49,48,52,57,52,51,57,84,244,128,141,159,84,84,49,48,52,57,52,52,48,84,244,128,141,160,84,84,49,48,52,57,52,52,49,84,244,128,141,161,84,84,49,48,52,57,52,52,50,84,244,128,141,162,84,84,49,48,52,57,52,52,51,84,244,128,141,163,84,84,49,48,52,57,52,52,52,84,244,128,141,164,84,84,49,48,52,57,52,52,53,84,244,128,141,165,84,84,49,48,52,57,52,52,54,84,244,128,141,166,84,84,49,48,52,57,52,52,55,84,244,128,141,167,84,84,49,48,52,57,52,52,56,84,244,128,141,168,84,84,49,48,52,57,52,52,57,84,244,128,141,169,84,84,49,48,52,57,52,53,48,84,244,128,141,170,84,84,49,48,52,57,52,53,49,84,244,128,141,171,84,84,49,48,52,57,52,53,50,84,244,128,141,172,84,84,49,48,52,57,52,53,51,84,244,128,141,173,84,84,49,48,52,57,52,53,52,84,244,128,141,174,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19900 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19900_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19900_s.txt", Encoding.UTF8);

    public Test19900() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersf0a96ab3064046f8a2fc77e6e3ebae9e",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,56,52,57,50,54,84,243,176,157,158,84,84,57,56,52,57,50,55,84,243,176,157,159,84,84,57,56,52,57,50,56,84,243,176,157,160,84,84,57,56,52,57,50,57,84,243,176,157,161,84,84,57,56,52,57,51,48,84,243,176,157,162,84,84,57,56,52,57,51,49,84,243,176,157,163,84,84,57,56,52,57,51,50,84,243,176,157,164,84,84,57,56,52,57,51,51,84,243,176,157,165,84,84,57,56,52,57,51,52,84,243,176,157,166,84,84,57,56,52,57,51,53,84,243,176,157,167,84,84,57,56,52,57,51,54,84,243,176,157,168,84,84,57,56,52,57,51,55,84,243,176,157,169,84,84,57,56,52,57,51,56,84,243,176,157,170,84,84,57,56,52,57,51,57,84,243,176,157,171,84,84,57,56,52,57,52,48,84,243,176,157,172,84,84,57,56,52,57,52,49,84,243,176,157,173,84,84,57,56,52,57,52,50,84,243,176,157,174,84,84,57,56,52,57,52,51,84,243,176,157,175,84,84,57,56,52,57,52,52,84,243,176,157,176,84,84,57,56,52,57,52,53,84,243,176,157,177,84,84,57,56,52,57,52,54,84,243,176,157,178,84,84,57,56,52,57,52,55,84,243,176,157,179,84,84,57,56,52,57,52,56,84,243,176,157,180,84,84,57,56,52,57,52,57,84,243,176,157,181,84,84,57,56,52,57,53,48,84,243,176,157,182,84,84,57,56,52,57,53,49,84,243,176,157,183,84,84,57,56,52,57,53,50,84,243,176,157,184,84,84,57,56,52,57,53,51,84,243,176,157,185,84,84,57,56,52,57,53,52,84,243,176,157,186,84,84,57,56,52,57,53,53,84,243,176,157,187,84,84,57,56,52,57,53,54,84,243,176,157,188,84,84,57,56,52,57,53,55,84,243,176,157,189,84,84,57,56,52,57,53,56,84,243,176,157,190,84,84,57,56,52,57,53,57,84,243,176,157,191,84,84,57,56,52,57,54,49,84,243,176,158,129,84,84,57,56,52,57,55,51,84,243,176,158,141,84,84,57,56,52,57,55,53,84,243,176,158,143,84,84,57,56,52,57,55,54,84,243,176,158,144,84,84,57,56,52,57,56,57,84,243,176,158,157,84,84,57,56,53,48,50,53,84,243,176,159,129,84,84,57,56,53,48,51,55,84,243,176,159,141,84,84,57,56,53,48,51,57,84,243,176,159,143,84,84,57,56,53,48,52,48,84,243,176,159,144,84,84,57,56,53,48,53,51,84,243,176,159,157,84,84,57,56,53,48,56,57,84,243,176,160,129,84,84,57,56,53,49,48,49,84,243,176,160,141,84,84,57,56,53,49,48,51,84,243,176,160,143,84,84,57,56,53,49,48,52,84,243,176,160,144,84,84,57,56,53,49,49,55,84,243,176,160,157,84,84,57,56,53,49,53,51,84,243,176,161,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20788 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20788_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20788_s.txt", Encoding.UTF8);

    public Test20788() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers8240a720eb234783afd6a68d24f64161",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,49,55,54,49,84,244,140,191,129,84,84,49,49,48,49,55,55,51,84,244,140,191,141,84,84,49,49,48,49,55,55,53,84,244,140,191,143,84,84,49,49,48,49,55,55,54,84,244,140,191,144,84,84,49,49,48,49,55,56,57,84,244,140,191,157,84,84,49,49,48,49,56,50,52,84,244,141,128,128,84,84,49,49,48,49,56,50,53,84,244,141,128,129,84,84,49,49,48,49,56,50,54,84,244,141,128,130,84,84,49,49,48,49,56,50,55,84,244,141,128,131,84,84,49,49,48,49,56,50,56,84,244,141,128,132,84,84,49,49,48,49,56,50,57,84,244,141,128,133,84,84,49,49,48,49,56,51,48,84,244,141,128,134,84,84,49,49,48,49,56,51,49,84,244,141,128,135,84,84,49,49,48,49,56,51,50,84,244,141,128,136,84,84,49,49,48,49,56,51,51,84,244,141,128,137,84,84,49,49,48,49,56,51,52,84,244,141,128,138,84,84,49,49,48,49,56,51,53,84,244,141,128,139,84,84,49,49,48,49,56,51,54,84,244,141,128,140,84,84,49,49,48,49,56,51,55,84,244,141,128,141,84,84,49,49,48,49,56,51,56,84,244,141,128,142,84,84,49,49,48,49,56,51,57,84,244,141,128,143,84,84,49,49,48,49,56,52,48,84,244,141,128,144,84,84,49,49,48,49,56,52,49,84,244,141,128,145,84,84,49,49,48,49,56,52,50,84,244,141,128,146,84,84,49,49,48,49,56,52,51,84,244,141,128,147,84,84,49,49,48,49,56,52,52,84,244,141,128,148,84,84,49,49,48,49,56,52,53,84,244,141,128,149,84,84,49,49,48,49,56,52,54,84,244,141,128,150,84,84,49,49,48,49,56,52,55,84,244,141,128,151,84,84,49,49,48,49,56,52,56,84,244,141,128,152,84,84,49,49,48,49,56,52,57,84,244,141,128,153,84,84,49,49,48,49,56,53,48,84,244,141,128,154,84,84,49,49,48,49,56,53,49,84,244,141,128,155,84,84,49,49,48,49,56,53,50,84,244,141,128,156,84,84,49,49,48,49,56,53,51,84,244,141,128,157,84,84,49,49,48,49,56,53,52,84,244,141,128,158,84,84,49,49,48,49,56,53,53,84,244,141,128,159,84,84,49,49,48,49,56,53,54,84,244,141,128,160,84,84,49,49,48,49,56,53,55,84,244,141,128,161,84,84,49,49,48,49,56,53,56,84,244,141,128,162,84,84,49,49,48,49,56,53,57,84,244,141,128,163,84,84,49,49,48,49,56,54,48,84,244,141,128,164,84,84,49,49,48,49,56,54,49,84,244,141,128,165,84,84,49,49,48,49,56,54,50,84,244,141,128,166,84,84,49,49,48,49,56,54,51,84,244,141,128,167,84,84,49,49,48,49,56,54,52,84,244,141,128,168,84,84,49,49,48,49,56,54,53,84,244,141,128,169,84,84,49,49,48,49,56,54,54,84,244,141,128,170,84,84,49,49,48,49,56,54,55,84,244,141,128,171,84,84,49,49,48,49,56,54,56,84,244,141,128,172,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19509 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19509_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19509_s.txt", Encoding.UTF8);

    public Test19509() : base(recordedRequest, recordedResponse, "accounts8d43a024a0ff30a")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a024a0ff30a",
                        container: "foo",
                        blob: "bar",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20084 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20084_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20084_s.txt", Encoding.UTF8);

    public Test20084() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersb3c703c6e551430d9c914c24c3792dd5",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,49,51,55,55,51,84,243,183,160,141,84,84,49,48,49,51,55,55,53,84,243,183,160,143,84,84,49,48,49,51,55,55,54,84,243,183,160,144,84,84,49,48,49,51,55,56,57,84,243,183,160,157,84,84,49,48,49,51,56,50,53,84,243,183,161,129,84,84,49,48,49,51,56,51,55,84,243,183,161,141,84,84,49,48,49,51,56,51,57,84,243,183,161,143,84,84,49,48,49,51,56,52,48,84,243,183,161,144,84,84,49,48,49,51,56,53,51,84,243,183,161,157,84,84,49,48,49,51,56,56,57,84,243,183,162,129,84,84,49,48,49,51,57,48,49,84,243,183,162,141,84,84,49,48,49,51,57,48,51,84,243,183,162,143,84,84,49,48,49,51,57,48,52,84,243,183,162,144,84,84,49,48,49,51,57,49,55,84,243,183,162,157,84,84,49,48,49,51,57,53,51,84,243,183,163,129,84,84,49,48,49,51,57,54,53,84,243,183,163,141,84,84,49,48,49,51,57,54,55,84,243,183,163,143,84,84,49,48,49,51,57,54,56,84,243,183,163,144,84,84,49,48,49,51,57,56,49,84,243,183,163,157,84,84,49,48,49,52,48,49,55,84,243,183,164,129,84,84,49,48,49,52,48,50,57,84,243,183,164,141,84,84,49,48,49,52,48,51,49,84,243,183,164,143,84,84,49,48,49,52,48,51,50,84,243,183,164,144,84,84,49,48,49,52,48,52,53,84,243,183,164,157,84,84,49,48,49,52,48,56,49,84,243,183,165,129,84,84,49,48,49,52,48,57,51,84,243,183,165,141,84,84,49,48,49,52,48,57,53,84,243,183,165,143,84,84,49,48,49,52,48,57,54,84,243,183,165,144,84,84,49,48,49,52,49,48,57,84,243,183,165,157,84,84,49,48,49,52,49,52,53,84,243,183,166,129,84,84,49,48,49,52,49,53,55,84,243,183,166,141,84,84,49,48,49,52,49,53,57,84,243,183,166,143,84,84,49,48,49,52,49,54,48,84,243,183,166,144,84,84,49,48,49,52,49,55,51,84,243,183,166,157,84,84,49,48,49,52,50,48,57,84,243,183,167,129,84,84,49,48,49,52,50,50,49,84,243,183,167,141,84,84,49,48,49,52,50,50,51,84,243,183,167,143,84,84,49,48,49,52,50,50,52,84,243,183,167,144,84,84,49,48,49,52,50,51,55,84,243,183,167,157,84,84,49,48,49,52,50,55,51,84,243,183,168,129,84,84,49,48,49,52,50,56,53,84,243,183,168,141,84,84,49,48,49,52,50,56,55,84,243,183,168,143,84,84,49,48,49,52,50,56,56,84,243,183,168,144,84,84,49,48,49,52,51,48,49,84,243,183,168,157,84,84,49,48,49,52,51,51,55,84,243,183,169,129,84,84,49,48,49,52,51,52,57,84,243,183,169,141,84,84,49,48,49,52,51,53,49,84,243,183,169,143,84,84,49,48,49,52,51,53,50,84,243,183,169,144,84,84,49,48,49,52,51,54,53,84,243,183,169,157,84,84,49,48,49,52,52,48,49,84,243,183,170,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21046 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21046_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21046_s.txt", Encoding.UTF8);

    public Test21046() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers98fd3eef9d4b4edcb3855acb5ae8645d",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,49,52,48,48,84,244,143,149,168,84,84,49,49,49,49,52,48,49,84,244,143,149,169,84,84,49,49,49,49,52,48,50,84,244,143,149,170,84,84,49,49,49,49,52,48,51,84,244,143,149,171,84,84,49,49,49,49,52,48,52,84,244,143,149,172,84,84,49,49,49,49,52,48,53,84,244,143,149,173,84,84,49,49,49,49,52,48,54,84,244,143,149,174,84,84,49,49,49,49,52,48,55,84,244,143,149,175,84,84,49,49,49,49,52,48,56,84,244,143,149,176,84,84,49,49,49,49,52,48,57,84,244,143,149,177,84,84,49,49,49,49,52,49,48,84,244,143,149,178,84,84,49,49,49,49,52,49,49,84,244,143,149,179,84,84,49,49,49,49,52,49,50,84,244,143,149,180,84,84,49,49,49,49,52,49,51,84,244,143,149,181,84,84,49,49,49,49,52,49,52,84,244,143,149,182,84,84,49,49,49,49,52,49,53,84,244,143,149,183,84,84,49,49,49,49,52,49,54,84,244,143,149,184,84,84,49,49,49,49,52,49,55,84,244,143,149,185,84,84,49,49,49,49,52,49,56,84,244,143,149,186,84,84,49,49,49,49,52,49,57,84,244,143,149,187,84,84,49,49,49,49,52,50,48,84,244,143,149,188,84,84,49,49,49,49,52,50,49,84,244,143,149,189,84,84,49,49,49,49,52,50,50,84,244,143,149,190,84,84,49,49,49,49,52,50,51,84,244,143,149,191,84,84,49,49,49,49,52,50,52,84,244,143,150,128,84,84,49,49,49,49,52,50,53,84,244,143,150,129,84,84,49,49,49,49,52,50,54,84,244,143,150,130,84,84,49,49,49,49,52,50,55,84,244,143,150,131,84,84,49,49,49,49,52,50,56,84,244,143,150,132,84,84,49,49,49,49,52,50,57,84,244,143,150,133,84,84,49,49,49,49,52,51,48,84,244,143,150,134,84,84,49,49,49,49,52,51,49,84,244,143,150,135,84,84,49,49,49,49,52,51,50,84,244,143,150,136,84,84,49,49,49,49,52,51,51,84,244,143,150,137,84,84,49,49,49,49,52,51,52,84,244,143,150,138,84,84,49,49,49,49,52,51,53,84,244,143,150,139,84,84,49,49,49,49,52,51,54,84,244,143,150,140,84,84,49,49,49,49,52,51,55,84,244,143,150,141,84,84,49,49,49,49,52,51,56,84,244,143,150,142,84,84,49,49,49,49,52,51,57,84,244,143,150,143,84,84,49,49,49,49,52,52,48,84,244,143,150,144,84,84,49,49,49,49,52,52,49,84,244,143,150,145,84,84,49,49,49,49,52,52,50,84,244,143,150,146,84,84,49,49,49,49,52,52,51,84,244,143,150,147,84,84,49,49,49,49,52,52,52,84,244,143,150,148,84,84,49,49,49,49,52,52,53,84,244,143,150,149,84,84,49,49,49,49,52,52,54,84,244,143,150,150,84,84,49,49,49,49,52,52,55,84,244,143,150,151,84,84,49,49,49,49,52,52,56,84,244,143,150,152,84,84,49,49,49,49,52,52,57,84,244,143,150,153,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22570 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22570_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22570_s.txt", Encoding.UTF8);

    public Test22570() : base(recordedRequest, recordedResponse, "accounts8d43a048d26afcd")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048d26afcd",
                        container: "containersddd934ca569845dc89778f0bd55316f0",
                        blob: "Blobc5dd59cfb4994901885da3efe1c79f38",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20598 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20598_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20598_s.txt", Encoding.UTF8);

    public Test20598() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers2997cf743a0f481c9f696984938aa742",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,55,49,50,51,51,84,244,133,162,129,84,84,49,48,55,49,50,52,53,84,244,133,162,141,84,84,49,48,55,49,50,52,55,84,244,133,162,143,84,84,49,48,55,49,50,52,56,84,244,133,162,144,84,84,49,48,55,49,50,54,49,84,244,133,162,157,84,84,49,48,55,49,50,57,55,84,244,133,163,129,84,84,49,48,55,49,51,48,57,84,244,133,163,141,84,84,49,48,55,49,51,49,49,84,244,133,163,143,84,84,49,48,55,49,51,49,50,84,244,133,163,144,84,84,49,48,55,49,51,50,53,84,244,133,163,157,84,84,49,48,55,49,51,54,49,84,244,133,164,129,84,84,49,48,55,49,51,55,51,84,244,133,164,141,84,84,49,48,55,49,51,55,53,84,244,133,164,143,84,84,49,48,55,49,51,55,54,84,244,133,164,144,84,84,49,48,55,49,51,56,57,84,244,133,164,157,84,84,49,48,55,49,52,50,53,84,244,133,165,129,84,84,49,48,55,49,52,51,55,84,244,133,165,141,84,84,49,48,55,49,52,51,57,84,244,133,165,143,84,84,49,48,55,49,52,52,48,84,244,133,165,144,84,84,49,48,55,49,52,53,51,84,244,133,165,157,84,84,49,48,55,49,52,56,57,84,244,133,166,129,84,84,49,48,55,49,53,48,49,84,244,133,166,141,84,84,49,48,55,49,53,48,51,84,244,133,166,143,84,84,49,48,55,49,53,48,52,84,244,133,166,144,84,84,49,48,55,49,53,49,55,84,244,133,166,157,84,84,49,48,55,49,53,53,51,84,244,133,167,129,84,84,49,48,55,49,53,54,53,84,244,133,167,141,84,84,49,48,55,49,53,54,55,84,244,133,167,143,84,84,49,48,55,49,53,54,56,84,244,133,167,144,84,84,49,48,55,49,53,56,49,84,244,133,167,157,84,84,49,48,55,49,54,49,55,84,244,133,168,129,84,84,49,48,55,49,54,50,57,84,244,133,168,141,84,84,49,48,55,49,54,51,49,84,244,133,168,143,84,84,49,48,55,49,54,51,50,84,244,133,168,144,84,84,49,48,55,49,54,52,53,84,244,133,168,157,84,84,49,48,55,49,54,56,49,84,244,133,169,129,84,84,49,48,55,49,54,57,51,84,244,133,169,141,84,84,49,48,55,49,54,57,53,84,244,133,169,143,84,84,49,48,55,49,54,57,54,84,244,133,169,144,84,84,49,48,55,49,55,48,57,84,244,133,169,157,84,84,49,48,55,49,55,52,53,84,244,133,170,129,84,84,49,48,55,49,55,53,55,84,244,133,170,141,84,84,49,48,55,49,55,53,57,84,244,133,170,143,84,84,49,48,55,49,55,54,48,84,244,133,170,144,84,84,49,48,55,49,55,55,51,84,244,133,170,157,84,84,49,48,55,49,56,48,57,84,244,133,171,129,84,84,49,48,55,49,56,50,49,84,244,133,171,141,84,84,49,48,55,49,56,50,51,84,244,133,171,143,84,84,49,48,55,49,56,50,52,84,244,133,171,144,84,84,49,48,55,49,56,51,55,84,244,133,171,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20532 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20532_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20532_s.txt", Encoding.UTF8);

    public Test20532() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers169b02be047c4c76acbb586fdc8886c6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,54,49,55,49,55,84,244,131,141,149,84,84,49,48,54,49,55,49,56,84,244,131,141,150,84,84,49,48,54,49,55,49,57,84,244,131,141,151,84,84,49,48,54,49,55,50,48,84,244,131,141,152,84,84,49,48,54,49,55,50,49,84,244,131,141,153,84,84,49,48,54,49,55,50,50,84,244,131,141,154,84,84,49,48,54,49,55,50,51,84,244,131,141,155,84,84,49,48,54,49,55,50,52,84,244,131,141,156,84,84,49,48,54,49,55,50,53,84,244,131,141,157,84,84,49,48,54,49,55,50,54,84,244,131,141,158,84,84,49,48,54,49,55,50,55,84,244,131,141,159,84,84,49,48,54,49,55,50,56,84,244,131,141,160,84,84,49,48,54,49,55,50,57,84,244,131,141,161,84,84,49,48,54,49,55,51,48,84,244,131,141,162,84,84,49,48,54,49,55,51,49,84,244,131,141,163,84,84,49,48,54,49,55,51,50,84,244,131,141,164,84,84,49,48,54,49,55,51,51,84,244,131,141,165,84,84,49,48,54,49,55,51,52,84,244,131,141,166,84,84,49,48,54,49,55,51,53,84,244,131,141,167,84,84,49,48,54,49,55,51,54,84,244,131,141,168,84,84,49,48,54,49,55,51,55,84,244,131,141,169,84,84,49,48,54,49,55,51,56,84,244,131,141,170,84,84,49,48,54,49,55,51,57,84,244,131,141,171,84,84,49,48,54,49,55,52,48,84,244,131,141,172,84,84,49,48,54,49,55,52,49,84,244,131,141,173,84,84,49,48,54,49,55,52,50,84,244,131,141,174,84,84,49,48,54,49,55,52,51,84,244,131,141,175,84,84,49,48,54,49,55,52,52,84,244,131,141,176,84,84,49,48,54,49,55,52,53,84,244,131,141,177,84,84,49,48,54,49,55,52,54,84,244,131,141,178,84,84,49,48,54,49,55,52,55,84,244,131,141,179,84,84,49,48,54,49,55,52,56,84,244,131,141,180,84,84,49,48,54,49,55,52,57,84,244,131,141,181,84,84,49,48,54,49,55,53,48,84,244,131,141,182,84,84,49,48,54,49,55,53,49,84,244,131,141,183,84,84,49,48,54,49,55,53,50,84,244,131,141,184,84,84,49,48,54,49,55,53,51,84,244,131,141,185,84,84,49,48,54,49,55,53,52,84,244,131,141,186,84,84,49,48,54,49,55,53,53,84,244,131,141,187,84,84,49,48,54,49,55,53,54,84,244,131,141,188,84,84,49,48,54,49,55,53,55,84,244,131,141,189,84,84,49,48,54,49,55,53,56,84,244,131,141,190,84,84,49,48,54,49,55,53,57,84,244,131,141,191,84,84,49,48,54,49,55,54,49,84,244,131,142,129,84,84,49,48,54,49,55,55,51,84,244,131,142,141,84,84,49,48,54,49,55,55,53,84,244,131,142,143,84,84,49,48,54,49,55,55,54,84,244,131,142,144,84,84,49,48,54,49,55,56,57,84,244,131,142,157,84,84,49,48,54,49,56,50,52,84,244,131,143,128,84,84,49,48,54,49,56,50,53,84,244,131,143,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20344 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20344_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20344_s.txt", Encoding.UTF8);

    public Test20344() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers412024b733e349978217e6093afed677",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,51,49,50,56,84,244,129,135,136,84,84,49,48,53,51,49,50,57,84,244,129,135,137,84,84,49,48,53,51,49,51,48,84,244,129,135,138,84,84,49,48,53,51,49,51,49,84,244,129,135,139,84,84,49,48,53,51,49,51,50,84,244,129,135,140,84,84,49,48,53,51,49,51,51,84,244,129,135,141,84,84,49,48,53,51,49,51,52,84,244,129,135,142,84,84,49,48,53,51,49,51,53,84,244,129,135,143,84,84,49,48,53,51,49,51,54,84,244,129,135,144,84,84,49,48,53,51,49,51,55,84,244,129,135,145,84,84,49,48,53,51,49,51,56,84,244,129,135,146,84,84,49,48,53,51,49,51,57,84,244,129,135,147,84,84,49,48,53,51,49,52,48,84,244,129,135,148,84,84,49,48,53,51,49,52,49,84,244,129,135,149,84,84,49,48,53,51,49,52,50,84,244,129,135,150,84,84,49,48,53,51,49,52,51,84,244,129,135,151,84,84,49,48,53,51,49,52,52,84,244,129,135,152,84,84,49,48,53,51,49,52,53,84,244,129,135,153,84,84,49,48,53,51,49,52,54,84,244,129,135,154,84,84,49,48,53,51,49,52,55,84,244,129,135,155,84,84,49,48,53,51,49,52,56,84,244,129,135,156,84,84,49,48,53,51,49,52,57,84,244,129,135,157,84,84,49,48,53,51,49,53,48,84,244,129,135,158,84,84,49,48,53,51,49,53,49,84,244,129,135,159,84,84,49,48,53,51,49,53,50,84,244,129,135,160,84,84,49,48,53,51,49,53,51,84,244,129,135,161,84,84,49,48,53,51,49,53,52,84,244,129,135,162,84,84,49,48,53,51,49,53,53,84,244,129,135,163,84,84,49,48,53,51,49,53,54,84,244,129,135,164,84,84,49,48,53,51,49,53,55,84,244,129,135,165,84,84,49,48,53,51,49,53,56,84,244,129,135,166,84,84,49,48,53,51,49,53,57,84,244,129,135,167,84,84,49,48,53,51,49,54,48,84,244,129,135,168,84,84,49,48,53,51,49,54,49,84,244,129,135,169,84,84,49,48,53,51,49,54,50,84,244,129,135,170,84,84,49,48,53,51,49,54,51,84,244,129,135,171,84,84,49,48,53,51,49,54,52,84,244,129,135,172,84,84,49,48,53,51,49,54,53,84,244,129,135,173,84,84,49,48,53,51,49,54,54,84,244,129,135,174,84,84,49,48,53,51,49,54,55,84,244,129,135,175,84,84,49,48,53,51,49,54,56,84,244,129,135,176,84,84,49,48,53,51,49,54,57,84,244,129,135,177,84,84,49,48,53,51,49,55,48,84,244,129,135,178,84,84,49,48,53,51,49,55,49,84,244,129,135,179,84,84,49,48,53,51,49,55,50,84,244,129,135,180,84,84,49,48,53,51,49,55,51,84,244,129,135,181,84,84,49,48,53,51,49,55,52,84,244,129,135,182,84,84,49,48,53,51,49,55,53,84,244,129,135,183,84,84,49,48,53,51,49,55,54,84,244,129,135,184,84,84,49,48,53,51,49,55,55,84,244,129,135,185,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20850 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20850_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20850_s.txt", Encoding.UTF8);

    public Test20850() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersf4b0dcea8f7b4ccf92e1f36b952ddf93",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,51,51,49,57,84,244,141,151,151,84,84,49,49,48,51,51,50,48,84,244,141,151,152,84,84,49,49,48,51,51,50,49,84,244,141,151,153,84,84,49,49,48,51,51,50,50,84,244,141,151,154,84,84,49,49,48,51,51,50,51,84,244,141,151,155,84,84,49,49,48,51,51,50,52,84,244,141,151,156,84,84,49,49,48,51,51,50,53,84,244,141,151,157,84,84,49,49,48,51,51,50,54,84,244,141,151,158,84,84,49,49,48,51,51,50,55,84,244,141,151,159,84,84,49,49,48,51,51,50,56,84,244,141,151,160,84,84,49,49,48,51,51,50,57,84,244,141,151,161,84,84,49,49,48,51,51,51,48,84,244,141,151,162,84,84,49,49,48,51,51,51,49,84,244,141,151,163,84,84,49,49,48,51,51,51,50,84,244,141,151,164,84,84,49,49,48,51,51,51,51,84,244,141,151,165,84,84,49,49,48,51,51,51,52,84,244,141,151,166,84,84,49,49,48,51,51,51,53,84,244,141,151,167,84,84,49,49,48,51,51,51,54,84,244,141,151,168,84,84,49,49,48,51,51,51,55,84,244,141,151,169,84,84,49,49,48,51,51,51,56,84,244,141,151,170,84,84,49,49,48,51,51,51,57,84,244,141,151,171,84,84,49,49,48,51,51,52,48,84,244,141,151,172,84,84,49,49,48,51,51,52,49,84,244,141,151,173,84,84,49,49,48,51,51,52,50,84,244,141,151,174,84,84,49,49,48,51,51,52,51,84,244,141,151,175,84,84,49,49,48,51,51,52,52,84,244,141,151,176,84,84,49,49,48,51,51,52,53,84,244,141,151,177,84,84,49,49,48,51,51,52,54,84,244,141,151,178,84,84,49,49,48,51,51,52,55,84,244,141,151,179,84,84,49,49,48,51,51,52,56,84,244,141,151,180,84,84,49,49,48,51,51,52,57,84,244,141,151,181,84,84,49,49,48,51,51,53,48,84,244,141,151,182,84,84,49,49,48,51,51,53,49,84,244,141,151,183,84,84,49,49,48,51,51,53,50,84,244,141,151,184,84,84,49,49,48,51,51,53,51,84,244,141,151,185,84,84,49,49,48,51,51,53,52,84,244,141,151,186,84,84,49,49,48,51,51,53,53,84,244,141,151,187,84,84,49,49,48,51,51,53,54,84,244,141,151,188,84,84,49,49,48,51,51,53,55,84,244,141,151,189,84,84,49,49,48,51,51,53,56,84,244,141,151,190,84,84,49,49,48,51,51,53,57,84,244,141,151,191,84,84,49,49,48,51,51,54,48,84,244,141,152,128,84,84,49,49,48,51,51,54,49,84,244,141,152,129,84,84,49,49,48,51,51,54,50,84,244,141,152,130,84,84,49,49,48,51,51,54,51,84,244,141,152,131,84,84,49,49,48,51,51,54,52,84,244,141,152,132,84,84,49,49,48,51,51,54,53,84,244,141,152,133,84,84,49,49,48,51,51,54,54,84,244,141,152,134,84,84,49,49,48,51,51,54,55,84,244,141,152,135,84,84,49,49,48,51,51,54,56,84,244,141,152,136,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22636 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22636_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22636_s.txt", Encoding.UTF8);

    public Test22636() : base(recordedRequest, recordedResponse, "accounts8d43a048e2beca5")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048e2beca5",
                        container: "containers3974e1da6923423a9845f2ce644df77d",
                        blob: "Blob48b0106214fe4e7aa19cb65d0aae7dfd",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20911 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20911_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20911_s.txt", Encoding.UTF8);

    public Test20911() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers9e891393b2624599aedf317812121dcf",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,52,55,49,57,84,244,141,173,143,84,84,49,49,48,52,55,50,48,84,244,141,173,144,84,84,49,49,48,52,55,50,49,84,244,141,173,145,84,84,49,49,48,52,55,50,50,84,244,141,173,146,84,84,49,49,48,52,55,50,51,84,244,141,173,147,84,84,49,49,48,52,55,50,52,84,244,141,173,148,84,84,49,49,48,52,55,50,53,84,244,141,173,149,84,84,49,49,48,52,55,50,54,84,244,141,173,150,84,84,49,49,48,52,55,50,55,84,244,141,173,151,84,84,49,49,48,52,55,50,56,84,244,141,173,152,84,84,49,49,48,52,55,50,57,84,244,141,173,153,84,84,49,49,48,52,55,51,48,84,244,141,173,154,84,84,49,49,48,52,55,51,49,84,244,141,173,155,84,84,49,49,48,52,55,51,50,84,244,141,173,156,84,84,49,49,48,52,55,51,51,84,244,141,173,157,84,84,49,49,48,52,55,51,52,84,244,141,173,158,84,84,49,49,48,52,55,51,53,84,244,141,173,159,84,84,49,49,48,52,55,51,54,84,244,141,173,160,84,84,49,49,48,52,55,51,55,84,244,141,173,161,84,84,49,49,48,52,55,51,56,84,244,141,173,162,84,84,49,49,48,52,55,51,57,84,244,141,173,163,84,84,49,49,48,52,55,52,48,84,244,141,173,164,84,84,49,49,48,52,55,52,49,84,244,141,173,165,84,84,49,49,48,52,55,52,50,84,244,141,173,166,84,84,49,49,48,52,55,52,51,84,244,141,173,167,84,84,49,49,48,52,55,52,52,84,244,141,173,168,84,84,49,49,48,52,55,52,53,84,244,141,173,169,84,84,49,49,48,52,55,52,54,84,244,141,173,170,84,84,49,49,48,52,55,52,55,84,244,141,173,171,84,84,49,49,48,52,55,52,56,84,244,141,173,172,84,84,49,49,48,52,55,52,57,84,244,141,173,173,84,84,49,49,48,52,55,53,48,84,244,141,173,174,84,84,49,49,48,52,55,53,49,84,244,141,173,175,84,84,49,49,48,52,55,53,50,84,244,141,173,176,84,84,49,49,48,52,55,53,51,84,244,141,173,177,84,84,49,49,48,52,55,53,52,84,244,141,173,178,84,84,49,49,48,52,55,53,53,84,244,141,173,179,84,84,49,49,48,52,55,53,54,84,244,141,173,180,84,84,49,49,48,52,55,53,55,84,244,141,173,181,84,84,49,49,48,52,55,53,56,84,244,141,173,182,84,84,49,49,48,52,55,53,57,84,244,141,173,183,84,84,49,49,48,52,55,54,48,84,244,141,173,184,84,84,49,49,48,52,55,54,49,84,244,141,173,185,84,84,49,49,48,52,55,54,50,84,244,141,173,186,84,84,49,49,48,52,55,54,51,84,244,141,173,187,84,84,49,49,48,52,55,54,52,84,244,141,173,188,84,84,49,49,48,52,55,54,53,84,244,141,173,189,84,84,49,49,48,52,55,54,54,84,244,141,173,190,84,84,49,49,48,52,55,54,55,84,244,141,173,191,84,84,49,49,48,52,55,54,56,84,244,141,174,128,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20560 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20560_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20560_s.txt", Encoding.UTF8);

    public Test20560() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers169b02be047c4c76acbb586fdc8886c6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,54,53,57,53,55,84,244,132,143,165,84,84,49,48,54,53,57,53,56,84,244,132,143,166,84,84,49,48,54,53,57,53,57,84,244,132,143,167,84,84,49,48,54,53,57,54,48,84,244,132,143,168,84,84,49,48,54,53,57,54,49,84,244,132,143,169,84,84,49,48,54,53,57,54,50,84,244,132,143,170,84,84,49,48,54,53,57,54,51,84,244,132,143,171,84,84,49,48,54,53,57,54,52,84,244,132,143,172,84,84,49,48,54,53,57,54,53,84,244,132,143,173,84,84,49,48,54,53,57,54,54,84,244,132,143,174,84,84,49,48,54,53,57,54,55,84,244,132,143,175,84,84,49,48,54,53,57,54,56,84,244,132,143,176,84,84,49,48,54,53,57,54,57,84,244,132,143,177,84,84,49,48,54,53,57,55,48,84,244,132,143,178,84,84,49,48,54,53,57,55,49,84,244,132,143,179,84,84,49,48,54,53,57,55,50,84,244,132,143,180,84,84,49,48,54,53,57,55,51,84,244,132,143,181,84,84,49,48,54,53,57,55,52,84,244,132,143,182,84,84,49,48,54,53,57,55,53,84,244,132,143,183,84,84,49,48,54,53,57,55,54,84,244,132,143,184,84,84,49,48,54,53,57,55,55,84,244,132,143,185,84,84,49,48,54,53,57,55,56,84,244,132,143,186,84,84,49,48,54,53,57,55,57,84,244,132,143,187,84,84,49,48,54,53,57,56,48,84,244,132,143,188,84,84,49,48,54,53,57,56,49,84,244,132,143,189,84,84,49,48,54,53,57,56,50,84,244,132,143,190,84,84,49,48,54,53,57,56,51,84,244,132,143,191,84,84,49,48,54,53,57,56,52,84,244,132,144,128,84,84,49,48,54,53,57,56,53,84,244,132,144,129,84,84,49,48,54,53,57,56,54,84,244,132,144,130,84,84,49,48,54,53,57,56,55,84,244,132,144,131,84,84,49,48,54,53,57,56,56,84,244,132,144,132,84,84,49,48,54,53,57,56,57,84,244,132,144,133,84,84,49,48,54,53,57,57,48,84,244,132,144,134,84,84,49,48,54,53,57,57,49,84,244,132,144,135,84,84,49,48,54,53,57,57,50,84,244,132,144,136,84,84,49,48,54,53,57,57,51,84,244,132,144,137,84,84,49,48,54,53,57,57,52,84,244,132,144,138,84,84,49,48,54,53,57,57,53,84,244,132,144,139,84,84,49,48,54,53,57,57,54,84,244,132,144,140,84,84,49,48,54,53,57,57,55,84,244,132,144,141,84,84,49,48,54,53,57,57,56,84,244,132,144,142,84,84,49,48,54,53,57,57,57,84,244,132,144,143,84,84,49,48,54,54,48,48,48,84,244,132,144,144,84,84,49,48,54,54,48,48,49,84,244,132,144,145,84,84,49,48,54,54,48,48,50,84,244,132,144,146,84,84,49,48,54,54,48,48,51,84,244,132,144,147,84,84,49,48,54,54,48,48,52,84,244,132,144,148,84,84,49,48,54,54,48,48,53,84,244,132,144,149,84,84,49,48,54,54,48,48,54,84,244,132,144,150,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20439 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20439_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20439_s.txt", Encoding.UTF8);

    public Test20439() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersee5ddc6232b847869028904d3d06a0f3",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,53,51,50,56,84,244,129,169,160,84,84,49,48,53,53,51,50,57,84,244,129,169,161,84,84,49,48,53,53,51,51,48,84,244,129,169,162,84,84,49,48,53,53,51,51,49,84,244,129,169,163,84,84,49,48,53,53,51,51,50,84,244,129,169,164,84,84,49,48,53,53,51,51,51,84,244,129,169,165,84,84,49,48,53,53,51,51,52,84,244,129,169,166,84,84,49,48,53,53,51,51,53,84,244,129,169,167,84,84,49,48,53,53,51,51,54,84,244,129,169,168,84,84,49,48,53,53,51,51,55,84,244,129,169,169,84,84,49,48,53,53,51,51,56,84,244,129,169,170,84,84,49,48,53,53,51,51,57,84,244,129,169,171,84,84,49,48,53,53,51,52,48,84,244,129,169,172,84,84,49,48,53,53,51,52,49,84,244,129,169,173,84,84,49,48,53,53,51,52,50,84,244,129,169,174,84,84,49,48,53,53,51,52,51,84,244,129,169,175,84,84,49,48,53,53,51,52,52,84,244,129,169,176,84,84,49,48,53,53,51,52,53,84,244,129,169,177,84,84,49,48,53,53,51,52,54,84,244,129,169,178,84,84,49,48,53,53,51,52,55,84,244,129,169,179,84,84,49,48,53,53,51,52,56,84,244,129,169,180,84,84,49,48,53,53,51,52,57,84,244,129,169,181,84,84,49,48,53,53,51,53,48,84,244,129,169,182,84,84,49,48,53,53,51,53,49,84,244,129,169,183,84,84,49,48,53,53,51,53,50,84,244,129,169,184,84,84,49,48,53,53,51,53,51,84,244,129,169,185,84,84,49,48,53,53,51,53,52,84,244,129,169,186,84,84,49,48,53,53,51,53,53,84,244,129,169,187,84,84,49,48,53,53,51,53,54,84,244,129,169,188,84,84,49,48,53,53,51,53,55,84,244,129,169,189,84,84,49,48,53,53,51,53,56,84,244,129,169,190,84,84,49,48,53,53,51,53,57,84,244,129,169,191,84,84,49,48,53,53,51,54,48,84,244,129,170,128,84,84,49,48,53,53,51,54,49,84,244,129,170,129,84,84,49,48,53,53,51,54,50,84,244,129,170,130,84,84,49,48,53,53,51,54,51,84,244,129,170,131,84,84,49,48,53,53,51,54,52,84,244,129,170,132,84,84,49,48,53,53,51,54,53,84,244,129,170,133,84,84,49,48,53,53,51,54,54,84,244,129,170,134,84,84,49,48,53,53,51,54,55,84,244,129,170,135,84,84,49,48,53,53,51,54,56,84,244,129,170,136,84,84,49,48,53,53,51,54,57,84,244,129,170,137,84,84,49,48,53,53,51,55,48,84,244,129,170,138,84,84,49,48,53,53,51,55,49,84,244,129,170,139,84,84,49,48,53,53,51,55,50,84,244,129,170,140,84,84,49,48,53,53,51,55,51,84,244,129,170,141,84,84,49,48,53,53,51,55,52,84,244,129,170,142,84,84,49,48,53,53,51,55,53,84,244,129,170,143,84,84,49,48,53,53,51,55,54,84,244,129,170,144,84,84,49,48,53,53,51,55,55,84,244,129,170,145,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21048 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21048_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21048_s.txt", Encoding.UTF8);

    public Test21048() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers98fd3eef9d4b4edcb3855acb5ae8645d",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,49,52,53,48,84,244,143,150,154,84,84,49,49,49,49,52,53,49,84,244,143,150,155,84,84,49,49,49,49,52,53,50,84,244,143,150,156,84,84,49,49,49,49,52,53,51,84,244,143,150,157,84,84,49,49,49,49,52,53,52,84,244,143,150,158,84,84,49,49,49,49,52,53,53,84,244,143,150,159,84,84,49,49,49,49,52,53,54,84,244,143,150,160,84,84,49,49,49,49,52,53,55,84,244,143,150,161,84,84,49,49,49,49,52,53,56,84,244,143,150,162,84,84,49,49,49,49,52,53,57,84,244,143,150,163,84,84,49,49,49,49,52,54,48,84,244,143,150,164,84,84,49,49,49,49,52,54,49,84,244,143,150,165,84,84,49,49,49,49,52,54,50,84,244,143,150,166,84,84,49,49,49,49,52,54,51,84,244,143,150,167,84,84,49,49,49,49,52,54,52,84,244,143,150,168,84,84,49,49,49,49,52,54,53,84,244,143,150,169,84,84,49,49,49,49,52,54,54,84,244,143,150,170,84,84,49,49,49,49,52,54,55,84,244,143,150,171,84,84,49,49,49,49,52,54,56,84,244,143,150,172,84,84,49,49,49,49,52,54,57,84,244,143,150,173,84,84,49,49,49,49,52,55,48,84,244,143,150,174,84,84,49,49,49,49,52,55,49,84,244,143,150,175,84,84,49,49,49,49,52,55,50,84,244,143,150,176,84,84,49,49,49,49,52,55,51,84,244,143,150,177,84,84,49,49,49,49,52,55,52,84,244,143,150,178,84,84,49,49,49,49,52,55,53,84,244,143,150,179,84,84,49,49,49,49,52,55,54,84,244,143,150,180,84,84,49,49,49,49,52,55,55,84,244,143,150,181,84,84,49,49,49,49,52,55,56,84,244,143,150,182,84,84,49,49,49,49,52,55,57,84,244,143,150,183,84,84,49,49,49,49,52,56,48,84,244,143,150,184,84,84,49,49,49,49,52,56,49,84,244,143,150,185,84,84,49,49,49,49,52,56,50,84,244,143,150,186,84,84,49,49,49,49,52,56,51,84,244,143,150,187,84,84,49,49,49,49,52,56,52,84,244,143,150,188,84,84,49,49,49,49,52,56,53,84,244,143,150,189,84,84,49,49,49,49,52,56,54,84,244,143,150,190,84,84,49,49,49,49,52,56,55,84,244,143,150,191,84,84,49,49,49,49,52,56,56,84,244,143,151,128,84,84,49,49,49,49,52,56,57,84,244,143,151,129,84,84,49,49,49,49,52,57,48,84,244,143,151,130,84,84,49,49,49,49,52,57,49,84,244,143,151,131,84,84,49,49,49,49,52,57,50,84,244,143,151,132,84,84,49,49,49,49,52,57,51,84,244,143,151,133,84,84,49,49,49,49,52,57,52,84,244,143,151,134,84,84,49,49,49,49,52,57,53,84,244,143,151,135,84,84,49,49,49,49,52,57,54,84,244,143,151,136,84,84,49,49,49,49,52,57,55,84,244,143,151,137,84,84,49,49,49,49,52,57,56,84,244,143,151,138,84,84,49,49,49,49,52,57,57,84,244,143,151,139,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22637 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22637_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22637_s.txt", Encoding.UTF8);

    public Test22637() : base(recordedRequest, recordedResponse, "accounts8d43a048e2beca5")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048e2beca5",
                        container: "containers3974e1da6923423a9845f2ce644df77d",
                        blob: "Blob6088b4ae04ba498090387b7f311b0cd1",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20023 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20023_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20023_s.txt", Encoding.UTF8);

    public Test20023() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers612d6939acd44cdbbba30cffbd18a713",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,48,52,53,50,51,84,243,181,143,171,84,84,49,48,48,52,53,50,52,84,243,181,143,172,84,84,49,48,48,52,53,50,53,84,243,181,143,173,84,84,49,48,48,52,53,50,54,84,243,181,143,174,84,84,49,48,48,52,53,50,55,84,243,181,143,175,84,84,49,48,48,52,53,50,56,84,243,181,143,176,84,84,49,48,48,52,53,50,57,84,243,181,143,177,84,84,49,48,48,52,53,51,48,84,243,181,143,178,84,84,49,48,48,52,53,51,49,84,243,181,143,179,84,84,49,48,48,52,53,51,50,84,243,181,143,180,84,84,49,48,48,52,53,51,51,84,243,181,143,181,84,84,49,48,48,52,53,51,52,84,243,181,143,182,84,84,49,48,48,52,53,51,53,84,243,181,143,183,84,84,49,48,48,52,53,51,54,84,243,181,143,184,84,84,49,48,48,52,53,51,55,84,243,181,143,185,84,84,49,48,48,52,53,51,56,84,243,181,143,186,84,84,49,48,48,52,53,51,57,84,243,181,143,187,84,84,49,48,48,52,53,52,48,84,243,181,143,188,84,84,49,48,48,52,53,52,49,84,243,181,143,189,84,84,49,48,48,52,53,52,50,84,243,181,143,190,84,84,49,48,48,52,53,52,51,84,243,181,143,191,84,84,49,48,48,52,53,52,52,84,243,181,144,128,84,84,49,48,48,52,53,52,53,84,243,181,144,129,84,84,49,48,48,52,53,52,54,84,243,181,144,130,84,84,49,48,48,52,53,52,55,84,243,181,144,131,84,84,49,48,48,52,53,52,56,84,243,181,144,132,84,84,49,48,48,52,53,52,57,84,243,181,144,133,84,84,49,48,48,52,53,53,48,84,243,181,144,134,84,84,49,48,48,52,53,53,49,84,243,181,144,135,84,84,49,48,48,52,53,53,50,84,243,181,144,136,84,84,49,48,48,52,53,53,51,84,243,181,144,137,84,84,49,48,48,52,53,53,52,84,243,181,144,138,84,84,49,48,48,52,53,53,53,84,243,181,144,139,84,84,49,48,48,52,53,53,54,84,243,181,144,140,84,84,49,48,48,52,53,53,55,84,243,181,144,141,84,84,49,48,48,52,53,53,56,84,243,181,144,142,84,84,49,48,48,52,53,53,57,84,243,181,144,143,84,84,49,48,48,52,53,54,48,84,243,181,144,144,84,84,49,48,48,52,53,54,49,84,243,181,144,145,84,84,49,48,48,52,53,54,50,84,243,181,144,146,84,84,49,48,48,52,53,54,51,84,243,181,144,147,84,84,49,48,48,52,53,54,52,84,243,181,144,148,84,84,49,48,48,52,53,54,53,84,243,181,144,149,84,84,49,48,48,52,53,54,54,84,243,181,144,150,84,84,49,48,48,52,53,54,55,84,243,181,144,151,84,84,49,48,48,52,53,54,56,84,243,181,144,152,84,84,49,48,48,52,53,54,57,84,243,181,144,153,84,84,49,48,48,52,53,55,48,84,243,181,144,154,84,84,49,48,48,52,53,55,49,84,243,181,144,155,84,84,49,48,48,52,53,55,50,84,243,181,144,156,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20306 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20306_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20306_s.txt", Encoding.UTF8);

    public Test20306() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers712afb35b54344eb8fa90647f752cd92",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,52,57,52,53,53,84,244,128,141,175,84,84,49,48,52,57,52,53,54,84,244,128,141,176,84,84,49,48,52,57,52,53,55,84,244,128,141,177,84,84,49,48,52,57,52,53,56,84,244,128,141,178,84,84,49,48,52,57,52,53,57,84,244,128,141,179,84,84,49,48,52,57,52,54,48,84,244,128,141,180,84,84,49,48,52,57,52,54,49,84,244,128,141,181,84,84,49,48,52,57,52,54,50,84,244,128,141,182,84,84,49,48,52,57,52,54,51,84,244,128,141,183,84,84,49,48,52,57,52,54,52,84,244,128,141,184,84,84,49,48,52,57,52,54,53,84,244,128,141,185,84,84,49,48,52,57,52,54,54,84,244,128,141,186,84,84,49,48,52,57,52,54,55,84,244,128,141,187,84,84,49,48,52,57,52,54,56,84,244,128,141,188,84,84,49,48,52,57,52,54,57,84,244,128,141,189,84,84,49,48,52,57,52,55,48,84,244,128,141,190,84,84,49,48,52,57,52,55,49,84,244,128,141,191,84,84,49,48,52,57,52,55,51,84,244,128,142,129,84,84,49,48,52,57,52,56,53,84,244,128,142,141,84,84,49,48,52,57,52,56,55,84,244,128,142,143,84,84,49,48,52,57,52,56,56,84,244,128,142,144,84,84,49,48,52,57,53,48,49,84,244,128,142,157,84,84,49,48,52,57,53,51,54,84,244,128,143,128,84,84,49,48,52,57,53,51,55,84,244,128,143,129,84,84,49,48,52,57,53,51,56,84,244,128,143,130,84,84,49,48,52,57,53,51,57,84,244,128,143,131,84,84,49,48,52,57,53,52,48,84,244,128,143,132,84,84,49,48,52,57,53,52,49,84,244,128,143,133,84,84,49,48,52,57,53,52,50,84,244,128,143,134,84,84,49,48,52,57,53,52,51,84,244,128,143,135,84,84,49,48,52,57,53,52,52,84,244,128,143,136,84,84,49,48,52,57,53,52,53,84,244,128,143,137,84,84,49,48,52,57,53,52,54,84,244,128,143,138,84,84,49,48,52,57,53,52,55,84,244,128,143,139,84,84,49,48,52,57,53,52,56,84,244,128,143,140,84,84,49,48,52,57,53,52,57,84,244,128,143,141,84,84,49,48,52,57,53,53,48,84,244,128,143,142,84,84,49,48,52,57,53,53,49,84,244,128,143,143,84,84,49,48,52,57,53,53,50,84,244,128,143,144,84,84,49,48,52,57,53,53,51,84,244,128,143,145,84,84,49,48,52,57,53,53,52,84,244,128,143,146,84,84,49,48,52,57,53,53,53,84,244,128,143,147,84,84,49,48,52,57,53,53,54,84,244,128,143,148,84,84,49,48,52,57,53,53,55,84,244,128,143,149,84,84,49,48,52,57,53,53,56,84,244,128,143,150,84,84,49,48,52,57,53,53,57,84,244,128,143,151,84,84,49,48,52,57,53,54,48,84,244,128,143,152,84,84,49,48,52,57,53,54,49,84,244,128,143,153,84,84,49,48,52,57,53,54,50,84,244,128,143,154,84,84,49,48,52,57,53,54,51,84,244,128,143,155,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19957 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19957_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19957_s.txt", Encoding.UTF8);

    public Test19957() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersbf5ecfbea5a24d8a8188936c9be6fa20",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,57,52,50,53,51,84,243,178,175,141,84,84,57,57,52,50,53,53,84,243,178,175,143,84,84,57,57,52,50,53,54,84,243,178,175,144,84,84,57,57,52,50,54,57,84,243,178,175,157,84,84,57,57,52,51,48,53,84,243,178,176,129,84,84,57,57,52,51,49,55,84,243,178,176,141,84,84,57,57,52,51,49,57,84,243,178,176,143,84,84,57,57,52,51,50,48,84,243,178,176,144,84,84,57,57,52,51,51,51,84,243,178,176,157,84,84,57,57,52,51,54,57,84,243,178,177,129,84,84,57,57,52,51,56,49,84,243,178,177,141,84,84,57,57,52,51,56,51,84,243,178,177,143,84,84,57,57,52,51,56,52,84,243,178,177,144,84,84,57,57,52,51,57,55,84,243,178,177,157,84,84,57,57,52,52,51,51,84,243,178,178,129,84,84,57,57,52,52,52,53,84,243,178,178,141,84,84,57,57,52,52,52,55,84,243,178,178,143,84,84,57,57,52,52,52,56,84,243,178,178,144,84,84,57,57,52,52,54,49,84,243,178,178,157,84,84,57,57,52,52,57,55,84,243,178,179,129,84,84,57,57,52,53,48,57,84,243,178,179,141,84,84,57,57,52,53,49,49,84,243,178,179,143,84,84,57,57,52,53,49,50,84,243,178,179,144,84,84,57,57,52,53,50,53,84,243,178,179,157,84,84,57,57,52,53,54,49,84,243,178,180,129,84,84,57,57,52,53,55,51,84,243,178,180,141,84,84,57,57,52,53,55,53,84,243,178,180,143,84,84,57,57,52,53,55,54,84,243,178,180,144,84,84,57,57,52,53,56,57,84,243,178,180,157,84,84,57,57,52,54,50,53,84,243,178,181,129,84,84,57,57,52,54,51,55,84,243,178,181,141,84,84,57,57,52,54,51,57,84,243,178,181,143,84,84,57,57,52,54,52,48,84,243,178,181,144,84,84,57,57,52,54,53,51,84,243,178,181,157,84,84,57,57,52,54,56,57,84,243,178,182,129,84,84,57,57,52,55,48,49,84,243,178,182,141,84,84,57,57,52,55,48,51,84,243,178,182,143,84,84,57,57,52,55,48,52,84,243,178,182,144,84,84,57,57,52,55,49,55,84,243,178,182,157,84,84,57,57,52,55,53,51,84,243,178,183,129,84,84,57,57,52,55,54,53,84,243,178,183,141,84,84,57,57,52,55,54,55,84,243,178,183,143,84,84,57,57,52,55,54,56,84,243,178,183,144,84,84,57,57,52,55,56,49,84,243,178,183,157,84,84,57,57,52,56,49,55,84,243,178,184,129,84,84,57,57,52,56,50,57,84,243,178,184,141,84,84,57,57,52,56,51,49,84,243,178,184,143,84,84,57,57,52,56,51,50,84,243,178,184,144,84,84,57,57,52,56,52,53,84,243,178,184,157,84,84,57,57,52,56,56,49,84,243,178,185,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20790 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20790_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20790_s.txt", Encoding.UTF8);

    public Test20790() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers8240a720eb234783afd6a68d24f64161",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,49,56,54,57,84,244,141,128,173,84,84,49,49,48,49,56,55,48,84,244,141,128,174,84,84,49,49,48,49,56,55,49,84,244,141,128,175,84,84,49,49,48,49,56,55,50,84,244,141,128,176,84,84,49,49,48,49,56,55,51,84,244,141,128,177,84,84,49,49,48,49,56,55,52,84,244,141,128,178,84,84,49,49,48,49,56,55,53,84,244,141,128,179,84,84,49,49,48,49,56,55,54,84,244,141,128,180,84,84,49,49,48,49,56,55,55,84,244,141,128,181,84,84,49,49,48,49,56,55,56,84,244,141,128,182,84,84,49,49,48,49,56,55,57,84,244,141,128,183,84,84,49,49,48,49,56,56,48,84,244,141,128,184,84,84,49,49,48,49,56,56,49,84,244,141,128,185,84,84,49,49,48,49,56,56,50,84,244,141,128,186,84,84,49,49,48,49,56,56,51,84,244,141,128,187,84,84,49,49,48,49,56,56,52,84,244,141,128,188,84,84,49,49,48,49,56,56,53,84,244,141,128,189,84,84,49,49,48,49,56,56,54,84,244,141,128,190,84,84,49,49,48,49,56,56,55,84,244,141,128,191,84,84,49,49,48,49,56,56,56,84,244,141,129,128,84,84,49,49,48,49,56,56,57,84,244,141,129,129,84,84,49,49,48,49,56,57,48,84,244,141,129,130,84,84,49,49,48,49,56,57,49,84,244,141,129,131,84,84,49,49,48,49,56,57,50,84,244,141,129,132,84,84,49,49,48,49,56,57,51,84,244,141,129,133,84,84,49,49,48,49,56,57,52,84,244,141,129,134,84,84,49,49,48,49,56,57,53,84,244,141,129,135,84,84,49,49,48,49,56,57,54,84,244,141,129,136,84,84,49,49,48,49,56,57,55,84,244,141,129,137,84,84,49,49,48,49,56,57,56,84,244,141,129,138,84,84,49,49,48,49,56,57,57,84,244,141,129,139,84,84,49,49,48,49,57,48,48,84,244,141,129,140,84,84,49,49,48,49,57,48,49,84,244,141,129,141,84,84,49,49,48,49,57,48,50,84,244,141,129,142,84,84,49,49,48,49,57,48,51,84,244,141,129,143,84,84,49,49,48,49,57,48,52,84,244,141,129,144,84,84,49,49,48,49,57,48,53,84,244,141,129,145,84,84,49,49,48,49,57,48,54,84,244,141,129,146,84,84,49,49,48,49,57,48,55,84,244,141,129,147,84,84,49,49,48,49,57,48,56,84,244,141,129,148,84,84,49,49,48,49,57,48,57,84,244,141,129,149,84,84,49,49,48,49,57,49,48,84,244,141,129,150,84,84,49,49,48,49,57,49,49,84,244,141,129,151,84,84,49,49,48,49,57,49,50,84,244,141,129,152,84,84,49,49,48,49,57,49,51,84,244,141,129,153,84,84,49,49,48,49,57,49,52,84,244,141,129,154,84,84,49,49,48,49,57,49,53,84,244,141,129,155,84,84,49,49,48,49,57,49,54,84,244,141,129,156,84,84,49,49,48,49,57,49,55,84,244,141,129,157,84,84,49,49,48,49,57,49,56,84,244,141,129,158,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22571 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22571_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22571_s.txt", Encoding.UTF8);

    public Test22571() : base(recordedRequest, recordedResponse, "accounts8d43a048d26afcd")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048d26afcd",
                        container: "containersddd934ca569845dc89778f0bd55316f0",
                        blob: "Blob30717d0f6d9549f98208b3095b1bba5a",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22638 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22638_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22638_s.txt", Encoding.UTF8);

    public Test22638() : base(recordedRequest, recordedResponse, "accounts8d43a048e2beca5")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048e2beca5",
                        container: "containers3974e1da6923423a9845f2ce644df77d",
                        blob: "Blobfae5b5d7b4f44f61b7c09f464c075ef3",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20693 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20693_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20693_s.txt", Encoding.UTF8);

    public Test20693() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers0bb7ae45edef4594997d97499d26b519",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,56,54,52,49,50,84,244,137,143,140,84,84,49,48,56,54,52,49,51,84,244,137,143,141,84,84,49,48,56,54,52,49,52,84,244,137,143,142,84,84,49,48,56,54,52,49,53,84,244,137,143,143,84,84,49,48,56,54,52,49,54,84,244,137,143,144,84,84,49,48,56,54,52,49,55,84,244,137,143,145,84,84,49,48,56,54,52,49,56,84,244,137,143,146,84,84,49,48,56,54,52,49,57,84,244,137,143,147,84,84,49,48,56,54,52,50,48,84,244,137,143,148,84,84,49,48,56,54,52,50,49,84,244,137,143,149,84,84,49,48,56,54,52,50,50,84,244,137,143,150,84,84,49,48,56,54,52,50,51,84,244,137,143,151,84,84,49,48,56,54,52,50,52,84,244,137,143,152,84,84,49,48,56,54,52,50,53,84,244,137,143,153,84,84,49,48,56,54,52,50,54,84,244,137,143,154,84,84,49,48,56,54,52,50,55,84,244,137,143,155,84,84,49,48,56,54,52,50,56,84,244,137,143,156,84,84,49,48,56,54,52,50,57,84,244,137,143,157,84,84,49,48,56,54,52,51,48,84,244,137,143,158,84,84,49,48,56,54,52,51,49,84,244,137,143,159,84,84,49,48,56,54,52,51,50,84,244,137,143,160,84,84,49,48,56,54,52,51,51,84,244,137,143,161,84,84,49,48,56,54,52,51,52,84,244,137,143,162,84,84,49,48,56,54,52,51,53,84,244,137,143,163,84,84,49,48,56,54,52,51,54,84,244,137,143,164,84,84,49,48,56,54,52,51,55,84,244,137,143,165,84,84,49,48,56,54,52,51,56,84,244,137,143,166,84,84,49,48,56,54,52,51,57,84,244,137,143,167,84,84,49,48,56,54,52,52,48,84,244,137,143,168,84,84,49,48,56,54,52,52,49,84,244,137,143,169,84,84,49,48,56,54,52,52,50,84,244,137,143,170,84,84,49,48,56,54,52,52,51,84,244,137,143,171,84,84,49,48,56,54,52,52,52,84,244,137,143,172,84,84,49,48,56,54,52,52,53,84,244,137,143,173,84,84,49,48,56,54,52,52,54,84,244,137,143,174,84,84,49,48,56,54,52,52,55,84,244,137,143,175,84,84,49,48,56,54,52,52,56,84,244,137,143,176,84,84,49,48,56,54,52,52,57,84,244,137,143,177,84,84,49,48,56,54,52,53,48,84,244,137,143,178,84,84,49,48,56,54,52,53,49,84,244,137,143,179,84,84,49,48,56,54,52,53,50,84,244,137,143,180,84,84,49,48,56,54,52,53,51,84,244,137,143,181,84,84,49,48,56,54,52,53,52,84,244,137,143,182,84,84,49,48,56,54,52,53,53,84,244,137,143,183,84,84,49,48,56,54,52,53,54,84,244,137,143,184,84,84,49,48,56,54,52,53,55,84,244,137,143,185,84,84,49,48,56,54,52,53,56,84,244,137,143,186,84,84,49,48,56,54,52,53,57,84,244,137,143,187,84,84,49,48,56,54,52,54,48,84,244,137,143,188,84,84,49,48,56,54,52,54,49,84,244,137,143,189,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20122 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20122_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20122_s.txt", Encoding.UTF8);

    public Test20122() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers02552a2396c44255a61dd19b9714b3b6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,50,48,55,51,56,84,243,185,141,130,84,84,49,48,50,48,55,51,57,84,243,185,141,131,84,84,49,48,50,48,55,52,48,84,243,185,141,132,84,84,49,48,50,48,55,52,49,84,243,185,141,133,84,84,49,48,50,48,55,52,50,84,243,185,141,134,84,84,49,48,50,48,55,52,51,84,243,185,141,135,84,84,49,48,50,48,55,52,52,84,243,185,141,136,84,84,49,48,50,48,55,52,53,84,243,185,141,137,84,84,49,48,50,48,55,52,54,84,243,185,141,138,84,84,49,48,50,48,55,52,55,84,243,185,141,139,84,84,49,48,50,48,55,52,56,84,243,185,141,140,84,84,49,48,50,48,55,52,57,84,243,185,141,141,84,84,49,48,50,48,55,53,48,84,243,185,141,142,84,84,49,48,50,48,55,53,49,84,243,185,141,143,84,84,49,48,50,48,55,53,50,84,243,185,141,144,84,84,49,48,50,48,55,53,51,84,243,185,141,145,84,84,49,48,50,48,55,53,52,84,243,185,141,146,84,84,49,48,50,48,55,53,53,84,243,185,141,147,84,84,49,48,50,48,55,53,54,84,243,185,141,148,84,84,49,48,50,48,55,53,55,84,243,185,141,149,84,84,49,48,50,48,55,53,56,84,243,185,141,150,84,84,49,48,50,48,55,53,57,84,243,185,141,151,84,84,49,48,50,48,55,54,48,84,243,185,141,152,84,84,49,48,50,48,55,54,49,84,243,185,141,153,84,84,49,48,50,48,55,54,50,84,243,185,141,154,84,84,49,48,50,48,55,54,51,84,243,185,141,155,84,84,49,48,50,48,55,54,52,84,243,185,141,156,84,84,49,48,50,48,55,54,53,84,243,185,141,157,84,84,49,48,50,48,55,54,54,84,243,185,141,158,84,84,49,48,50,48,55,54,55,84,243,185,141,159,84,84,49,48,50,48,55,54,56,84,243,185,141,160,84,84,49,48,50,48,55,54,57,84,243,185,141,161,84,84,49,48,50,48,55,55,48,84,243,185,141,162,84,84,49,48,50,48,55,55,49,84,243,185,141,163,84,84,49,48,50,48,55,55,50,84,243,185,141,164,84,84,49,48,50,48,55,55,51,84,243,185,141,165,84,84,49,48,50,48,55,55,52,84,243,185,141,166,84,84,49,48,50,48,55,55,53,84,243,185,141,167,84,84,49,48,50,48,55,55,54,84,243,185,141,168,84,84,49,48,50,48,55,55,55,84,243,185,141,169,84,84,49,48,50,48,55,55,56,84,243,185,141,170,84,84,49,48,50,48,55,55,57,84,243,185,141,171,84,84,49,48,50,48,55,56,48,84,243,185,141,172,84,84,49,48,50,48,55,56,49,84,243,185,141,173,84,84,49,48,50,48,55,56,50,84,243,185,141,174,84,84,49,48,50,48,55,56,51,84,243,185,141,175,84,84,49,48,50,48,55,56,52,84,243,185,141,176,84,84,49,48,50,48,55,56,53,84,243,185,141,177,84,84,49,48,50,48,55,56,54,84,243,185,141,178,84,84,49,48,50,48,55,56,55,84,243,185,141,179,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20249 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20249_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20249_s.txt", Encoding.UTF8);

    public Test20249() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersca1800aaa567470781b999118df6ba97",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,52,48,52,57,52,84,243,190,129,174,84,84,49,48,52,48,52,57,53,84,243,190,129,175,84,84,49,48,52,48,52,57,54,84,243,190,129,176,84,84,49,48,52,48,52,57,55,84,243,190,129,177,84,84,49,48,52,48,52,57,56,84,243,190,129,178,84,84,49,48,52,48,52,57,57,84,243,190,129,179,84,84,49,48,52,48,53,48,48,84,243,190,129,180,84,84,49,48,52,48,53,48,49,84,243,190,129,181,84,84,49,48,52,48,53,48,50,84,243,190,129,182,84,84,49,48,52,48,53,48,51,84,243,190,129,183,84,84,49,48,52,48,53,48,52,84,243,190,129,184,84,84,49,48,52,48,53,48,53,84,243,190,129,185,84,84,49,48,52,48,53,48,54,84,243,190,129,186,84,84,49,48,52,48,53,48,55,84,243,190,129,187,84,84,49,48,52,48,53,48,56,84,243,190,129,188,84,84,49,48,52,48,53,48,57,84,243,190,129,189,84,84,49,48,52,48,53,49,48,84,243,190,129,190,84,84,49,48,52,48,53,49,49,84,243,190,129,191,84,84,49,48,52,48,53,49,51,84,243,190,130,129,84,84,49,48,52,48,53,50,53,84,243,190,130,141,84,84,49,48,52,48,53,50,55,84,243,190,130,143,84,84,49,48,52,48,53,50,56,84,243,190,130,144,84,84,49,48,52,48,53,52,49,84,243,190,130,157,84,84,49,48,52,48,53,55,55,84,243,190,131,129,84,84,49,48,52,48,53,56,57,84,243,190,131,141,84,84,49,48,52,48,53,57,49,84,243,190,131,143,84,84,49,48,52,48,53,57,50,84,243,190,131,144,84,84,49,48,52,48,54,48,53,84,243,190,131,157,84,84,49,48,52,48,54,52,49,84,243,190,132,129,84,84,49,48,52,48,54,53,51,84,243,190,132,141,84,84,49,48,52,48,54,53,53,84,243,190,132,143,84,84,49,48,52,48,54,53,54,84,243,190,132,144,84,84,49,48,52,48,54,54,57,84,243,190,132,157,84,84,49,48,52,48,55,48,53,84,243,190,133,129,84,84,49,48,52,48,55,49,55,84,243,190,133,141,84,84,49,48,52,48,55,49,57,84,243,190,133,143,84,84,49,48,52,48,55,50,48,84,243,190,133,144,84,84,49,48,52,48,55,51,51,84,243,190,133,157,84,84,49,48,52,48,55,54,57,84,243,190,134,129,84,84,49,48,52,48,55,56,49,84,243,190,134,141,84,84,49,48,52,48,55,56,51,84,243,190,134,143,84,84,49,48,52,48,55,56,52,84,243,190,134,144,84,84,49,48,52,48,55,57,55,84,243,190,134,157,84,84,49,48,52,48,56,51,51,84,243,190,135,129,84,84,49,48,52,48,56,52,53,84,243,190,135,141,84,84,49,48,52,48,56,52,55,84,243,190,135,143,84,84,49,48,52,48,56,52,56,84,243,190,135,144,84,84,49,48,52,48,56,54,49,84,243,190,135,157,84,84,49,48,52,48,56,57,55,84,243,190,136,129,84,84,49,48,52,48,57,48,57,84,243,190,136,141,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20086 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20086_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20086_s.txt", Encoding.UTF8);

    public Test20086() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersb3c703c6e551430d9c914c24c3792dd5",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,49,52,52,49,51,84,243,183,170,141,84,84,49,48,49,52,52,49,53,84,243,183,170,143,84,84,49,48,49,52,52,49,54,84,243,183,170,144,84,84,49,48,49,52,52,50,57,84,243,183,170,157,84,84,49,48,49,52,52,54,53,84,243,183,171,129,84,84,49,48,49,52,52,55,55,84,243,183,171,141,84,84,49,48,49,52,52,55,57,84,243,183,171,143,84,84,49,48,49,52,52,56,48,84,243,183,171,144,84,84,49,48,49,52,52,57,51,84,243,183,171,157,84,84,49,48,49,52,53,50,57,84,243,183,172,129,84,84,49,48,49,52,53,52,49,84,243,183,172,141,84,84,49,48,49,52,53,52,51,84,243,183,172,143,84,84,49,48,49,52,53,52,52,84,243,183,172,144,84,84,49,48,49,52,53,53,55,84,243,183,172,157,84,84,49,48,49,52,53,57,51,84,243,183,173,129,84,84,49,48,49,52,54,48,53,84,243,183,173,141,84,84,49,48,49,52,54,48,55,84,243,183,173,143,84,84,49,48,49,52,54,48,56,84,243,183,173,144,84,84,49,48,49,52,54,50,49,84,243,183,173,157,84,84,49,48,49,52,54,53,55,84,243,183,174,129,84,84,49,48,49,52,54,54,57,84,243,183,174,141,84,84,49,48,49,52,54,55,49,84,243,183,174,143,84,84,49,48,49,52,54,55,50,84,243,183,174,144,84,84,49,48,49,52,54,56,53,84,243,183,174,157,84,84,49,48,49,52,55,50,49,84,243,183,175,129,84,84,49,48,49,52,55,51,51,84,243,183,175,141,84,84,49,48,49,52,55,51,53,84,243,183,175,143,84,84,49,48,49,52,55,51,54,84,243,183,175,144,84,84,49,48,49,52,55,52,57,84,243,183,175,157,84,84,49,48,49,52,55,56,53,84,243,183,176,129,84,84,49,48,49,52,55,57,55,84,243,183,176,141,84,84,49,48,49,52,55,57,57,84,243,183,176,143,84,84,49,48,49,52,56,48,48,84,243,183,176,144,84,84,49,48,49,52,56,49,51,84,243,183,176,157,84,84,49,48,49,52,56,52,57,84,243,183,177,129,84,84,49,48,49,52,56,54,49,84,243,183,177,141,84,84,49,48,49,52,56,54,51,84,243,183,177,143,84,84,49,48,49,52,56,54,52,84,243,183,177,144,84,84,49,48,49,52,56,55,55,84,243,183,177,157,84,84,49,48,49,52,57,49,51,84,243,183,178,129,84,84,49,48,49,52,57,50,53,84,243,183,178,141,84,84,49,48,49,52,57,50,55,84,243,183,178,143,84,84,49,48,49,52,57,50,56,84,243,183,178,144,84,84,49,48,49,52,57,52,49,84,243,183,178,157,84,84,49,48,49,52,57,55,55,84,243,183,179,129,84,84,49,48,49,52,57,56,57,84,243,183,179,141,84,84,49,48,49,52,57,57,49,84,243,183,179,143,84,84,49,48,49,52,57,57,50,84,243,183,179,144,84,84,49,48,49,53,48,48,53,84,243,183,179,157,84,84,49,48,49,53,48,52,49,84,243,183,180,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22572 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22572_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22572_s.txt", Encoding.UTF8);

    public Test22572() : base(recordedRequest, recordedResponse, "accounts8d43a048d26afcd")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048d26afcd",
                        container: "containersddd934ca569845dc89778f0bd55316f0",
                        blob: "Blob81ed73450b274597b30b6cbb21897f52",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22573 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22573_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22573_s.txt", Encoding.UTF8);

    public Test22573() : base(recordedRequest, recordedResponse, "accounts8d43a048d26afcd")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048d26afcd",
                        container: "containersddd934ca569845dc89778f0bd55316f0",
                        blob: "Blob1a9cf4c408974026a9d5f3de4895dff9",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22639 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22639_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22639_s.txt", Encoding.UTF8);

    public Test22639() : base(recordedRequest, recordedResponse, "accounts8d43a048e2beca5")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048e2beca5",
                        container: "containers3974e1da6923423a9845f2ce644df77d",
                        blob: "Blob80d2fb8338fa458297f1d018a044cd64",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19511 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19511_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19511_s.txt", Encoding.UTF8);

    public Test19511() : base(recordedRequest, recordedResponse, "accounts8d43a024a0ff30a")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a024a0ff30a",
                        container: "foo",
                        blob: "bar",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20564 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20564_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20564_s.txt", Encoding.UTF8);

    public Test20564() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers2997cf743a0f481c9f696984938aa742",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,54,54,48,48,55,84,244,132,144,151,84,84,49,48,54,54,48,48,56,84,244,132,144,152,84,84,49,48,54,54,48,48,57,84,244,132,144,153,84,84,49,48,54,54,48,49,48,84,244,132,144,154,84,84,49,48,54,54,48,49,49,84,244,132,144,155,84,84,49,48,54,54,48,49,50,84,244,132,144,156,84,84,49,48,54,54,48,49,51,84,244,132,144,157,84,84,49,48,54,54,48,49,52,84,244,132,144,158,84,84,49,48,54,54,48,49,53,84,244,132,144,159,84,84,49,48,54,54,48,49,54,84,244,132,144,160,84,84,49,48,54,54,48,49,55,84,244,132,144,161,84,84,49,48,54,54,48,49,56,84,244,132,144,162,84,84,49,48,54,54,48,49,57,84,244,132,144,163,84,84,49,48,54,54,48,50,48,84,244,132,144,164,84,84,49,48,54,54,48,50,49,84,244,132,144,165,84,84,49,48,54,54,48,50,50,84,244,132,144,166,84,84,49,48,54,54,48,50,51,84,244,132,144,167,84,84,49,48,54,54,48,50,52,84,244,132,144,168,84,84,49,48,54,54,48,50,53,84,244,132,144,169,84,84,49,48,54,54,48,50,54,84,244,132,144,170,84,84,49,48,54,54,48,50,55,84,244,132,144,171,84,84,49,48,54,54,48,50,56,84,244,132,144,172,84,84,49,48,54,54,48,50,57,84,244,132,144,173,84,84,49,48,54,54,48,51,48,84,244,132,144,174,84,84,49,48,54,54,48,51,49,84,244,132,144,175,84,84,49,48,54,54,48,51,50,84,244,132,144,176,84,84,49,48,54,54,48,51,51,84,244,132,144,177,84,84,49,48,54,54,48,51,52,84,244,132,144,178,84,84,49,48,54,54,48,51,53,84,244,132,144,179,84,84,49,48,54,54,48,51,54,84,244,132,144,180,84,84,49,48,54,54,48,51,55,84,244,132,144,181,84,84,49,48,54,54,48,51,56,84,244,132,144,182,84,84,49,48,54,54,48,51,57,84,244,132,144,183,84,84,49,48,54,54,48,52,48,84,244,132,144,184,84,84,49,48,54,54,48,52,49,84,244,132,144,185,84,84,49,48,54,54,48,52,50,84,244,132,144,186,84,84,49,48,54,54,48,52,51,84,244,132,144,187,84,84,49,48,54,54,48,52,52,84,244,132,144,188,84,84,49,48,54,54,48,52,53,84,244,132,144,189,84,84,49,48,54,54,48,52,54,84,244,132,144,190,84,84,49,48,54,54,48,52,55,84,244,132,144,191,84,84,49,48,54,54,48,52,57,84,244,132,145,129,84,84,49,48,54,54,48,54,49,84,244,132,145,141,84,84,49,48,54,54,48,54,51,84,244,132,145,143,84,84,49,48,54,54,48,54,52,84,244,132,145,144,84,84,49,48,54,54,48,55,55,84,244,132,145,157,84,84,49,48,54,54,49,49,51,84,244,132,146,129,84,84,49,48,54,54,49,50,53,84,244,132,146,141,84,84,49,48,54,54,49,50,55,84,244,132,146,143,84,84,49,48,54,54,49,50,56,84,244,132,146,144,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19415 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19415_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19415_s.txt", Encoding.UTF8);

    public Test19415() : base(recordedRequest, recordedResponse, "accounts8d43a024a0ff30a")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a024a0ff30a",
                        container: "$root",
                        blob: " ",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20503 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20503_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20503_s.txt", Encoding.UTF8);

    public Test20503() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers3bfa703d74a140e499ecce701b962b8c",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,55,52,50,49,84,244,130,138,141,84,84,49,48,53,55,52,50,51,84,244,130,138,143,84,84,49,48,53,55,52,50,52,84,244,130,138,144,84,84,49,48,53,55,52,51,55,84,244,130,138,157,84,84,49,48,53,55,52,55,51,84,244,130,139,129,84,84,49,48,53,55,52,56,53,84,244,130,139,141,84,84,49,48,53,55,52,56,55,84,244,130,139,143,84,84,49,48,53,55,52,56,56,84,244,130,139,144,84,84,49,48,53,55,53,48,49,84,244,130,139,157,84,84,49,48,53,55,53,51,55,84,244,130,140,129,84,84,49,48,53,55,53,52,57,84,244,130,140,141,84,84,49,48,53,55,53,53,49,84,244,130,140,143,84,84,49,48,53,55,53,53,50,84,244,130,140,144,84,84,49,48,53,55,53,54,53,84,244,130,140,157,84,84,49,48,53,55,54,48,48,84,244,130,141,128,84,84,49,48,53,55,54,48,49,84,244,130,141,129,84,84,49,48,53,55,54,48,50,84,244,130,141,130,84,84,49,48,53,55,54,48,51,84,244,130,141,131,84,84,49,48,53,55,54,48,52,84,244,130,141,132,84,84,49,48,53,55,54,48,53,84,244,130,141,133,84,84,49,48,53,55,54,48,54,84,244,130,141,134,84,84,49,48,53,55,54,48,55,84,244,130,141,135,84,84,49,48,53,55,54,48,56,84,244,130,141,136,84,84,49,48,53,55,54,48,57,84,244,130,141,137,84,84,49,48,53,55,54,49,48,84,244,130,141,138,84,84,49,48,53,55,54,49,49,84,244,130,141,139,84,84,49,48,53,55,54,49,50,84,244,130,141,140,84,84,49,48,53,55,54,49,51,84,244,130,141,141,84,84,49,48,53,55,54,49,52,84,244,130,141,142,84,84,49,48,53,55,54,49,53,84,244,130,141,143,84,84,49,48,53,55,54,49,54,84,244,130,141,144,84,84,49,48,53,55,54,49,55,84,244,130,141,145,84,84,49,48,53,55,54,49,56,84,244,130,141,146,84,84,49,48,53,55,54,49,57,84,244,130,141,147,84,84,49,48,53,55,54,50,48,84,244,130,141,148,84,84,49,48,53,55,54,50,49,84,244,130,141,149,84,84,49,48,53,55,54,50,50,84,244,130,141,150,84,84,49,48,53,55,54,50,51,84,244,130,141,151,84,84,49,48,53,55,54,50,52,84,244,130,141,152,84,84,49,48,53,55,54,50,53,84,244,130,141,153,84,84,49,48,53,55,54,50,54,84,244,130,141,154,84,84,49,48,53,55,54,50,55,84,244,130,141,155,84,84,49,48,53,55,54,50,56,84,244,130,141,156,84,84,49,48,53,55,54,50,57,84,244,130,141,157,84,84,49,48,53,55,54,51,48,84,244,130,141,158,84,84,49,48,53,55,54,51,49,84,244,130,141,159,84,84,49,48,53,55,54,51,50,84,244,130,141,160,84,84,49,48,53,55,54,51,51,84,244,130,141,161,84,84,49,48,53,55,54,51,52,84,244,130,141,162,84,84,49,48,53,55,54,51,53,84,244,130,141,163,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22574 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22574_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22574_s.txt", Encoding.UTF8);

    public Test22574() : base(recordedRequest, recordedResponse, "accounts8d43a048d26afcd")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048d26afcd",
                        container: "containersddd934ca569845dc89778f0bd55316f0",
                        blob: "Blob11067be87e914908a610aafaac0a0ad5",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20025 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20025_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20025_s.txt", Encoding.UTF8);

    public Test20025() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers612d6939acd44cdbbba30cffbd18a713",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,48,52,53,55,51,84,243,181,144,157,84,84,49,48,48,52,53,55,52,84,243,181,144,158,84,84,49,48,48,52,53,55,53,84,243,181,144,159,84,84,49,48,48,52,53,55,54,84,243,181,144,160,84,84,49,48,48,52,53,55,55,84,243,181,144,161,84,84,49,48,48,52,53,55,56,84,243,181,144,162,84,84,49,48,48,52,53,55,57,84,243,181,144,163,84,84,49,48,48,52,53,56,48,84,243,181,144,164,84,84,49,48,48,52,53,56,49,84,243,181,144,165,84,84,49,48,48,52,53,56,50,84,243,181,144,166,84,84,49,48,48,52,53,56,51,84,243,181,144,167,84,84,49,48,48,52,53,56,52,84,243,181,144,168,84,84,49,48,48,52,53,56,53,84,243,181,144,169,84,84,49,48,48,52,53,56,54,84,243,181,144,170,84,84,49,48,48,52,53,56,55,84,243,181,144,171,84,84,49,48,48,52,53,56,56,84,243,181,144,172,84,84,49,48,48,52,53,56,57,84,243,181,144,173,84,84,49,48,48,52,53,57,48,84,243,181,144,174,84,84,49,48,48,52,53,57,49,84,243,181,144,175,84,84,49,48,48,52,53,57,50,84,243,181,144,176,84,84,49,48,48,52,53,57,51,84,243,181,144,177,84,84,49,48,48,52,53,57,52,84,243,181,144,178,84,84,49,48,48,52,53,57,53,84,243,181,144,179,84,84,49,48,48,52,53,57,54,84,243,181,144,180,84,84,49,48,48,52,53,57,55,84,243,181,144,181,84,84,49,48,48,52,53,57,56,84,243,181,144,182,84,84,49,48,48,52,53,57,57,84,243,181,144,183,84,84,49,48,48,52,54,48,48,84,243,181,144,184,84,84,49,48,48,52,54,48,49,84,243,181,144,185,84,84,49,48,48,52,54,48,50,84,243,181,144,186,84,84,49,48,48,52,54,48,51,84,243,181,144,187,84,84,49,48,48,52,54,48,52,84,243,181,144,188,84,84,49,48,48,52,54,48,53,84,243,181,144,189,84,84,49,48,48,52,54,48,54,84,243,181,144,190,84,84,49,48,48,52,54,48,55,84,243,181,144,191,84,84,49,48,48,52,54,48,57,84,243,181,145,129,84,84,49,48,48,52,54,50,49,84,243,181,145,141,84,84,49,48,48,52,54,50,51,84,243,181,145,143,84,84,49,48,48,52,54,50,52,84,243,181,145,144,84,84,49,48,48,52,54,51,55,84,243,181,145,157,84,84,49,48,48,52,54,55,51,84,243,181,146,129,84,84,49,48,48,52,54,56,53,84,243,181,146,141,84,84,49,48,48,52,54,56,55,84,243,181,146,143,84,84,49,48,48,52,54,56,56,84,243,181,146,144,84,84,49,48,48,52,55,48,49,84,243,181,146,157,84,84,49,48,48,52,55,51,55,84,243,181,147,129,84,84,49,48,48,52,55,52,57,84,243,181,147,141,84,84,49,48,48,52,55,53,49,84,243,181,147,143,84,84,49,48,48,52,55,53,50,84,243,181,147,144,84,84,49,48,48,52,55,54,53,84,243,181,147,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20852 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20852_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20852_s.txt", Encoding.UTF8);

    public Test20852() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersf4b0dcea8f7b4ccf92e1f36b952ddf93",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,51,51,54,57,84,244,141,152,137,84,84,49,49,48,51,51,55,48,84,244,141,152,138,84,84,49,49,48,51,51,55,49,84,244,141,152,139,84,84,49,49,48,51,51,55,50,84,244,141,152,140,84,84,49,49,48,51,51,55,51,84,244,141,152,141,84,84,49,49,48,51,51,55,52,84,244,141,152,142,84,84,49,49,48,51,51,55,53,84,244,141,152,143,84,84,49,49,48,51,51,55,54,84,244,141,152,144,84,84,49,49,48,51,51,55,55,84,244,141,152,145,84,84,49,49,48,51,51,55,56,84,244,141,152,146,84,84,49,49,48,51,51,55,57,84,244,141,152,147,84,84,49,49,48,51,51,56,48,84,244,141,152,148,84,84,49,49,48,51,51,56,49,84,244,141,152,149,84,84,49,49,48,51,51,56,50,84,244,141,152,150,84,84,49,49,48,51,51,56,51,84,244,141,152,151,84,84,49,49,48,51,51,56,52,84,244,141,152,152,84,84,49,49,48,51,51,56,53,84,244,141,152,153,84,84,49,49,48,51,51,56,54,84,244,141,152,154,84,84,49,49,48,51,51,56,55,84,244,141,152,155,84,84,49,49,48,51,51,56,56,84,244,141,152,156,84,84,49,49,48,51,51,56,57,84,244,141,152,157,84,84,49,49,48,51,51,57,48,84,244,141,152,158,84,84,49,49,48,51,51,57,49,84,244,141,152,159,84,84,49,49,48,51,51,57,50,84,244,141,152,160,84,84,49,49,48,51,51,57,51,84,244,141,152,161,84,84,49,49,48,51,51,57,52,84,244,141,152,162,84,84,49,49,48,51,51,57,53,84,244,141,152,163,84,84,49,49,48,51,51,57,54,84,244,141,152,164,84,84,49,49,48,51,51,57,55,84,244,141,152,165,84,84,49,49,48,51,51,57,56,84,244,141,152,166,84,84,49,49,48,51,51,57,57,84,244,141,152,167,84,84,49,49,48,51,52,48,48,84,244,141,152,168,84,84,49,49,48,51,52,48,49,84,244,141,152,169,84,84,49,49,48,51,52,48,50,84,244,141,152,170,84,84,49,49,48,51,52,48,51,84,244,141,152,171,84,84,49,49,48,51,52,48,52,84,244,141,152,172,84,84,49,49,48,51,52,48,53,84,244,141,152,173,84,84,49,49,48,51,52,48,54,84,244,141,152,174,84,84,49,49,48,51,52,48,55,84,244,141,152,175,84,84,49,49,48,51,52,48,56,84,244,141,152,176,84,84,49,49,48,51,52,48,57,84,244,141,152,177,84,84,49,49,48,51,52,49,48,84,244,141,152,178,84,84,49,49,48,51,52,49,49,84,244,141,152,179,84,84,49,49,48,51,52,49,50,84,244,141,152,180,84,84,49,49,48,51,52,49,51,84,244,141,152,181,84,84,49,49,48,51,52,49,52,84,244,141,152,182,84,84,49,49,48,51,52,49,53,84,244,141,152,183,84,84,49,49,48,51,52,49,54,84,244,141,152,184,84,84,49,49,48,51,52,49,55,84,244,141,152,185,84,84,49,49,48,51,52,49,56,84,244,141,152,186,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19902 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19902_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19902_s.txt", Encoding.UTF8);

    public Test19902() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersf0a96ab3064046f8a2fc77e6e3ebae9e",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,56,53,49,54,53,84,243,176,161,141,84,84,57,56,53,49,54,55,84,243,176,161,143,84,84,57,56,53,49,54,56,84,243,176,161,144,84,84,57,56,53,49,56,49,84,243,176,161,157,84,84,57,56,53,50,49,55,84,243,176,162,129,84,84,57,56,53,50,50,57,84,243,176,162,141,84,84,57,56,53,50,51,49,84,243,176,162,143,84,84,57,56,53,50,51,50,84,243,176,162,144,84,84,57,56,53,50,52,53,84,243,176,162,157,84,84,57,56,53,50,56,49,84,243,176,163,129,84,84,57,56,53,50,57,51,84,243,176,163,141,84,84,57,56,53,50,57,53,84,243,176,163,143,84,84,57,56,53,50,57,54,84,243,176,163,144,84,84,57,56,53,51,48,57,84,243,176,163,157,84,84,57,56,53,51,52,53,84,243,176,164,129,84,84,57,56,53,51,53,55,84,243,176,164,141,84,84,57,56,53,51,53,57,84,243,176,164,143,84,84,57,56,53,51,54,48,84,243,176,164,144,84,84,57,56,53,51,55,51,84,243,176,164,157,84,84,57,56,53,52,48,57,84,243,176,165,129,84,84,57,56,53,52,50,49,84,243,176,165,141,84,84,57,56,53,52,50,51,84,243,176,165,143,84,84,57,56,53,52,50,52,84,243,176,165,144,84,84,57,56,53,52,51,55,84,243,176,165,157,84,84,57,56,53,52,55,51,84,243,176,166,129,84,84,57,56,53,52,56,53,84,243,176,166,141,84,84,57,56,53,52,56,55,84,243,176,166,143,84,84,57,56,53,52,56,56,84,243,176,166,144,84,84,57,56,53,53,48,49,84,243,176,166,157,84,84,57,56,53,53,51,55,84,243,176,167,129,84,84,57,56,53,53,52,57,84,243,176,167,141,84,84,57,56,53,53,53,49,84,243,176,167,143,84,84,57,56,53,53,53,50,84,243,176,167,144,84,84,57,56,53,53,54,53,84,243,176,167,157,84,84,57,56,53,54,48,49,84,243,176,168,129,84,84,57,56,53,54,49,51,84,243,176,168,141,84,84,57,56,53,54,49,53,84,243,176,168,143,84,84,57,56,53,54,49,54,84,243,176,168,144,84,84,57,56,53,54,50,57,84,243,176,168,157,84,84,57,56,53,54,54,53,84,243,176,169,129,84,84,57,56,53,54,55,55,84,243,176,169,141,84,84,57,56,53,54,55,57,84,243,176,169,143,84,84,57,56,53,54,56,48,84,243,176,169,144,84,84,57,56,53,54,57,51,84,243,176,169,157,84,84,57,56,53,55,50,57,84,243,176,170,129,84,84,57,56,53,55,52,49,84,243,176,170,141,84,84,57,56,53,55,52,51,84,243,176,170,143,84,84,57,56,53,55,52,52,84,243,176,170,144,84,84,57,56,53,55,53,55,84,243,176,170,157,84,84,57,56,53,55,57,51,84,243,176,171,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20088 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20088_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20088_s.txt", Encoding.UTF8);

    public Test20088() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersb3c703c6e551430d9c914c24c3792dd5",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,49,53,48,53,51,84,243,183,180,141,84,84,49,48,49,53,48,53,53,84,243,183,180,143,84,84,49,48,49,53,48,53,54,84,243,183,180,144,84,84,49,48,49,53,48,54,57,84,243,183,180,157,84,84,49,48,49,53,49,48,53,84,243,183,181,129,84,84,49,48,49,53,49,49,55,84,243,183,181,141,84,84,49,48,49,53,49,49,57,84,243,183,181,143,84,84,49,48,49,53,49,50,48,84,243,183,181,144,84,84,49,48,49,53,49,51,51,84,243,183,181,157,84,84,49,48,49,53,49,54,57,84,243,183,182,129,84,84,49,48,49,53,49,56,49,84,243,183,182,141,84,84,49,48,49,53,49,56,51,84,243,183,182,143,84,84,49,48,49,53,49,56,52,84,243,183,182,144,84,84,49,48,49,53,49,57,55,84,243,183,182,157,84,84,49,48,49,53,50,51,51,84,243,183,183,129,84,84,49,48,49,53,50,52,53,84,243,183,183,141,84,84,49,48,49,53,50,52,55,84,243,183,183,143,84,84,49,48,49,53,50,52,56,84,243,183,183,144,84,84,49,48,49,53,50,54,49,84,243,183,183,157,84,84,49,48,49,53,50,57,55,84,243,183,184,129,84,84,49,48,49,53,51,48,57,84,243,183,184,141,84,84,49,48,49,53,51,49,49,84,243,183,184,143,84,84,49,48,49,53,51,49,50,84,243,183,184,144,84,84,49,48,49,53,51,50,53,84,243,183,184,157,84,84,49,48,49,53,51,54,49,84,243,183,185,129,84,84,49,48,49,53,51,55,51,84,243,183,185,141,84,84,49,48,49,53,51,55,53,84,243,183,185,143,84,84,49,48,49,53,51,55,54,84,243,183,185,144,84,84,49,48,49,53,51,56,57,84,243,183,185,157,84,84,49,48,49,53,52,50,53,84,243,183,186,129,84,84,49,48,49,53,52,51,55,84,243,183,186,141,84,84,49,48,49,53,52,51,57,84,243,183,186,143,84,84,49,48,49,53,52,52,48,84,243,183,186,144,84,84,49,48,49,53,52,53,51,84,243,183,186,157,84,84,49,48,49,53,52,56,57,84,243,183,187,129,84,84,49,48,49,53,53,48,49,84,243,183,187,141,84,84,49,48,49,53,53,48,51,84,243,183,187,143,84,84,49,48,49,53,53,48,52,84,243,183,187,144,84,84,49,48,49,53,53,49,55,84,243,183,187,157,84,84,49,48,49,53,53,53,51,84,243,183,188,129,84,84,49,48,49,53,53,54,53,84,243,183,188,141,84,84,49,48,49,53,53,54,55,84,243,183,188,143,84,84,49,48,49,53,53,54,56,84,243,183,188,144,84,84,49,48,49,53,53,56,49,84,243,183,188,157,84,84,49,48,49,53,54,49,55,84,243,183,189,129,84,84,49,48,49,53,54,50,57,84,243,183,189,141,84,84,49,48,49,53,54,51,49,84,243,183,189,143,84,84,49,48,49,53,54,51,50,84,243,183,189,144,84,84,49,48,49,53,54,52,53,84,243,183,189,157,84,84,49,48,49,53,54,56,49,84,243,183,190,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20913 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20913_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20913_s.txt", Encoding.UTF8);

    public Test20913() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers9e891393b2624599aedf317812121dcf",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,52,55,54,57,84,244,141,174,129,84,84,49,49,48,52,55,55,48,84,244,141,174,130,84,84,49,49,48,52,55,55,49,84,244,141,174,131,84,84,49,49,48,52,55,55,50,84,244,141,174,132,84,84,49,49,48,52,55,55,51,84,244,141,174,133,84,84,49,49,48,52,55,55,52,84,244,141,174,134,84,84,49,49,48,52,55,55,53,84,244,141,174,135,84,84,49,49,48,52,55,55,54,84,244,141,174,136,84,84,49,49,48,52,55,55,55,84,244,141,174,137,84,84,49,49,48,52,55,55,56,84,244,141,174,138,84,84,49,49,48,52,55,55,57,84,244,141,174,139,84,84,49,49,48,52,55,56,48,84,244,141,174,140,84,84,49,49,48,52,55,56,49,84,244,141,174,141,84,84,49,49,48,52,55,56,50,84,244,141,174,142,84,84,49,49,48,52,55,56,51,84,244,141,174,143,84,84,49,49,48,52,55,56,52,84,244,141,174,144,84,84,49,49,48,52,55,56,53,84,244,141,174,145,84,84,49,49,48,52,55,56,54,84,244,141,174,146,84,84,49,49,48,52,55,56,55,84,244,141,174,147,84,84,49,49,48,52,55,56,56,84,244,141,174,148,84,84,49,49,48,52,55,56,57,84,244,141,174,149,84,84,49,49,48,52,55,57,48,84,244,141,174,150,84,84,49,49,48,52,55,57,49,84,244,141,174,151,84,84,49,49,48,52,55,57,50,84,244,141,174,152,84,84,49,49,48,52,55,57,51,84,244,141,174,153,84,84,49,49,48,52,55,57,52,84,244,141,174,154,84,84,49,49,48,52,55,57,53,84,244,141,174,155,84,84,49,49,48,52,55,57,54,84,244,141,174,156,84,84,49,49,48,52,55,57,55,84,244,141,174,157,84,84,49,49,48,52,55,57,56,84,244,141,174,158,84,84,49,49,48,52,55,57,57,84,244,141,174,159,84,84,49,49,48,52,56,48,48,84,244,141,174,160,84,84,49,49,48,52,56,48,49,84,244,141,174,161,84,84,49,49,48,52,56,48,50,84,244,141,174,162,84,84,49,49,48,52,56,48,51,84,244,141,174,163,84,84,49,49,48,52,56,48,52,84,244,141,174,164,84,84,49,49,48,52,56,48,53,84,244,141,174,165,84,84,49,49,48,52,56,48,54,84,244,141,174,166,84,84,49,49,48,52,56,48,55,84,244,141,174,167,84,84,49,49,48,52,56,48,56,84,244,141,174,168,84,84,49,49,48,52,56,48,57,84,244,141,174,169,84,84,49,49,48,52,56,49,48,84,244,141,174,170,84,84,49,49,48,52,56,49,49,84,244,141,174,171,84,84,49,49,48,52,56,49,50,84,244,141,174,172,84,84,49,49,48,52,56,49,51,84,244,141,174,173,84,84,49,49,48,52,56,49,52,84,244,141,174,174,84,84,49,49,48,52,56,49,53,84,244,141,174,175,84,84,49,49,48,52,56,49,54,84,244,141,174,176,84,84,49,49,48,52,56,49,55,84,244,141,174,177,84,84,49,49,48,52,56,49,56,84,244,141,174,178,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20346 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20346_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20346_s.txt", Encoding.UTF8);

    public Test20346() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers412024b733e349978217e6093afed677",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,51,49,55,56,84,244,129,135,186,84,84,49,48,53,51,49,55,57,84,244,129,135,187,84,84,49,48,53,51,49,56,48,84,244,129,135,188,84,84,49,48,53,51,49,56,49,84,244,129,135,189,84,84,49,48,53,51,49,56,50,84,244,129,135,190,84,84,49,48,53,51,49,56,51,84,244,129,135,191,84,84,49,48,53,51,49,56,52,84,244,129,136,128,84,84,49,48,53,51,49,56,53,84,244,129,136,129,84,84,49,48,53,51,49,56,54,84,244,129,136,130,84,84,49,48,53,51,49,56,55,84,244,129,136,131,84,84,49,48,53,51,49,56,56,84,244,129,136,132,84,84,49,48,53,51,49,56,57,84,244,129,136,133,84,84,49,48,53,51,49,57,48,84,244,129,136,134,84,84,49,48,53,51,49,57,49,84,244,129,136,135,84,84,49,48,53,51,49,57,50,84,244,129,136,136,84,84,49,48,53,51,49,57,51,84,244,129,136,137,84,84,49,48,53,51,49,57,52,84,244,129,136,138,84,84,49,48,53,51,49,57,53,84,244,129,136,139,84,84,49,48,53,51,49,57,54,84,244,129,136,140,84,84,49,48,53,51,49,57,55,84,244,129,136,141,84,84,49,48,53,51,49,57,56,84,244,129,136,142,84,84,49,48,53,51,49,57,57,84,244,129,136,143,84,84,49,48,53,51,50,48,48,84,244,129,136,144,84,84,49,48,53,51,50,48,49,84,244,129,136,145,84,84,49,48,53,51,50,48,50,84,244,129,136,146,84,84,49,48,53,51,50,48,51,84,244,129,136,147,84,84,49,48,53,51,50,48,52,84,244,129,136,148,84,84,49,48,53,51,50,48,53,84,244,129,136,149,84,84,49,48,53,51,50,48,54,84,244,129,136,150,84,84,49,48,53,51,50,48,55,84,244,129,136,151,84,84,49,48,53,51,50,48,56,84,244,129,136,152,84,84,49,48,53,51,50,48,57,84,244,129,136,153,84,84,49,48,53,51,50,49,48,84,244,129,136,154,84,84,49,48,53,51,50,49,49,84,244,129,136,155,84,84,49,48,53,51,50,49,50,84,244,129,136,156,84,84,49,48,53,51,50,49,51,84,244,129,136,157,84,84,49,48,53,51,50,49,52,84,244,129,136,158,84,84,49,48,53,51,50,49,53,84,244,129,136,159,84,84,49,48,53,51,50,49,54,84,244,129,136,160,84,84,49,48,53,51,50,49,55,84,244,129,136,161,84,84,49,48,53,51,50,49,56,84,244,129,136,162,84,84,49,48,53,51,50,49,57,84,244,129,136,163,84,84,49,48,53,51,50,50,48,84,244,129,136,164,84,84,49,48,53,51,50,50,49,84,244,129,136,165,84,84,49,48,53,51,50,50,50,84,244,129,136,166,84,84,49,48,53,51,50,50,51,84,244,129,136,167,84,84,49,48,53,51,50,50,52,84,244,129,136,168,84,84,49,48,53,51,50,50,53,84,244,129,136,169,84,84,49,48,53,51,50,50,54,84,244,129,136,170,84,84,49,48,53,51,50,50,55,84,244,129,136,171,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21106 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21106_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21106_s.txt", Encoding.UTF8);

    public Test21106() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers79aa3dd90e344ebe9466f3cb0c56378a",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,50,56,53,48,84,244,143,172,146,84,84,49,49,49,50,56,53,49,84,244,143,172,147,84,84,49,49,49,50,56,53,50,84,244,143,172,148,84,84,49,49,49,50,56,53,51,84,244,143,172,149,84,84,49,49,49,50,56,53,52,84,244,143,172,150,84,84,49,49,49,50,56,53,53,84,244,143,172,151,84,84,49,49,49,50,56,53,54,84,244,143,172,152,84,84,49,49,49,50,56,53,55,84,244,143,172,153,84,84,49,49,49,50,56,53,56,84,244,143,172,154,84,84,49,49,49,50,56,53,57,84,244,143,172,155,84,84,49,49,49,50,56,54,48,84,244,143,172,156,84,84,49,49,49,50,56,54,49,84,244,143,172,157,84,84,49,49,49,50,56,54,50,84,244,143,172,158,84,84,49,49,49,50,56,54,51,84,244,143,172,159,84,84,49,49,49,50,56,54,52,84,244,143,172,160,84,84,49,49,49,50,56,54,53,84,244,143,172,161,84,84,49,49,49,50,56,54,54,84,244,143,172,162,84,84,49,49,49,50,56,54,55,84,244,143,172,163,84,84,49,49,49,50,56,54,56,84,244,143,172,164,84,84,49,49,49,50,56,54,57,84,244,143,172,165,84,84,49,49,49,50,56,55,48,84,244,143,172,166,84,84,49,49,49,50,56,55,49,84,244,143,172,167,84,84,49,49,49,50,56,55,50,84,244,143,172,168,84,84,49,49,49,50,56,55,51,84,244,143,172,169,84,84,49,49,49,50,56,55,52,84,244,143,172,170,84,84,49,49,49,50,56,55,53,84,244,143,172,171,84,84,49,49,49,50,56,55,54,84,244,143,172,172,84,84,49,49,49,50,56,55,55,84,244,143,172,173,84,84,49,49,49,50,56,55,56,84,244,143,172,174,84,84,49,49,49,50,56,55,57,84,244,143,172,175,84,84,49,49,49,50,56,56,48,84,244,143,172,176,84,84,49,49,49,50,56,56,49,84,244,143,172,177,84,84,49,49,49,50,56,56,50,84,244,143,172,178,84,84,49,49,49,50,56,56,51,84,244,143,172,179,84,84,49,49,49,50,56,56,52,84,244,143,172,180,84,84,49,49,49,50,56,56,53,84,244,143,172,181,84,84,49,49,49,50,56,56,54,84,244,143,172,182,84,84,49,49,49,50,56,56,55,84,244,143,172,183,84,84,49,49,49,50,56,56,56,84,244,143,172,184,84,84,49,49,49,50,56,56,57,84,244,143,172,185,84,84,49,49,49,50,56,57,48,84,244,143,172,186,84,84,49,49,49,50,56,57,49,84,244,143,172,187,84,84,49,49,49,50,56,57,50,84,244,143,172,188,84,84,49,49,49,50,56,57,51,84,244,143,172,189,84,84,49,49,49,50,56,57,52,84,244,143,172,190,84,84,49,49,49,50,56,57,53,84,244,143,172,191,84,84,49,49,49,50,56,57,54,84,244,143,173,128,84,84,49,49,49,50,56,57,55,84,244,143,173,129,84,84,49,49,49,50,56,57,56,84,244,143,173,130,84,84,49,49,49,50,56,57,57,84,244,143,173,131,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19832 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19832_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19832_s.txt", Encoding.UTF8);

    public Test19832() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers3d1fce2fe43b489ca49e5d4066014499",
                        blob: Encoding.UTF8.GetString(new byte[]{84,54,49,53,52,54,84,239,129,170,84,84,54,49,53,52,55,84,239,129,171,84,84,54,49,53,52,56,84,239,129,172,84,84,54,49,53,52,57,84,239,129,173,84,84,54,49,53,53,48,84,239,129,174,84,84,54,49,53,53,49,84,239,129,175,84,84,54,49,53,53,50,84,239,129,176,84,84,54,49,53,53,51,84,239,129,177,84,84,54,49,53,53,52,84,239,129,178,84,84,54,49,53,53,53,84,239,129,179,84,84,54,49,53,53,54,84,239,129,180,84,84,54,49,53,53,55,84,239,129,181,84,84,54,49,53,53,56,84,239,129,182,84,84,54,49,53,53,57,84,239,129,183,84,84,54,49,53,54,48,84,239,129,184,84,84,54,49,53,54,49,84,239,129,185,84,84,54,49,53,54,50,84,239,129,186,84,84,54,49,53,54,51,84,239,129,187,84,84,54,49,53,54,52,84,239,129,188,84,84,54,49,53,54,53,84,239,129,189,84,84,54,49,53,54,54,84,239,129,190,84,84,54,49,53,54,55,84,239,129,191,84,84,54,49,53,54,57,84,239,130,129,84,84,54,49,53,56,49,84,239,130,141,84,84,54,49,53,56,51,84,239,130,143,84,84,54,49,53,56,52,84,239,130,144,84,84,54,49,53,57,55,84,239,130,157,84,84,54,49,54,51,51,84,239,131,129,84,84,54,49,54,52,53,84,239,131,141,84,84,54,49,54,52,55,84,239,131,143,84,84,54,49,54,52,56,84,239,131,144,84,84,54,49,54,54,49,84,239,131,157,84,84,54,49,54,57,55,84,239,132,129,84,84,54,49,55,48,57,84,239,132,141,84,84,54,49,55,49,49,84,239,132,143,84,84,54,49,55,49,50,84,239,132,144,84,84,54,49,55,50,53,84,239,132,157,84,84,54,49,55,54,49,84,239,133,129,84,84,54,49,55,55,51,84,239,133,141,84,84,54,49,55,55,53,84,239,133,143,84,84,54,49,55,55,54,84,239,133,144,84,84,54,49,55,56,57,84,239,133,157,84,84,54,49,56,50,53,84,239,134,129,84,84,54,49,56,51,55,84,239,134,141,84,84,54,49,56,51,57,84,239,134,143,84,84,54,49,56,52,48,84,239,134,144,84,84,54,49,56,53,51,84,239,134,157,84,84,54,49,56,56,57,84,239,135,129,84,84,54,49,57,48,49,84,239,135,141,84,84,54,49,57,48,51,84,239,135,143,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21050 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21050_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21050_s.txt", Encoding.UTF8);

    public Test21050() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers98fd3eef9d4b4edcb3855acb5ae8645d",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,49,53,48,48,84,244,143,151,140,84,84,49,49,49,49,53,48,49,84,244,143,151,141,84,84,49,49,49,49,53,48,50,84,244,143,151,142,84,84,49,49,49,49,53,48,51,84,244,143,151,143,84,84,49,49,49,49,53,48,52,84,244,143,151,144,84,84,49,49,49,49,53,48,53,84,244,143,151,145,84,84,49,49,49,49,53,48,54,84,244,143,151,146,84,84,49,49,49,49,53,48,55,84,244,143,151,147,84,84,49,49,49,49,53,48,56,84,244,143,151,148,84,84,49,49,49,49,53,48,57,84,244,143,151,149,84,84,49,49,49,49,53,49,48,84,244,143,151,150,84,84,49,49,49,49,53,49,49,84,244,143,151,151,84,84,49,49,49,49,53,49,50,84,244,143,151,152,84,84,49,49,49,49,53,49,51,84,244,143,151,153,84,84,49,49,49,49,53,49,52,84,244,143,151,154,84,84,49,49,49,49,53,49,53,84,244,143,151,155,84,84,49,49,49,49,53,49,54,84,244,143,151,156,84,84,49,49,49,49,53,49,55,84,244,143,151,157,84,84,49,49,49,49,53,49,56,84,244,143,151,158,84,84,49,49,49,49,53,49,57,84,244,143,151,159,84,84,49,49,49,49,53,50,48,84,244,143,151,160,84,84,49,49,49,49,53,50,49,84,244,143,151,161,84,84,49,49,49,49,53,50,50,84,244,143,151,162,84,84,49,49,49,49,53,50,51,84,244,143,151,163,84,84,49,49,49,49,53,50,52,84,244,143,151,164,84,84,49,49,49,49,53,50,53,84,244,143,151,165,84,84,49,49,49,49,53,50,54,84,244,143,151,166,84,84,49,49,49,49,53,50,55,84,244,143,151,167,84,84,49,49,49,49,53,50,56,84,244,143,151,168,84,84,49,49,49,49,53,50,57,84,244,143,151,169,84,84,49,49,49,49,53,51,48,84,244,143,151,170,84,84,49,49,49,49,53,51,49,84,244,143,151,171,84,84,49,49,49,49,53,51,50,84,244,143,151,172,84,84,49,49,49,49,53,51,51,84,244,143,151,173,84,84,49,49,49,49,53,51,52,84,244,143,151,174,84,84,49,49,49,49,53,51,53,84,244,143,151,175,84,84,49,49,49,49,53,51,54,84,244,143,151,176,84,84,49,49,49,49,53,51,55,84,244,143,151,177,84,84,49,49,49,49,53,51,56,84,244,143,151,178,84,84,49,49,49,49,53,51,57,84,244,143,151,179,84,84,49,49,49,49,53,52,48,84,244,143,151,180,84,84,49,49,49,49,53,52,49,84,244,143,151,181,84,84,49,49,49,49,53,52,50,84,244,143,151,182,84,84,49,49,49,49,53,52,51,84,244,143,151,183,84,84,49,49,49,49,53,52,52,84,244,143,151,184,84,84,49,49,49,49,53,52,53,84,244,143,151,185,84,84,49,49,49,49,53,52,54,84,244,143,151,186,84,84,49,49,49,49,53,52,55,84,244,143,151,187,84,84,49,49,49,49,53,52,56,84,244,143,151,188,84,84,49,49,49,49,53,52,57,84,244,143,151,189,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20534 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20534_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20534_s.txt", Encoding.UTF8);

    public Test20534() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers169b02be047c4c76acbb586fdc8886c6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,54,49,56,50,54,84,244,131,143,130,84,84,49,48,54,49,56,50,55,84,244,131,143,131,84,84,49,48,54,49,56,50,56,84,244,131,143,132,84,84,49,48,54,49,56,50,57,84,244,131,143,133,84,84,49,48,54,49,56,51,48,84,244,131,143,134,84,84,49,48,54,49,56,51,49,84,244,131,143,135,84,84,49,48,54,49,56,51,50,84,244,131,143,136,84,84,49,48,54,49,56,51,51,84,244,131,143,137,84,84,49,48,54,49,56,51,52,84,244,131,143,138,84,84,49,48,54,49,56,51,53,84,244,131,143,139,84,84,49,48,54,49,56,51,54,84,244,131,143,140,84,84,49,48,54,49,56,51,55,84,244,131,143,141,84,84,49,48,54,49,56,51,56,84,244,131,143,142,84,84,49,48,54,49,56,51,57,84,244,131,143,143,84,84,49,48,54,49,56,52,48,84,244,131,143,144,84,84,49,48,54,49,56,52,49,84,244,131,143,145,84,84,49,48,54,49,56,52,50,84,244,131,143,146,84,84,49,48,54,49,56,52,51,84,244,131,143,147,84,84,49,48,54,49,56,52,52,84,244,131,143,148,84,84,49,48,54,49,56,52,53,84,244,131,143,149,84,84,49,48,54,49,56,52,54,84,244,131,143,150,84,84,49,48,54,49,56,52,55,84,244,131,143,151,84,84,49,48,54,49,56,52,56,84,244,131,143,152,84,84,49,48,54,49,56,52,57,84,244,131,143,153,84,84,49,48,54,49,56,53,48,84,244,131,143,154,84,84,49,48,54,49,56,53,49,84,244,131,143,155,84,84,49,48,54,49,56,53,50,84,244,131,143,156,84,84,49,48,54,49,56,53,51,84,244,131,143,157,84,84,49,48,54,49,56,53,52,84,244,131,143,158,84,84,49,48,54,49,56,53,53,84,244,131,143,159,84,84,49,48,54,49,56,53,54,84,244,131,143,160,84,84,49,48,54,49,56,53,55,84,244,131,143,161,84,84,49,48,54,49,56,53,56,84,244,131,143,162,84,84,49,48,54,49,56,53,57,84,244,131,143,163,84,84,49,48,54,49,56,54,48,84,244,131,143,164,84,84,49,48,54,49,56,54,49,84,244,131,143,165,84,84,49,48,54,49,56,54,50,84,244,131,143,166,84,84,49,48,54,49,56,54,51,84,244,131,143,167,84,84,49,48,54,49,56,54,52,84,244,131,143,168,84,84,49,48,54,49,56,54,53,84,244,131,143,169,84,84,49,48,54,49,56,54,54,84,244,131,143,170,84,84,49,48,54,49,56,54,55,84,244,131,143,171,84,84,49,48,54,49,56,54,56,84,244,131,143,172,84,84,49,48,54,49,56,54,57,84,244,131,143,173,84,84,49,48,54,49,56,55,48,84,244,131,143,174,84,84,49,48,54,49,56,55,49,84,244,131,143,175,84,84,49,48,54,49,56,55,50,84,244,131,143,176,84,84,49,48,54,49,56,55,51,84,244,131,143,177,84,84,49,48,54,49,56,55,52,84,244,131,143,178,84,84,49,48,54,49,56,55,53,84,244,131,143,179,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20600 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20600_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20600_s.txt", Encoding.UTF8);

    public Test20600() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers2997cf743a0f481c9f696984938aa742",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,55,49,56,55,51,84,244,133,172,129,84,84,49,48,55,49,56,56,53,84,244,133,172,141,84,84,49,48,55,49,56,56,55,84,244,133,172,143,84,84,49,48,55,49,56,56,56,84,244,133,172,144,84,84,49,48,55,49,57,48,49,84,244,133,172,157,84,84,49,48,55,49,57,51,55,84,244,133,173,129,84,84,49,48,55,49,57,52,57,84,244,133,173,141,84,84,49,48,55,49,57,53,49,84,244,133,173,143,84,84,49,48,55,49,57,53,50,84,244,133,173,144,84,84,49,48,55,49,57,54,53,84,244,133,173,157,84,84,49,48,55,50,48,48,49,84,244,133,174,129,84,84,49,48,55,50,48,49,51,84,244,133,174,141,84,84,49,48,55,50,48,49,53,84,244,133,174,143,84,84,49,48,55,50,48,49,54,84,244,133,174,144,84,84,49,48,55,50,48,50,57,84,244,133,174,157,84,84,49,48,55,50,48,54,53,84,244,133,175,129,84,84,49,48,55,50,48,55,55,84,244,133,175,141,84,84,49,48,55,50,48,55,57,84,244,133,175,143,84,84,49,48,55,50,48,56,48,84,244,133,175,144,84,84,49,48,55,50,48,57,51,84,244,133,175,157,84,84,49,48,55,50,49,50,57,84,244,133,176,129,84,84,49,48,55,50,49,52,49,84,244,133,176,141,84,84,49,48,55,50,49,52,51,84,244,133,176,143,84,84,49,48,55,50,49,52,52,84,244,133,176,144,84,84,49,48,55,50,49,53,55,84,244,133,176,157,84,84,49,48,55,50,49,57,51,84,244,133,177,129,84,84,49,48,55,50,50,48,53,84,244,133,177,141,84,84,49,48,55,50,50,48,55,84,244,133,177,143,84,84,49,48,55,50,50,48,56,84,244,133,177,144,84,84,49,48,55,50,50,50,49,84,244,133,177,157,84,84,49,48,55,50,50,53,55,84,244,133,178,129,84,84,49,48,55,50,50,54,57,84,244,133,178,141,84,84,49,48,55,50,50,55,49,84,244,133,178,143,84,84,49,48,55,50,50,55,50,84,244,133,178,144,84,84,49,48,55,50,50,56,53,84,244,133,178,157,84,84,49,48,55,50,51,50,49,84,244,133,179,129,84,84,49,48,55,50,51,51,51,84,244,133,179,141,84,84,49,48,55,50,51,51,53,84,244,133,179,143,84,84,49,48,55,50,51,51,54,84,244,133,179,144,84,84,49,48,55,50,51,52,57,84,244,133,179,157,84,84,49,48,55,50,51,56,53,84,244,133,180,129,84,84,49,48,55,50,51,57,55,84,244,133,180,141,84,84,49,48,55,50,51,57,57,84,244,133,180,143,84,84,49,48,55,50,52,48,48,84,244,133,180,144,84,84,49,48,55,50,52,49,51,84,244,133,180,157,84,84,49,48,55,50,52,52,57,84,244,133,181,129,84,84,49,48,55,50,52,54,49,84,244,133,181,141,84,84,49,48,55,50,52,54,51,84,244,133,181,143,84,84,49,48,55,50,52,54,52,84,244,133,181,144,84,84,49,48,55,50,52,55,55,84,244,133,181,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22575 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22575_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22575_s.txt", Encoding.UTF8);

    public Test22575() : base(recordedRequest, recordedResponse, "accounts8d43a048d26afcd")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048d26afcd",
                        container: "containersddd934ca569845dc89778f0bd55316f0",
                        blob: "Blobbbdd740c80d149dbb6c47c9b10c913de",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20251 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20251_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20251_s.txt", Encoding.UTF8);

    public Test20251() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersca1800aaa567470781b999118df6ba97",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,52,48,57,49,49,84,243,190,136,143,84,84,49,48,52,48,57,49,50,84,243,190,136,144,84,84,49,48,52,48,57,50,53,84,243,190,136,157,84,84,49,48,52,48,57,54,49,84,243,190,137,129,84,84,49,48,52,48,57,55,51,84,243,190,137,141,84,84,49,48,52,48,57,55,53,84,243,190,137,143,84,84,49,48,52,48,57,55,54,84,243,190,137,144,84,84,49,48,52,48,57,56,57,84,243,190,137,157,84,84,49,48,52,49,48,50,53,84,243,190,138,129,84,84,49,48,52,49,48,51,55,84,243,190,138,141,84,84,49,48,52,49,48,51,57,84,243,190,138,143,84,84,49,48,52,49,48,52,48,84,243,190,138,144,84,84,49,48,52,49,48,53,51,84,243,190,138,157,84,84,49,48,52,49,48,56,57,84,243,190,139,129,84,84,49,48,52,49,49,48,49,84,243,190,139,141,84,84,49,48,52,49,49,48,51,84,243,190,139,143,84,84,49,48,52,49,49,48,52,84,243,190,139,144,84,84,49,48,52,49,49,49,55,84,243,190,139,157,84,84,49,48,52,49,49,53,51,84,243,190,140,129,84,84,49,48,52,49,49,54,53,84,243,190,140,141,84,84,49,48,52,49,49,54,55,84,243,190,140,143,84,84,49,48,52,49,49,54,56,84,243,190,140,144,84,84,49,48,52,49,49,56,49,84,243,190,140,157,84,84,49,48,52,49,50,49,54,84,243,190,141,128,84,84,49,48,52,49,50,49,55,84,243,190,141,129,84,84,49,48,52,49,50,49,56,84,243,190,141,130,84,84,49,48,52,49,50,49,57,84,243,190,141,131,84,84,49,48,52,49,50,50,48,84,243,190,141,132,84,84,49,48,52,49,50,50,49,84,243,190,141,133,84,84,49,48,52,49,50,50,50,84,243,190,141,134,84,84,49,48,52,49,50,50,51,84,243,190,141,135,84,84,49,48,52,49,50,50,52,84,243,190,141,136,84,84,49,48,52,49,50,50,53,84,243,190,141,137,84,84,49,48,52,49,50,50,54,84,243,190,141,138,84,84,49,48,52,49,50,50,55,84,243,190,141,139,84,84,49,48,52,49,50,50,56,84,243,190,141,140,84,84,49,48,52,49,50,50,57,84,243,190,141,141,84,84,49,48,52,49,50,51,48,84,243,190,141,142,84,84,49,48,52,49,50,51,49,84,243,190,141,143,84,84,49,48,52,49,50,51,50,84,243,190,141,144,84,84,49,48,52,49,50,51,51,84,243,190,141,145,84,84,49,48,52,49,50,51,52,84,243,190,141,146,84,84,49,48,52,49,50,51,53,84,243,190,141,147,84,84,49,48,52,49,50,51,54,84,243,190,141,148,84,84,49,48,52,49,50,51,55,84,243,190,141,149,84,84,49,48,52,49,50,51,56,84,243,190,141,150,84,84,49,48,52,49,50,51,57,84,243,190,141,151,84,84,49,48,52,49,50,52,48,84,243,190,141,152,84,84,49,48,52,49,50,52,49,84,243,190,141,153,84,84,49,48,52,49,50,52,50,84,243,190,141,154,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20630 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20630_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20630_s.txt", Encoding.UTF8);

    public Test20630() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers5f5b393ed8e742338d6031fb2e225092",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,55,55,48,53,55,84,244,134,189,129,84,84,49,48,55,55,48,54,57,84,244,134,189,141,84,84,49,48,55,55,48,55,49,84,244,134,189,143,84,84,49,48,55,55,48,55,50,84,244,134,189,144,84,84,49,48,55,55,48,56,53,84,244,134,189,157,84,84,49,48,55,55,49,50,49,84,244,134,190,129,84,84,49,48,55,55,49,51,51,84,244,134,190,141,84,84,49,48,55,55,49,51,53,84,244,134,190,143,84,84,49,48,55,55,49,51,54,84,244,134,190,144,84,84,49,48,55,55,49,52,57,84,244,134,190,157,84,84,49,48,55,55,49,56,53,84,244,134,191,129,84,84,49,48,55,55,49,57,55,84,244,134,191,141,84,84,49,48,55,55,49,57,57,84,244,134,191,143,84,84,49,48,55,55,50,48,48,84,244,134,191,144,84,84,49,48,55,55,50,49,51,84,244,134,191,157,84,84,49,48,55,55,50,52,57,84,244,135,128,129,84,84,49,48,55,55,50,54,49,84,244,135,128,141,84,84,49,48,55,55,50,54,51,84,244,135,128,143,84,84,49,48,55,55,50,54,52,84,244,135,128,144,84,84,49,48,55,55,50,55,55,84,244,135,128,157,84,84,49,48,55,55,51,49,50,84,244,135,129,128,84,84,49,48,55,55,51,49,51,84,244,135,129,129,84,84,49,48,55,55,51,49,52,84,244,135,129,130,84,84,49,48,55,55,51,49,53,84,244,135,129,131,84,84,49,48,55,55,51,49,54,84,244,135,129,132,84,84,49,48,55,55,51,49,55,84,244,135,129,133,84,84,49,48,55,55,51,49,56,84,244,135,129,134,84,84,49,48,55,55,51,49,57,84,244,135,129,135,84,84,49,48,55,55,51,50,48,84,244,135,129,136,84,84,49,48,55,55,51,50,49,84,244,135,129,137,84,84,49,48,55,55,51,50,50,84,244,135,129,138,84,84,49,48,55,55,51,50,51,84,244,135,129,139,84,84,49,48,55,55,51,50,52,84,244,135,129,140,84,84,49,48,55,55,51,50,53,84,244,135,129,141,84,84,49,48,55,55,51,50,54,84,244,135,129,142,84,84,49,48,55,55,51,50,55,84,244,135,129,143,84,84,49,48,55,55,51,50,56,84,244,135,129,144,84,84,49,48,55,55,51,50,57,84,244,135,129,145,84,84,49,48,55,55,51,51,48,84,244,135,129,146,84,84,49,48,55,55,51,51,49,84,244,135,129,147,84,84,49,48,55,55,51,51,50,84,244,135,129,148,84,84,49,48,55,55,51,51,51,84,244,135,129,149,84,84,49,48,55,55,51,51,52,84,244,135,129,150,84,84,49,48,55,55,51,51,53,84,244,135,129,151,84,84,49,48,55,55,51,51,54,84,244,135,129,152,84,84,49,48,55,55,51,51,55,84,244,135,129,153,84,84,49,48,55,55,51,51,56,84,244,135,129,154,84,84,49,48,55,55,51,51,57,84,244,135,129,155,84,84,49,48,55,55,51,52,48,84,244,135,129,156,84,84,49,48,55,55,51,52,49,84,244,135,129,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20977 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20977_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20977_s.txt", Encoding.UTF8);

    public Test20977() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersdf87e0f5374149afa792ac52b484870e",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,55,55,57,52,84,244,142,157,146,84,84,49,49,48,55,55,57,53,84,244,142,157,147,84,84,49,49,48,55,55,57,54,84,244,142,157,148,84,84,49,49,48,55,55,57,55,84,244,142,157,149,84,84,49,49,48,55,55,57,56,84,244,142,157,150,84,84,49,49,48,55,55,57,57,84,244,142,157,151,84,84,49,49,48,55,56,48,48,84,244,142,157,152,84,84,49,49,48,55,56,48,49,84,244,142,157,153,84,84,49,49,48,55,56,48,50,84,244,142,157,154,84,84,49,49,48,55,56,48,51,84,244,142,157,155,84,84,49,49,48,55,56,48,52,84,244,142,157,156,84,84,49,49,48,55,56,48,53,84,244,142,157,157,84,84,49,49,48,55,56,48,54,84,244,142,157,158,84,84,49,49,48,55,56,48,55,84,244,142,157,159,84,84,49,49,48,55,56,48,56,84,244,142,157,160,84,84,49,49,48,55,56,48,57,84,244,142,157,161,84,84,49,49,48,55,56,49,48,84,244,142,157,162,84,84,49,49,48,55,56,49,49,84,244,142,157,163,84,84,49,49,48,55,56,49,50,84,244,142,157,164,84,84,49,49,48,55,56,49,51,84,244,142,157,165,84,84,49,49,48,55,56,49,52,84,244,142,157,166,84,84,49,49,48,55,56,49,53,84,244,142,157,167,84,84,49,49,48,55,56,49,54,84,244,142,157,168,84,84,49,49,48,55,56,49,55,84,244,142,157,169,84,84,49,49,48,55,56,49,56,84,244,142,157,170,84,84,49,49,48,55,56,49,57,84,244,142,157,171,84,84,49,49,48,55,56,50,48,84,244,142,157,172,84,84,49,49,48,55,56,50,49,84,244,142,157,173,84,84,49,49,48,55,56,50,50,84,244,142,157,174,84,84,49,49,48,55,56,50,51,84,244,142,157,175,84,84,49,49,48,55,56,50,52,84,244,142,157,176,84,84,49,49,48,55,56,50,53,84,244,142,157,177,84,84,49,49,48,55,56,50,54,84,244,142,157,178,84,84,49,49,48,55,56,50,55,84,244,142,157,179,84,84,49,49,48,55,56,50,56,84,244,142,157,180,84,84,49,49,48,55,56,50,57,84,244,142,157,181,84,84,49,49,48,55,56,51,48,84,244,142,157,182,84,84,49,49,48,55,56,51,49,84,244,142,157,183,84,84,49,49,48,55,56,51,50,84,244,142,157,184,84,84,49,49,48,55,56,51,51,84,244,142,157,185,84,84,49,49,48,55,56,51,52,84,244,142,157,186,84,84,49,49,48,55,56,51,53,84,244,142,157,187,84,84,49,49,48,55,56,51,54,84,244,142,157,188,84,84,49,49,48,55,56,51,55,84,244,142,157,189,84,84,49,49,48,55,56,51,56,84,244,142,157,190,84,84,49,49,48,55,56,51,57,84,244,142,157,191,84,84,49,49,48,55,56,52,49,84,244,142,158,129,84,84,49,49,48,55,56,53,51,84,244,142,158,141,84,84,49,49,48,55,56,53,53,84,244,142,158,143,84,84,49,49,48,55,56,53,54,84,244,142,158,144,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20441 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20441_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20441_s.txt", Encoding.UTF8);

    public Test20441() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersee5ddc6232b847869028904d3d06a0f3",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,53,51,55,56,84,244,129,170,146,84,84,49,48,53,53,51,55,57,84,244,129,170,147,84,84,49,48,53,53,51,56,48,84,244,129,170,148,84,84,49,48,53,53,51,56,49,84,244,129,170,149,84,84,49,48,53,53,51,56,50,84,244,129,170,150,84,84,49,48,53,53,51,56,51,84,244,129,170,151,84,84,49,48,53,53,51,56,52,84,244,129,170,152,84,84,49,48,53,53,51,56,53,84,244,129,170,153,84,84,49,48,53,53,51,56,54,84,244,129,170,154,84,84,49,48,53,53,51,56,55,84,244,129,170,155,84,84,49,48,53,53,51,56,56,84,244,129,170,156,84,84,49,48,53,53,51,56,57,84,244,129,170,157,84,84,49,48,53,53,51,57,48,84,244,129,170,158,84,84,49,48,53,53,51,57,49,84,244,129,170,159,84,84,49,48,53,53,51,57,50,84,244,129,170,160,84,84,49,48,53,53,51,57,51,84,244,129,170,161,84,84,49,48,53,53,51,57,52,84,244,129,170,162,84,84,49,48,53,53,51,57,53,84,244,129,170,163,84,84,49,48,53,53,51,57,54,84,244,129,170,164,84,84,49,48,53,53,51,57,55,84,244,129,170,165,84,84,49,48,53,53,51,57,56,84,244,129,170,166,84,84,49,48,53,53,51,57,57,84,244,129,170,167,84,84,49,48,53,53,52,48,48,84,244,129,170,168,84,84,49,48,53,53,52,48,49,84,244,129,170,169,84,84,49,48,53,53,52,48,50,84,244,129,170,170,84,84,49,48,53,53,52,48,51,84,244,129,170,171,84,84,49,48,53,53,52,48,52,84,244,129,170,172,84,84,49,48,53,53,52,48,53,84,244,129,170,173,84,84,49,48,53,53,52,48,54,84,244,129,170,174,84,84,49,48,53,53,52,48,55,84,244,129,170,175,84,84,49,48,53,53,52,48,56,84,244,129,170,176,84,84,49,48,53,53,52,48,57,84,244,129,170,177,84,84,49,48,53,53,52,49,48,84,244,129,170,178,84,84,49,48,53,53,52,49,49,84,244,129,170,179,84,84,49,48,53,53,52,49,50,84,244,129,170,180,84,84,49,48,53,53,52,49,51,84,244,129,170,181,84,84,49,48,53,53,52,49,52,84,244,129,170,182,84,84,49,48,53,53,52,49,53,84,244,129,170,183,84,84,49,48,53,53,52,49,54,84,244,129,170,184,84,84,49,48,53,53,52,49,55,84,244,129,170,185,84,84,49,48,53,53,52,49,56,84,244,129,170,186,84,84,49,48,53,53,52,49,57,84,244,129,170,187,84,84,49,48,53,53,52,50,48,84,244,129,170,188,84,84,49,48,53,53,52,50,49,84,244,129,170,189,84,84,49,48,53,53,52,50,50,84,244,129,170,190,84,84,49,48,53,53,52,50,51,84,244,129,170,191,84,84,49,48,53,53,52,50,52,84,244,129,171,128,84,84,49,48,53,53,52,50,53,84,244,129,171,129,84,84,49,48,53,53,52,50,54,84,244,129,171,130,84,84,49,48,53,53,52,50,55,84,244,129,171,131,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20403 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20403_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20403_s.txt", Encoding.UTF8);

    public Test20403() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers7f83ba854dc4459da9078f97f691d28c",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,52,52,55,56,84,244,129,156,142,84,84,49,48,53,52,52,55,57,84,244,129,156,143,84,84,49,48,53,52,52,56,48,84,244,129,156,144,84,84,49,48,53,52,52,56,49,84,244,129,156,145,84,84,49,48,53,52,52,56,50,84,244,129,156,146,84,84,49,48,53,52,52,56,51,84,244,129,156,147,84,84,49,48,53,52,52,56,52,84,244,129,156,148,84,84,49,48,53,52,52,56,53,84,244,129,156,149,84,84,49,48,53,52,52,56,54,84,244,129,156,150,84,84,49,48,53,52,52,56,55,84,244,129,156,151,84,84,49,48,53,52,52,56,56,84,244,129,156,152,84,84,49,48,53,52,52,56,57,84,244,129,156,153,84,84,49,48,53,52,52,57,48,84,244,129,156,154,84,84,49,48,53,52,52,57,49,84,244,129,156,155,84,84,49,48,53,52,52,57,50,84,244,129,156,156,84,84,49,48,53,52,52,57,51,84,244,129,156,157,84,84,49,48,53,52,52,57,52,84,244,129,156,158,84,84,49,48,53,52,52,57,53,84,244,129,156,159,84,84,49,48,53,52,52,57,54,84,244,129,156,160,84,84,49,48,53,52,52,57,55,84,244,129,156,161,84,84,49,48,53,52,52,57,56,84,244,129,156,162,84,84,49,48,53,52,52,57,57,84,244,129,156,163,84,84,49,48,53,52,53,48,48,84,244,129,156,164,84,84,49,48,53,52,53,48,49,84,244,129,156,165,84,84,49,48,53,52,53,48,50,84,244,129,156,166,84,84,49,48,53,52,53,48,51,84,244,129,156,167,84,84,49,48,53,52,53,48,52,84,244,129,156,168,84,84,49,48,53,52,53,48,53,84,244,129,156,169,84,84,49,48,53,52,53,48,54,84,244,129,156,170,84,84,49,48,53,52,53,48,55,84,244,129,156,171,84,84,49,48,53,52,53,48,56,84,244,129,156,172,84,84,49,48,53,52,53,48,57,84,244,129,156,173,84,84,49,48,53,52,53,49,48,84,244,129,156,174,84,84,49,48,53,52,53,49,49,84,244,129,156,175,84,84,49,48,53,52,53,49,50,84,244,129,156,176,84,84,49,48,53,52,53,49,51,84,244,129,156,177,84,84,49,48,53,52,53,49,52,84,244,129,156,178,84,84,49,48,53,52,53,49,53,84,244,129,156,179,84,84,49,48,53,52,53,49,54,84,244,129,156,180,84,84,49,48,53,52,53,49,55,84,244,129,156,181,84,84,49,48,53,52,53,49,56,84,244,129,156,182,84,84,49,48,53,52,53,49,57,84,244,129,156,183,84,84,49,48,53,52,53,50,48,84,244,129,156,184,84,84,49,48,53,52,53,50,49,84,244,129,156,185,84,84,49,48,53,52,53,50,50,84,244,129,156,186,84,84,49,48,53,52,53,50,51,84,244,129,156,187,84,84,49,48,53,52,53,50,52,84,244,129,156,188,84,84,49,48,53,52,53,50,53,84,244,129,156,189,84,84,49,48,53,52,53,50,54,84,244,129,156,190,84,84,49,48,53,52,53,50,55,84,244,129,156,191,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22640 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22640_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22640_s.txt", Encoding.UTF8);

    public Test22640() : base(recordedRequest, recordedResponse, "accounts8d43a048e2beca5")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048e2beca5",
                        container: "containers3974e1da6923423a9845f2ce644df77d",
                        blob: "Blob9b0d62cccfa84bdcaabbf498559d8135",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20759 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20759_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20759_s.txt", Encoding.UTF8);

    public Test20759() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersc5ae22b09f3f4a3eaff829adc5876203",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,57,55,50,49,55,84,244,139,184,129,84,84,49,48,57,55,50,50,57,84,244,139,184,141,84,84,49,48,57,55,50,51,49,84,244,139,184,143,84,84,49,48,57,55,50,51,50,84,244,139,184,144,84,84,49,48,57,55,50,52,53,84,244,139,184,157,84,84,49,48,57,55,50,56,49,84,244,139,185,129,84,84,49,48,57,55,50,57,51,84,244,139,185,141,84,84,49,48,57,55,50,57,53,84,244,139,185,143,84,84,49,48,57,55,50,57,54,84,244,139,185,144,84,84,49,48,57,55,51,48,57,84,244,139,185,157,84,84,49,48,57,55,51,52,53,84,244,139,186,129,84,84,49,48,57,55,51,53,55,84,244,139,186,141,84,84,49,48,57,55,51,53,57,84,244,139,186,143,84,84,49,48,57,55,51,54,48,84,244,139,186,144,84,84,49,48,57,55,51,55,51,84,244,139,186,157,84,84,49,48,57,55,52,48,57,84,244,139,187,129,84,84,49,48,57,55,52,50,49,84,244,139,187,141,84,84,49,48,57,55,52,50,51,84,244,139,187,143,84,84,49,48,57,55,52,50,52,84,244,139,187,144,84,84,49,48,57,55,52,51,55,84,244,139,187,157,84,84,49,48,57,55,52,55,51,84,244,139,188,129,84,84,49,48,57,55,52,56,53,84,244,139,188,141,84,84,49,48,57,55,52,56,55,84,244,139,188,143,84,84,49,48,57,55,52,56,56,84,244,139,188,144,84,84,49,48,57,55,53,48,49,84,244,139,188,157,84,84,49,48,57,55,53,51,55,84,244,139,189,129,84,84,49,48,57,55,53,52,57,84,244,139,189,141,84,84,49,48,57,55,53,53,49,84,244,139,189,143,84,84,49,48,57,55,53,53,50,84,244,139,189,144,84,84,49,48,57,55,53,54,53,84,244,139,189,157,84,84,49,48,57,55,54,48,49,84,244,139,190,129,84,84,49,48,57,55,54,49,51,84,244,139,190,141,84,84,49,48,57,55,54,49,53,84,244,139,190,143,84,84,49,48,57,55,54,49,54,84,244,139,190,144,84,84,49,48,57,55,54,50,57,84,244,139,190,157,84,84,49,48,57,55,54,54,53,84,244,139,191,129,84,84,49,48,57,55,54,55,55,84,244,139,191,141,84,84,49,48,57,55,54,55,57,84,244,139,191,143,84,84,49,48,57,55,54,56,48,84,244,139,191,144,84,84,49,48,57,55,54,57,51,84,244,139,191,157,84,84,49,48,57,55,55,50,57,84,244,140,128,129,84,84,49,48,57,55,55,52,49,84,244,140,128,141,84,84,49,48,57,55,55,52,51,84,244,140,128,143,84,84,49,48,57,55,55,52,52,84,244,140,128,144,84,84,49,48,57,55,55,53,55,84,244,140,128,157,84,84,49,48,57,55,55,57,50,84,244,140,129,128,84,84,49,48,57,55,55,57,51,84,244,140,129,129,84,84,49,48,57,55,55,57,52,84,244,140,129,130,84,84,49,48,57,55,55,57,53,84,244,140,129,131,84,84,49,48,57,55,55,57,54,84,244,140,129,132,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20124 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20124_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20124_s.txt", Encoding.UTF8);

    public Test20124() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers02552a2396c44255a61dd19b9714b3b6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,50,48,55,56,56,84,243,185,141,180,84,84,49,48,50,48,55,56,57,84,243,185,141,181,84,84,49,48,50,48,55,57,48,84,243,185,141,182,84,84,49,48,50,48,55,57,49,84,243,185,141,183,84,84,49,48,50,48,55,57,50,84,243,185,141,184,84,84,49,48,50,48,55,57,51,84,243,185,141,185,84,84,49,48,50,48,55,57,52,84,243,185,141,186,84,84,49,48,50,48,55,57,53,84,243,185,141,187,84,84,49,48,50,48,55,57,54,84,243,185,141,188,84,84,49,48,50,48,55,57,55,84,243,185,141,189,84,84,49,48,50,48,55,57,56,84,243,185,141,190,84,84,49,48,50,48,55,57,57,84,243,185,141,191,84,84,49,48,50,48,56,48,49,84,243,185,142,129,84,84,49,48,50,48,56,49,51,84,243,185,142,141,84,84,49,48,50,48,56,49,53,84,243,185,142,143,84,84,49,48,50,48,56,49,54,84,243,185,142,144,84,84,49,48,50,48,56,50,57,84,243,185,142,157,84,84,49,48,50,48,56,54,52,84,243,185,143,128,84,84,49,48,50,48,56,54,53,84,243,185,143,129,84,84,49,48,50,48,56,54,54,84,243,185,143,130,84,84,49,48,50,48,56,54,55,84,243,185,143,131,84,84,49,48,50,48,56,54,56,84,243,185,143,132,84,84,49,48,50,48,56,54,57,84,243,185,143,133,84,84,49,48,50,48,56,55,48,84,243,185,143,134,84,84,49,48,50,48,56,55,49,84,243,185,143,135,84,84,49,48,50,48,56,55,50,84,243,185,143,136,84,84,49,48,50,48,56,55,51,84,243,185,143,137,84,84,49,48,50,48,56,55,52,84,243,185,143,138,84,84,49,48,50,48,56,55,53,84,243,185,143,139,84,84,49,48,50,48,56,55,54,84,243,185,143,140,84,84,49,48,50,48,56,55,55,84,243,185,143,141,84,84,49,48,50,48,56,55,56,84,243,185,143,142,84,84,49,48,50,48,56,55,57,84,243,185,143,143,84,84,49,48,50,48,56,56,48,84,243,185,143,144,84,84,49,48,50,48,56,56,49,84,243,185,143,145,84,84,49,48,50,48,56,56,50,84,243,185,143,146,84,84,49,48,50,48,56,56,51,84,243,185,143,147,84,84,49,48,50,48,56,56,52,84,243,185,143,148,84,84,49,48,50,48,56,56,53,84,243,185,143,149,84,84,49,48,50,48,56,56,54,84,243,185,143,150,84,84,49,48,50,48,56,56,55,84,243,185,143,151,84,84,49,48,50,48,56,56,56,84,243,185,143,152,84,84,49,48,50,48,56,56,57,84,243,185,143,153,84,84,49,48,50,48,56,57,48,84,243,185,143,154,84,84,49,48,50,48,56,57,49,84,243,185,143,155,84,84,49,48,50,48,56,57,50,84,243,185,143,156,84,84,49,48,50,48,56,57,51,84,243,185,143,157,84,84,49,48,50,48,56,57,52,84,243,185,143,158,84,84,49,48,50,48,56,57,53,84,243,185,143,159,84,84,49,48,50,48,56,57,54,84,243,185,143,160,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22641 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22641_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22641_s.txt", Encoding.UTF8);

    public Test22641() : base(recordedRequest, recordedResponse, "accounts8d43a048e2beca5")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048e2beca5",
                        container: "containers3974e1da6923423a9845f2ce644df77d",
                        blob: "Blob4a269701a1964c108c000b9802167dd3",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19959 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19959_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19959_s.txt", Encoding.UTF8);

    public Test19959() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersbf5ecfbea5a24d8a8188936c9be6fa20",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,57,52,56,57,51,84,243,178,185,141,84,84,57,57,52,56,57,53,84,243,178,185,143,84,84,57,57,52,56,57,54,84,243,178,185,144,84,84,57,57,52,57,48,57,84,243,178,185,157,84,84,57,57,52,57,52,53,84,243,178,186,129,84,84,57,57,52,57,53,55,84,243,178,186,141,84,84,57,57,52,57,53,57,84,243,178,186,143,84,84,57,57,52,57,54,48,84,243,178,186,144,84,84,57,57,52,57,55,51,84,243,178,186,157,84,84,57,57,53,48,48,57,84,243,178,187,129,84,84,57,57,53,48,50,49,84,243,178,187,141,84,84,57,57,53,48,50,51,84,243,178,187,143,84,84,57,57,53,48,50,52,84,243,178,187,144,84,84,57,57,53,48,51,55,84,243,178,187,157,84,84,57,57,53,48,55,51,84,243,178,188,129,84,84,57,57,53,48,56,53,84,243,178,188,141,84,84,57,57,53,48,56,55,84,243,178,188,143,84,84,57,57,53,48,56,56,84,243,178,188,144,84,84,57,57,53,49,48,49,84,243,178,188,157,84,84,57,57,53,49,51,55,84,243,178,189,129,84,84,57,57,53,49,52,57,84,243,178,189,141,84,84,57,57,53,49,53,49,84,243,178,189,143,84,84,57,57,53,49,53,50,84,243,178,189,144,84,84,57,57,53,49,54,53,84,243,178,189,157,84,84,57,57,53,50,48,49,84,243,178,190,129,84,84,57,57,53,50,49,51,84,243,178,190,141,84,84,57,57,53,50,49,53,84,243,178,190,143,84,84,57,57,53,50,49,54,84,243,178,190,144,84,84,57,57,53,50,50,57,84,243,178,190,157,84,84,57,57,53,50,54,53,84,243,178,191,129,84,84,57,57,53,50,55,55,84,243,178,191,141,84,84,57,57,53,50,55,57,84,243,178,191,143,84,84,57,57,53,50,56,48,84,243,178,191,144,84,84,57,57,53,50,57,51,84,243,178,191,157,84,84,57,57,53,51,50,57,84,243,179,128,129,84,84,57,57,53,51,52,49,84,243,179,128,141,84,84,57,57,53,51,52,51,84,243,179,128,143,84,84,57,57,53,51,52,52,84,243,179,128,144,84,84,57,57,53,51,53,55,84,243,179,128,157,84,84,57,57,53,51,57,50,84,243,179,129,128,84,84,57,57,53,51,57,51,84,243,179,129,129,84,84,57,57,53,51,57,52,84,243,179,129,130,84,84,57,57,53,51,57,53,84,243,179,129,131,84,84,57,57,53,51,57,54,84,243,179,129,132,84,84,57,57,53,51,57,55,84,243,179,129,133,84,84,57,57,53,51,57,56,84,243,179,129,134,84,84,57,57,53,51,57,57,84,243,179,129,135,84,84,57,57,53,52,48,48,84,243,179,129,136,84,84,57,57,53,52,48,49,84,243,179,129,137,84,84,57,57,53,52,48,50,84,243,179,129,138,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22576 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22576_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22576_s.txt", Encoding.UTF8);

    public Test22576() : base(recordedRequest, recordedResponse, "accounts8d43a048d26afcd")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048d26afcd",
                        container: "containersddd934ca569845dc89778f0bd55316f0",
                        blob: "Bloba721a1d981464c5e83298cf5b895a18c",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22577 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22577_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22577_s.txt", Encoding.UTF8);

    public Test22577() : base(recordedRequest, recordedResponse, "accounts8d43a048d26afcd")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048d26afcd",
                        container: "containersddd934ca569845dc89778f0bd55316f0",
                        blob: "Blob8c2500ad88a34fcfa9505cbdafb13b2f",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20310 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20310_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20310_s.txt", Encoding.UTF8);

    public Test20310() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers412024b733e349978217e6093afed677",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,52,57,53,54,52,84,244,128,143,156,84,84,49,48,52,57,53,54,53,84,244,128,143,157,84,84,49,48,52,57,53,54,54,84,244,128,143,158,84,84,49,48,52,57,53,54,55,84,244,128,143,159,84,84,49,48,52,57,53,54,56,84,244,128,143,160,84,84,49,48,52,57,53,54,57,84,244,128,143,161,84,84,49,48,52,57,53,55,48,84,244,128,143,162,84,84,49,48,52,57,53,55,49,84,244,128,143,163,84,84,49,48,52,57,53,55,50,84,244,128,143,164,84,84,49,48,52,57,53,55,51,84,244,128,143,165,84,84,49,48,52,57,53,55,52,84,244,128,143,166,84,84,49,48,52,57,53,55,53,84,244,128,143,167,84,84,49,48,52,57,53,55,54,84,244,128,143,168,84,84,49,48,52,57,53,55,55,84,244,128,143,169,84,84,49,48,52,57,53,55,56,84,244,128,143,170,84,84,49,48,52,57,53,55,57,84,244,128,143,171,84,84,49,48,52,57,53,56,48,84,244,128,143,172,84,84,49,48,52,57,53,56,49,84,244,128,143,173,84,84,49,48,52,57,53,56,50,84,244,128,143,174,84,84,49,48,52,57,53,56,51,84,244,128,143,175,84,84,49,48,52,57,53,56,52,84,244,128,143,176,84,84,49,48,52,57,53,56,53,84,244,128,143,177,84,84,49,48,52,57,53,56,54,84,244,128,143,178,84,84,49,48,52,57,53,56,55,84,244,128,143,179,84,84,49,48,52,57,53,56,56,84,244,128,143,180,84,84,49,48,52,57,53,56,57,84,244,128,143,181,84,84,49,48,52,57,53,57,48,84,244,128,143,182,84,84,49,48,52,57,53,57,49,84,244,128,143,183,84,84,49,48,52,57,53,57,50,84,244,128,143,184,84,84,49,48,52,57,53,57,51,84,244,128,143,185,84,84,49,48,52,57,53,57,52,84,244,128,143,186,84,84,49,48,52,57,53,57,53,84,244,128,143,187,84,84,49,48,52,57,53,57,54,84,244,128,143,188,84,84,49,48,52,57,53,57,55,84,244,128,143,189,84,84,49,48,52,57,53,57,56,84,244,128,143,190,84,84,49,48,52,57,53,57,57,84,244,128,143,191,84,84,49,48,52,57,54,48,48,84,244,128,144,128,84,84,49,48,52,57,54,48,49,84,244,128,144,129,84,84,49,48,52,57,54,48,50,84,244,128,144,130,84,84,49,48,52,57,54,48,51,84,244,128,144,131,84,84,49,48,52,57,54,48,52,84,244,128,144,132,84,84,49,48,52,57,54,48,53,84,244,128,144,133,84,84,49,48,52,57,54,48,54,84,244,128,144,134,84,84,49,48,52,57,54,48,55,84,244,128,144,135,84,84,49,48,52,57,54,48,56,84,244,128,144,136,84,84,49,48,52,57,54,48,57,84,244,128,144,137,84,84,49,48,52,57,54,49,48,84,244,128,144,138,84,84,49,48,52,57,54,49,49,84,244,128,144,139,84,84,49,48,52,57,54,49,50,84,244,128,144,140,84,84,49,48,52,57,54,49,51,84,244,128,144,141,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20027 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20027_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20027_s.txt", Encoding.UTF8);

    public Test20027() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers612d6939acd44cdbbba30cffbd18a713",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,48,52,56,48,49,84,243,181,148,129,84,84,49,48,48,52,56,49,51,84,243,181,148,141,84,84,49,48,48,52,56,49,53,84,243,181,148,143,84,84,49,48,48,52,56,49,54,84,243,181,148,144,84,84,49,48,48,52,56,50,57,84,243,181,148,157,84,84,49,48,48,52,56,54,53,84,243,181,149,129,84,84,49,48,48,52,56,55,55,84,243,181,149,141,84,84,49,48,48,52,56,55,57,84,243,181,149,143,84,84,49,48,48,52,56,56,48,84,243,181,149,144,84,84,49,48,48,52,56,57,51,84,243,181,149,157,84,84,49,48,48,52,57,50,57,84,243,181,150,129,84,84,49,48,48,52,57,52,49,84,243,181,150,141,84,84,49,48,48,52,57,52,51,84,243,181,150,143,84,84,49,48,48,52,57,52,52,84,243,181,150,144,84,84,49,48,48,52,57,53,55,84,243,181,150,157,84,84,49,48,48,52,57,57,51,84,243,181,151,129,84,84,49,48,48,53,48,48,53,84,243,181,151,141,84,84,49,48,48,53,48,48,55,84,243,181,151,143,84,84,49,48,48,53,48,48,56,84,243,181,151,144,84,84,49,48,48,53,48,50,49,84,243,181,151,157,84,84,49,48,48,53,48,53,55,84,243,181,152,129,84,84,49,48,48,53,48,54,57,84,243,181,152,141,84,84,49,48,48,53,48,55,49,84,243,181,152,143,84,84,49,48,48,53,48,55,50,84,243,181,152,144,84,84,49,48,48,53,48,56,53,84,243,181,152,157,84,84,49,48,48,53,49,50,49,84,243,181,153,129,84,84,49,48,48,53,49,51,51,84,243,181,153,141,84,84,49,48,48,53,49,51,53,84,243,181,153,143,84,84,49,48,48,53,49,51,54,84,243,181,153,144,84,84,49,48,48,53,49,52,57,84,243,181,153,157,84,84,49,48,48,53,49,56,53,84,243,181,154,129,84,84,49,48,48,53,49,57,55,84,243,181,154,141,84,84,49,48,48,53,49,57,57,84,243,181,154,143,84,84,49,48,48,53,50,48,48,84,243,181,154,144,84,84,49,48,48,53,50,49,51,84,243,181,154,157,84,84,49,48,48,53,50,52,57,84,243,181,155,129,84,84,49,48,48,53,50,54,49,84,243,181,155,141,84,84,49,48,48,53,50,54,51,84,243,181,155,143,84,84,49,48,48,53,50,54,52,84,243,181,155,144,84,84,49,48,48,53,50,55,55,84,243,181,155,157,84,84,49,48,48,53,51,49,51,84,243,181,156,129,84,84,49,48,48,53,51,50,53,84,243,181,156,141,84,84,49,48,48,53,51,50,55,84,243,181,156,143,84,84,49,48,48,53,51,50,56,84,243,181,156,144,84,84,49,48,48,53,51,52,49,84,243,181,156,157,84,84,49,48,48,53,51,55,54,84,243,181,157,128,84,84,49,48,48,53,51,55,55,84,243,181,157,129,84,84,49,48,48,53,51,55,56,84,243,181,157,130,84,84,49,48,48,53,51,55,57,84,243,181,157,131,84,84,49,48,48,53,51,56,48,84,243,181,157,132,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20632 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20632_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20632_s.txt", Encoding.UTF8);

    public Test20632() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers5f5b393ed8e742338d6031fb2e225092",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,55,55,51,52,50,84,244,135,129,158,84,84,49,48,55,55,51,52,51,84,244,135,129,159,84,84,49,48,55,55,51,52,52,84,244,135,129,160,84,84,49,48,55,55,51,52,53,84,244,135,129,161,84,84,49,48,55,55,51,52,54,84,244,135,129,162,84,84,49,48,55,55,51,52,55,84,244,135,129,163,84,84,49,48,55,55,51,52,56,84,244,135,129,164,84,84,49,48,55,55,51,52,57,84,244,135,129,165,84,84,49,48,55,55,51,53,48,84,244,135,129,166,84,84,49,48,55,55,51,53,49,84,244,135,129,167,84,84,49,48,55,55,51,53,50,84,244,135,129,168,84,84,49,48,55,55,51,53,51,84,244,135,129,169,84,84,49,48,55,55,51,53,52,84,244,135,129,170,84,84,49,48,55,55,51,53,53,84,244,135,129,171,84,84,49,48,55,55,51,53,54,84,244,135,129,172,84,84,49,48,55,55,51,53,55,84,244,135,129,173,84,84,49,48,55,55,51,53,56,84,244,135,129,174,84,84,49,48,55,55,51,53,57,84,244,135,129,175,84,84,49,48,55,55,51,54,48,84,244,135,129,176,84,84,49,48,55,55,51,54,49,84,244,135,129,177,84,84,49,48,55,55,51,54,50,84,244,135,129,178,84,84,49,48,55,55,51,54,51,84,244,135,129,179,84,84,49,48,55,55,51,54,52,84,244,135,129,180,84,84,49,48,55,55,51,54,53,84,244,135,129,181,84,84,49,48,55,55,51,54,54,84,244,135,129,182,84,84,49,48,55,55,51,54,55,84,244,135,129,183,84,84,49,48,55,55,51,54,56,84,244,135,129,184,84,84,49,48,55,55,51,54,57,84,244,135,129,185,84,84,49,48,55,55,51,55,48,84,244,135,129,186,84,84,49,48,55,55,51,55,49,84,244,135,129,187,84,84,49,48,55,55,51,55,50,84,244,135,129,188,84,84,49,48,55,55,51,55,51,84,244,135,129,189,84,84,49,48,55,55,51,55,52,84,244,135,129,190,84,84,49,48,55,55,51,55,53,84,244,135,129,191,84,84,49,48,55,55,51,55,55,84,244,135,130,129,84,84,49,48,55,55,51,56,57,84,244,135,130,141,84,84,49,48,55,55,51,57,49,84,244,135,130,143,84,84,49,48,55,55,51,57,50,84,244,135,130,144,84,84,49,48,55,55,52,48,53,84,244,135,130,157,84,84,49,48,55,55,52,52,49,84,244,135,131,129,84,84,49,48,55,55,52,53,51,84,244,135,131,141,84,84,49,48,55,55,52,53,53,84,244,135,131,143,84,84,49,48,55,55,52,53,54,84,244,135,131,144,84,84,49,48,55,55,52,54,57,84,244,135,131,157,84,84,49,48,55,55,53,48,53,84,244,135,132,129,84,84,49,48,55,55,53,49,55,84,244,135,132,141,84,84,49,48,55,55,53,49,57,84,244,135,132,143,84,84,49,48,55,55,53,50,48,84,244,135,132,144,84,84,49,48,55,55,53,51,51,84,244,135,132,157,84,84,49,48,55,55,53,54,57,84,244,135,133,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20183 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20183_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20183_s.txt", Encoding.UTF8);

    public Test20183() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers2b6cdd6684eb4500abcaa682adc323b7",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,50,57,49,53,57,84,243,187,144,167,84,84,49,48,50,57,49,54,48,84,243,187,144,168,84,84,49,48,50,57,49,54,49,84,243,187,144,169,84,84,49,48,50,57,49,54,50,84,243,187,144,170,84,84,49,48,50,57,49,54,51,84,243,187,144,171,84,84,49,48,50,57,49,54,52,84,243,187,144,172,84,84,49,48,50,57,49,54,53,84,243,187,144,173,84,84,49,48,50,57,49,54,54,84,243,187,144,174,84,84,49,48,50,57,49,54,55,84,243,187,144,175,84,84,49,48,50,57,49,54,56,84,243,187,144,176,84,84,49,48,50,57,49,54,57,84,243,187,144,177,84,84,49,48,50,57,49,55,48,84,243,187,144,178,84,84,49,48,50,57,49,55,49,84,243,187,144,179,84,84,49,48,50,57,49,55,50,84,243,187,144,180,84,84,49,48,50,57,49,55,51,84,243,187,144,181,84,84,49,48,50,57,49,55,52,84,243,187,144,182,84,84,49,48,50,57,49,55,53,84,243,187,144,183,84,84,49,48,50,57,49,55,54,84,243,187,144,184,84,84,49,48,50,57,49,55,55,84,243,187,144,185,84,84,49,48,50,57,49,55,56,84,243,187,144,186,84,84,49,48,50,57,49,55,57,84,243,187,144,187,84,84,49,48,50,57,49,56,48,84,243,187,144,188,84,84,49,48,50,57,49,56,49,84,243,187,144,189,84,84,49,48,50,57,49,56,50,84,243,187,144,190,84,84,49,48,50,57,49,56,51,84,243,187,144,191,84,84,49,48,50,57,49,56,53,84,243,187,145,129,84,84,49,48,50,57,49,57,55,84,243,187,145,141,84,84,49,48,50,57,49,57,57,84,243,187,145,143,84,84,49,48,50,57,50,48,48,84,243,187,145,144,84,84,49,48,50,57,50,49,51,84,243,187,145,157,84,84,49,48,50,57,50,52,57,84,243,187,146,129,84,84,49,48,50,57,50,54,49,84,243,187,146,141,84,84,49,48,50,57,50,54,51,84,243,187,146,143,84,84,49,48,50,57,50,54,52,84,243,187,146,144,84,84,49,48,50,57,50,55,55,84,243,187,146,157,84,84,49,48,50,57,51,49,51,84,243,187,147,129,84,84,49,48,50,57,51,50,53,84,243,187,147,141,84,84,49,48,50,57,51,50,55,84,243,187,147,143,84,84,49,48,50,57,51,50,56,84,243,187,147,144,84,84,49,48,50,57,51,52,49,84,243,187,147,157,84,84,49,48,50,57,51,55,55,84,243,187,148,129,84,84,49,48,50,57,51,56,57,84,243,187,148,141,84,84,49,48,50,57,51,57,49,84,243,187,148,143,84,84,49,48,50,57,51,57,50,84,243,187,148,144,84,84,49,48,50,57,52,48,53,84,243,187,148,157,84,84,49,48,50,57,52,52,49,84,243,187,149,129,84,84,49,48,50,57,52,53,51,84,243,187,149,141,84,84,49,48,50,57,52,53,53,84,243,187,149,143,84,84,49,48,50,57,52,53,54,84,243,187,149,144,84,84,49,48,50,57,52,54,57,84,243,187,149,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22578 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22578_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22578_s.txt", Encoding.UTF8);

    public Test22578() : base(recordedRequest, recordedResponse, "accounts8d43a048d26afcd")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048d26afcd",
                        container: "containersddd934ca569845dc89778f0bd55316f0",
                        blob: "Blob558e8ff275ea4236b549813236597aad",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20792 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20792_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20792_s.txt", Encoding.UTF8);

    public Test20792() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers8240a720eb234783afd6a68d24f64161",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,49,57,49,57,84,244,141,129,159,84,84,49,49,48,49,57,50,48,84,244,141,129,160,84,84,49,49,48,49,57,50,49,84,244,141,129,161,84,84,49,49,48,49,57,50,50,84,244,141,129,162,84,84,49,49,48,49,57,50,51,84,244,141,129,163,84,84,49,49,48,49,57,50,52,84,244,141,129,164,84,84,49,49,48,49,57,50,53,84,244,141,129,165,84,84,49,49,48,49,57,50,54,84,244,141,129,166,84,84,49,49,48,49,57,50,55,84,244,141,129,167,84,84,49,49,48,49,57,50,56,84,244,141,129,168,84,84,49,49,48,49,57,50,57,84,244,141,129,169,84,84,49,49,48,49,57,51,48,84,244,141,129,170,84,84,49,49,48,49,57,51,49,84,244,141,129,171,84,84,49,49,48,49,57,51,50,84,244,141,129,172,84,84,49,49,48,49,57,51,51,84,244,141,129,173,84,84,49,49,48,49,57,51,52,84,244,141,129,174,84,84,49,49,48,49,57,51,53,84,244,141,129,175,84,84,49,49,48,49,57,51,54,84,244,141,129,176,84,84,49,49,48,49,57,51,55,84,244,141,129,177,84,84,49,49,48,49,57,51,56,84,244,141,129,178,84,84,49,49,48,49,57,51,57,84,244,141,129,179,84,84,49,49,48,49,57,52,48,84,244,141,129,180,84,84,49,49,48,49,57,52,49,84,244,141,129,181,84,84,49,49,48,49,57,52,50,84,244,141,129,182,84,84,49,49,48,49,57,52,51,84,244,141,129,183,84,84,49,49,48,49,57,52,52,84,244,141,129,184,84,84,49,49,48,49,57,52,53,84,244,141,129,185,84,84,49,49,48,49,57,52,54,84,244,141,129,186,84,84,49,49,48,49,57,52,55,84,244,141,129,187,84,84,49,49,48,49,57,52,56,84,244,141,129,188,84,84,49,49,48,49,57,52,57,84,244,141,129,189,84,84,49,49,48,49,57,53,48,84,244,141,129,190,84,84,49,49,48,49,57,53,49,84,244,141,129,191,84,84,49,49,48,49,57,53,50,84,244,141,130,128,84,84,49,49,48,49,57,53,51,84,244,141,130,129,84,84,49,49,48,49,57,53,52,84,244,141,130,130,84,84,49,49,48,49,57,53,53,84,244,141,130,131,84,84,49,49,48,49,57,53,54,84,244,141,130,132,84,84,49,49,48,49,57,53,55,84,244,141,130,133,84,84,49,49,48,49,57,53,56,84,244,141,130,134,84,84,49,49,48,49,57,53,57,84,244,141,130,135,84,84,49,49,48,49,57,54,48,84,244,141,130,136,84,84,49,49,48,49,57,54,49,84,244,141,130,137,84,84,49,49,48,49,57,54,50,84,244,141,130,138,84,84,49,49,48,49,57,54,51,84,244,141,130,139,84,84,49,49,48,49,57,54,52,84,244,141,130,140,84,84,49,49,48,49,57,54,53,84,244,141,130,141,84,84,49,49,48,49,57,54,54,84,244,141,130,142,84,84,49,49,48,49,57,54,55,84,244,141,130,143,84,84,49,49,48,49,57,54,56,84,244,141,130,144,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22642 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22642_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22642_s.txt", Encoding.UTF8);

    public Test22642() : base(recordedRequest, recordedResponse, "accounts8d43a048e2beca5")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048e2beca5",
                        container: "containers3974e1da6923423a9845f2ce644df77d",
                        blob: "Blob504c0b8d7b5a4a7986a8da22526814c8",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22643 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22643_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22643_s.txt", Encoding.UTF8);

    public Test22643() : base(recordedRequest, recordedResponse, "accounts8d43a048e2beca5")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048e2beca5",
                        container: "containers3974e1da6923423a9845f2ce644df77d",
                        blob: "Blob86e52949bf5b4a89a2ad1a0f44e43b40",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19904 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19904_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19904_s.txt", Encoding.UTF8);

    public Test19904() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersf0a96ab3064046f8a2fc77e6e3ebae9e",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,56,53,56,48,53,84,243,176,171,141,84,84,57,56,53,56,48,55,84,243,176,171,143,84,84,57,56,53,56,48,56,84,243,176,171,144,84,84,57,56,53,56,50,49,84,243,176,171,157,84,84,57,56,53,56,53,55,84,243,176,172,129,84,84,57,56,53,56,54,57,84,243,176,172,141,84,84,57,56,53,56,55,49,84,243,176,172,143,84,84,57,56,53,56,55,50,84,243,176,172,144,84,84,57,56,53,56,56,53,84,243,176,172,157,84,84,57,56,53,57,50,49,84,243,176,173,129,84,84,57,56,53,57,51,51,84,243,176,173,141,84,84,57,56,53,57,51,53,84,243,176,173,143,84,84,57,56,53,57,51,54,84,243,176,173,144,84,84,57,56,53,57,52,57,84,243,176,173,157,84,84,57,56,53,57,56,53,84,243,176,174,129,84,84,57,56,53,57,57,55,84,243,176,174,141,84,84,57,56,53,57,57,57,84,243,176,174,143,84,84,57,56,54,48,48,48,84,243,176,174,144,84,84,57,56,54,48,49,51,84,243,176,174,157,84,84,57,56,54,48,52,57,84,243,176,175,129,84,84,57,56,54,48,54,49,84,243,176,175,141,84,84,57,56,54,48,54,51,84,243,176,175,143,84,84,57,56,54,48,54,52,84,243,176,175,144,84,84,57,56,54,48,55,55,84,243,176,175,157,84,84,57,56,54,49,49,51,84,243,176,176,129,84,84,57,56,54,49,50,53,84,243,176,176,141,84,84,57,56,54,49,50,55,84,243,176,176,143,84,84,57,56,54,49,50,56,84,243,176,176,144,84,84,57,56,54,49,52,49,84,243,176,176,157,84,84,57,56,54,49,55,55,84,243,176,177,129,84,84,57,56,54,49,56,57,84,243,176,177,141,84,84,57,56,54,49,57,49,84,243,176,177,143,84,84,57,56,54,49,57,50,84,243,176,177,144,84,84,57,56,54,50,48,53,84,243,176,177,157,84,84,57,56,54,50,52,49,84,243,176,178,129,84,84,57,56,54,50,53,51,84,243,176,178,141,84,84,57,56,54,50,53,53,84,243,176,178,143,84,84,57,56,54,50,53,54,84,243,176,178,144,84,84,57,56,54,50,54,57,84,243,176,178,157,84,84,57,56,54,51,48,53,84,243,176,179,129,84,84,57,56,54,51,49,55,84,243,176,179,141,84,84,57,56,54,51,49,57,84,243,176,179,143,84,84,57,56,54,51,50,48,84,243,176,179,144,84,84,57,56,54,51,51,51,84,243,176,179,157,84,84,57,56,54,51,54,57,84,243,176,180,129,84,84,57,56,54,51,56,49,84,243,176,180,141,84,84,57,56,54,51,56,51,84,243,176,180,143,84,84,57,56,54,51,56,52,84,243,176,180,144,84,84,57,56,54,51,57,55,84,243,176,180,157,84,84,57,56,54,52,51,51,84,243,176,181,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20505 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20505_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20505_s.txt", Encoding.UTF8);

    public Test20505() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers3bfa703d74a140e499ecce701b962b8c",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,55,54,51,54,84,244,130,141,164,84,84,49,48,53,55,54,51,55,84,244,130,141,165,84,84,49,48,53,55,54,51,56,84,244,130,141,166,84,84,49,48,53,55,54,51,57,84,244,130,141,167,84,84,49,48,53,55,54,52,48,84,244,130,141,168,84,84,49,48,53,55,54,52,49,84,244,130,141,169,84,84,49,48,53,55,54,52,50,84,244,130,141,170,84,84,49,48,53,55,54,52,51,84,244,130,141,171,84,84,49,48,53,55,54,52,52,84,244,130,141,172,84,84,49,48,53,55,54,52,53,84,244,130,141,173,84,84,49,48,53,55,54,52,54,84,244,130,141,174,84,84,49,48,53,55,54,52,55,84,244,130,141,175,84,84,49,48,53,55,54,52,56,84,244,130,141,176,84,84,49,48,53,55,54,52,57,84,244,130,141,177,84,84,49,48,53,55,54,53,48,84,244,130,141,178,84,84,49,48,53,55,54,53,49,84,244,130,141,179,84,84,49,48,53,55,54,53,50,84,244,130,141,180,84,84,49,48,53,55,54,53,51,84,244,130,141,181,84,84,49,48,53,55,54,53,52,84,244,130,141,182,84,84,49,48,53,55,54,53,53,84,244,130,141,183,84,84,49,48,53,55,54,53,54,84,244,130,141,184,84,84,49,48,53,55,54,53,55,84,244,130,141,185,84,84,49,48,53,55,54,53,56,84,244,130,141,186,84,84,49,48,53,55,54,53,57,84,244,130,141,187,84,84,49,48,53,55,54,54,48,84,244,130,141,188,84,84,49,48,53,55,54,54,49,84,244,130,141,189,84,84,49,48,53,55,54,54,50,84,244,130,141,190,84,84,49,48,53,55,54,54,51,84,244,130,141,191,84,84,49,48,53,55,54,54,53,84,244,130,142,129,84,84,49,48,53,55,54,55,55,84,244,130,142,141,84,84,49,48,53,55,54,55,57,84,244,130,142,143,84,84,49,48,53,55,54,56,48,84,244,130,142,144,84,84,49,48,53,55,54,57,51,84,244,130,142,157,84,84,49,48,53,55,55,50,56,84,244,130,143,128,84,84,49,48,53,55,55,50,57,84,244,130,143,129,84,84,49,48,53,55,55,51,48,84,244,130,143,130,84,84,49,48,53,55,55,51,49,84,244,130,143,131,84,84,49,48,53,55,55,51,50,84,244,130,143,132,84,84,49,48,53,55,55,51,51,84,244,130,143,133,84,84,49,48,53,55,55,51,52,84,244,130,143,134,84,84,49,48,53,55,55,51,53,84,244,130,143,135,84,84,49,48,53,55,55,51,54,84,244,130,143,136,84,84,49,48,53,55,55,51,55,84,244,130,143,137,84,84,49,48,53,55,55,51,56,84,244,130,143,138,84,84,49,48,53,55,55,51,57,84,244,130,143,139,84,84,49,48,53,55,55,52,48,84,244,130,143,140,84,84,49,48,53,55,55,52,49,84,244,130,143,141,84,84,49,48,53,55,55,52,50,84,244,130,143,142,84,84,49,48,53,55,55,52,51,84,244,130,143,143,84,84,49,48,53,55,55,52,52,84,244,130,143,144,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20348 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20348_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20348_s.txt", Encoding.UTF8);

    public Test20348() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers412024b733e349978217e6093afed677",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,51,50,50,56,84,244,129,136,172,84,84,49,48,53,51,50,50,57,84,244,129,136,173,84,84,49,48,53,51,50,51,48,84,244,129,136,174,84,84,49,48,53,51,50,51,49,84,244,129,136,175,84,84,49,48,53,51,50,51,50,84,244,129,136,176,84,84,49,48,53,51,50,51,51,84,244,129,136,177,84,84,49,48,53,51,50,51,52,84,244,129,136,178,84,84,49,48,53,51,50,51,53,84,244,129,136,179,84,84,49,48,53,51,50,51,54,84,244,129,136,180,84,84,49,48,53,51,50,51,55,84,244,129,136,181,84,84,49,48,53,51,50,51,56,84,244,129,136,182,84,84,49,48,53,51,50,51,57,84,244,129,136,183,84,84,49,48,53,51,50,52,48,84,244,129,136,184,84,84,49,48,53,51,50,52,49,84,244,129,136,185,84,84,49,48,53,51,50,52,50,84,244,129,136,186,84,84,49,48,53,51,50,52,51,84,244,129,136,187,84,84,49,48,53,51,50,52,52,84,244,129,136,188,84,84,49,48,53,51,50,52,53,84,244,129,136,189,84,84,49,48,53,51,50,52,54,84,244,129,136,190,84,84,49,48,53,51,50,52,55,84,244,129,136,191,84,84,49,48,53,51,50,52,56,84,244,129,137,128,84,84,49,48,53,51,50,52,57,84,244,129,137,129,84,84,49,48,53,51,50,53,48,84,244,129,137,130,84,84,49,48,53,51,50,53,49,84,244,129,137,131,84,84,49,48,53,51,50,53,50,84,244,129,137,132,84,84,49,48,53,51,50,53,51,84,244,129,137,133,84,84,49,48,53,51,50,53,52,84,244,129,137,134,84,84,49,48,53,51,50,53,53,84,244,129,137,135,84,84,49,48,53,51,50,53,54,84,244,129,137,136,84,84,49,48,53,51,50,53,55,84,244,129,137,137,84,84,49,48,53,51,50,53,56,84,244,129,137,138,84,84,49,48,53,51,50,53,57,84,244,129,137,139,84,84,49,48,53,51,50,54,48,84,244,129,137,140,84,84,49,48,53,51,50,54,49,84,244,129,137,141,84,84,49,48,53,51,50,54,50,84,244,129,137,142,84,84,49,48,53,51,50,54,51,84,244,129,137,143,84,84,49,48,53,51,50,54,52,84,244,129,137,144,84,84,49,48,53,51,50,54,53,84,244,129,137,145,84,84,49,48,53,51,50,54,54,84,244,129,137,146,84,84,49,48,53,51,50,54,55,84,244,129,137,147,84,84,49,48,53,51,50,54,56,84,244,129,137,148,84,84,49,48,53,51,50,54,57,84,244,129,137,149,84,84,49,48,53,51,50,55,48,84,244,129,137,150,84,84,49,48,53,51,50,55,49,84,244,129,137,151,84,84,49,48,53,51,50,55,50,84,244,129,137,152,84,84,49,48,53,51,50,55,51,84,244,129,137,153,84,84,49,48,53,51,50,55,52,84,244,129,137,154,84,84,49,48,53,51,50,55,53,84,244,129,137,155,84,84,49,48,53,51,50,55,54,84,244,129,137,156,84,84,49,48,53,51,50,55,55,84,244,129,137,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19417 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19417_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19417_s.txt", Encoding.UTF8);

    public Test19417() : base(recordedRequest, recordedResponse, "accounts8d43a024a0ff30a")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a024a0ff30a",
                        container: "$root",
                        blob: " ",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20695 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20695_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20695_s.txt", Encoding.UTF8);

    public Test20695() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers0bb7ae45edef4594997d97499d26b519",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,56,54,52,54,50,84,244,137,143,190,84,84,49,48,56,54,52,54,51,84,244,137,143,191,84,84,49,48,56,54,52,54,52,84,244,137,144,128,84,84,49,48,56,54,52,54,53,84,244,137,144,129,84,84,49,48,56,54,52,54,54,84,244,137,144,130,84,84,49,48,56,54,52,54,55,84,244,137,144,131,84,84,49,48,56,54,52,54,56,84,244,137,144,132,84,84,49,48,56,54,52,54,57,84,244,137,144,133,84,84,49,48,56,54,52,55,48,84,244,137,144,134,84,84,49,48,56,54,52,55,49,84,244,137,144,135,84,84,49,48,56,54,52,55,50,84,244,137,144,136,84,84,49,48,56,54,52,55,51,84,244,137,144,137,84,84,49,48,56,54,52,55,52,84,244,137,144,138,84,84,49,48,56,54,52,55,53,84,244,137,144,139,84,84,49,48,56,54,52,55,54,84,244,137,144,140,84,84,49,48,56,54,52,55,55,84,244,137,144,141,84,84,49,48,56,54,52,55,56,84,244,137,144,142,84,84,49,48,56,54,52,55,57,84,244,137,144,143,84,84,49,48,56,54,52,56,48,84,244,137,144,144,84,84,49,48,56,54,52,56,49,84,244,137,144,145,84,84,49,48,56,54,52,56,50,84,244,137,144,146,84,84,49,48,56,54,52,56,51,84,244,137,144,147,84,84,49,48,56,54,52,56,52,84,244,137,144,148,84,84,49,48,56,54,52,56,53,84,244,137,144,149,84,84,49,48,56,54,52,56,54,84,244,137,144,150,84,84,49,48,56,54,52,56,55,84,244,137,144,151,84,84,49,48,56,54,52,56,56,84,244,137,144,152,84,84,49,48,56,54,52,56,57,84,244,137,144,153,84,84,49,48,56,54,52,57,48,84,244,137,144,154,84,84,49,48,56,54,52,57,49,84,244,137,144,155,84,84,49,48,56,54,52,57,50,84,244,137,144,156,84,84,49,48,56,54,52,57,51,84,244,137,144,157,84,84,49,48,56,54,52,57,52,84,244,137,144,158,84,84,49,48,56,54,52,57,53,84,244,137,144,159,84,84,49,48,56,54,52,57,54,84,244,137,144,160,84,84,49,48,56,54,52,57,55,84,244,137,144,161,84,84,49,48,56,54,52,57,56,84,244,137,144,162,84,84,49,48,56,54,52,57,57,84,244,137,144,163,84,84,49,48,56,54,53,48,48,84,244,137,144,164,84,84,49,48,56,54,53,48,49,84,244,137,144,165,84,84,49,48,56,54,53,48,50,84,244,137,144,166,84,84,49,48,56,54,53,48,51,84,244,137,144,167,84,84,49,48,56,54,53,48,52,84,244,137,144,168,84,84,49,48,56,54,53,48,53,84,244,137,144,169,84,84,49,48,56,54,53,48,54,84,244,137,144,170,84,84,49,48,56,54,53,48,55,84,244,137,144,171,84,84,49,48,56,54,53,48,56,84,244,137,144,172,84,84,49,48,56,54,53,48,57,84,244,137,144,173,84,84,49,48,56,54,53,49,48,84,244,137,144,174,84,84,49,48,56,54,53,49,49,84,244,137,144,175,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20566 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20566_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20566_s.txt", Encoding.UTF8);

    public Test20566() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers2997cf743a0f481c9f696984938aa742",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,54,54,49,52,49,84,244,132,146,157,84,84,49,48,54,54,49,55,55,84,244,132,147,129,84,84,49,48,54,54,49,56,57,84,244,132,147,141,84,84,49,48,54,54,49,57,49,84,244,132,147,143,84,84,49,48,54,54,49,57,50,84,244,132,147,144,84,84,49,48,54,54,50,48,53,84,244,132,147,157,84,84,49,48,54,54,50,52,49,84,244,132,148,129,84,84,49,48,54,54,50,53,51,84,244,132,148,141,84,84,49,48,54,54,50,53,53,84,244,132,148,143,84,84,49,48,54,54,50,53,54,84,244,132,148,144,84,84,49,48,54,54,50,54,57,84,244,132,148,157,84,84,49,48,54,54,51,48,53,84,244,132,149,129,84,84,49,48,54,54,51,49,55,84,244,132,149,141,84,84,49,48,54,54,51,49,57,84,244,132,149,143,84,84,49,48,54,54,51,50,48,84,244,132,149,144,84,84,49,48,54,54,51,51,51,84,244,132,149,157,84,84,49,48,54,54,51,54,57,84,244,132,150,129,84,84,49,48,54,54,51,56,49,84,244,132,150,141,84,84,49,48,54,54,51,56,51,84,244,132,150,143,84,84,49,48,54,54,51,56,52,84,244,132,150,144,84,84,49,48,54,54,51,57,55,84,244,132,150,157,84,84,49,48,54,54,52,51,51,84,244,132,151,129,84,84,49,48,54,54,52,52,53,84,244,132,151,141,84,84,49,48,54,54,52,52,55,84,244,132,151,143,84,84,49,48,54,54,52,52,56,84,244,132,151,144,84,84,49,48,54,54,52,54,49,84,244,132,151,157,84,84,49,48,54,54,52,57,55,84,244,132,152,129,84,84,49,48,54,54,53,48,57,84,244,132,152,141,84,84,49,48,54,54,53,49,49,84,244,132,152,143,84,84,49,48,54,54,53,49,50,84,244,132,152,144,84,84,49,48,54,54,53,50,53,84,244,132,152,157,84,84,49,48,54,54,53,54,49,84,244,132,153,129,84,84,49,48,54,54,53,55,51,84,244,132,153,141,84,84,49,48,54,54,53,55,53,84,244,132,153,143,84,84,49,48,54,54,53,55,54,84,244,132,153,144,84,84,49,48,54,54,53,56,57,84,244,132,153,157,84,84,49,48,54,54,54,50,53,84,244,132,154,129,84,84,49,48,54,54,54,51,55,84,244,132,154,141,84,84,49,48,54,54,54,51,57,84,244,132,154,143,84,84,49,48,54,54,54,52,48,84,244,132,154,144,84,84,49,48,54,54,54,53,51,84,244,132,154,157,84,84,49,48,54,54,54,56,57,84,244,132,155,129,84,84,49,48,54,54,55,48,49,84,244,132,155,141,84,84,49,48,54,54,55,48,51,84,244,132,155,143,84,84,49,48,54,54,55,48,52,84,244,132,155,144,84,84,49,48,54,54,55,49,55,84,244,132,155,157,84,84,49,48,54,54,55,53,51,84,244,132,156,129,84,84,49,48,54,54,55,54,53,84,244,132,156,141,84,84,49,48,54,54,55,54,55,84,244,132,156,143,84,84,49,48,54,54,55,54,56,84,244,132,156,144,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20536 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20536_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20536_s.txt", Encoding.UTF8);

    public Test20536() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers169b02be047c4c76acbb586fdc8886c6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,54,49,56,55,54,84,244,131,143,180,84,84,49,48,54,49,56,55,55,84,244,131,143,181,84,84,49,48,54,49,56,55,56,84,244,131,143,182,84,84,49,48,54,49,56,55,57,84,244,131,143,183,84,84,49,48,54,49,56,56,48,84,244,131,143,184,84,84,49,48,54,49,56,56,49,84,244,131,143,185,84,84,49,48,54,49,56,56,50,84,244,131,143,186,84,84,49,48,54,49,56,56,51,84,244,131,143,187,84,84,49,48,54,49,56,56,52,84,244,131,143,188,84,84,49,48,54,49,56,56,53,84,244,131,143,189,84,84,49,48,54,49,56,56,54,84,244,131,143,190,84,84,49,48,54,49,56,56,55,84,244,131,143,191,84,84,49,48,54,49,56,56,56,84,244,131,144,128,84,84,49,48,54,49,56,56,57,84,244,131,144,129,84,84,49,48,54,49,56,57,48,84,244,131,144,130,84,84,49,48,54,49,56,57,49,84,244,131,144,131,84,84,49,48,54,49,56,57,50,84,244,131,144,132,84,84,49,48,54,49,56,57,51,84,244,131,144,133,84,84,49,48,54,49,56,57,52,84,244,131,144,134,84,84,49,48,54,49,56,57,53,84,244,131,144,135,84,84,49,48,54,49,56,57,54,84,244,131,144,136,84,84,49,48,54,49,56,57,55,84,244,131,144,137,84,84,49,48,54,49,56,57,56,84,244,131,144,138,84,84,49,48,54,49,56,57,57,84,244,131,144,139,84,84,49,48,54,49,57,48,48,84,244,131,144,140,84,84,49,48,54,49,57,48,49,84,244,131,144,141,84,84,49,48,54,49,57,48,50,84,244,131,144,142,84,84,49,48,54,49,57,48,51,84,244,131,144,143,84,84,49,48,54,49,57,48,52,84,244,131,144,144,84,84,49,48,54,49,57,48,53,84,244,131,144,145,84,84,49,48,54,49,57,48,54,84,244,131,144,146,84,84,49,48,54,49,57,48,55,84,244,131,144,147,84,84,49,48,54,49,57,48,56,84,244,131,144,148,84,84,49,48,54,49,57,48,57,84,244,131,144,149,84,84,49,48,54,49,57,49,48,84,244,131,144,150,84,84,49,48,54,49,57,49,49,84,244,131,144,151,84,84,49,48,54,49,57,49,50,84,244,131,144,152,84,84,49,48,54,49,57,49,51,84,244,131,144,153,84,84,49,48,54,49,57,49,52,84,244,131,144,154,84,84,49,48,54,49,57,49,53,84,244,131,144,155,84,84,49,48,54,49,57,49,54,84,244,131,144,156,84,84,49,48,54,49,57,49,55,84,244,131,144,157,84,84,49,48,54,49,57,49,56,84,244,131,144,158,84,84,49,48,54,49,57,49,57,84,244,131,144,159,84,84,49,48,54,49,57,50,48,84,244,131,144,160,84,84,49,48,54,49,57,50,49,84,244,131,144,161,84,84,49,48,54,49,57,50,50,84,244,131,144,162,84,84,49,48,54,49,57,50,51,84,244,131,144,163,84,84,49,48,54,49,57,50,52,84,244,131,144,164,84,84,49,48,54,49,57,50,53,84,244,131,144,165,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20602 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20602_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20602_s.txt", Encoding.UTF8);

    public Test20602() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers2997cf743a0f481c9f696984938aa742",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,55,50,53,49,51,84,244,133,182,129,84,84,49,48,55,50,53,50,53,84,244,133,182,141,84,84,49,48,55,50,53,50,55,84,244,133,182,143,84,84,49,48,55,50,53,50,56,84,244,133,182,144,84,84,49,48,55,50,53,52,49,84,244,133,182,157,84,84,49,48,55,50,53,55,55,84,244,133,183,129,84,84,49,48,55,50,53,56,57,84,244,133,183,141,84,84,49,48,55,50,53,57,49,84,244,133,183,143,84,84,49,48,55,50,53,57,50,84,244,133,183,144,84,84,49,48,55,50,54,48,53,84,244,133,183,157,84,84,49,48,55,50,54,52,49,84,244,133,184,129,84,84,49,48,55,50,54,53,51,84,244,133,184,141,84,84,49,48,55,50,54,53,53,84,244,133,184,143,84,84,49,48,55,50,54,53,54,84,244,133,184,144,84,84,49,48,55,50,54,54,57,84,244,133,184,157,84,84,49,48,55,50,55,48,53,84,244,133,185,129,84,84,49,48,55,50,55,49,55,84,244,133,185,141,84,84,49,48,55,50,55,49,57,84,244,133,185,143,84,84,49,48,55,50,55,50,48,84,244,133,185,144,84,84,49,48,55,50,55,51,51,84,244,133,185,157,84,84,49,48,55,50,55,54,57,84,244,133,186,129,84,84,49,48,55,50,55,56,49,84,244,133,186,141,84,84,49,48,55,50,55,56,51,84,244,133,186,143,84,84,49,48,55,50,55,56,52,84,244,133,186,144,84,84,49,48,55,50,55,57,55,84,244,133,186,157,84,84,49,48,55,50,56,51,51,84,244,133,187,129,84,84,49,48,55,50,56,52,53,84,244,133,187,141,84,84,49,48,55,50,56,52,55,84,244,133,187,143,84,84,49,48,55,50,56,52,56,84,244,133,187,144,84,84,49,48,55,50,56,54,49,84,244,133,187,157,84,84,49,48,55,50,56,57,55,84,244,133,188,129,84,84,49,48,55,50,57,48,57,84,244,133,188,141,84,84,49,48,55,50,57,49,49,84,244,133,188,143,84,84,49,48,55,50,57,49,50,84,244,133,188,144,84,84,49,48,55,50,57,50,53,84,244,133,188,157,84,84,49,48,55,50,57,54,49,84,244,133,189,129,84,84,49,48,55,50,57,55,51,84,244,133,189,141,84,84,49,48,55,50,57,55,53,84,244,133,189,143,84,84,49,48,55,50,57,55,54,84,244,133,189,144,84,84,49,48,55,50,57,56,57,84,244,133,189,157,84,84,49,48,55,51,48,50,53,84,244,133,190,129,84,84,49,48,55,51,48,51,55,84,244,133,190,141,84,84,49,48,55,51,48,51,57,84,244,133,190,143,84,84,49,48,55,51,48,52,48,84,244,133,190,144,84,84,49,48,55,51,48,53,51,84,244,133,190,157,84,84,49,48,55,51,48,56,57,84,244,133,191,129,84,84,49,48,55,51,49,48,49,84,244,133,191,141,84,84,49,48,55,51,49,48,51,84,244,133,191,143,84,84,49,48,55,51,49,48,52,84,244,133,191,144,84,84,49,48,55,51,49,49,55,84,244,133,191,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21052 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21052_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21052_s.txt", Encoding.UTF8);

    public Test21052() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers98fd3eef9d4b4edcb3855acb5ae8645d",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,49,53,53,48,84,244,143,151,190,84,84,49,49,49,49,53,53,49,84,244,143,151,191,84,84,49,49,49,49,53,53,50,84,244,143,152,128,84,84,49,49,49,49,53,53,51,84,244,143,152,129,84,84,49,49,49,49,53,53,52,84,244,143,152,130,84,84,49,49,49,49,53,53,53,84,244,143,152,131,84,84,49,49,49,49,53,53,54,84,244,143,152,132,84,84,49,49,49,49,53,53,55,84,244,143,152,133,84,84,49,49,49,49,53,53,56,84,244,143,152,134,84,84,49,49,49,49,53,53,57,84,244,143,152,135,84,84,49,49,49,49,53,54,48,84,244,143,152,136,84,84,49,49,49,49,53,54,49,84,244,143,152,137,84,84,49,49,49,49,53,54,50,84,244,143,152,138,84,84,49,49,49,49,53,54,51,84,244,143,152,139,84,84,49,49,49,49,53,54,52,84,244,143,152,140,84,84,49,49,49,49,53,54,53,84,244,143,152,141,84,84,49,49,49,49,53,54,54,84,244,143,152,142,84,84,49,49,49,49,53,54,55,84,244,143,152,143,84,84,49,49,49,49,53,54,56,84,244,143,152,144,84,84,49,49,49,49,53,54,57,84,244,143,152,145,84,84,49,49,49,49,53,55,48,84,244,143,152,146,84,84,49,49,49,49,53,55,49,84,244,143,152,147,84,84,49,49,49,49,53,55,50,84,244,143,152,148,84,84,49,49,49,49,53,55,51,84,244,143,152,149,84,84,49,49,49,49,53,55,52,84,244,143,152,150,84,84,49,49,49,49,53,55,53,84,244,143,152,151,84,84,49,49,49,49,53,55,54,84,244,143,152,152,84,84,49,49,49,49,53,55,55,84,244,143,152,153,84,84,49,49,49,49,53,55,56,84,244,143,152,154,84,84,49,49,49,49,53,55,57,84,244,143,152,155,84,84,49,49,49,49,53,56,48,84,244,143,152,156,84,84,49,49,49,49,53,56,49,84,244,143,152,157,84,84,49,49,49,49,53,56,50,84,244,143,152,158,84,84,49,49,49,49,53,56,51,84,244,143,152,159,84,84,49,49,49,49,53,56,52,84,244,143,152,160,84,84,49,49,49,49,53,56,53,84,244,143,152,161,84,84,49,49,49,49,53,56,54,84,244,143,152,162,84,84,49,49,49,49,53,56,55,84,244,143,152,163,84,84,49,49,49,49,53,56,56,84,244,143,152,164,84,84,49,49,49,49,53,56,57,84,244,143,152,165,84,84,49,49,49,49,53,57,48,84,244,143,152,166,84,84,49,49,49,49,53,57,49,84,244,143,152,167,84,84,49,49,49,49,53,57,50,84,244,143,152,168,84,84,49,49,49,49,53,57,51,84,244,143,152,169,84,84,49,49,49,49,53,57,52,84,244,143,152,170,84,84,49,49,49,49,53,57,53,84,244,143,152,171,84,84,49,49,49,49,53,57,54,84,244,143,152,172,84,84,49,49,49,49,53,57,55,84,244,143,152,173,84,84,49,49,49,49,53,57,56,84,244,143,152,174,84,84,49,49,49,49,53,57,57,84,244,143,152,175,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20443 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20443_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20443_s.txt", Encoding.UTF8);

    public Test20443() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersee5ddc6232b847869028904d3d06a0f3",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,53,52,50,56,84,244,129,171,132,84,84,49,48,53,53,52,50,57,84,244,129,171,133,84,84,49,48,53,53,52,51,48,84,244,129,171,134,84,84,49,48,53,53,52,51,49,84,244,129,171,135,84,84,49,48,53,53,52,51,50,84,244,129,171,136,84,84,49,48,53,53,52,51,51,84,244,129,171,137,84,84,49,48,53,53,52,51,52,84,244,129,171,138,84,84,49,48,53,53,52,51,53,84,244,129,171,139,84,84,49,48,53,53,52,51,54,84,244,129,171,140,84,84,49,48,53,53,52,51,55,84,244,129,171,141,84,84,49,48,53,53,52,51,56,84,244,129,171,142,84,84,49,48,53,53,52,51,57,84,244,129,171,143,84,84,49,48,53,53,52,52,48,84,244,129,171,144,84,84,49,48,53,53,52,52,49,84,244,129,171,145,84,84,49,48,53,53,52,52,50,84,244,129,171,146,84,84,49,48,53,53,52,52,51,84,244,129,171,147,84,84,49,48,53,53,52,52,52,84,244,129,171,148,84,84,49,48,53,53,52,52,53,84,244,129,171,149,84,84,49,48,53,53,52,52,54,84,244,129,171,150,84,84,49,48,53,53,52,52,55,84,244,129,171,151,84,84,49,48,53,53,52,52,56,84,244,129,171,152,84,84,49,48,53,53,52,52,57,84,244,129,171,153,84,84,49,48,53,53,52,53,48,84,244,129,171,154,84,84,49,48,53,53,52,53,49,84,244,129,171,155,84,84,49,48,53,53,52,53,50,84,244,129,171,156,84,84,49,48,53,53,52,53,51,84,244,129,171,157,84,84,49,48,53,53,52,53,52,84,244,129,171,158,84,84,49,48,53,53,52,53,53,84,244,129,171,159,84,84,49,48,53,53,52,53,54,84,244,129,171,160,84,84,49,48,53,53,52,53,55,84,244,129,171,161,84,84,49,48,53,53,52,53,56,84,244,129,171,162,84,84,49,48,53,53,52,53,57,84,244,129,171,163,84,84,49,48,53,53,52,54,48,84,244,129,171,164,84,84,49,48,53,53,52,54,49,84,244,129,171,165,84,84,49,48,53,53,52,54,50,84,244,129,171,166,84,84,49,48,53,53,52,54,51,84,244,129,171,167,84,84,49,48,53,53,52,54,52,84,244,129,171,168,84,84,49,48,53,53,52,54,53,84,244,129,171,169,84,84,49,48,53,53,52,54,54,84,244,129,171,170,84,84,49,48,53,53,52,54,55,84,244,129,171,171,84,84,49,48,53,53,52,54,56,84,244,129,171,172,84,84,49,48,53,53,52,54,57,84,244,129,171,173,84,84,49,48,53,53,52,55,48,84,244,129,171,174,84,84,49,48,53,53,52,55,49,84,244,129,171,175,84,84,49,48,53,53,52,55,50,84,244,129,171,176,84,84,49,48,53,53,52,55,51,84,244,129,171,177,84,84,49,48,53,53,52,55,52,84,244,129,171,178,84,84,49,48,53,53,52,55,53,84,244,129,171,179,84,84,49,48,53,53,52,55,54,84,244,129,171,180,84,84,49,48,53,53,52,55,55,84,244,129,171,181,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22579 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22579_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22579_s.txt", Encoding.UTF8);

    public Test22579() : base(recordedRequest, recordedResponse, "accounts8d43a048d26afcd")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048d26afcd",
                        container: "containersddd934ca569845dc89778f0bd55316f0",
                        blob: "Blob0943d4744d0a47cbba2d279fd97d82c3",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20761 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20761_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20761_s.txt", Encoding.UTF8);

    public Test20761() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersc5ae22b09f3f4a3eaff829adc5876203",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,57,55,55,57,55,84,244,140,129,133,84,84,49,48,57,55,55,57,56,84,244,140,129,134,84,84,49,48,57,55,55,57,57,84,244,140,129,135,84,84,49,48,57,55,56,48,48,84,244,140,129,136,84,84,49,48,57,55,56,48,49,84,244,140,129,137,84,84,49,48,57,55,56,48,50,84,244,140,129,138,84,84,49,48,57,55,56,48,51,84,244,140,129,139,84,84,49,48,57,55,56,48,52,84,244,140,129,140,84,84,49,48,57,55,56,48,53,84,244,140,129,141,84,84,49,48,57,55,56,48,54,84,244,140,129,142,84,84,49,48,57,55,56,48,55,84,244,140,129,143,84,84,49,48,57,55,56,48,56,84,244,140,129,144,84,84,49,48,57,55,56,48,57,84,244,140,129,145,84,84,49,48,57,55,56,49,48,84,244,140,129,146,84,84,49,48,57,55,56,49,49,84,244,140,129,147,84,84,49,48,57,55,56,49,50,84,244,140,129,148,84,84,49,48,57,55,56,49,51,84,244,140,129,149,84,84,49,48,57,55,56,49,52,84,244,140,129,150,84,84,49,48,57,55,56,49,53,84,244,140,129,151,84,84,49,48,57,55,56,49,54,84,244,140,129,152,84,84,49,48,57,55,56,49,55,84,244,140,129,153,84,84,49,48,57,55,56,49,56,84,244,140,129,154,84,84,49,48,57,55,56,49,57,84,244,140,129,155,84,84,49,48,57,55,56,50,48,84,244,140,129,156,84,84,49,48,57,55,56,50,49,84,244,140,129,157,84,84,49,48,57,55,56,50,50,84,244,140,129,158,84,84,49,48,57,55,56,50,51,84,244,140,129,159,84,84,49,48,57,55,56,50,52,84,244,140,129,160,84,84,49,48,57,55,56,50,53,84,244,140,129,161,84,84,49,48,57,55,56,50,54,84,244,140,129,162,84,84,49,48,57,55,56,50,55,84,244,140,129,163,84,84,49,48,57,55,56,50,56,84,244,140,129,164,84,84,49,48,57,55,56,50,57,84,244,140,129,165,84,84,49,48,57,55,56,51,48,84,244,140,129,166,84,84,49,48,57,55,56,51,49,84,244,140,129,167,84,84,49,48,57,55,56,51,50,84,244,140,129,168,84,84,49,48,57,55,56,51,51,84,244,140,129,169,84,84,49,48,57,55,56,51,52,84,244,140,129,170,84,84,49,48,57,55,56,51,53,84,244,140,129,171,84,84,49,48,57,55,56,51,54,84,244,140,129,172,84,84,49,48,57,55,56,51,55,84,244,140,129,173,84,84,49,48,57,55,56,51,56,84,244,140,129,174,84,84,49,48,57,55,56,51,57,84,244,140,129,175,84,84,49,48,57,55,56,52,48,84,244,140,129,176,84,84,49,48,57,55,56,52,49,84,244,140,129,177,84,84,49,48,57,55,56,52,50,84,244,140,129,178,84,84,49,48,57,55,56,52,51,84,244,140,129,179,84,84,49,48,57,55,56,52,52,84,244,140,129,180,84,84,49,48,57,55,56,52,53,84,244,140,129,181,84,84,49,48,57,55,56,52,54,84,244,140,129,182,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19834 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19834_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19834_s.txt", Encoding.UTF8);

    public Test19834() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers3d1fce2fe43b489ca49e5d4066014499",
                        blob: Encoding.UTF8.GetString(new byte[]{84,54,49,57,48,52,84,239,135,144,84,84,54,49,57,49,55,84,239,135,157,84,84,54,49,57,53,51,84,239,136,129,84,84,54,49,57,54,53,84,239,136,141,84,84,54,49,57,54,55,84,239,136,143,84,84,54,49,57,54,56,84,239,136,144,84,84,54,49,57,56,49,84,239,136,157,84,84,54,50,48,49,55,84,239,137,129,84,84,54,50,48,50,57,84,239,137,141,84,84,54,50,48,51,49,84,239,137,143,84,84,54,50,48,51,50,84,239,137,144,84,84,54,50,48,52,53,84,239,137,157,84,84,54,50,48,56,49,84,239,138,129,84,84,54,50,48,57,51,84,239,138,141,84,84,54,50,48,57,53,84,239,138,143,84,84,54,50,48,57,54,84,239,138,144,84,84,54,50,49,48,57,84,239,138,157,84,84,54,50,49,52,53,84,239,139,129,84,84,54,50,49,53,55,84,239,139,141,84,84,54,50,49,53,57,84,239,139,143,84,84,54,50,49,54,48,84,239,139,144,84,84,54,50,49,55,51,84,239,139,157,84,84,54,50,50,48,57,84,239,140,129,84,84,54,50,50,50,49,84,239,140,141,84,84,54,50,50,50,51,84,239,140,143,84,84,54,50,50,50,52,84,239,140,144,84,84,54,50,50,51,55,84,239,140,157,84,84,54,50,50,55,50,84,239,141,128,84,84,54,50,50,55,51,84,239,141,129,84,84,54,50,50,55,52,84,239,141,130,84,84,54,50,50,55,53,84,239,141,131,84,84,54,50,50,55,54,84,239,141,132,84,84,54,50,50,55,55,84,239,141,133,84,84,54,50,50,55,56,84,239,141,134,84,84,54,50,50,55,57,84,239,141,135,84,84,54,50,50,56,48,84,239,141,136,84,84,54,50,50,56,49,84,239,141,137,84,84,54,50,50,56,50,84,239,141,138,84,84,54,50,50,56,51,84,239,141,139,84,84,54,50,50,56,52,84,239,141,140,84,84,54,50,50,56,53,84,239,141,141,84,84,54,50,50,56,54,84,239,141,142,84,84,54,50,50,56,55,84,239,141,143,84,84,54,50,50,56,56,84,239,141,144,84,84,54,50,50,56,57,84,239,141,145,84,84,54,50,50,57,48,84,239,141,146,84,84,54,50,50,57,49,84,239,141,147,84,84,54,50,50,57,50,84,239,141,148,84,84,54,50,50,57,51,84,239,141,149,84,84,54,50,50,57,52,84,239,141,150,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22644 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22644_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22644_s.txt", Encoding.UTF8);

    public Test22644() : base(recordedRequest, recordedResponse, "accounts8d43a048e2beca5")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048e2beca5",
                        container: "containers3974e1da6923423a9845f2ce644df77d",
                        blob: "Blob2dd67cb0199349ef8183572604127506",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20854 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20854_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20854_s.txt", Encoding.UTF8);

    public Test20854() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersf4b0dcea8f7b4ccf92e1f36b952ddf93",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,51,52,49,57,84,244,141,152,187,84,84,49,49,48,51,52,50,48,84,244,141,152,188,84,84,49,49,48,51,52,50,49,84,244,141,152,189,84,84,49,49,48,51,52,50,50,84,244,141,152,190,84,84,49,49,48,51,52,50,51,84,244,141,152,191,84,84,49,49,48,51,52,50,52,84,244,141,153,128,84,84,49,49,48,51,52,50,53,84,244,141,153,129,84,84,49,49,48,51,52,50,54,84,244,141,153,130,84,84,49,49,48,51,52,50,55,84,244,141,153,131,84,84,49,49,48,51,52,50,56,84,244,141,153,132,84,84,49,49,48,51,52,50,57,84,244,141,153,133,84,84,49,49,48,51,52,51,48,84,244,141,153,134,84,84,49,49,48,51,52,51,49,84,244,141,153,135,84,84,49,49,48,51,52,51,50,84,244,141,153,136,84,84,49,49,48,51,52,51,51,84,244,141,153,137,84,84,49,49,48,51,52,51,52,84,244,141,153,138,84,84,49,49,48,51,52,51,53,84,244,141,153,139,84,84,49,49,48,51,52,51,54,84,244,141,153,140,84,84,49,49,48,51,52,51,55,84,244,141,153,141,84,84,49,49,48,51,52,51,56,84,244,141,153,142,84,84,49,49,48,51,52,51,57,84,244,141,153,143,84,84,49,49,48,51,52,52,48,84,244,141,153,144,84,84,49,49,48,51,52,52,49,84,244,141,153,145,84,84,49,49,48,51,52,52,50,84,244,141,153,146,84,84,49,49,48,51,52,52,51,84,244,141,153,147,84,84,49,49,48,51,52,52,52,84,244,141,153,148,84,84,49,49,48,51,52,52,53,84,244,141,153,149,84,84,49,49,48,51,52,52,54,84,244,141,153,150,84,84,49,49,48,51,52,52,55,84,244,141,153,151,84,84,49,49,48,51,52,52,56,84,244,141,153,152,84,84,49,49,48,51,52,52,57,84,244,141,153,153,84,84,49,49,48,51,52,53,48,84,244,141,153,154,84,84,49,49,48,51,52,53,49,84,244,141,153,155,84,84,49,49,48,51,52,53,50,84,244,141,153,156,84,84,49,49,48,51,52,53,51,84,244,141,153,157,84,84,49,49,48,51,52,53,52,84,244,141,153,158,84,84,49,49,48,51,52,53,53,84,244,141,153,159,84,84,49,49,48,51,52,53,54,84,244,141,153,160,84,84,49,49,48,51,52,53,55,84,244,141,153,161,84,84,49,49,48,51,52,53,56,84,244,141,153,162,84,84,49,49,48,51,52,53,57,84,244,141,153,163,84,84,49,49,48,51,52,54,48,84,244,141,153,164,84,84,49,49,48,51,52,54,49,84,244,141,153,165,84,84,49,49,48,51,52,54,50,84,244,141,153,166,84,84,49,49,48,51,52,54,51,84,244,141,153,167,84,84,49,49,48,51,52,54,52,84,244,141,153,168,84,84,49,49,48,51,52,54,53,84,244,141,153,169,84,84,49,49,48,51,52,54,54,84,244,141,153,170,84,84,49,49,48,51,52,54,55,84,244,141,153,171,84,84,49,49,48,51,52,54,56,84,244,141,153,172,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22580 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22580_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22580_s.txt", Encoding.UTF8);

    public Test22580() : base(recordedRequest, recordedResponse, "accounts8d43a048d26afcd")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048d26afcd",
                        container: "containersddd934ca569845dc89778f0bd55316f0",
                        blob: "Blob263afae1079a47dea9d294199e92d330",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20185 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20185_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20185_s.txt", Encoding.UTF8);

    public Test20185() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers2b6cdd6684eb4500abcaa682adc323b7",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,50,57,53,48,53,84,243,187,150,129,84,84,49,48,50,57,53,49,55,84,243,187,150,141,84,84,49,48,50,57,53,49,57,84,243,187,150,143,84,84,49,48,50,57,53,50,48,84,243,187,150,144,84,84,49,48,50,57,53,51,51,84,243,187,150,157,84,84,49,48,50,57,53,54,57,84,243,187,151,129,84,84,49,48,50,57,53,56,49,84,243,187,151,141,84,84,49,48,50,57,53,56,51,84,243,187,151,143,84,84,49,48,50,57,53,56,52,84,243,187,151,144,84,84,49,48,50,57,53,57,55,84,243,187,151,157,84,84,49,48,50,57,54,51,51,84,243,187,152,129,84,84,49,48,50,57,54,52,53,84,243,187,152,141,84,84,49,48,50,57,54,52,55,84,243,187,152,143,84,84,49,48,50,57,54,52,56,84,243,187,152,144,84,84,49,48,50,57,54,54,49,84,243,187,152,157,84,84,49,48,50,57,54,57,55,84,243,187,153,129,84,84,49,48,50,57,55,48,57,84,243,187,153,141,84,84,49,48,50,57,55,49,49,84,243,187,153,143,84,84,49,48,50,57,55,49,50,84,243,187,153,144,84,84,49,48,50,57,55,50,53,84,243,187,153,157,84,84,49,48,50,57,55,54,49,84,243,187,154,129,84,84,49,48,50,57,55,55,51,84,243,187,154,141,84,84,49,48,50,57,55,55,53,84,243,187,154,143,84,84,49,48,50,57,55,55,54,84,243,187,154,144,84,84,49,48,50,57,55,56,57,84,243,187,154,157,84,84,49,48,50,57,56,50,53,84,243,187,155,129,84,84,49,48,50,57,56,51,55,84,243,187,155,141,84,84,49,48,50,57,56,51,57,84,243,187,155,143,84,84,49,48,50,57,56,52,48,84,243,187,155,144,84,84,49,48,50,57,56,53,51,84,243,187,155,157,84,84,49,48,50,57,56,56,57,84,243,187,156,129,84,84,49,48,50,57,57,48,49,84,243,187,156,141,84,84,49,48,50,57,57,48,51,84,243,187,156,143,84,84,49,48,50,57,57,48,52,84,243,187,156,144,84,84,49,48,50,57,57,49,55,84,243,187,156,157,84,84,49,48,50,57,57,53,50,84,243,187,157,128,84,84,49,48,50,57,57,53,51,84,243,187,157,129,84,84,49,48,50,57,57,53,52,84,243,187,157,130,84,84,49,48,50,57,57,53,53,84,243,187,157,131,84,84,49,48,50,57,57,53,54,84,243,187,157,132,84,84,49,48,50,57,57,53,55,84,243,187,157,133,84,84,49,48,50,57,57,53,56,84,243,187,157,134,84,84,49,48,50,57,57,53,57,84,243,187,157,135,84,84,49,48,50,57,57,54,48,84,243,187,157,136,84,84,49,48,50,57,57,54,49,84,243,187,157,137,84,84,49,48,50,57,57,54,50,84,243,187,157,138,84,84,49,48,50,57,57,54,51,84,243,187,157,139,84,84,49,48,50,57,57,54,52,84,243,187,157,140,84,84,49,48,50,57,57,54,53,84,243,187,157,141,84,84,49,48,50,57,57,54,54,84,243,187,157,142,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20405 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20405_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20405_s.txt", Encoding.UTF8);

    public Test20405() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers7f83ba854dc4459da9078f97f691d28c",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,52,53,50,56,84,244,129,157,128,84,84,49,48,53,52,53,50,57,84,244,129,157,129,84,84,49,48,53,52,53,51,48,84,244,129,157,130,84,84,49,48,53,52,53,51,49,84,244,129,157,131,84,84,49,48,53,52,53,51,50,84,244,129,157,132,84,84,49,48,53,52,53,51,51,84,244,129,157,133,84,84,49,48,53,52,53,51,52,84,244,129,157,134,84,84,49,48,53,52,53,51,53,84,244,129,157,135,84,84,49,48,53,52,53,51,54,84,244,129,157,136,84,84,49,48,53,52,53,51,55,84,244,129,157,137,84,84,49,48,53,52,53,51,56,84,244,129,157,138,84,84,49,48,53,52,53,51,57,84,244,129,157,139,84,84,49,48,53,52,53,52,48,84,244,129,157,140,84,84,49,48,53,52,53,52,49,84,244,129,157,141,84,84,49,48,53,52,53,52,50,84,244,129,157,142,84,84,49,48,53,52,53,52,51,84,244,129,157,143,84,84,49,48,53,52,53,52,52,84,244,129,157,144,84,84,49,48,53,52,53,52,53,84,244,129,157,145,84,84,49,48,53,52,53,52,54,84,244,129,157,146,84,84,49,48,53,52,53,52,55,84,244,129,157,147,84,84,49,48,53,52,53,52,56,84,244,129,157,148,84,84,49,48,53,52,53,52,57,84,244,129,157,149,84,84,49,48,53,52,53,53,48,84,244,129,157,150,84,84,49,48,53,52,53,53,49,84,244,129,157,151,84,84,49,48,53,52,53,53,50,84,244,129,157,152,84,84,49,48,53,52,53,53,51,84,244,129,157,153,84,84,49,48,53,52,53,53,52,84,244,129,157,154,84,84,49,48,53,52,53,53,53,84,244,129,157,155,84,84,49,48,53,52,53,53,54,84,244,129,157,156,84,84,49,48,53,52,53,53,55,84,244,129,157,157,84,84,49,48,53,52,53,53,56,84,244,129,157,158,84,84,49,48,53,52,53,53,57,84,244,129,157,159,84,84,49,48,53,52,53,54,48,84,244,129,157,160,84,84,49,48,53,52,53,54,49,84,244,129,157,161,84,84,49,48,53,52,53,54,50,84,244,129,157,162,84,84,49,48,53,52,53,54,51,84,244,129,157,163,84,84,49,48,53,52,53,54,52,84,244,129,157,164,84,84,49,48,53,52,53,54,53,84,244,129,157,165,84,84,49,48,53,52,53,54,54,84,244,129,157,166,84,84,49,48,53,52,53,54,55,84,244,129,157,167,84,84,49,48,53,52,53,54,56,84,244,129,157,168,84,84,49,48,53,52,53,54,57,84,244,129,157,169,84,84,49,48,53,52,53,55,48,84,244,129,157,170,84,84,49,48,53,52,53,55,49,84,244,129,157,171,84,84,49,48,53,52,53,55,50,84,244,129,157,172,84,84,49,48,53,52,53,55,51,84,244,129,157,173,84,84,49,48,53,52,53,55,52,84,244,129,157,174,84,84,49,48,53,52,53,55,53,84,244,129,157,175,84,84,49,48,53,52,53,55,54,84,244,129,157,176,84,84,49,48,53,52,53,55,55,84,244,129,157,177,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20915 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20915_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20915_s.txt", Encoding.UTF8);

    public Test20915() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers9e891393b2624599aedf317812121dcf",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,52,56,49,57,84,244,141,174,179,84,84,49,49,48,52,56,50,48,84,244,141,174,180,84,84,49,49,48,52,56,50,49,84,244,141,174,181,84,84,49,49,48,52,56,50,50,84,244,141,174,182,84,84,49,49,48,52,56,50,51,84,244,141,174,183,84,84,49,49,48,52,56,50,52,84,244,141,174,184,84,84,49,49,48,52,56,50,53,84,244,141,174,185,84,84,49,49,48,52,56,50,54,84,244,141,174,186,84,84,49,49,48,52,56,50,55,84,244,141,174,187,84,84,49,49,48,52,56,50,56,84,244,141,174,188,84,84,49,49,48,52,56,50,57,84,244,141,174,189,84,84,49,49,48,52,56,51,48,84,244,141,174,190,84,84,49,49,48,52,56,51,49,84,244,141,174,191,84,84,49,49,48,52,56,51,50,84,244,141,175,128,84,84,49,49,48,52,56,51,51,84,244,141,175,129,84,84,49,49,48,52,56,51,52,84,244,141,175,130,84,84,49,49,48,52,56,51,53,84,244,141,175,131,84,84,49,49,48,52,56,51,54,84,244,141,175,132,84,84,49,49,48,52,56,51,55,84,244,141,175,133,84,84,49,49,48,52,56,51,56,84,244,141,175,134,84,84,49,49,48,52,56,51,57,84,244,141,175,135,84,84,49,49,48,52,56,52,48,84,244,141,175,136,84,84,49,49,48,52,56,52,49,84,244,141,175,137,84,84,49,49,48,52,56,52,50,84,244,141,175,138,84,84,49,49,48,52,56,52,51,84,244,141,175,139,84,84,49,49,48,52,56,52,52,84,244,141,175,140,84,84,49,49,48,52,56,52,53,84,244,141,175,141,84,84,49,49,48,52,56,52,54,84,244,141,175,142,84,84,49,49,48,52,56,52,55,84,244,141,175,143,84,84,49,49,48,52,56,52,56,84,244,141,175,144,84,84,49,49,48,52,56,52,57,84,244,141,175,145,84,84,49,49,48,52,56,53,48,84,244,141,175,146,84,84,49,49,48,52,56,53,49,84,244,141,175,147,84,84,49,49,48,52,56,53,50,84,244,141,175,148,84,84,49,49,48,52,56,53,51,84,244,141,175,149,84,84,49,49,48,52,56,53,52,84,244,141,175,150,84,84,49,49,48,52,56,53,53,84,244,141,175,151,84,84,49,49,48,52,56,53,54,84,244,141,175,152,84,84,49,49,48,52,56,53,55,84,244,141,175,153,84,84,49,49,48,52,56,53,56,84,244,141,175,154,84,84,49,49,48,52,56,53,57,84,244,141,175,155,84,84,49,49,48,52,56,54,48,84,244,141,175,156,84,84,49,49,48,52,56,54,49,84,244,141,175,157,84,84,49,49,48,52,56,54,50,84,244,141,175,158,84,84,49,49,48,52,56,54,51,84,244,141,175,159,84,84,49,49,48,52,56,54,52,84,244,141,175,160,84,84,49,49,48,52,56,54,53,84,244,141,175,161,84,84,49,49,48,52,56,54,54,84,244,141,175,162,84,84,49,49,48,52,56,54,55,84,244,141,175,163,84,84,49,49,48,52,56,54,56,84,244,141,175,164,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22645 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22645_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22645_s.txt", Encoding.UTF8);

    public Test22645() : base(recordedRequest, recordedResponse, "accounts8d43a048e2beca5")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048e2beca5",
                        container: "containers3974e1da6923423a9845f2ce644df77d",
                        blob: "Blob313a81caa6c64ca080b4ecefef1d7c44",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20126 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20126_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20126_s.txt", Encoding.UTF8);

    public Test20126() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers02552a2396c44255a61dd19b9714b3b6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,50,48,56,57,55,84,243,185,143,161,84,84,49,48,50,48,56,57,56,84,243,185,143,162,84,84,49,48,50,48,56,57,57,84,243,185,143,163,84,84,49,48,50,48,57,48,48,84,243,185,143,164,84,84,49,48,50,48,57,48,49,84,243,185,143,165,84,84,49,48,50,48,57,48,50,84,243,185,143,166,84,84,49,48,50,48,57,48,51,84,243,185,143,167,84,84,49,48,50,48,57,48,52,84,243,185,143,168,84,84,49,48,50,48,57,48,53,84,243,185,143,169,84,84,49,48,50,48,57,48,54,84,243,185,143,170,84,84,49,48,50,48,57,48,55,84,243,185,143,171,84,84,49,48,50,48,57,48,56,84,243,185,143,172,84,84,49,48,50,48,57,48,57,84,243,185,143,173,84,84,49,48,50,48,57,49,48,84,243,185,143,174,84,84,49,48,50,48,57,49,49,84,243,185,143,175,84,84,49,48,50,48,57,49,50,84,243,185,143,176,84,84,49,48,50,48,57,49,51,84,243,185,143,177,84,84,49,48,50,48,57,49,52,84,243,185,143,178,84,84,49,48,50,48,57,49,53,84,243,185,143,179,84,84,49,48,50,48,57,49,54,84,243,185,143,180,84,84,49,48,50,48,57,49,55,84,243,185,143,181,84,84,49,48,50,48,57,49,56,84,243,185,143,182,84,84,49,48,50,48,57,49,57,84,243,185,143,183,84,84,49,48,50,48,57,50,48,84,243,185,143,184,84,84,49,48,50,48,57,50,49,84,243,185,143,185,84,84,49,48,50,48,57,50,50,84,243,185,143,186,84,84,49,48,50,48,57,50,51,84,243,185,143,187,84,84,49,48,50,48,57,50,52,84,243,185,143,188,84,84,49,48,50,48,57,50,53,84,243,185,143,189,84,84,49,48,50,48,57,50,54,84,243,185,143,190,84,84,49,48,50,48,57,50,55,84,243,185,143,191,84,84,49,48,50,48,57,50,56,84,243,185,144,128,84,84,49,48,50,48,57,50,57,84,243,185,144,129,84,84,49,48,50,48,57,51,48,84,243,185,144,130,84,84,49,48,50,48,57,51,49,84,243,185,144,131,84,84,49,48,50,48,57,51,50,84,243,185,144,132,84,84,49,48,50,48,57,51,51,84,243,185,144,133,84,84,49,48,50,48,57,51,52,84,243,185,144,134,84,84,49,48,50,48,57,51,53,84,243,185,144,135,84,84,49,48,50,48,57,51,54,84,243,185,144,136,84,84,49,48,50,48,57,51,55,84,243,185,144,137,84,84,49,48,50,48,57,51,56,84,243,185,144,138,84,84,49,48,50,48,57,51,57,84,243,185,144,139,84,84,49,48,50,48,57,52,48,84,243,185,144,140,84,84,49,48,50,48,57,52,49,84,243,185,144,141,84,84,49,48,50,48,57,52,50,84,243,185,144,142,84,84,49,48,50,48,57,52,51,84,243,185,144,143,84,84,49,48,50,48,57,52,52,84,243,185,144,144,84,84,49,48,50,48,57,52,53,84,243,185,144,145,84,84,49,48,50,48,57,52,54,84,243,185,144,146,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22581 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22581_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22581_s.txt", Encoding.UTF8);

    public Test22581() : base(recordedRequest, recordedResponse, "accounts8d43a048d26afcd")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048d26afcd",
                        container: "containersddd934ca569845dc89778f0bd55316f0",
                        blob: "Blob3bf41d3657f0422a8a78855b5b928eae",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19961 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19961_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19961_s.txt", Encoding.UTF8);

    public Test19961() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersbf5ecfbea5a24d8a8188936c9be6fa20",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,57,53,52,48,51,84,243,179,129,139,84,84,57,57,53,52,48,52,84,243,179,129,140,84,84,57,57,53,52,48,53,84,243,179,129,141,84,84,57,57,53,52,48,54,84,243,179,129,142,84,84,57,57,53,52,48,55,84,243,179,129,143,84,84,57,57,53,52,48,56,84,243,179,129,144,84,84,57,57,53,52,48,57,84,243,179,129,145,84,84,57,57,53,52,49,48,84,243,179,129,146,84,84,57,57,53,52,49,49,84,243,179,129,147,84,84,57,57,53,52,49,50,84,243,179,129,148,84,84,57,57,53,52,49,51,84,243,179,129,149,84,84,57,57,53,52,49,52,84,243,179,129,150,84,84,57,57,53,52,49,53,84,243,179,129,151,84,84,57,57,53,52,49,54,84,243,179,129,152,84,84,57,57,53,52,49,55,84,243,179,129,153,84,84,57,57,53,52,49,56,84,243,179,129,154,84,84,57,57,53,52,49,57,84,243,179,129,155,84,84,57,57,53,52,50,48,84,243,179,129,156,84,84,57,57,53,52,50,49,84,243,179,129,157,84,84,57,57,53,52,50,50,84,243,179,129,158,84,84,57,57,53,52,50,51,84,243,179,129,159,84,84,57,57,53,52,50,52,84,243,179,129,160,84,84,57,57,53,52,50,53,84,243,179,129,161,84,84,57,57,53,52,50,54,84,243,179,129,162,84,84,57,57,53,52,50,55,84,243,179,129,163,84,84,57,57,53,52,50,56,84,243,179,129,164,84,84,57,57,53,52,50,57,84,243,179,129,165,84,84,57,57,53,52,51,48,84,243,179,129,166,84,84,57,57,53,52,51,49,84,243,179,129,167,84,84,57,57,53,52,51,50,84,243,179,129,168,84,84,57,57,53,52,51,51,84,243,179,129,169,84,84,57,57,53,52,51,52,84,243,179,129,170,84,84,57,57,53,52,51,53,84,243,179,129,171,84,84,57,57,53,52,51,54,84,243,179,129,172,84,84,57,57,53,52,51,55,84,243,179,129,173,84,84,57,57,53,52,51,56,84,243,179,129,174,84,84,57,57,53,52,51,57,84,243,179,129,175,84,84,57,57,53,52,52,48,84,243,179,129,176,84,84,57,57,53,52,52,49,84,243,179,129,177,84,84,57,57,53,52,52,50,84,243,179,129,178,84,84,57,57,53,52,52,51,84,243,179,129,179,84,84,57,57,53,52,52,52,84,243,179,129,180,84,84,57,57,53,52,52,53,84,243,179,129,181,84,84,57,57,53,52,52,54,84,243,179,129,182,84,84,57,57,53,52,52,55,84,243,179,129,183,84,84,57,57,53,52,52,56,84,243,179,129,184,84,84,57,57,53,52,52,57,84,243,179,129,185,84,84,57,57,53,52,53,48,84,243,179,129,186,84,84,57,57,53,52,53,49,84,243,179,129,187,84,84,57,57,53,52,53,50,84,243,179,129,188,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20856 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20856_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20856_s.txt", Encoding.UTF8);

    public Test20856() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersf4b0dcea8f7b4ccf92e1f36b952ddf93",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,51,52,54,57,84,244,141,153,173,84,84,49,49,48,51,52,55,48,84,244,141,153,174,84,84,49,49,48,51,52,55,49,84,244,141,153,175,84,84,49,49,48,51,52,55,50,84,244,141,153,176,84,84,49,49,48,51,52,55,51,84,244,141,153,177,84,84,49,49,48,51,52,55,52,84,244,141,153,178,84,84,49,49,48,51,52,55,53,84,244,141,153,179,84,84,49,49,48,51,52,55,54,84,244,141,153,180,84,84,49,49,48,51,52,55,55,84,244,141,153,181,84,84,49,49,48,51,52,55,56,84,244,141,153,182,84,84,49,49,48,51,52,55,57,84,244,141,153,183,84,84,49,49,48,51,52,56,48,84,244,141,153,184,84,84,49,49,48,51,52,56,49,84,244,141,153,185,84,84,49,49,48,51,52,56,50,84,244,141,153,186,84,84,49,49,48,51,52,56,51,84,244,141,153,187,84,84,49,49,48,51,52,56,52,84,244,141,153,188,84,84,49,49,48,51,52,56,53,84,244,141,153,189,84,84,49,49,48,51,52,56,54,84,244,141,153,190,84,84,49,49,48,51,52,56,55,84,244,141,153,191,84,84,49,49,48,51,52,56,56,84,244,141,154,128,84,84,49,49,48,51,52,56,57,84,244,141,154,129,84,84,49,49,48,51,52,57,48,84,244,141,154,130,84,84,49,49,48,51,52,57,49,84,244,141,154,131,84,84,49,49,48,51,52,57,50,84,244,141,154,132,84,84,49,49,48,51,52,57,51,84,244,141,154,133,84,84,49,49,48,51,52,57,52,84,244,141,154,134,84,84,49,49,48,51,52,57,53,84,244,141,154,135,84,84,49,49,48,51,52,57,54,84,244,141,154,136,84,84,49,49,48,51,52,57,55,84,244,141,154,137,84,84,49,49,48,51,52,57,56,84,244,141,154,138,84,84,49,49,48,51,52,57,57,84,244,141,154,139,84,84,49,49,48,51,53,48,48,84,244,141,154,140,84,84,49,49,48,51,53,48,49,84,244,141,154,141,84,84,49,49,48,51,53,48,50,84,244,141,154,142,84,84,49,49,48,51,53,48,51,84,244,141,154,143,84,84,49,49,48,51,53,48,52,84,244,141,154,144,84,84,49,49,48,51,53,48,53,84,244,141,154,145,84,84,49,49,48,51,53,48,54,84,244,141,154,146,84,84,49,49,48,51,53,48,55,84,244,141,154,147,84,84,49,49,48,51,53,48,56,84,244,141,154,148,84,84,49,49,48,51,53,48,57,84,244,141,154,149,84,84,49,49,48,51,53,49,48,84,244,141,154,150,84,84,49,49,48,51,53,49,49,84,244,141,154,151,84,84,49,49,48,51,53,49,50,84,244,141,154,152,84,84,49,49,48,51,53,49,51,84,244,141,154,153,84,84,49,49,48,51,53,49,52,84,244,141,154,154,84,84,49,49,48,51,53,49,53,84,244,141,154,155,84,84,49,49,48,51,53,49,54,84,244,141,154,156,84,84,49,49,48,51,53,49,55,84,244,141,154,157,84,84,49,49,48,51,53,49,56,84,244,141,154,158,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20253 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20253_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20253_s.txt", Encoding.UTF8);

    public Test20253() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersca1800aaa567470781b999118df6ba97",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,52,49,50,52,51,84,243,190,141,155,84,84,49,48,52,49,50,52,52,84,243,190,141,156,84,84,49,48,52,49,50,52,53,84,243,190,141,157,84,84,49,48,52,49,50,52,54,84,243,190,141,158,84,84,49,48,52,49,50,52,55,84,243,190,141,159,84,84,49,48,52,49,50,52,56,84,243,190,141,160,84,84,49,48,52,49,50,52,57,84,243,190,141,161,84,84,49,48,52,49,50,53,48,84,243,190,141,162,84,84,49,48,52,49,50,53,49,84,243,190,141,163,84,84,49,48,52,49,50,53,50,84,243,190,141,164,84,84,49,48,52,49,50,53,51,84,243,190,141,165,84,84,49,48,52,49,50,53,52,84,243,190,141,166,84,84,49,48,52,49,50,53,53,84,243,190,141,167,84,84,49,48,52,49,50,53,54,84,243,190,141,168,84,84,49,48,52,49,50,53,55,84,243,190,141,169,84,84,49,48,52,49,50,53,56,84,243,190,141,170,84,84,49,48,52,49,50,53,57,84,243,190,141,171,84,84,49,48,52,49,50,54,48,84,243,190,141,172,84,84,49,48,52,49,50,54,49,84,243,190,141,173,84,84,49,48,52,49,50,54,50,84,243,190,141,174,84,84,49,48,52,49,50,54,51,84,243,190,141,175,84,84,49,48,52,49,50,54,52,84,243,190,141,176,84,84,49,48,52,49,50,54,53,84,243,190,141,177,84,84,49,48,52,49,50,54,54,84,243,190,141,178,84,84,49,48,52,49,50,54,55,84,243,190,141,179,84,84,49,48,52,49,50,54,56,84,243,190,141,180,84,84,49,48,52,49,50,54,57,84,243,190,141,181,84,84,49,48,52,49,50,55,48,84,243,190,141,182,84,84,49,48,52,49,50,55,49,84,243,190,141,183,84,84,49,48,52,49,50,55,50,84,243,190,141,184,84,84,49,48,52,49,50,55,51,84,243,190,141,185,84,84,49,48,52,49,50,55,52,84,243,190,141,186,84,84,49,48,52,49,50,55,53,84,243,190,141,187,84,84,49,48,52,49,50,55,54,84,243,190,141,188,84,84,49,48,52,49,50,55,55,84,243,190,141,189,84,84,49,48,52,49,50,55,56,84,243,190,141,190,84,84,49,48,52,49,50,55,57,84,243,190,141,191,84,84,49,48,52,49,50,56,49,84,243,190,142,129,84,84,49,48,52,49,50,57,51,84,243,190,142,141,84,84,49,48,52,49,50,57,53,84,243,190,142,143,84,84,49,48,52,49,50,57,54,84,243,190,142,144,84,84,49,48,52,49,51,48,57,84,243,190,142,157,84,84,49,48,52,49,51,52,52,84,243,190,143,128,84,84,49,48,52,49,51,52,53,84,243,190,143,129,84,84,49,48,52,49,51,52,54,84,243,190,143,130,84,84,49,48,52,49,51,52,55,84,243,190,143,131,84,84,49,48,52,49,51,52,56,84,243,190,143,132,84,84,49,48,52,49,51,52,57,84,243,190,143,133,84,84,49,48,52,49,51,53,48,84,243,190,143,134,84,84,49,48,52,49,51,53,49,84,243,190,143,135,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20029 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20029_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20029_s.txt", Encoding.UTF8);

    public Test20029() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers612d6939acd44cdbbba30cffbd18a713",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,48,53,51,56,49,84,243,181,157,133,84,84,49,48,48,53,51,56,50,84,243,181,157,134,84,84,49,48,48,53,51,56,51,84,243,181,157,135,84,84,49,48,48,53,51,56,52,84,243,181,157,136,84,84,49,48,48,53,51,56,53,84,243,181,157,137,84,84,49,48,48,53,51,56,54,84,243,181,157,138,84,84,49,48,48,53,51,56,55,84,243,181,157,139,84,84,49,48,48,53,51,56,56,84,243,181,157,140,84,84,49,48,48,53,51,56,57,84,243,181,157,141,84,84,49,48,48,53,51,57,48,84,243,181,157,142,84,84,49,48,48,53,51,57,49,84,243,181,157,143,84,84,49,48,48,53,51,57,50,84,243,181,157,144,84,84,49,48,48,53,51,57,51,84,243,181,157,145,84,84,49,48,48,53,51,57,52,84,243,181,157,146,84,84,49,48,48,53,51,57,53,84,243,181,157,147,84,84,49,48,48,53,51,57,54,84,243,181,157,148,84,84,49,48,48,53,51,57,55,84,243,181,157,149,84,84,49,48,48,53,51,57,56,84,243,181,157,150,84,84,49,48,48,53,51,57,57,84,243,181,157,151,84,84,49,48,48,53,52,48,48,84,243,181,157,152,84,84,49,48,48,53,52,48,49,84,243,181,157,153,84,84,49,48,48,53,52,48,50,84,243,181,157,154,84,84,49,48,48,53,52,48,51,84,243,181,157,155,84,84,49,48,48,53,52,48,52,84,243,181,157,156,84,84,49,48,48,53,52,48,53,84,243,181,157,157,84,84,49,48,48,53,52,48,54,84,243,181,157,158,84,84,49,48,48,53,52,48,55,84,243,181,157,159,84,84,49,48,48,53,52,48,56,84,243,181,157,160,84,84,49,48,48,53,52,48,57,84,243,181,157,161,84,84,49,48,48,53,52,49,48,84,243,181,157,162,84,84,49,48,48,53,52,49,49,84,243,181,157,163,84,84,49,48,48,53,52,49,50,84,243,181,157,164,84,84,49,48,48,53,52,49,51,84,243,181,157,165,84,84,49,48,48,53,52,49,52,84,243,181,157,166,84,84,49,48,48,53,52,49,53,84,243,181,157,167,84,84,49,48,48,53,52,49,54,84,243,181,157,168,84,84,49,48,48,53,52,49,55,84,243,181,157,169,84,84,49,48,48,53,52,49,56,84,243,181,157,170,84,84,49,48,48,53,52,49,57,84,243,181,157,171,84,84,49,48,48,53,52,50,48,84,243,181,157,172,84,84,49,48,48,53,52,50,49,84,243,181,157,173,84,84,49,48,48,53,52,50,50,84,243,181,157,174,84,84,49,48,48,53,52,50,51,84,243,181,157,175,84,84,49,48,48,53,52,50,52,84,243,181,157,176,84,84,49,48,48,53,52,50,53,84,243,181,157,177,84,84,49,48,48,53,52,50,54,84,243,181,157,178,84,84,49,48,48,53,52,50,55,84,243,181,157,179,84,84,49,48,48,53,52,50,56,84,243,181,157,180,84,84,49,48,48,53,52,50,57,84,243,181,157,181,84,84,49,48,48,53,52,51,48,84,243,181,157,182,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20312 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20312_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20312_s.txt", Encoding.UTF8);

    public Test20312() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers412024b733e349978217e6093afed677",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,52,57,54,49,52,84,244,128,144,142,84,84,49,48,52,57,54,49,53,84,244,128,144,143,84,84,49,48,52,57,54,49,54,84,244,128,144,144,84,84,49,48,52,57,54,49,55,84,244,128,144,145,84,84,49,48,52,57,54,49,56,84,244,128,144,146,84,84,49,48,52,57,54,49,57,84,244,128,144,147,84,84,49,48,52,57,54,50,48,84,244,128,144,148,84,84,49,48,52,57,54,50,49,84,244,128,144,149,84,84,49,48,52,57,54,50,50,84,244,128,144,150,84,84,49,48,52,57,54,50,51,84,244,128,144,151,84,84,49,48,52,57,54,50,52,84,244,128,144,152,84,84,49,48,52,57,54,50,53,84,244,128,144,153,84,84,49,48,52,57,54,50,54,84,244,128,144,154,84,84,49,48,52,57,54,50,55,84,244,128,144,155,84,84,49,48,52,57,54,50,56,84,244,128,144,156,84,84,49,48,52,57,54,50,57,84,244,128,144,157,84,84,49,48,52,57,54,51,48,84,244,128,144,158,84,84,49,48,52,57,54,51,49,84,244,128,144,159,84,84,49,48,52,57,54,51,50,84,244,128,144,160,84,84,49,48,52,57,54,51,51,84,244,128,144,161,84,84,49,48,52,57,54,51,52,84,244,128,144,162,84,84,49,48,52,57,54,51,53,84,244,128,144,163,84,84,49,48,52,57,54,51,54,84,244,128,144,164,84,84,49,48,52,57,54,51,55,84,244,128,144,165,84,84,49,48,52,57,54,51,56,84,244,128,144,166,84,84,49,48,52,57,54,51,57,84,244,128,144,167,84,84,49,48,52,57,54,52,48,84,244,128,144,168,84,84,49,48,52,57,54,52,49,84,244,128,144,169,84,84,49,48,52,57,54,52,50,84,244,128,144,170,84,84,49,48,52,57,54,52,51,84,244,128,144,171,84,84,49,48,52,57,54,52,52,84,244,128,144,172,84,84,49,48,52,57,54,52,53,84,244,128,144,173,84,84,49,48,52,57,54,52,54,84,244,128,144,174,84,84,49,48,52,57,54,52,55,84,244,128,144,175,84,84,49,48,52,57,54,52,56,84,244,128,144,176,84,84,49,48,52,57,54,52,57,84,244,128,144,177,84,84,49,48,52,57,54,53,48,84,244,128,144,178,84,84,49,48,52,57,54,53,49,84,244,128,144,179,84,84,49,48,52,57,54,53,50,84,244,128,144,180,84,84,49,48,52,57,54,53,51,84,244,128,144,181,84,84,49,48,52,57,54,53,52,84,244,128,144,182,84,84,49,48,52,57,54,53,53,84,244,128,144,183,84,84,49,48,52,57,54,53,54,84,244,128,144,184,84,84,49,48,52,57,54,53,55,84,244,128,144,185,84,84,49,48,52,57,54,53,56,84,244,128,144,186,84,84,49,48,52,57,54,53,57,84,244,128,144,187,84,84,49,48,52,57,54,54,48,84,244,128,144,188,84,84,49,48,52,57,54,54,49,84,244,128,144,189,84,84,49,48,52,57,54,54,50,84,244,128,144,190,84,84,49,48,52,57,54,54,51,84,244,128,144,191,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22646 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22646_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22646_s.txt", Encoding.UTF8);

    public Test22646() : base(recordedRequest, recordedResponse, "accounts8d43a048e2beca5")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048e2beca5",
                        container: "containers3974e1da6923423a9845f2ce644df77d",
                        blob: "Blobcb4c3a4c59c445aab76deaf7a0110447",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21108 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21108_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21108_s.txt", Encoding.UTF8);

    public Test21108() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers79aa3dd90e344ebe9466f3cb0c56378a",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,50,57,48,48,84,244,143,173,132,84,84,49,49,49,50,57,48,49,84,244,143,173,133,84,84,49,49,49,50,57,48,50,84,244,143,173,134,84,84,49,49,49,50,57,48,51,84,244,143,173,135,84,84,49,49,49,50,57,48,52,84,244,143,173,136,84,84,49,49,49,50,57,48,53,84,244,143,173,137,84,84,49,49,49,50,57,48,54,84,244,143,173,138,84,84,49,49,49,50,57,48,55,84,244,143,173,139,84,84,49,49,49,50,57,48,56,84,244,143,173,140,84,84,49,49,49,50,57,48,57,84,244,143,173,141,84,84,49,49,49,50,57,49,48,84,244,143,173,142,84,84,49,49,49,50,57,49,49,84,244,143,173,143,84,84,49,49,49,50,57,49,50,84,244,143,173,144,84,84,49,49,49,50,57,49,51,84,244,143,173,145,84,84,49,49,49,50,57,49,52,84,244,143,173,146,84,84,49,49,49,50,57,49,53,84,244,143,173,147,84,84,49,49,49,50,57,49,54,84,244,143,173,148,84,84,49,49,49,50,57,49,55,84,244,143,173,149,84,84,49,49,49,50,57,49,56,84,244,143,173,150,84,84,49,49,49,50,57,49,57,84,244,143,173,151,84,84,49,49,49,50,57,50,48,84,244,143,173,152,84,84,49,49,49,50,57,50,49,84,244,143,173,153,84,84,49,49,49,50,57,50,50,84,244,143,173,154,84,84,49,49,49,50,57,50,51,84,244,143,173,155,84,84,49,49,49,50,57,50,52,84,244,143,173,156,84,84,49,49,49,50,57,50,53,84,244,143,173,157,84,84,49,49,49,50,57,50,54,84,244,143,173,158,84,84,49,49,49,50,57,50,55,84,244,143,173,159,84,84,49,49,49,50,57,50,56,84,244,143,173,160,84,84,49,49,49,50,57,50,57,84,244,143,173,161,84,84,49,49,49,50,57,51,48,84,244,143,173,162,84,84,49,49,49,50,57,51,49,84,244,143,173,163,84,84,49,49,49,50,57,51,50,84,244,143,173,164,84,84,49,49,49,50,57,51,51,84,244,143,173,165,84,84,49,49,49,50,57,51,52,84,244,143,173,166,84,84,49,49,49,50,57,51,53,84,244,143,173,167,84,84,49,49,49,50,57,51,54,84,244,143,173,168,84,84,49,49,49,50,57,51,55,84,244,143,173,169,84,84,49,49,49,50,57,51,56,84,244,143,173,170,84,84,49,49,49,50,57,51,57,84,244,143,173,171,84,84,49,49,49,50,57,52,48,84,244,143,173,172,84,84,49,49,49,50,57,52,49,84,244,143,173,173,84,84,49,49,49,50,57,52,50,84,244,143,173,174,84,84,49,49,49,50,57,52,51,84,244,143,173,175,84,84,49,49,49,50,57,52,52,84,244,143,173,176,84,84,49,49,49,50,57,52,53,84,244,143,173,177,84,84,49,49,49,50,57,52,54,84,244,143,173,178,84,84,49,49,49,50,57,52,55,84,244,143,173,179,84,84,49,49,49,50,57,52,56,84,244,143,173,180,84,84,49,49,49,50,57,52,57,84,244,143,173,181,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22582 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22582_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22582_s.txt", Encoding.UTF8);

    public Test22582() : base(recordedRequest, recordedResponse, "accounts8d43a048d26afcd")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048d26afcd",
                        container: "containersddd934ca569845dc89778f0bd55316f0",
                        blob: "Blob50ac26dcc58e41a28bcbffbdfa06dd70",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20634 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20634_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20634_s.txt", Encoding.UTF8);

    public Test20634() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers5f5b393ed8e742338d6031fb2e225092",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,55,55,53,56,49,84,244,135,133,141,84,84,49,48,55,55,53,56,51,84,244,135,133,143,84,84,49,48,55,55,53,56,52,84,244,135,133,144,84,84,49,48,55,55,53,57,55,84,244,135,133,157,84,84,49,48,55,55,54,51,51,84,244,135,134,129,84,84,49,48,55,55,54,52,53,84,244,135,134,141,84,84,49,48,55,55,54,52,55,84,244,135,134,143,84,84,49,48,55,55,54,52,56,84,244,135,134,144,84,84,49,48,55,55,54,54,49,84,244,135,134,157,84,84,49,48,55,55,54,57,55,84,244,135,135,129,84,84,49,48,55,55,55,48,57,84,244,135,135,141,84,84,49,48,55,55,55,49,49,84,244,135,135,143,84,84,49,48,55,55,55,49,50,84,244,135,135,144,84,84,49,48,55,55,55,50,53,84,244,135,135,157,84,84,49,48,55,55,55,54,49,84,244,135,136,129,84,84,49,48,55,55,55,55,51,84,244,135,136,141,84,84,49,48,55,55,55,55,53,84,244,135,136,143,84,84,49,48,55,55,55,55,54,84,244,135,136,144,84,84,49,48,55,55,55,56,57,84,244,135,136,157,84,84,49,48,55,55,56,50,53,84,244,135,137,129,84,84,49,48,55,55,56,51,55,84,244,135,137,141,84,84,49,48,55,55,56,51,57,84,244,135,137,143,84,84,49,48,55,55,56,52,48,84,244,135,137,144,84,84,49,48,55,55,56,53,51,84,244,135,137,157,84,84,49,48,55,55,56,56,57,84,244,135,138,129,84,84,49,48,55,55,57,48,49,84,244,135,138,141,84,84,49,48,55,55,57,48,51,84,244,135,138,143,84,84,49,48,55,55,57,48,52,84,244,135,138,144,84,84,49,48,55,55,57,49,55,84,244,135,138,157,84,84,49,48,55,55,57,53,51,84,244,135,139,129,84,84,49,48,55,55,57,54,53,84,244,135,139,141,84,84,49,48,55,55,57,54,55,84,244,135,139,143,84,84,49,48,55,55,57,54,56,84,244,135,139,144,84,84,49,48,55,55,57,56,49,84,244,135,139,157,84,84,49,48,55,56,48,49,55,84,244,135,140,129,84,84,49,48,55,56,48,50,57,84,244,135,140,141,84,84,49,48,55,56,48,51,49,84,244,135,140,143,84,84,49,48,55,56,48,51,50,84,244,135,140,144,84,84,49,48,55,56,48,52,53,84,244,135,140,157,84,84,49,48,55,56,48,56,48,84,244,135,141,128,84,84,49,48,55,56,48,56,49,84,244,135,141,129,84,84,49,48,55,56,48,56,50,84,244,135,141,130,84,84,49,48,55,56,48,56,51,84,244,135,141,131,84,84,49,48,55,56,48,56,52,84,244,135,141,132,84,84,49,48,55,56,48,56,53,84,244,135,141,133,84,84,49,48,55,56,48,56,54,84,244,135,141,134,84,84,49,48,55,56,48,56,55,84,244,135,141,135,84,84,49,48,55,56,48,56,56,84,244,135,141,136,84,84,49,48,55,56,48,56,57,84,244,135,141,137,84,84,49,48,55,56,48,57,48,84,244,135,141,138,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20445 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20445_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20445_s.txt", Encoding.UTF8);

    public Test20445() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersee5ddc6232b847869028904d3d06a0f3",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,53,52,55,56,84,244,129,171,182,84,84,49,48,53,53,52,55,57,84,244,129,171,183,84,84,49,48,53,53,52,56,48,84,244,129,171,184,84,84,49,48,53,53,52,56,49,84,244,129,171,185,84,84,49,48,53,53,52,56,50,84,244,129,171,186,84,84,49,48,53,53,52,56,51,84,244,129,171,187,84,84,49,48,53,53,52,56,52,84,244,129,171,188,84,84,49,48,53,53,52,56,53,84,244,129,171,189,84,84,49,48,53,53,52,56,54,84,244,129,171,190,84,84,49,48,53,53,52,56,55,84,244,129,171,191,84,84,49,48,53,53,52,56,56,84,244,129,172,128,84,84,49,48,53,53,52,56,57,84,244,129,172,129,84,84,49,48,53,53,52,57,48,84,244,129,172,130,84,84,49,48,53,53,52,57,49,84,244,129,172,131,84,84,49,48,53,53,52,57,50,84,244,129,172,132,84,84,49,48,53,53,52,57,51,84,244,129,172,133,84,84,49,48,53,53,52,57,52,84,244,129,172,134,84,84,49,48,53,53,52,57,53,84,244,129,172,135,84,84,49,48,53,53,52,57,54,84,244,129,172,136,84,84,49,48,53,53,52,57,55,84,244,129,172,137,84,84,49,48,53,53,52,57,56,84,244,129,172,138,84,84,49,48,53,53,52,57,57,84,244,129,172,139,84,84,49,48,53,53,53,48,48,84,244,129,172,140,84,84,49,48,53,53,53,48,49,84,244,129,172,141,84,84,49,48,53,53,53,48,50,84,244,129,172,142,84,84,49,48,53,53,53,48,51,84,244,129,172,143,84,84,49,48,53,53,53,48,52,84,244,129,172,144,84,84,49,48,53,53,53,48,53,84,244,129,172,145,84,84,49,48,53,53,53,48,54,84,244,129,172,146,84,84,49,48,53,53,53,48,55,84,244,129,172,147,84,84,49,48,53,53,53,48,56,84,244,129,172,148,84,84,49,48,53,53,53,48,57,84,244,129,172,149,84,84,49,48,53,53,53,49,48,84,244,129,172,150,84,84,49,48,53,53,53,49,49,84,244,129,172,151,84,84,49,48,53,53,53,49,50,84,244,129,172,152,84,84,49,48,53,53,53,49,51,84,244,129,172,153,84,84,49,48,53,53,53,49,52,84,244,129,172,154,84,84,49,48,53,53,53,49,53,84,244,129,172,155,84,84,49,48,53,53,53,49,54,84,244,129,172,156,84,84,49,48,53,53,53,49,55,84,244,129,172,157,84,84,49,48,53,53,53,49,56,84,244,129,172,158,84,84,49,48,53,53,53,49,57,84,244,129,172,159,84,84,49,48,53,53,53,50,48,84,244,129,172,160,84,84,49,48,53,53,53,50,49,84,244,129,172,161,84,84,49,48,53,53,53,50,50,84,244,129,172,162,84,84,49,48,53,53,53,50,51,84,244,129,172,163,84,84,49,48,53,53,53,50,52,84,244,129,172,164,84,84,49,48,53,53,53,50,53,84,244,129,172,165,84,84,49,48,53,53,53,50,54,84,244,129,172,166,84,84,49,48,53,53,53,50,55,84,244,129,172,167,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20090 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20090_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20090_s.txt", Encoding.UTF8);

    public Test20090() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersb3c703c6e551430d9c914c24c3792dd5",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,49,53,54,57,51,84,243,183,190,141,84,84,49,48,49,53,54,57,53,84,243,183,190,143,84,84,49,48,49,53,54,57,54,84,243,183,190,144,84,84,49,48,49,53,55,48,57,84,243,183,190,157,84,84,49,48,49,53,55,52,53,84,243,183,191,129,84,84,49,48,49,53,55,53,55,84,243,183,191,141,84,84,49,48,49,53,55,53,57,84,243,183,191,143,84,84,49,48,49,53,55,54,48,84,243,183,191,144,84,84,49,48,49,53,55,55,51,84,243,183,191,157,84,84,49,48,49,53,56,48,57,84,243,184,128,129,84,84,49,48,49,53,56,50,49,84,243,184,128,141,84,84,49,48,49,53,56,50,51,84,243,184,128,143,84,84,49,48,49,53,56,50,52,84,243,184,128,144,84,84,49,48,49,53,56,51,55,84,243,184,128,157,84,84,49,48,49,53,56,55,50,84,243,184,129,128,84,84,49,48,49,53,56,55,51,84,243,184,129,129,84,84,49,48,49,53,56,55,52,84,243,184,129,130,84,84,49,48,49,53,56,55,53,84,243,184,129,131,84,84,49,48,49,53,56,55,54,84,243,184,129,132,84,84,49,48,49,53,56,55,55,84,243,184,129,133,84,84,49,48,49,53,56,55,56,84,243,184,129,134,84,84,49,48,49,53,56,55,57,84,243,184,129,135,84,84,49,48,49,53,56,56,48,84,243,184,129,136,84,84,49,48,49,53,56,56,49,84,243,184,129,137,84,84,49,48,49,53,56,56,50,84,243,184,129,138,84,84,49,48,49,53,56,56,51,84,243,184,129,139,84,84,49,48,49,53,56,56,52,84,243,184,129,140,84,84,49,48,49,53,56,56,53,84,243,184,129,141,84,84,49,48,49,53,56,56,54,84,243,184,129,142,84,84,49,48,49,53,56,56,55,84,243,184,129,143,84,84,49,48,49,53,56,56,56,84,243,184,129,144,84,84,49,48,49,53,56,56,57,84,243,184,129,145,84,84,49,48,49,53,56,57,48,84,243,184,129,146,84,84,49,48,49,53,56,57,49,84,243,184,129,147,84,84,49,48,49,53,56,57,50,84,243,184,129,148,84,84,49,48,49,53,56,57,51,84,243,184,129,149,84,84,49,48,49,53,56,57,52,84,243,184,129,150,84,84,49,48,49,53,56,57,53,84,243,184,129,151,84,84,49,48,49,53,56,57,54,84,243,184,129,152,84,84,49,48,49,53,56,57,55,84,243,184,129,153,84,84,49,48,49,53,56,57,56,84,243,184,129,154,84,84,49,48,49,53,56,57,57,84,243,184,129,155,84,84,49,48,49,53,57,48,48,84,243,184,129,156,84,84,49,48,49,53,57,48,49,84,243,184,129,157,84,84,49,48,49,53,57,48,50,84,243,184,129,158,84,84,49,48,49,53,57,48,51,84,243,184,129,159,84,84,49,48,49,53,57,48,52,84,243,184,129,160,84,84,49,48,49,53,57,48,53,84,243,184,129,161,84,84,49,48,49,53,57,48,54,84,243,184,129,162,84,84,49,48,49,53,57,48,55,84,243,184,129,163,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22583 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22583_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22583_s.txt", Encoding.UTF8);

    public Test22583() : base(recordedRequest, recordedResponse, "accounts8d43a048d26afcd")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048d26afcd",
                        container: "containersddd934ca569845dc89778f0bd55316f0",
                        blob: "Blob01e1b2344c2e4c0bb008ea7e91227269",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22647 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22647_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22647_s.txt", Encoding.UTF8);

    public Test22647() : base(recordedRequest, recordedResponse, "accounts8d43a048e2beca5")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048e2beca5",
                        container: "containers3974e1da6923423a9845f2ce644df77d",
                        blob: "Blobaab774b5f49a412995d34f3ba6be2515",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22584 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22584_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22584_s.txt", Encoding.UTF8);

    public Test22584() : base(recordedRequest, recordedResponse, "accounts8d43a048d26afcd")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048d26afcd",
                        container: "containersddd934ca569845dc89778f0bd55316f0",
                        blob: "Bloba8edd2205f384e0c96b073f8b560080f",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20407 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20407_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20407_s.txt", Encoding.UTF8);

    public Test20407() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers7f83ba854dc4459da9078f97f691d28c",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,52,53,55,56,84,244,129,157,178,84,84,49,48,53,52,53,55,57,84,244,129,157,179,84,84,49,48,53,52,53,56,48,84,244,129,157,180,84,84,49,48,53,52,53,56,49,84,244,129,157,181,84,84,49,48,53,52,53,56,50,84,244,129,157,182,84,84,49,48,53,52,53,56,51,84,244,129,157,183,84,84,49,48,53,52,53,56,52,84,244,129,157,184,84,84,49,48,53,52,53,56,53,84,244,129,157,185,84,84,49,48,53,52,53,56,54,84,244,129,157,186,84,84,49,48,53,52,53,56,55,84,244,129,157,187,84,84,49,48,53,52,53,56,56,84,244,129,157,188,84,84,49,48,53,52,53,56,57,84,244,129,157,189,84,84,49,48,53,52,53,57,48,84,244,129,157,190,84,84,49,48,53,52,53,57,49,84,244,129,157,191,84,84,49,48,53,52,53,57,50,84,244,129,158,128,84,84,49,48,53,52,53,57,51,84,244,129,158,129,84,84,49,48,53,52,53,57,52,84,244,129,158,130,84,84,49,48,53,52,53,57,53,84,244,129,158,131,84,84,49,48,53,52,53,57,54,84,244,129,158,132,84,84,49,48,53,52,53,57,55,84,244,129,158,133,84,84,49,48,53,52,53,57,56,84,244,129,158,134,84,84,49,48,53,52,53,57,57,84,244,129,158,135,84,84,49,48,53,52,54,48,48,84,244,129,158,136,84,84,49,48,53,52,54,48,49,84,244,129,158,137,84,84,49,48,53,52,54,48,50,84,244,129,158,138,84,84,49,48,53,52,54,48,51,84,244,129,158,139,84,84,49,48,53,52,54,48,52,84,244,129,158,140,84,84,49,48,53,52,54,48,53,84,244,129,158,141,84,84,49,48,53,52,54,48,54,84,244,129,158,142,84,84,49,48,53,52,54,48,55,84,244,129,158,143,84,84,49,48,53,52,54,48,56,84,244,129,158,144,84,84,49,48,53,52,54,48,57,84,244,129,158,145,84,84,49,48,53,52,54,49,48,84,244,129,158,146,84,84,49,48,53,52,54,49,49,84,244,129,158,147,84,84,49,48,53,52,54,49,50,84,244,129,158,148,84,84,49,48,53,52,54,49,51,84,244,129,158,149,84,84,49,48,53,52,54,49,52,84,244,129,158,150,84,84,49,48,53,52,54,49,53,84,244,129,158,151,84,84,49,48,53,52,54,49,54,84,244,129,158,152,84,84,49,48,53,52,54,49,55,84,244,129,158,153,84,84,49,48,53,52,54,49,56,84,244,129,158,154,84,84,49,48,53,52,54,49,57,84,244,129,158,155,84,84,49,48,53,52,54,50,48,84,244,129,158,156,84,84,49,48,53,52,54,50,49,84,244,129,158,157,84,84,49,48,53,52,54,50,50,84,244,129,158,158,84,84,49,48,53,52,54,50,51,84,244,129,158,159,84,84,49,48,53,52,54,50,52,84,244,129,158,160,84,84,49,48,53,52,54,50,53,84,244,129,158,161,84,84,49,48,53,52,54,50,54,84,244,129,158,162,84,84,49,48,53,52,54,50,55,84,244,129,158,163,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22648 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22648_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22648_s.txt", Encoding.UTF8);

    public Test22648() : base(recordedRequest, recordedResponse, "accounts8d43a048e2beca5")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048e2beca5",
                        container: "containers3974e1da6923423a9845f2ce644df77d",
                        blob: "Blob7ad7a4256ddc438aad4240f5b3862ecf",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20352 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20352_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20352_s.txt", Encoding.UTF8);

    public Test20352() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers319eca44915441a6b60a6025f5eab2bd",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,51,50,55,56,84,244,129,137,158,84,84,49,48,53,51,50,55,57,84,244,129,137,159,84,84,49,48,53,51,50,56,48,84,244,129,137,160,84,84,49,48,53,51,50,56,49,84,244,129,137,161,84,84,49,48,53,51,50,56,50,84,244,129,137,162,84,84,49,48,53,51,50,56,51,84,244,129,137,163,84,84,49,48,53,51,50,56,52,84,244,129,137,164,84,84,49,48,53,51,50,56,53,84,244,129,137,165,84,84,49,48,53,51,50,56,54,84,244,129,137,166,84,84,49,48,53,51,50,56,55,84,244,129,137,167,84,84,49,48,53,51,50,56,56,84,244,129,137,168,84,84,49,48,53,51,50,56,57,84,244,129,137,169,84,84,49,48,53,51,50,57,48,84,244,129,137,170,84,84,49,48,53,51,50,57,49,84,244,129,137,171,84,84,49,48,53,51,50,57,50,84,244,129,137,172,84,84,49,48,53,51,50,57,51,84,244,129,137,173,84,84,49,48,53,51,50,57,52,84,244,129,137,174,84,84,49,48,53,51,50,57,53,84,244,129,137,175,84,84,49,48,53,51,50,57,54,84,244,129,137,176,84,84,49,48,53,51,50,57,55,84,244,129,137,177,84,84,49,48,53,51,50,57,56,84,244,129,137,178,84,84,49,48,53,51,50,57,57,84,244,129,137,179,84,84,49,48,53,51,51,48,48,84,244,129,137,180,84,84,49,48,53,51,51,48,49,84,244,129,137,181,84,84,49,48,53,51,51,48,50,84,244,129,137,182,84,84,49,48,53,51,51,48,51,84,244,129,137,183,84,84,49,48,53,51,51,48,52,84,244,129,137,184,84,84,49,48,53,51,51,48,53,84,244,129,137,185,84,84,49,48,53,51,51,48,54,84,244,129,137,186,84,84,49,48,53,51,51,48,55,84,244,129,137,187,84,84,49,48,53,51,51,48,56,84,244,129,137,188,84,84,49,48,53,51,51,48,57,84,244,129,137,189,84,84,49,48,53,51,51,49,48,84,244,129,137,190,84,84,49,48,53,51,51,49,49,84,244,129,137,191,84,84,49,48,53,51,51,49,50,84,244,129,138,128,84,84,49,48,53,51,51,49,51,84,244,129,138,129,84,84,49,48,53,51,51,49,52,84,244,129,138,130,84,84,49,48,53,51,51,49,53,84,244,129,138,131,84,84,49,48,53,51,51,49,54,84,244,129,138,132,84,84,49,48,53,51,51,49,55,84,244,129,138,133,84,84,49,48,53,51,51,49,56,84,244,129,138,134,84,84,49,48,53,51,51,49,57,84,244,129,138,135,84,84,49,48,53,51,51,50,48,84,244,129,138,136,84,84,49,48,53,51,51,50,49,84,244,129,138,137,84,84,49,48,53,51,51,50,50,84,244,129,138,138,84,84,49,48,53,51,51,50,51,84,244,129,138,139,84,84,49,48,53,51,51,50,52,84,244,129,138,140,84,84,49,48,53,51,51,50,53,84,244,129,138,141,84,84,49,48,53,51,51,50,54,84,244,129,138,142,84,84,49,48,53,51,51,50,55,84,244,129,138,143,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20255 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20255_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20255_s.txt", Encoding.UTF8);

    public Test20255() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersca1800aaa567470781b999118df6ba97",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,52,49,51,53,50,84,243,190,143,136,84,84,49,48,52,49,51,53,51,84,243,190,143,137,84,84,49,48,52,49,51,53,52,84,243,190,143,138,84,84,49,48,52,49,51,53,53,84,243,190,143,139,84,84,49,48,52,49,51,53,54,84,243,190,143,140,84,84,49,48,52,49,51,53,55,84,243,190,143,141,84,84,49,48,52,49,51,53,56,84,243,190,143,142,84,84,49,48,52,49,51,53,57,84,243,190,143,143,84,84,49,48,52,49,51,54,48,84,243,190,143,144,84,84,49,48,52,49,51,54,49,84,243,190,143,145,84,84,49,48,52,49,51,54,50,84,243,190,143,146,84,84,49,48,52,49,51,54,51,84,243,190,143,147,84,84,49,48,52,49,51,54,52,84,243,190,143,148,84,84,49,48,52,49,51,54,53,84,243,190,143,149,84,84,49,48,52,49,51,54,54,84,243,190,143,150,84,84,49,48,52,49,51,54,55,84,243,190,143,151,84,84,49,48,52,49,51,54,56,84,243,190,143,152,84,84,49,48,52,49,51,54,57,84,243,190,143,153,84,84,49,48,52,49,51,55,48,84,243,190,143,154,84,84,49,48,52,49,51,55,49,84,243,190,143,155,84,84,49,48,52,49,51,55,50,84,243,190,143,156,84,84,49,48,52,49,51,55,51,84,243,190,143,157,84,84,49,48,52,49,51,55,52,84,243,190,143,158,84,84,49,48,52,49,51,55,53,84,243,190,143,159,84,84,49,48,52,49,51,55,54,84,243,190,143,160,84,84,49,48,52,49,51,55,55,84,243,190,143,161,84,84,49,48,52,49,51,55,56,84,243,190,143,162,84,84,49,48,52,49,51,55,57,84,243,190,143,163,84,84,49,48,52,49,51,56,48,84,243,190,143,164,84,84,49,48,52,49,51,56,49,84,243,190,143,165,84,84,49,48,52,49,51,56,50,84,243,190,143,166,84,84,49,48,52,49,51,56,51,84,243,190,143,167,84,84,49,48,52,49,51,56,52,84,243,190,143,168,84,84,49,48,52,49,51,56,53,84,243,190,143,169,84,84,49,48,52,49,51,56,54,84,243,190,143,170,84,84,49,48,52,49,51,56,55,84,243,190,143,171,84,84,49,48,52,49,51,56,56,84,243,190,143,172,84,84,49,48,52,49,51,56,57,84,243,190,143,173,84,84,49,48,52,49,51,57,48,84,243,190,143,174,84,84,49,48,52,49,51,57,49,84,243,190,143,175,84,84,49,48,52,49,51,57,50,84,243,190,143,176,84,84,49,48,52,49,51,57,51,84,243,190,143,177,84,84,49,48,52,49,51,57,52,84,243,190,143,178,84,84,49,48,52,49,51,57,53,84,243,190,143,179,84,84,49,48,52,49,51,57,54,84,243,190,143,180,84,84,49,48,52,49,51,57,55,84,243,190,143,181,84,84,49,48,52,49,51,57,56,84,243,190,143,182,84,84,49,48,52,49,51,57,57,84,243,190,143,183,84,84,49,48,52,49,52,48,48,84,243,190,143,184,84,84,49,48,52,49,52,48,49,84,243,190,143,185,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19836 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19836_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19836_s.txt", Encoding.UTF8);

    public Test19836() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers3d1fce2fe43b489ca49e5d4066014499",
                        blob: Encoding.UTF8.GetString(new byte[]{84,54,50,50,57,53,84,239,141,151,84,84,54,50,50,57,54,84,239,141,152,84,84,54,50,50,57,55,84,239,141,153,84,84,54,50,50,57,56,84,239,141,154,84,84,54,50,50,57,57,84,239,141,155,84,84,54,50,51,48,48,84,239,141,156,84,84,54,50,51,48,49,84,239,141,157,84,84,54,50,51,48,50,84,239,141,158,84,84,54,50,51,48,51,84,239,141,159,84,84,54,50,51,48,52,84,239,141,160,84,84,54,50,51,48,53,84,239,141,161,84,84,54,50,51,48,54,84,239,141,162,84,84,54,50,51,48,55,84,239,141,163,84,84,54,50,51,48,56,84,239,141,164,84,84,54,50,51,48,57,84,239,141,165,84,84,54,50,51,49,48,84,239,141,166,84,84,54,50,51,49,49,84,239,141,167,84,84,54,50,51,49,50,84,239,141,168,84,84,54,50,51,49,51,84,239,141,169,84,84,54,50,51,49,52,84,239,141,170,84,84,54,50,51,49,53,84,239,141,171,84,84,54,50,51,49,54,84,239,141,172,84,84,54,50,51,49,55,84,239,141,173,84,84,54,50,51,49,56,84,239,141,174,84,84,54,50,51,49,57,84,239,141,175,84,84,54,50,51,50,48,84,239,141,176,84,84,54,50,51,50,49,84,239,141,177,84,84,54,50,51,50,50,84,239,141,178,84,84,54,50,51,50,51,84,239,141,179,84,84,54,50,51,50,52,84,239,141,180,84,84,54,50,51,50,53,84,239,141,181,84,84,54,50,51,50,54,84,239,141,182,84,84,54,50,51,50,55,84,239,141,183,84,84,54,50,51,50,56,84,239,141,184,84,84,54,50,51,50,57,84,239,141,185,84,84,54,50,51,51,48,84,239,141,186,84,84,54,50,51,51,49,84,239,141,187,84,84,54,50,51,51,50,84,239,141,188,84,84,54,50,51,51,51,84,239,141,189,84,84,54,50,51,51,52,84,239,141,190,84,84,54,50,51,51,53,84,239,141,191,84,84,54,50,51,51,55,84,239,142,129,84,84,54,50,51,52,57,84,239,142,141,84,84,54,50,51,53,49,84,239,142,143,84,84,54,50,51,53,50,84,239,142,144,84,84,54,50,51,54,53,84,239,142,157,84,84,54,50,52,48,48,84,239,143,128,84,84,54,50,52,48,49,84,239,143,129,84,84,54,50,52,48,50,84,239,143,130,84,84,54,50,52,48,51,84,239,143,131,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20917 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20917_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20917_s.txt", Encoding.UTF8);

    public Test20917() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers9e891393b2624599aedf317812121dcf",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,52,56,54,57,84,244,141,175,165,84,84,49,49,48,52,56,55,48,84,244,141,175,166,84,84,49,49,48,52,56,55,49,84,244,141,175,167,84,84,49,49,48,52,56,55,50,84,244,141,175,168,84,84,49,49,48,52,56,55,51,84,244,141,175,169,84,84,49,49,48,52,56,55,52,84,244,141,175,170,84,84,49,49,48,52,56,55,53,84,244,141,175,171,84,84,49,49,48,52,56,55,54,84,244,141,175,172,84,84,49,49,48,52,56,55,55,84,244,141,175,173,84,84,49,49,48,52,56,55,56,84,244,141,175,174,84,84,49,49,48,52,56,55,57,84,244,141,175,175,84,84,49,49,48,52,56,56,48,84,244,141,175,176,84,84,49,49,48,52,56,56,49,84,244,141,175,177,84,84,49,49,48,52,56,56,50,84,244,141,175,178,84,84,49,49,48,52,56,56,51,84,244,141,175,179,84,84,49,49,48,52,56,56,52,84,244,141,175,180,84,84,49,49,48,52,56,56,53,84,244,141,175,181,84,84,49,49,48,52,56,56,54,84,244,141,175,182,84,84,49,49,48,52,56,56,55,84,244,141,175,183,84,84,49,49,48,52,56,56,56,84,244,141,175,184,84,84,49,49,48,52,56,56,57,84,244,141,175,185,84,84,49,49,48,52,56,57,48,84,244,141,175,186,84,84,49,49,48,52,56,57,49,84,244,141,175,187,84,84,49,49,48,52,56,57,50,84,244,141,175,188,84,84,49,49,48,52,56,57,51,84,244,141,175,189,84,84,49,49,48,52,56,57,52,84,244,141,175,190,84,84,49,49,48,52,56,57,53,84,244,141,175,191,84,84,49,49,48,52,56,57,54,84,244,141,176,128,84,84,49,49,48,52,56,57,55,84,244,141,176,129,84,84,49,49,48,52,56,57,56,84,244,141,176,130,84,84,49,49,48,52,56,57,57,84,244,141,176,131,84,84,49,49,48,52,57,48,48,84,244,141,176,132,84,84,49,49,48,52,57,48,49,84,244,141,176,133,84,84,49,49,48,52,57,48,50,84,244,141,176,134,84,84,49,49,48,52,57,48,51,84,244,141,176,135,84,84,49,49,48,52,57,48,52,84,244,141,176,136,84,84,49,49,48,52,57,48,53,84,244,141,176,137,84,84,49,49,48,52,57,48,54,84,244,141,176,138,84,84,49,49,48,52,57,48,55,84,244,141,176,139,84,84,49,49,48,52,57,48,56,84,244,141,176,140,84,84,49,49,48,52,57,48,57,84,244,141,176,141,84,84,49,49,48,52,57,49,48,84,244,141,176,142,84,84,49,49,48,52,57,49,49,84,244,141,176,143,84,84,49,49,48,52,57,49,50,84,244,141,176,144,84,84,49,49,48,52,57,49,51,84,244,141,176,145,84,84,49,49,48,52,57,49,52,84,244,141,176,146,84,84,49,49,48,52,57,49,53,84,244,141,176,147,84,84,49,49,48,52,57,49,54,84,244,141,176,148,84,84,49,49,48,52,57,49,55,84,244,141,176,149,84,84,49,49,48,52,57,49,56,84,244,141,176,150,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22585 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22585_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22585_s.txt", Encoding.UTF8);

    public Test22585() : base(recordedRequest, recordedResponse, "accounts8d43a048d26afcd")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048d26afcd",
                        container: "containersddd934ca569845dc89778f0bd55316f0",
                        blob: "Blobc329f8f289534d4d91e601e1b816991f",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20794 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20794_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20794_s.txt", Encoding.UTF8);

    public Test20794() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers8240a720eb234783afd6a68d24f64161",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,49,57,54,57,84,244,141,130,145,84,84,49,49,48,49,57,55,48,84,244,141,130,146,84,84,49,49,48,49,57,55,49,84,244,141,130,147,84,84,49,49,48,49,57,55,50,84,244,141,130,148,84,84,49,49,48,49,57,55,51,84,244,141,130,149,84,84,49,49,48,49,57,55,52,84,244,141,130,150,84,84,49,49,48,49,57,55,53,84,244,141,130,151,84,84,49,49,48,49,57,55,54,84,244,141,130,152,84,84,49,49,48,49,57,55,55,84,244,141,130,153,84,84,49,49,48,49,57,55,56,84,244,141,130,154,84,84,49,49,48,49,57,55,57,84,244,141,130,155,84,84,49,49,48,49,57,56,48,84,244,141,130,156,84,84,49,49,48,49,57,56,49,84,244,141,130,157,84,84,49,49,48,49,57,56,50,84,244,141,130,158,84,84,49,49,48,49,57,56,51,84,244,141,130,159,84,84,49,49,48,49,57,56,52,84,244,141,130,160,84,84,49,49,48,49,57,56,53,84,244,141,130,161,84,84,49,49,48,49,57,56,54,84,244,141,130,162,84,84,49,49,48,49,57,56,55,84,244,141,130,163,84,84,49,49,48,49,57,56,56,84,244,141,130,164,84,84,49,49,48,49,57,56,57,84,244,141,130,165,84,84,49,49,48,49,57,57,48,84,244,141,130,166,84,84,49,49,48,49,57,57,49,84,244,141,130,167,84,84,49,49,48,49,57,57,50,84,244,141,130,168,84,84,49,49,48,49,57,57,51,84,244,141,130,169,84,84,49,49,48,49,57,57,52,84,244,141,130,170,84,84,49,49,48,49,57,57,53,84,244,141,130,171,84,84,49,49,48,49,57,57,54,84,244,141,130,172,84,84,49,49,48,49,57,57,55,84,244,141,130,173,84,84,49,49,48,49,57,57,56,84,244,141,130,174,84,84,49,49,48,49,57,57,57,84,244,141,130,175,84,84,49,49,48,50,48,48,48,84,244,141,130,176,84,84,49,49,48,50,48,48,49,84,244,141,130,177,84,84,49,49,48,50,48,48,50,84,244,141,130,178,84,84,49,49,48,50,48,48,51,84,244,141,130,179,84,84,49,49,48,50,48,48,52,84,244,141,130,180,84,84,49,49,48,50,48,48,53,84,244,141,130,181,84,84,49,49,48,50,48,48,54,84,244,141,130,182,84,84,49,49,48,50,48,48,55,84,244,141,130,183,84,84,49,49,48,50,48,48,56,84,244,141,130,184,84,84,49,49,48,50,48,48,57,84,244,141,130,185,84,84,49,49,48,50,48,49,48,84,244,141,130,186,84,84,49,49,48,50,48,49,49,84,244,141,130,187,84,84,49,49,48,50,48,49,50,84,244,141,130,188,84,84,49,49,48,50,48,49,51,84,244,141,130,189,84,84,49,49,48,50,48,49,52,84,244,141,130,190,84,84,49,49,48,50,48,49,53,84,244,141,130,191,84,84,49,49,48,50,48,49,54,84,244,141,131,128,84,84,49,49,48,50,48,49,55,84,244,141,131,129,84,84,49,49,48,50,48,49,56,84,244,141,131,130,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20697 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20697_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20697_s.txt", Encoding.UTF8);

    public Test20697() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers0bb7ae45edef4594997d97499d26b519",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,56,54,53,49,50,84,244,137,144,176,84,84,49,48,56,54,53,49,51,84,244,137,144,177,84,84,49,48,56,54,53,49,52,84,244,137,144,178,84,84,49,48,56,54,53,49,53,84,244,137,144,179,84,84,49,48,56,54,53,49,54,84,244,137,144,180,84,84,49,48,56,54,53,49,55,84,244,137,144,181,84,84,49,48,56,54,53,49,56,84,244,137,144,182,84,84,49,48,56,54,53,49,57,84,244,137,144,183,84,84,49,48,56,54,53,50,48,84,244,137,144,184,84,84,49,48,56,54,53,50,49,84,244,137,144,185,84,84,49,48,56,54,53,50,50,84,244,137,144,186,84,84,49,48,56,54,53,50,51,84,244,137,144,187,84,84,49,48,56,54,53,50,52,84,244,137,144,188,84,84,49,48,56,54,53,50,53,84,244,137,144,189,84,84,49,48,56,54,53,50,54,84,244,137,144,190,84,84,49,48,56,54,53,50,55,84,244,137,144,191,84,84,49,48,56,54,53,50,57,84,244,137,145,129,84,84,49,48,56,54,53,52,49,84,244,137,145,141,84,84,49,48,56,54,53,52,51,84,244,137,145,143,84,84,49,48,56,54,53,52,52,84,244,137,145,144,84,84,49,48,56,54,53,53,55,84,244,137,145,157,84,84,49,48,56,54,53,57,51,84,244,137,146,129,84,84,49,48,56,54,54,48,53,84,244,137,146,141,84,84,49,48,56,54,54,48,55,84,244,137,146,143,84,84,49,48,56,54,54,48,56,84,244,137,146,144,84,84,49,48,56,54,54,50,49,84,244,137,146,157,84,84,49,48,56,54,54,53,55,84,244,137,147,129,84,84,49,48,56,54,54,54,57,84,244,137,147,141,84,84,49,48,56,54,54,55,49,84,244,137,147,143,84,84,49,48,56,54,54,55,50,84,244,137,147,144,84,84,49,48,56,54,54,56,53,84,244,137,147,157,84,84,49,48,56,54,55,50,49,84,244,137,148,129,84,84,49,48,56,54,55,51,51,84,244,137,148,141,84,84,49,48,56,54,55,51,53,84,244,137,148,143,84,84,49,48,56,54,55,51,54,84,244,137,148,144,84,84,49,48,56,54,55,52,57,84,244,137,148,157,84,84,49,48,56,54,55,56,53,84,244,137,149,129,84,84,49,48,56,54,55,57,55,84,244,137,149,141,84,84,49,48,56,54,55,57,57,84,244,137,149,143,84,84,49,48,56,54,56,48,48,84,244,137,149,144,84,84,49,48,56,54,56,49,51,84,244,137,149,157,84,84,49,48,56,54,56,52,57,84,244,137,150,129,84,84,49,48,56,54,56,54,49,84,244,137,150,141,84,84,49,48,56,54,56,54,51,84,244,137,150,143,84,84,49,48,56,54,56,54,52,84,244,137,150,144,84,84,49,48,56,54,56,55,55,84,244,137,150,157,84,84,49,48,56,54,57,49,51,84,244,137,151,129,84,84,49,48,56,54,57,50,53,84,244,137,151,141,84,84,49,48,56,54,57,50,55,84,244,137,151,143,84,84,49,48,56,54,57,50,56,84,244,137,151,144,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22586 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22586_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22586_s.txt", Encoding.UTF8);

    public Test22586() : base(recordedRequest, recordedResponse, "accounts8d43a048d26afcd")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048d26afcd",
                        container: "containersddd934ca569845dc89778f0bd55316f0",
                        blob: "Blob80fe869c715c4c05a0d6bf30c35ccd7b",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20187 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20187_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20187_s.txt", Encoding.UTF8);

    public Test20187() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers2b6cdd6684eb4500abcaa682adc323b7",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,50,57,57,54,55,84,243,187,157,143,84,84,49,48,50,57,57,54,56,84,243,187,157,144,84,84,49,48,50,57,57,54,57,84,243,187,157,145,84,84,49,48,50,57,57,55,48,84,243,187,157,146,84,84,49,48,50,57,57,55,49,84,243,187,157,147,84,84,49,48,50,57,57,55,50,84,243,187,157,148,84,84,49,48,50,57,57,55,51,84,243,187,157,149,84,84,49,48,50,57,57,55,52,84,243,187,157,150,84,84,49,48,50,57,57,55,53,84,243,187,157,151,84,84,49,48,50,57,57,55,54,84,243,187,157,152,84,84,49,48,50,57,57,55,55,84,243,187,157,153,84,84,49,48,50,57,57,55,56,84,243,187,157,154,84,84,49,48,50,57,57,55,57,84,243,187,157,155,84,84,49,48,50,57,57,56,48,84,243,187,157,156,84,84,49,48,50,57,57,56,49,84,243,187,157,157,84,84,49,48,50,57,57,56,50,84,243,187,157,158,84,84,49,48,50,57,57,56,51,84,243,187,157,159,84,84,49,48,50,57,57,56,52,84,243,187,157,160,84,84,49,48,50,57,57,56,53,84,243,187,157,161,84,84,49,48,50,57,57,56,54,84,243,187,157,162,84,84,49,48,50,57,57,56,55,84,243,187,157,163,84,84,49,48,50,57,57,56,56,84,243,187,157,164,84,84,49,48,50,57,57,56,57,84,243,187,157,165,84,84,49,48,50,57,57,57,48,84,243,187,157,166,84,84,49,48,50,57,57,57,49,84,243,187,157,167,84,84,49,48,50,57,57,57,50,84,243,187,157,168,84,84,49,48,50,57,57,57,51,84,243,187,157,169,84,84,49,48,50,57,57,57,52,84,243,187,157,170,84,84,49,48,50,57,57,57,53,84,243,187,157,171,84,84,49,48,50,57,57,57,54,84,243,187,157,172,84,84,49,48,50,57,57,57,55,84,243,187,157,173,84,84,49,48,50,57,57,57,56,84,243,187,157,174,84,84,49,48,50,57,57,57,57,84,243,187,157,175,84,84,49,48,51,48,48,48,48,84,243,187,157,176,84,84,49,48,51,48,48,48,49,84,243,187,157,177,84,84,49,48,51,48,48,48,50,84,243,187,157,178,84,84,49,48,51,48,48,48,51,84,243,187,157,179,84,84,49,48,51,48,48,48,52,84,243,187,157,180,84,84,49,48,51,48,48,48,53,84,243,187,157,181,84,84,49,48,51,48,48,48,54,84,243,187,157,182,84,84,49,48,51,48,48,48,55,84,243,187,157,183,84,84,49,48,51,48,48,48,56,84,243,187,157,184,84,84,49,48,51,48,48,48,57,84,243,187,157,185,84,84,49,48,51,48,48,49,48,84,243,187,157,186,84,84,49,48,51,48,48,49,49,84,243,187,157,187,84,84,49,48,51,48,48,49,50,84,243,187,157,188,84,84,49,48,51,48,48,49,51,84,243,187,157,189,84,84,49,48,51,48,48,49,52,84,243,187,157,190,84,84,49,48,51,48,48,49,53,84,243,187,157,191,84,84,49,48,51,48,48,49,55,84,243,187,158,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22649 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22649_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22649_s.txt", Encoding.UTF8);

    public Test22649() : base(recordedRequest, recordedResponse, "accounts8d43a048e2beca5")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048e2beca5",
                        container: "containers3974e1da6923423a9845f2ce644df77d",
                        blob: "Blobf3299e0486b94dfabf8187fca2367e1a",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20979 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20979_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20979_s.txt", Encoding.UTF8);

    public Test20979() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersdf87e0f5374149afa792ac52b484870e",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,55,56,54,57,84,244,142,158,157,84,84,49,49,48,55,57,48,53,84,244,142,159,129,84,84,49,49,48,55,57,49,55,84,244,142,159,141,84,84,49,49,48,55,57,49,57,84,244,142,159,143,84,84,49,49,48,55,57,50,48,84,244,142,159,144,84,84,49,49,48,55,57,51,51,84,244,142,159,157,84,84,49,49,48,55,57,54,57,84,244,142,160,129,84,84,49,49,48,55,57,56,49,84,244,142,160,141,84,84,49,49,48,55,57,56,51,84,244,142,160,143,84,84,49,49,48,55,57,56,52,84,244,142,160,144,84,84,49,49,48,55,57,57,55,84,244,142,160,157,84,84,49,49,48,56,48,51,51,84,244,142,161,129,84,84,49,49,48,56,48,52,53,84,244,142,161,141,84,84,49,49,48,56,48,52,55,84,244,142,161,143,84,84,49,49,48,56,48,52,56,84,244,142,161,144,84,84,49,49,48,56,48,54,49,84,244,142,161,157,84,84,49,49,48,56,48,57,55,84,244,142,162,129,84,84,49,49,48,56,49,48,57,84,244,142,162,141,84,84,49,49,48,56,49,49,49,84,244,142,162,143,84,84,49,49,48,56,49,49,50,84,244,142,162,144,84,84,49,49,48,56,49,50,53,84,244,142,162,157,84,84,49,49,48,56,49,54,49,84,244,142,163,129,84,84,49,49,48,56,49,55,51,84,244,142,163,141,84,84,49,49,48,56,49,55,53,84,244,142,163,143,84,84,49,49,48,56,49,55,54,84,244,142,163,144,84,84,49,49,48,56,49,56,57,84,244,142,163,157,84,84,49,49,48,56,50,50,53,84,244,142,164,129,84,84,49,49,48,56,50,51,55,84,244,142,164,141,84,84,49,49,48,56,50,51,57,84,244,142,164,143,84,84,49,49,48,56,50,52,48,84,244,142,164,144,84,84,49,49,48,56,50,53,51,84,244,142,164,157,84,84,49,49,48,56,50,56,57,84,244,142,165,129,84,84,49,49,48,56,51,48,49,84,244,142,165,141,84,84,49,49,48,56,51,48,51,84,244,142,165,143,84,84,49,49,48,56,51,48,52,84,244,142,165,144,84,84,49,49,48,56,51,49,55,84,244,142,165,157,84,84,49,49,48,56,51,53,51,84,244,142,166,129,84,84,49,49,48,56,51,54,53,84,244,142,166,141,84,84,49,49,48,56,51,54,55,84,244,142,166,143,84,84,49,49,48,56,51,54,56,84,244,142,166,144,84,84,49,49,48,56,51,56,49,84,244,142,166,157,84,84,49,49,48,56,52,49,55,84,244,142,167,129,84,84,49,49,48,56,52,50,57,84,244,142,167,141,84,84,49,49,48,56,52,51,49,84,244,142,167,143,84,84,49,49,48,56,52,51,50,84,244,142,167,144,84,84,49,49,48,56,52,52,53,84,244,142,167,157,84,84,49,49,48,56,52,56,49,84,244,142,168,129,84,84,49,49,48,56,52,57,51,84,244,142,168,141,84,84,49,49,48,56,52,57,53,84,244,142,168,143,84,84,49,49,48,56,52,57,54,84,244,142,168,144,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21110 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21110_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21110_s.txt", Encoding.UTF8);

    public Test21110() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers79aa3dd90e344ebe9466f3cb0c56378a",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,50,57,53,48,84,244,143,173,182,84,84,49,49,49,50,57,53,49,84,244,143,173,183,84,84,49,49,49,50,57,53,50,84,244,143,173,184,84,84,49,49,49,50,57,53,51,84,244,143,173,185,84,84,49,49,49,50,57,53,52,84,244,143,173,186,84,84,49,49,49,50,57,53,53,84,244,143,173,187,84,84,49,49,49,50,57,53,54,84,244,143,173,188,84,84,49,49,49,50,57,53,55,84,244,143,173,189,84,84,49,49,49,50,57,53,56,84,244,143,173,190,84,84,49,49,49,50,57,53,57,84,244,143,173,191,84,84,49,49,49,50,57,54,48,84,244,143,174,128,84,84,49,49,49,50,57,54,49,84,244,143,174,129,84,84,49,49,49,50,57,54,50,84,244,143,174,130,84,84,49,49,49,50,57,54,51,84,244,143,174,131,84,84,49,49,49,50,57,54,52,84,244,143,174,132,84,84,49,49,49,50,57,54,53,84,244,143,174,133,84,84,49,49,49,50,57,54,54,84,244,143,174,134,84,84,49,49,49,50,57,54,55,84,244,143,174,135,84,84,49,49,49,50,57,54,56,84,244,143,174,136,84,84,49,49,49,50,57,54,57,84,244,143,174,137,84,84,49,49,49,50,57,55,48,84,244,143,174,138,84,84,49,49,49,50,57,55,49,84,244,143,174,139,84,84,49,49,49,50,57,55,50,84,244,143,174,140,84,84,49,49,49,50,57,55,51,84,244,143,174,141,84,84,49,49,49,50,57,55,52,84,244,143,174,142,84,84,49,49,49,50,57,55,53,84,244,143,174,143,84,84,49,49,49,50,57,55,54,84,244,143,174,144,84,84,49,49,49,50,57,55,55,84,244,143,174,145,84,84,49,49,49,50,57,55,56,84,244,143,174,146,84,84,49,49,49,50,57,55,57,84,244,143,174,147,84,84,49,49,49,50,57,56,48,84,244,143,174,148,84,84,49,49,49,50,57,56,49,84,244,143,174,149,84,84,49,49,49,50,57,56,50,84,244,143,174,150,84,84,49,49,49,50,57,56,51,84,244,143,174,151,84,84,49,49,49,50,57,56,52,84,244,143,174,152,84,84,49,49,49,50,57,56,53,84,244,143,174,153,84,84,49,49,49,50,57,56,54,84,244,143,174,154,84,84,49,49,49,50,57,56,55,84,244,143,174,155,84,84,49,49,49,50,57,56,56,84,244,143,174,156,84,84,49,49,49,50,57,56,57,84,244,143,174,157,84,84,49,49,49,50,57,57,48,84,244,143,174,158,84,84,49,49,49,50,57,57,49,84,244,143,174,159,84,84,49,49,49,50,57,57,50,84,244,143,174,160,84,84,49,49,49,50,57,57,51,84,244,143,174,161,84,84,49,49,49,50,57,57,52,84,244,143,174,162,84,84,49,49,49,50,57,57,53,84,244,143,174,163,84,84,49,49,49,50,57,57,54,84,244,143,174,164,84,84,49,49,49,50,57,57,55,84,244,143,174,165,84,84,49,49,49,50,57,57,56,84,244,143,174,166,84,84,49,49,49,50,57,57,57,84,244,143,174,167,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21795 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21795_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21795_s.txt", Encoding.UTF8);

    public Test21795() : base(recordedRequest, recordedResponse, "accounts8d43a03fde3c8fe")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes("RedirectPutBlob test content"));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a03fde3c8fe",
                        container: "test-container",
                        blob: "RedirectionTestBlob",
                        blobType: "BlockBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "BlockBlob"),
                        body: body,
                        timeout: 30,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20447 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20447_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20447_s.txt", Encoding.UTF8);

    public Test20447() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersee5ddc6232b847869028904d3d06a0f3",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,53,53,50,56,84,244,129,172,168,84,84,49,48,53,53,53,50,57,84,244,129,172,169,84,84,49,48,53,53,53,51,48,84,244,129,172,170,84,84,49,48,53,53,53,51,49,84,244,129,172,171,84,84,49,48,53,53,53,51,50,84,244,129,172,172,84,84,49,48,53,53,53,51,51,84,244,129,172,173,84,84,49,48,53,53,53,51,52,84,244,129,172,174,84,84,49,48,53,53,53,51,53,84,244,129,172,175,84,84,49,48,53,53,53,51,54,84,244,129,172,176,84,84,49,48,53,53,53,51,55,84,244,129,172,177,84,84,49,48,53,53,53,51,56,84,244,129,172,178,84,84,49,48,53,53,53,51,57,84,244,129,172,179,84,84,49,48,53,53,53,52,48,84,244,129,172,180,84,84,49,48,53,53,53,52,49,84,244,129,172,181,84,84,49,48,53,53,53,52,50,84,244,129,172,182,84,84,49,48,53,53,53,52,51,84,244,129,172,183,84,84,49,48,53,53,53,52,52,84,244,129,172,184,84,84,49,48,53,53,53,52,53,84,244,129,172,185,84,84,49,48,53,53,53,52,54,84,244,129,172,186,84,84,49,48,53,53,53,52,55,84,244,129,172,187,84,84,49,48,53,53,53,52,56,84,244,129,172,188,84,84,49,48,53,53,53,52,57,84,244,129,172,189,84,84,49,48,53,53,53,53,48,84,244,129,172,190,84,84,49,48,53,53,53,53,49,84,244,129,172,191,84,84,49,48,53,53,53,53,50,84,244,129,173,128,84,84,49,48,53,53,53,53,51,84,244,129,173,129,84,84,49,48,53,53,53,53,52,84,244,129,173,130,84,84,49,48,53,53,53,53,53,84,244,129,173,131,84,84,49,48,53,53,53,53,54,84,244,129,173,132,84,84,49,48,53,53,53,53,55,84,244,129,173,133,84,84,49,48,53,53,53,53,56,84,244,129,173,134,84,84,49,48,53,53,53,53,57,84,244,129,173,135,84,84,49,48,53,53,53,54,48,84,244,129,173,136,84,84,49,48,53,53,53,54,49,84,244,129,173,137,84,84,49,48,53,53,53,54,50,84,244,129,173,138,84,84,49,48,53,53,53,54,51,84,244,129,173,139,84,84,49,48,53,53,53,54,52,84,244,129,173,140,84,84,49,48,53,53,53,54,53,84,244,129,173,141,84,84,49,48,53,53,53,54,54,84,244,129,173,142,84,84,49,48,53,53,53,54,55,84,244,129,173,143,84,84,49,48,53,53,53,54,56,84,244,129,173,144,84,84,49,48,53,53,53,54,57,84,244,129,173,145,84,84,49,48,53,53,53,55,48,84,244,129,173,146,84,84,49,48,53,53,53,55,49,84,244,129,173,147,84,84,49,48,53,53,53,55,50,84,244,129,173,148,84,84,49,48,53,53,53,55,51,84,244,129,173,149,84,84,49,48,53,53,53,55,52,84,244,129,173,150,84,84,49,48,53,53,53,55,53,84,244,129,173,151,84,84,49,48,53,53,53,55,54,84,244,129,173,152,84,84,49,48,53,53,53,55,55,84,244,129,173,153,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test22650 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22650_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\22650_s.txt", Encoding.UTF8);

    public Test22650() : base(recordedRequest, recordedResponse, "accounts8d43a048e2beca5")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a048e2beca5",
                        container: "containers3974e1da6923423a9845f2ce644df77d",
                        blob: "Blob6f3732d12b2e442ea180a9c28fdf0229",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20128 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20128_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20128_s.txt", Encoding.UTF8);

    public Test20128() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers02552a2396c44255a61dd19b9714b3b6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,50,48,57,52,55,84,243,185,144,147,84,84,49,48,50,48,57,52,56,84,243,185,144,148,84,84,49,48,50,48,57,52,57,84,243,185,144,149,84,84,49,48,50,48,57,53,48,84,243,185,144,150,84,84,49,48,50,48,57,53,49,84,243,185,144,151,84,84,49,48,50,48,57,53,50,84,243,185,144,152,84,84,49,48,50,48,57,53,51,84,243,185,144,153,84,84,49,48,50,48,57,53,52,84,243,185,144,154,84,84,49,48,50,48,57,53,53,84,243,185,144,155,84,84,49,48,50,48,57,53,54,84,243,185,144,156,84,84,49,48,50,48,57,53,55,84,243,185,144,157,84,84,49,48,50,48,57,53,56,84,243,185,144,158,84,84,49,48,50,48,57,53,57,84,243,185,144,159,84,84,49,48,50,48,57,54,48,84,243,185,144,160,84,84,49,48,50,48,57,54,49,84,243,185,144,161,84,84,49,48,50,48,57,54,50,84,243,185,144,162,84,84,49,48,50,48,57,54,51,84,243,185,144,163,84,84,49,48,50,48,57,54,52,84,243,185,144,164,84,84,49,48,50,48,57,54,53,84,243,185,144,165,84,84,49,48,50,48,57,54,54,84,243,185,144,166,84,84,49,48,50,48,57,54,55,84,243,185,144,167,84,84,49,48,50,48,57,54,56,84,243,185,144,168,84,84,49,48,50,48,57,54,57,84,243,185,144,169,84,84,49,48,50,48,57,55,48,84,243,185,144,170,84,84,49,48,50,48,57,55,49,84,243,185,144,171,84,84,49,48,50,48,57,55,50,84,243,185,144,172,84,84,49,48,50,48,57,55,51,84,243,185,144,173,84,84,49,48,50,48,57,55,52,84,243,185,144,174,84,84,49,48,50,48,57,55,53,84,243,185,144,175,84,84,49,48,50,48,57,55,54,84,243,185,144,176,84,84,49,48,50,48,57,55,55,84,243,185,144,177,84,84,49,48,50,48,57,55,56,84,243,185,144,178,84,84,49,48,50,48,57,55,57,84,243,185,144,179,84,84,49,48,50,48,57,56,48,84,243,185,144,180,84,84,49,48,50,48,57,56,49,84,243,185,144,181,84,84,49,48,50,48,57,56,50,84,243,185,144,182,84,84,49,48,50,48,57,56,51,84,243,185,144,183,84,84,49,48,50,48,57,56,52,84,243,185,144,184,84,84,49,48,50,48,57,56,53,84,243,185,144,185,84,84,49,48,50,48,57,56,54,84,243,185,144,186,84,84,49,48,50,48,57,56,55,84,243,185,144,187,84,84,49,48,50,48,57,56,56,84,243,185,144,188,84,84,49,48,50,48,57,56,57,84,243,185,144,189,84,84,49,48,50,48,57,57,48,84,243,185,144,190,84,84,49,48,50,48,57,57,49,84,243,185,144,191,84,84,49,48,50,48,57,57,51,84,243,185,145,129,84,84,49,48,50,49,48,48,53,84,243,185,145,141,84,84,49,48,50,49,48,48,55,84,243,185,145,143,84,84,49,48,50,49,48,48,56,84,243,185,145,144,84,84,49,48,50,49,48,50,49,84,243,185,145,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20354 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20354_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20354_s.txt", Encoding.UTF8);

    public Test20354() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers319eca44915441a6b60a6025f5eab2bd",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,51,51,50,56,84,244,129,138,144,84,84,49,48,53,51,51,50,57,84,244,129,138,145,84,84,49,48,53,51,51,51,48,84,244,129,138,146,84,84,49,48,53,51,51,51,49,84,244,129,138,147,84,84,49,48,53,51,51,51,50,84,244,129,138,148,84,84,49,48,53,51,51,51,51,84,244,129,138,149,84,84,49,48,53,51,51,51,52,84,244,129,138,150,84,84,49,48,53,51,51,51,53,84,244,129,138,151,84,84,49,48,53,51,51,51,54,84,244,129,138,152,84,84,49,48,53,51,51,51,55,84,244,129,138,153,84,84,49,48,53,51,51,51,56,84,244,129,138,154,84,84,49,48,53,51,51,51,57,84,244,129,138,155,84,84,49,48,53,51,51,52,48,84,244,129,138,156,84,84,49,48,53,51,51,52,49,84,244,129,138,157,84,84,49,48,53,51,51,52,50,84,244,129,138,158,84,84,49,48,53,51,51,52,51,84,244,129,138,159,84,84,49,48,53,51,51,52,52,84,244,129,138,160,84,84,49,48,53,51,51,52,53,84,244,129,138,161,84,84,49,48,53,51,51,52,54,84,244,129,138,162,84,84,49,48,53,51,51,52,55,84,244,129,138,163,84,84,49,48,53,51,51,52,56,84,244,129,138,164,84,84,49,48,53,51,51,52,57,84,244,129,138,165,84,84,49,48,53,51,51,53,48,84,244,129,138,166,84,84,49,48,53,51,51,53,49,84,244,129,138,167,84,84,49,48,53,51,51,53,50,84,244,129,138,168,84,84,49,48,53,51,51,53,51,84,244,129,138,169,84,84,49,48,53,51,51,53,52,84,244,129,138,170,84,84,49,48,53,51,51,53,53,84,244,129,138,171,84,84,49,48,53,51,51,53,54,84,244,129,138,172,84,84,49,48,53,51,51,53,55,84,244,129,138,173,84,84,49,48,53,51,51,53,56,84,244,129,138,174,84,84,49,48,53,51,51,53,57,84,244,129,138,175,84,84,49,48,53,51,51,54,48,84,244,129,138,176,84,84,49,48,53,51,51,54,49,84,244,129,138,177,84,84,49,48,53,51,51,54,50,84,244,129,138,178,84,84,49,48,53,51,51,54,51,84,244,129,138,179,84,84,49,48,53,51,51,54,52,84,244,129,138,180,84,84,49,48,53,51,51,54,53,84,244,129,138,181,84,84,49,48,53,51,51,54,54,84,244,129,138,182,84,84,49,48,53,51,51,54,55,84,244,129,138,183,84,84,49,48,53,51,51,54,56,84,244,129,138,184,84,84,49,48,53,51,51,54,57,84,244,129,138,185,84,84,49,48,53,51,51,55,48,84,244,129,138,186,84,84,49,48,53,51,51,55,49,84,244,129,138,187,84,84,49,48,53,51,51,55,50,84,244,129,138,188,84,84,49,48,53,51,51,55,51,84,244,129,138,189,84,84,49,48,53,51,51,55,52,84,244,129,138,190,84,84,49,48,53,51,51,55,53,84,244,129,138,191,84,84,49,48,53,51,51,55,54,84,244,129,139,128,84,84,49,48,53,51,51,55,55,84,244,129,139,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20032 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20032_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20032_s.txt", Encoding.UTF8);

    public Test20032() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers612d6939acd44cdbbba30cffbd18a713",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,48,53,52,51,49,84,243,181,157,183,84,84,49,48,48,53,52,51,50,84,243,181,157,184,84,84,49,48,48,53,52,51,51,84,243,181,157,185,84,84,49,48,48,53,52,51,52,84,243,181,157,186,84,84,49,48,48,53,52,51,53,84,243,181,157,187,84,84,49,48,48,53,52,51,54,84,243,181,157,188,84,84,49,48,48,53,52,51,55,84,243,181,157,189,84,84,49,48,48,53,52,51,56,84,243,181,157,190,84,84,49,48,48,53,52,51,57,84,243,181,157,191,84,84,49,48,48,53,52,52,49,84,243,181,158,129,84,84,49,48,48,53,52,53,51,84,243,181,158,141,84,84,49,48,48,53,52,53,53,84,243,181,158,143,84,84,49,48,48,53,52,53,54,84,243,181,158,144,84,84,49,48,48,53,52,54,57,84,243,181,158,157,84,84,49,48,48,53,53,48,53,84,243,181,159,129,84,84,49,48,48,53,53,49,55,84,243,181,159,141,84,84,49,48,48,53,53,49,57,84,243,181,159,143,84,84,49,48,48,53,53,50,48,84,243,181,159,144,84,84,49,48,48,53,53,51,51,84,243,181,159,157,84,84,49,48,48,53,53,54,57,84,243,181,160,129,84,84,49,48,48,53,53,56,49,84,243,181,160,141,84,84,49,48,48,53,53,56,51,84,243,181,160,143,84,84,49,48,48,53,53,56,52,84,243,181,160,144,84,84,49,48,48,53,53,57,55,84,243,181,160,157,84,84,49,48,48,53,54,51,51,84,243,181,161,129,84,84,49,48,48,53,54,52,53,84,243,181,161,141,84,84,49,48,48,53,54,52,55,84,243,181,161,143,84,84,49,48,48,53,54,52,56,84,243,181,161,144,84,84,49,48,48,53,54,54,49,84,243,181,161,157,84,84,49,48,48,53,54,57,55,84,243,181,162,129,84,84,49,48,48,53,55,48,57,84,243,181,162,141,84,84,49,48,48,53,55,49,49,84,243,181,162,143,84,84,49,48,48,53,55,49,50,84,243,181,162,144,84,84,49,48,48,53,55,50,53,84,243,181,162,157,84,84,49,48,48,53,55,54,49,84,243,181,163,129,84,84,49,48,48,53,55,55,51,84,243,181,163,141,84,84,49,48,48,53,55,55,53,84,243,181,163,143,84,84,49,48,48,53,55,55,54,84,243,181,163,144,84,84,49,48,48,53,55,56,57,84,243,181,163,157,84,84,49,48,48,53,56,50,53,84,243,181,164,129,84,84,49,48,48,53,56,51,55,84,243,181,164,141,84,84,49,48,48,53,56,51,57,84,243,181,164,143,84,84,49,48,48,53,56,52,48,84,243,181,164,144,84,84,49,48,48,53,56,53,51,84,243,181,164,157,84,84,49,48,48,53,56,56,57,84,243,181,165,129,84,84,49,48,48,53,57,48,49,84,243,181,165,141,84,84,49,48,48,53,57,48,51,84,243,181,165,143,84,84,49,48,48,53,57,48,52,84,243,181,165,144,84,84,49,48,48,53,57,49,55,84,243,181,165,157,84,84,49,48,48,53,57,53,51,84,243,181,166,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19907 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19907_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19907_s.txt", Encoding.UTF8);

    public Test19907() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersf0a96ab3064046f8a2fc77e6e3ebae9e",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,56,54,52,52,53,84,243,176,181,141,84,84,57,56,54,52,52,55,84,243,176,181,143,84,84,57,56,54,52,52,56,84,243,176,181,144,84,84,57,56,54,52,54,49,84,243,176,181,157,84,84,57,56,54,52,57,55,84,243,176,182,129,84,84,57,56,54,53,48,57,84,243,176,182,141,84,84,57,56,54,53,49,49,84,243,176,182,143,84,84,57,56,54,53,49,50,84,243,176,182,144,84,84,57,56,54,53,50,53,84,243,176,182,157,84,84,57,56,54,53,54,49,84,243,176,183,129,84,84,57,56,54,53,55,51,84,243,176,183,141,84,84,57,56,54,53,55,53,84,243,176,183,143,84,84,57,56,54,53,55,54,84,243,176,183,144,84,84,57,56,54,53,56,57,84,243,176,183,157,84,84,57,56,54,54,50,53,84,243,176,184,129,84,84,57,56,54,54,51,55,84,243,176,184,141,84,84,57,56,54,54,51,57,84,243,176,184,143,84,84,57,56,54,54,52,48,84,243,176,184,144,84,84,57,56,54,54,53,51,84,243,176,184,157,84,84,57,56,54,54,56,57,84,243,176,185,129,84,84,57,56,54,55,48,49,84,243,176,185,141,84,84,57,56,54,55,48,51,84,243,176,185,143,84,84,57,56,54,55,48,52,84,243,176,185,144,84,84,57,56,54,55,49,55,84,243,176,185,157,84,84,57,56,54,55,53,51,84,243,176,186,129,84,84,57,56,54,55,54,53,84,243,176,186,141,84,84,57,56,54,55,54,55,84,243,176,186,143,84,84,57,56,54,55,54,56,84,243,176,186,144,84,84,57,56,54,55,56,49,84,243,176,186,157,84,84,57,56,54,56,49,55,84,243,176,187,129,84,84,57,56,54,56,50,57,84,243,176,187,141,84,84,57,56,54,56,51,49,84,243,176,187,143,84,84,57,56,54,56,51,50,84,243,176,187,144,84,84,57,56,54,56,52,53,84,243,176,187,157,84,84,57,56,54,56,56,49,84,243,176,188,129,84,84,57,56,54,56,57,51,84,243,176,188,141,84,84,57,56,54,56,57,53,84,243,176,188,143,84,84,57,56,54,56,57,54,84,243,176,188,144,84,84,57,56,54,57,48,57,84,243,176,188,157,84,84,57,56,54,57,52,53,84,243,176,189,129,84,84,57,56,54,57,53,55,84,243,176,189,141,84,84,57,56,54,57,53,57,84,243,176,189,143,84,84,57,56,54,57,54,48,84,243,176,189,144,84,84,57,56,54,57,55,51,84,243,176,189,157,84,84,57,56,55,48,48,57,84,243,176,190,129,84,84,57,56,55,48,50,49,84,243,176,190,141,84,84,57,56,55,48,50,51,84,243,176,190,143,84,84,57,56,55,48,50,52,84,243,176,190,144,84,84,57,56,55,48,51,55,84,243,176,190,157,84,84,57,56,55,48,55,51,84,243,176,191,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20568 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20568_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20568_s.txt", Encoding.UTF8);

    public Test20568() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers2997cf743a0f481c9f696984938aa742",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,54,54,55,56,49,84,244,132,156,157,84,84,49,48,54,54,56,49,54,84,244,132,157,128,84,84,49,48,54,54,56,49,55,84,244,132,157,129,84,84,49,48,54,54,56,49,56,84,244,132,157,130,84,84,49,48,54,54,56,49,57,84,244,132,157,131,84,84,49,48,54,54,56,50,48,84,244,132,157,132,84,84,49,48,54,54,56,50,49,84,244,132,157,133,84,84,49,48,54,54,56,50,50,84,244,132,157,134,84,84,49,48,54,54,56,50,51,84,244,132,157,135,84,84,49,48,54,54,56,50,52,84,244,132,157,136,84,84,49,48,54,54,56,50,53,84,244,132,157,137,84,84,49,48,54,54,56,50,54,84,244,132,157,138,84,84,49,48,54,54,56,50,55,84,244,132,157,139,84,84,49,48,54,54,56,50,56,84,244,132,157,140,84,84,49,48,54,54,56,50,57,84,244,132,157,141,84,84,49,48,54,54,56,51,48,84,244,132,157,142,84,84,49,48,54,54,56,51,49,84,244,132,157,143,84,84,49,48,54,54,56,51,50,84,244,132,157,144,84,84,49,48,54,54,56,51,51,84,244,132,157,145,84,84,49,48,54,54,56,51,52,84,244,132,157,146,84,84,49,48,54,54,56,51,53,84,244,132,157,147,84,84,49,48,54,54,56,51,54,84,244,132,157,148,84,84,49,48,54,54,56,51,55,84,244,132,157,149,84,84,49,48,54,54,56,51,56,84,244,132,157,150,84,84,49,48,54,54,56,51,57,84,244,132,157,151,84,84,49,48,54,54,56,52,48,84,244,132,157,152,84,84,49,48,54,54,56,52,49,84,244,132,157,153,84,84,49,48,54,54,56,52,50,84,244,132,157,154,84,84,49,48,54,54,56,52,51,84,244,132,157,155,84,84,49,48,54,54,56,52,52,84,244,132,157,156,84,84,49,48,54,54,56,52,53,84,244,132,157,157,84,84,49,48,54,54,56,52,54,84,244,132,157,158,84,84,49,48,54,54,56,52,55,84,244,132,157,159,84,84,49,48,54,54,56,52,56,84,244,132,157,160,84,84,49,48,54,54,56,52,57,84,244,132,157,161,84,84,49,48,54,54,56,53,48,84,244,132,157,162,84,84,49,48,54,54,56,53,49,84,244,132,157,163,84,84,49,48,54,54,56,53,50,84,244,132,157,164,84,84,49,48,54,54,56,53,51,84,244,132,157,165,84,84,49,48,54,54,56,53,52,84,244,132,157,166,84,84,49,48,54,54,56,53,53,84,244,132,157,167,84,84,49,48,54,54,56,53,54,84,244,132,157,168,84,84,49,48,54,54,56,53,55,84,244,132,157,169,84,84,49,48,54,54,56,53,56,84,244,132,157,170,84,84,49,48,54,54,56,53,57,84,244,132,157,171,84,84,49,48,54,54,56,54,48,84,244,132,157,172,84,84,49,48,54,54,56,54,49,84,244,132,157,173,84,84,49,48,54,54,56,54,50,84,244,132,157,174,84,84,49,48,54,54,56,54,51,84,244,132,157,175,84,84,49,48,54,54,56,54,52,84,244,132,157,176,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20538 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20538_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20538_s.txt", Encoding.UTF8);

    public Test20538() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers169b02be047c4c76acbb586fdc8886c6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,54,49,57,50,54,84,244,131,144,166,84,84,49,48,54,49,57,50,55,84,244,131,144,167,84,84,49,48,54,49,57,50,56,84,244,131,144,168,84,84,49,48,54,49,57,50,57,84,244,131,144,169,84,84,49,48,54,49,57,51,48,84,244,131,144,170,84,84,49,48,54,49,57,51,49,84,244,131,144,171,84,84,49,48,54,49,57,51,50,84,244,131,144,172,84,84,49,48,54,49,57,51,51,84,244,131,144,173,84,84,49,48,54,49,57,51,52,84,244,131,144,174,84,84,49,48,54,49,57,51,53,84,244,131,144,175,84,84,49,48,54,49,57,51,54,84,244,131,144,176,84,84,49,48,54,49,57,51,55,84,244,131,144,177,84,84,49,48,54,49,57,51,56,84,244,131,144,178,84,84,49,48,54,49,57,51,57,84,244,131,144,179,84,84,49,48,54,49,57,52,48,84,244,131,144,180,84,84,49,48,54,49,57,52,49,84,244,131,144,181,84,84,49,48,54,49,57,52,50,84,244,131,144,182,84,84,49,48,54,49,57,52,51,84,244,131,144,183,84,84,49,48,54,49,57,52,52,84,244,131,144,184,84,84,49,48,54,49,57,52,53,84,244,131,144,185,84,84,49,48,54,49,57,52,54,84,244,131,144,186,84,84,49,48,54,49,57,52,55,84,244,131,144,187,84,84,49,48,54,49,57,52,56,84,244,131,144,188,84,84,49,48,54,49,57,52,57,84,244,131,144,189,84,84,49,48,54,49,57,53,48,84,244,131,144,190,84,84,49,48,54,49,57,53,49,84,244,131,144,191,84,84,49,48,54,49,57,53,51,84,244,131,145,129,84,84,49,48,54,49,57,54,53,84,244,131,145,141,84,84,49,48,54,49,57,54,55,84,244,131,145,143,84,84,49,48,54,49,57,54,56,84,244,131,145,144,84,84,49,48,54,49,57,56,49,84,244,131,145,157,84,84,49,48,54,50,48,49,55,84,244,131,146,129,84,84,49,48,54,50,48,50,57,84,244,131,146,141,84,84,49,48,54,50,48,51,49,84,244,131,146,143,84,84,49,48,54,50,48,51,50,84,244,131,146,144,84,84,49,48,54,50,48,52,53,84,244,131,146,157,84,84,49,48,54,50,48,56,49,84,244,131,147,129,84,84,49,48,54,50,48,57,51,84,244,131,147,141,84,84,49,48,54,50,48,57,53,84,244,131,147,143,84,84,49,48,54,50,48,57,54,84,244,131,147,144,84,84,49,48,54,50,49,48,57,84,244,131,147,157,84,84,49,48,54,50,49,52,53,84,244,131,148,129,84,84,49,48,54,50,49,53,55,84,244,131,148,141,84,84,49,48,54,50,49,53,57,84,244,131,148,143,84,84,49,48,54,50,49,54,48,84,244,131,148,144,84,84,49,48,54,50,49,55,51,84,244,131,148,157,84,84,49,48,54,50,50,48,57,84,244,131,149,129,84,84,49,48,54,50,50,50,49,84,244,131,149,141,84,84,49,48,54,50,50,50,51,84,244,131,149,143,84,84,49,48,54,50,50,50,52,84,244,131,149,144,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19963 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19963_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19963_s.txt", Encoding.UTF8);

    public Test19963() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersbf5ecfbea5a24d8a8188936c9be6fa20",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,57,53,52,53,51,84,243,179,129,189,84,84,57,57,53,52,53,52,84,243,179,129,190,84,84,57,57,53,52,53,53,84,243,179,129,191,84,84,57,57,53,52,53,55,84,243,179,130,129,84,84,57,57,53,52,54,57,84,243,179,130,141,84,84,57,57,53,52,55,49,84,243,179,130,143,84,84,57,57,53,52,55,50,84,243,179,130,144,84,84,57,57,53,52,56,53,84,243,179,130,157,84,84,57,57,53,53,50,49,84,243,179,131,129,84,84,57,57,53,53,51,51,84,243,179,131,141,84,84,57,57,53,53,51,53,84,243,179,131,143,84,84,57,57,53,53,51,54,84,243,179,131,144,84,84,57,57,53,53,52,57,84,243,179,131,157,84,84,57,57,53,53,56,53,84,243,179,132,129,84,84,57,57,53,53,57,55,84,243,179,132,141,84,84,57,57,53,53,57,57,84,243,179,132,143,84,84,57,57,53,54,48,48,84,243,179,132,144,84,84,57,57,53,54,49,51,84,243,179,132,157,84,84,57,57,53,54,52,57,84,243,179,133,129,84,84,57,57,53,54,54,49,84,243,179,133,141,84,84,57,57,53,54,54,51,84,243,179,133,143,84,84,57,57,53,54,54,52,84,243,179,133,144,84,84,57,57,53,54,55,55,84,243,179,133,157,84,84,57,57,53,55,49,51,84,243,179,134,129,84,84,57,57,53,55,50,53,84,243,179,134,141,84,84,57,57,53,55,50,55,84,243,179,134,143,84,84,57,57,53,55,50,56,84,243,179,134,144,84,84,57,57,53,55,52,49,84,243,179,134,157,84,84,57,57,53,55,55,55,84,243,179,135,129,84,84,57,57,53,55,56,57,84,243,179,135,141,84,84,57,57,53,55,57,49,84,243,179,135,143,84,84,57,57,53,55,57,50,84,243,179,135,144,84,84,57,57,53,56,48,53,84,243,179,135,157,84,84,57,57,53,56,52,49,84,243,179,136,129,84,84,57,57,53,56,53,51,84,243,179,136,141,84,84,57,57,53,56,53,53,84,243,179,136,143,84,84,57,57,53,56,53,54,84,243,179,136,144,84,84,57,57,53,56,54,57,84,243,179,136,157,84,84,57,57,53,57,48,53,84,243,179,137,129,84,84,57,57,53,57,49,55,84,243,179,137,141,84,84,57,57,53,57,49,57,84,243,179,137,143,84,84,57,57,53,57,50,48,84,243,179,137,144,84,84,57,57,53,57,51,51,84,243,179,137,157,84,84,57,57,53,57,54,57,84,243,179,138,129,84,84,57,57,53,57,56,49,84,243,179,138,141,84,84,57,57,53,57,56,51,84,243,179,138,143,84,84,57,57,53,57,56,52,84,243,179,138,144,84,84,57,57,53,57,57,55,84,243,179,138,157,84,84,57,57,54,48,51,51,84,243,179,139,129,84,84,57,57,54,48,52,53,84,243,179,139,141,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21054 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21054_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21054_s.txt", Encoding.UTF8);

    public Test21054() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers98fd3eef9d4b4edcb3855acb5ae8645d",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,49,54,48,48,84,244,143,152,176,84,84,49,49,49,49,54,48,49,84,244,143,152,177,84,84,49,49,49,49,54,48,50,84,244,143,152,178,84,84,49,49,49,49,54,48,51,84,244,143,152,179,84,84,49,49,49,49,54,48,52,84,244,143,152,180,84,84,49,49,49,49,54,48,53,84,244,143,152,181,84,84,49,49,49,49,54,48,54,84,244,143,152,182,84,84,49,49,49,49,54,48,55,84,244,143,152,183,84,84,49,49,49,49,54,48,56,84,244,143,152,184,84,84,49,49,49,49,54,48,57,84,244,143,152,185,84,84,49,49,49,49,54,49,48,84,244,143,152,186,84,84,49,49,49,49,54,49,49,84,244,143,152,187,84,84,49,49,49,49,54,49,50,84,244,143,152,188,84,84,49,49,49,49,54,49,51,84,244,143,152,189,84,84,49,49,49,49,54,49,52,84,244,143,152,190,84,84,49,49,49,49,54,49,53,84,244,143,152,191,84,84,49,49,49,49,54,49,54,84,244,143,153,128,84,84,49,49,49,49,54,49,55,84,244,143,153,129,84,84,49,49,49,49,54,49,56,84,244,143,153,130,84,84,49,49,49,49,54,49,57,84,244,143,153,131,84,84,49,49,49,49,54,50,48,84,244,143,153,132,84,84,49,49,49,49,54,50,49,84,244,143,153,133,84,84,49,49,49,49,54,50,50,84,244,143,153,134,84,84,49,49,49,49,54,50,51,84,244,143,153,135,84,84,49,49,49,49,54,50,52,84,244,143,153,136,84,84,49,49,49,49,54,50,53,84,244,143,153,137,84,84,49,49,49,49,54,50,54,84,244,143,153,138,84,84,49,49,49,49,54,50,55,84,244,143,153,139,84,84,49,49,49,49,54,50,56,84,244,143,153,140,84,84,49,49,49,49,54,50,57,84,244,143,153,141,84,84,49,49,49,49,54,51,48,84,244,143,153,142,84,84,49,49,49,49,54,51,49,84,244,143,153,143,84,84,49,49,49,49,54,51,50,84,244,143,153,144,84,84,49,49,49,49,54,51,51,84,244,143,153,145,84,84,49,49,49,49,54,51,52,84,244,143,153,146,84,84,49,49,49,49,54,51,53,84,244,143,153,147,84,84,49,49,49,49,54,51,54,84,244,143,153,148,84,84,49,49,49,49,54,51,55,84,244,143,153,149,84,84,49,49,49,49,54,51,56,84,244,143,153,150,84,84,49,49,49,49,54,51,57,84,244,143,153,151,84,84,49,49,49,49,54,52,48,84,244,143,153,152,84,84,49,49,49,49,54,52,49,84,244,143,153,153,84,84,49,49,49,49,54,52,50,84,244,143,153,154,84,84,49,49,49,49,54,52,51,84,244,143,153,155,84,84,49,49,49,49,54,52,52,84,244,143,153,156,84,84,49,49,49,49,54,52,53,84,244,143,153,157,84,84,49,49,49,49,54,52,54,84,244,143,153,158,84,84,49,49,49,49,54,52,55,84,244,143,153,159,84,84,49,49,49,49,54,52,56,84,244,143,153,160,84,84,49,49,49,49,54,52,57,84,244,143,153,161,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20858 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20858_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20858_s.txt", Encoding.UTF8);

    public Test20858() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersf4b0dcea8f7b4ccf92e1f36b952ddf93",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,51,53,49,57,84,244,141,154,159,84,84,49,49,48,51,53,50,48,84,244,141,154,160,84,84,49,49,48,51,53,50,49,84,244,141,154,161,84,84,49,49,48,51,53,50,50,84,244,141,154,162,84,84,49,49,48,51,53,50,51,84,244,141,154,163,84,84,49,49,48,51,53,50,52,84,244,141,154,164,84,84,49,49,48,51,53,50,53,84,244,141,154,165,84,84,49,49,48,51,53,50,54,84,244,141,154,166,84,84,49,49,48,51,53,50,55,84,244,141,154,167,84,84,49,49,48,51,53,50,56,84,244,141,154,168,84,84,49,49,48,51,53,50,57,84,244,141,154,169,84,84,49,49,48,51,53,51,48,84,244,141,154,170,84,84,49,49,48,51,53,51,49,84,244,141,154,171,84,84,49,49,48,51,53,51,50,84,244,141,154,172,84,84,49,49,48,51,53,51,51,84,244,141,154,173,84,84,49,49,48,51,53,51,52,84,244,141,154,174,84,84,49,49,48,51,53,51,53,84,244,141,154,175,84,84,49,49,48,51,53,51,54,84,244,141,154,176,84,84,49,49,48,51,53,51,55,84,244,141,154,177,84,84,49,49,48,51,53,51,56,84,244,141,154,178,84,84,49,49,48,51,53,51,57,84,244,141,154,179,84,84,49,49,48,51,53,52,48,84,244,141,154,180,84,84,49,49,48,51,53,52,49,84,244,141,154,181,84,84,49,49,48,51,53,52,50,84,244,141,154,182,84,84,49,49,48,51,53,52,51,84,244,141,154,183,84,84,49,49,48,51,53,52,52,84,244,141,154,184,84,84,49,49,48,51,53,52,53,84,244,141,154,185,84,84,49,49,48,51,53,52,54,84,244,141,154,186,84,84,49,49,48,51,53,52,55,84,244,141,154,187,84,84,49,49,48,51,53,52,56,84,244,141,154,188,84,84,49,49,48,51,53,52,57,84,244,141,154,189,84,84,49,49,48,51,53,53,48,84,244,141,154,190,84,84,49,49,48,51,53,53,49,84,244,141,154,191,84,84,49,49,48,51,53,53,50,84,244,141,155,128,84,84,49,49,48,51,53,53,51,84,244,141,155,129,84,84,49,49,48,51,53,53,52,84,244,141,155,130,84,84,49,49,48,51,53,53,53,84,244,141,155,131,84,84,49,49,48,51,53,53,54,84,244,141,155,132,84,84,49,49,48,51,53,53,55,84,244,141,155,133,84,84,49,49,48,51,53,53,56,84,244,141,155,134,84,84,49,49,48,51,53,53,57,84,244,141,155,135,84,84,49,49,48,51,53,54,48,84,244,141,155,136,84,84,49,49,48,51,53,54,49,84,244,141,155,137,84,84,49,49,48,51,53,54,50,84,244,141,155,138,84,84,49,49,48,51,53,54,51,84,244,141,155,139,84,84,49,49,48,51,53,54,52,84,244,141,155,140,84,84,49,49,48,51,53,54,53,84,244,141,155,141,84,84,49,49,48,51,53,54,54,84,244,141,155,142,84,84,49,49,48,51,53,54,55,84,244,141,155,143,84,84,49,49,48,51,53,54,56,84,244,141,155,144,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21112 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21112_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21112_s.txt", Encoding.UTF8);

    public Test21112() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers79aa3dd90e344ebe9466f3cb0c56378a",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,51,48,48,48,84,244,143,174,168,84,84,49,49,49,51,48,48,49,84,244,143,174,169,84,84,49,49,49,51,48,48,50,84,244,143,174,170,84,84,49,49,49,51,48,48,51,84,244,143,174,171,84,84,49,49,49,51,48,48,52,84,244,143,174,172,84,84,49,49,49,51,48,48,53,84,244,143,174,173,84,84,49,49,49,51,48,48,54,84,244,143,174,174,84,84,49,49,49,51,48,48,55,84,244,143,174,175,84,84,49,49,49,51,48,48,56,84,244,143,174,176,84,84,49,49,49,51,48,48,57,84,244,143,174,177,84,84,49,49,49,51,48,49,48,84,244,143,174,178,84,84,49,49,49,51,48,49,49,84,244,143,174,179,84,84,49,49,49,51,48,49,50,84,244,143,174,180,84,84,49,49,49,51,48,49,51,84,244,143,174,181,84,84,49,49,49,51,48,49,52,84,244,143,174,182,84,84,49,49,49,51,48,49,53,84,244,143,174,183,84,84,49,49,49,51,48,49,54,84,244,143,174,184,84,84,49,49,49,51,48,49,55,84,244,143,174,185,84,84,49,49,49,51,48,49,56,84,244,143,174,186,84,84,49,49,49,51,48,49,57,84,244,143,174,187,84,84,49,49,49,51,48,50,48,84,244,143,174,188,84,84,49,49,49,51,48,50,49,84,244,143,174,189,84,84,49,49,49,51,48,50,50,84,244,143,174,190,84,84,49,49,49,51,48,50,51,84,244,143,174,191,84,84,49,49,49,51,48,50,52,84,244,143,175,128,84,84,49,49,49,51,48,50,53,84,244,143,175,129,84,84,49,49,49,51,48,50,54,84,244,143,175,130,84,84,49,49,49,51,48,50,55,84,244,143,175,131,84,84,49,49,49,51,48,50,56,84,244,143,175,132,84,84,49,49,49,51,48,50,57,84,244,143,175,133,84,84,49,49,49,51,48,51,48,84,244,143,175,134,84,84,49,49,49,51,48,51,49,84,244,143,175,135,84,84,49,49,49,51,48,51,50,84,244,143,175,136,84,84,49,49,49,51,48,51,51,84,244,143,175,137,84,84,49,49,49,51,48,51,52,84,244,143,175,138,84,84,49,49,49,51,48,51,53,84,244,143,175,139,84,84,49,49,49,51,48,51,54,84,244,143,175,140,84,84,49,49,49,51,48,51,55,84,244,143,175,141,84,84,49,49,49,51,48,51,56,84,244,143,175,142,84,84,49,49,49,51,48,51,57,84,244,143,175,143,84,84,49,49,49,51,48,52,48,84,244,143,175,144,84,84,49,49,49,51,48,52,49,84,244,143,175,145,84,84,49,49,49,51,48,52,50,84,244,143,175,146,84,84,49,49,49,51,48,52,51,84,244,143,175,147,84,84,49,49,49,51,48,52,52,84,244,143,175,148,84,84,49,49,49,51,48,52,53,84,244,143,175,149,84,84,49,49,49,51,48,52,54,84,244,143,175,150,84,84,49,49,49,51,48,52,55,84,244,143,175,151,84,84,49,49,49,51,48,52,56,84,244,143,175,152,84,84,49,49,49,51,48,52,57,84,244,143,175,153,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20257 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20257_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20257_s.txt", Encoding.UTF8);

    public Test20257() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersca1800aaa567470781b999118df6ba97",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,52,49,52,48,50,84,243,190,143,186,84,84,49,48,52,49,52,48,51,84,243,190,143,187,84,84,49,48,52,49,52,48,52,84,243,190,143,188,84,84,49,48,52,49,52,48,53,84,243,190,143,189,84,84,49,48,52,49,52,48,54,84,243,190,143,190,84,84,49,48,52,49,52,48,55,84,243,190,143,191,84,84,49,48,52,49,52,48,56,84,243,190,144,128,84,84,49,48,52,49,52,48,57,84,243,190,144,129,84,84,49,48,52,49,52,49,48,84,243,190,144,130,84,84,49,48,52,49,52,49,49,84,243,190,144,131,84,84,49,48,52,49,52,49,50,84,243,190,144,132,84,84,49,48,52,49,52,49,51,84,243,190,144,133,84,84,49,48,52,49,52,49,52,84,243,190,144,134,84,84,49,48,52,49,52,49,53,84,243,190,144,135,84,84,49,48,52,49,52,49,54,84,243,190,144,136,84,84,49,48,52,49,52,49,55,84,243,190,144,137,84,84,49,48,52,49,52,49,56,84,243,190,144,138,84,84,49,48,52,49,52,49,57,84,243,190,144,139,84,84,49,48,52,49,52,50,48,84,243,190,144,140,84,84,49,48,52,49,52,50,49,84,243,190,144,141,84,84,49,48,52,49,52,50,50,84,243,190,144,142,84,84,49,48,52,49,52,50,51,84,243,190,144,143,84,84,49,48,52,49,52,50,52,84,243,190,144,144,84,84,49,48,52,49,52,50,53,84,243,190,144,145,84,84,49,48,52,49,52,50,54,84,243,190,144,146,84,84,49,48,52,49,52,50,55,84,243,190,144,147,84,84,49,48,52,49,52,50,56,84,243,190,144,148,84,84,49,48,52,49,52,50,57,84,243,190,144,149,84,84,49,48,52,49,52,51,48,84,243,190,144,150,84,84,49,48,52,49,52,51,49,84,243,190,144,151,84,84,49,48,52,49,52,51,50,84,243,190,144,152,84,84,49,48,52,49,52,51,51,84,243,190,144,153,84,84,49,48,52,49,52,51,52,84,243,190,144,154,84,84,49,48,52,49,52,51,53,84,243,190,144,155,84,84,49,48,52,49,52,51,54,84,243,190,144,156,84,84,49,48,52,49,52,51,55,84,243,190,144,157,84,84,49,48,52,49,52,51,56,84,243,190,144,158,84,84,49,48,52,49,52,51,57,84,243,190,144,159,84,84,49,48,52,49,52,52,48,84,243,190,144,160,84,84,49,48,52,49,52,52,49,84,243,190,144,161,84,84,49,48,52,49,52,52,50,84,243,190,144,162,84,84,49,48,52,49,52,52,51,84,243,190,144,163,84,84,49,48,52,49,52,52,52,84,243,190,144,164,84,84,49,48,52,49,52,52,53,84,243,190,144,165,84,84,49,48,52,49,52,52,54,84,243,190,144,166,84,84,49,48,52,49,52,52,55,84,243,190,144,167,84,84,49,48,52,49,52,52,56,84,243,190,144,168,84,84,49,48,52,49,52,52,57,84,243,190,144,169,84,84,49,48,52,49,52,53,48,84,243,190,144,170,84,84,49,48,52,49,52,53,49,84,243,190,144,171,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20034 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20034_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20034_s.txt", Encoding.UTF8);

    public Test20034() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers612d6939acd44cdbbba30cffbd18a713",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,48,53,57,54,53,84,243,181,166,141,84,84,49,48,48,53,57,54,55,84,243,181,166,143,84,84,49,48,48,53,57,54,56,84,243,181,166,144,84,84,49,48,48,53,57,56,49,84,243,181,166,157,84,84,49,48,48,54,48,49,55,84,243,181,167,129,84,84,49,48,48,54,48,50,57,84,243,181,167,141,84,84,49,48,48,54,48,51,49,84,243,181,167,143,84,84,49,48,48,54,48,51,50,84,243,181,167,144,84,84,49,48,48,54,48,52,53,84,243,181,167,157,84,84,49,48,48,54,48,56,49,84,243,181,168,129,84,84,49,48,48,54,48,57,51,84,243,181,168,141,84,84,49,48,48,54,48,57,53,84,243,181,168,143,84,84,49,48,48,54,48,57,54,84,243,181,168,144,84,84,49,48,48,54,49,48,57,84,243,181,168,157,84,84,49,48,48,54,49,52,53,84,243,181,169,129,84,84,49,48,48,54,49,53,55,84,243,181,169,141,84,84,49,48,48,54,49,53,57,84,243,181,169,143,84,84,49,48,48,54,49,54,48,84,243,181,169,144,84,84,49,48,48,54,49,55,51,84,243,181,169,157,84,84,49,48,48,54,50,48,57,84,243,181,170,129,84,84,49,48,48,54,50,50,49,84,243,181,170,141,84,84,49,48,48,54,50,50,51,84,243,181,170,143,84,84,49,48,48,54,50,50,52,84,243,181,170,144,84,84,49,48,48,54,50,51,55,84,243,181,170,157,84,84,49,48,48,54,50,55,51,84,243,181,171,129,84,84,49,48,48,54,50,56,53,84,243,181,171,141,84,84,49,48,48,54,50,56,55,84,243,181,171,143,84,84,49,48,48,54,50,56,56,84,243,181,171,144,84,84,49,48,48,54,51,48,49,84,243,181,171,157,84,84,49,48,48,54,51,51,55,84,243,181,172,129,84,84,49,48,48,54,51,52,57,84,243,181,172,141,84,84,49,48,48,54,51,53,49,84,243,181,172,143,84,84,49,48,48,54,51,53,50,84,243,181,172,144,84,84,49,48,48,54,51,54,53,84,243,181,172,157,84,84,49,48,48,54,52,48,49,84,243,181,173,129,84,84,49,48,48,54,52,49,51,84,243,181,173,141,84,84,49,48,48,54,52,49,53,84,243,181,173,143,84,84,49,48,48,54,52,49,54,84,243,181,173,144,84,84,49,48,48,54,52,50,57,84,243,181,173,157,84,84,49,48,48,54,52,54,53,84,243,181,174,129,84,84,49,48,48,54,52,55,55,84,243,181,174,141,84,84,49,48,48,54,52,55,57,84,243,181,174,143,84,84,49,48,48,54,52,56,48,84,243,181,174,144,84,84,49,48,48,54,52,57,51,84,243,181,174,157,84,84,49,48,48,54,53,50,57,84,243,181,175,129,84,84,49,48,48,54,53,52,49,84,243,181,175,141,84,84,49,48,48,54,53,52,51,84,243,181,175,143,84,84,49,48,48,54,53,52,52,84,243,181,175,144,84,84,49,48,48,54,53,53,55,84,243,181,175,157,84,84,49,48,48,54,53,57,51,84,243,181,176,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20636 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20636_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20636_s.txt", Encoding.UTF8);

    public Test20636() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers5f5b393ed8e742338d6031fb2e225092",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,55,56,48,57,49,84,244,135,141,139,84,84,49,48,55,56,48,57,50,84,244,135,141,140,84,84,49,48,55,56,48,57,51,84,244,135,141,141,84,84,49,48,55,56,48,57,52,84,244,135,141,142,84,84,49,48,55,56,48,57,53,84,244,135,141,143,84,84,49,48,55,56,48,57,54,84,244,135,141,144,84,84,49,48,55,56,48,57,55,84,244,135,141,145,84,84,49,48,55,56,48,57,56,84,244,135,141,146,84,84,49,48,55,56,48,57,57,84,244,135,141,147,84,84,49,48,55,56,49,48,48,84,244,135,141,148,84,84,49,48,55,56,49,48,49,84,244,135,141,149,84,84,49,48,55,56,49,48,50,84,244,135,141,150,84,84,49,48,55,56,49,48,51,84,244,135,141,151,84,84,49,48,55,56,49,48,52,84,244,135,141,152,84,84,49,48,55,56,49,48,53,84,244,135,141,153,84,84,49,48,55,56,49,48,54,84,244,135,141,154,84,84,49,48,55,56,49,48,55,84,244,135,141,155,84,84,49,48,55,56,49,48,56,84,244,135,141,156,84,84,49,48,55,56,49,48,57,84,244,135,141,157,84,84,49,48,55,56,49,49,48,84,244,135,141,158,84,84,49,48,55,56,49,49,49,84,244,135,141,159,84,84,49,48,55,56,49,49,50,84,244,135,141,160,84,84,49,48,55,56,49,49,51,84,244,135,141,161,84,84,49,48,55,56,49,49,52,84,244,135,141,162,84,84,49,48,55,56,49,49,53,84,244,135,141,163,84,84,49,48,55,56,49,49,54,84,244,135,141,164,84,84,49,48,55,56,49,49,55,84,244,135,141,165,84,84,49,48,55,56,49,49,56,84,244,135,141,166,84,84,49,48,55,56,49,49,57,84,244,135,141,167,84,84,49,48,55,56,49,50,48,84,244,135,141,168,84,84,49,48,55,56,49,50,49,84,244,135,141,169,84,84,49,48,55,56,49,50,50,84,244,135,141,170,84,84,49,48,55,56,49,50,51,84,244,135,141,171,84,84,49,48,55,56,49,50,52,84,244,135,141,172,84,84,49,48,55,56,49,50,53,84,244,135,141,173,84,84,49,48,55,56,49,50,54,84,244,135,141,174,84,84,49,48,55,56,49,50,55,84,244,135,141,175,84,84,49,48,55,56,49,50,56,84,244,135,141,176,84,84,49,48,55,56,49,50,57,84,244,135,141,177,84,84,49,48,55,56,49,51,48,84,244,135,141,178,84,84,49,48,55,56,49,51,49,84,244,135,141,179,84,84,49,48,55,56,49,51,50,84,244,135,141,180,84,84,49,48,55,56,49,51,51,84,244,135,141,181,84,84,49,48,55,56,49,51,52,84,244,135,141,182,84,84,49,48,55,56,49,51,53,84,244,135,141,183,84,84,49,48,55,56,49,51,54,84,244,135,141,184,84,84,49,48,55,56,49,51,55,84,244,135,141,185,84,84,49,48,55,56,49,51,56,84,244,135,141,186,84,84,49,48,55,56,49,51,57,84,244,135,141,187,84,84,49,48,55,56,49,52,48,84,244,135,141,188,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19965 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19965_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19965_s.txt", Encoding.UTF8);

    public Test19965() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersbf5ecfbea5a24d8a8188936c9be6fa20",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,57,54,48,52,55,84,243,179,139,143,84,84,57,57,54,48,52,56,84,243,179,139,144,84,84,57,57,54,48,54,49,84,243,179,139,157,84,84,57,57,54,48,57,55,84,243,179,140,129,84,84,57,57,54,49,48,57,84,243,179,140,141,84,84,57,57,54,49,49,49,84,243,179,140,143,84,84,57,57,54,49,49,50,84,243,179,140,144,84,84,57,57,54,49,50,53,84,243,179,140,157,84,84,57,57,54,49,54,48,84,243,179,141,128,84,84,57,57,54,49,54,49,84,243,179,141,129,84,84,57,57,54,49,54,50,84,243,179,141,130,84,84,57,57,54,49,54,51,84,243,179,141,131,84,84,57,57,54,49,54,52,84,243,179,141,132,84,84,57,57,54,49,54,53,84,243,179,141,133,84,84,57,57,54,49,54,54,84,243,179,141,134,84,84,57,57,54,49,54,55,84,243,179,141,135,84,84,57,57,54,49,54,56,84,243,179,141,136,84,84,57,57,54,49,54,57,84,243,179,141,137,84,84,57,57,54,49,55,48,84,243,179,141,138,84,84,57,57,54,49,55,49,84,243,179,141,139,84,84,57,57,54,49,55,50,84,243,179,141,140,84,84,57,57,54,49,55,51,84,243,179,141,141,84,84,57,57,54,49,55,52,84,243,179,141,142,84,84,57,57,54,49,55,53,84,243,179,141,143,84,84,57,57,54,49,55,54,84,243,179,141,144,84,84,57,57,54,49,55,55,84,243,179,141,145,84,84,57,57,54,49,55,56,84,243,179,141,146,84,84,57,57,54,49,55,57,84,243,179,141,147,84,84,57,57,54,49,56,48,84,243,179,141,148,84,84,57,57,54,49,56,49,84,243,179,141,149,84,84,57,57,54,49,56,50,84,243,179,141,150,84,84,57,57,54,49,56,51,84,243,179,141,151,84,84,57,57,54,49,56,52,84,243,179,141,152,84,84,57,57,54,49,56,53,84,243,179,141,153,84,84,57,57,54,49,56,54,84,243,179,141,154,84,84,57,57,54,49,56,55,84,243,179,141,155,84,84,57,57,54,49,56,56,84,243,179,141,156,84,84,57,57,54,49,56,57,84,243,179,141,157,84,84,57,57,54,49,57,48,84,243,179,141,158,84,84,57,57,54,49,57,49,84,243,179,141,159,84,84,57,57,54,49,57,50,84,243,179,141,160,84,84,57,57,54,49,57,51,84,243,179,141,161,84,84,57,57,54,49,57,52,84,243,179,141,162,84,84,57,57,54,49,57,53,84,243,179,141,163,84,84,57,57,54,49,57,54,84,243,179,141,164,84,84,57,57,54,49,57,55,84,243,179,141,165,84,84,57,57,54,49,57,56,84,243,179,141,166,84,84,57,57,54,49,57,57,84,243,179,141,167,84,84,57,57,54,50,48,48,84,243,179,141,168,84,84,57,57,54,50,48,49,84,243,179,141,169,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20314 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20314_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20314_s.txt", Encoding.UTF8);

    public Test20314() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers412024b733e349978217e6093afed677",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,52,57,54,54,53,84,244,128,145,129,84,84,49,48,52,57,54,55,55,84,244,128,145,141,84,84,49,48,52,57,54,55,57,84,244,128,145,143,84,84,49,48,52,57,54,56,48,84,244,128,145,144,84,84,49,48,52,57,54,57,51,84,244,128,145,157,84,84,49,48,52,57,55,50,57,84,244,128,146,129,84,84,49,48,52,57,55,52,49,84,244,128,146,141,84,84,49,48,52,57,55,52,51,84,244,128,146,143,84,84,49,48,52,57,55,52,52,84,244,128,146,144,84,84,49,48,52,57,55,53,55,84,244,128,146,157,84,84,49,48,52,57,55,57,51,84,244,128,147,129,84,84,49,48,52,57,56,48,53,84,244,128,147,141,84,84,49,48,52,57,56,48,55,84,244,128,147,143,84,84,49,48,52,57,56,48,56,84,244,128,147,144,84,84,49,48,52,57,56,50,49,84,244,128,147,157,84,84,49,48,52,57,56,53,55,84,244,128,148,129,84,84,49,48,52,57,56,54,57,84,244,128,148,141,84,84,49,48,52,57,56,55,49,84,244,128,148,143,84,84,49,48,52,57,56,55,50,84,244,128,148,144,84,84,49,48,52,57,56,56,53,84,244,128,148,157,84,84,49,48,52,57,57,50,49,84,244,128,149,129,84,84,49,48,52,57,57,51,51,84,244,128,149,141,84,84,49,48,52,57,57,51,53,84,244,128,149,143,84,84,49,48,52,57,57,51,54,84,244,128,149,144,84,84,49,48,52,57,57,52,57,84,244,128,149,157,84,84,49,48,52,57,57,56,53,84,244,128,150,129,84,84,49,48,52,57,57,57,55,84,244,128,150,141,84,84,49,48,52,57,57,57,57,84,244,128,150,143,84,84,49,48,53,48,48,48,48,84,244,128,150,144,84,84,49,48,53,48,48,49,51,84,244,128,150,157,84,84,49,48,53,48,48,52,57,84,244,128,151,129,84,84,49,48,53,48,48,54,49,84,244,128,151,141,84,84,49,48,53,48,48,54,51,84,244,128,151,143,84,84,49,48,53,48,48,54,52,84,244,128,151,144,84,84,49,48,53,48,48,55,55,84,244,128,151,157,84,84,49,48,53,48,49,49,51,84,244,128,152,129,84,84,49,48,53,48,49,50,53,84,244,128,152,141,84,84,49,48,53,48,49,50,55,84,244,128,152,143,84,84,49,48,53,48,49,50,56,84,244,128,152,144,84,84,49,48,53,48,49,52,49,84,244,128,152,157,84,84,49,48,53,48,49,55,55,84,244,128,153,129,84,84,49,48,53,48,49,56,57,84,244,128,153,141,84,84,49,48,53,48,49,57,49,84,244,128,153,143,84,84,49,48,53,48,49,57,50,84,244,128,153,144,84,84,49,48,53,48,50,48,53,84,244,128,153,157,84,84,49,48,53,48,50,52,49,84,244,128,154,129,84,84,49,48,53,48,50,53,51,84,244,128,154,141,84,84,49,48,53,48,50,53,53,84,244,128,154,143,84,84,49,48,53,48,50,53,54,84,244,128,154,144,84,84,49,48,53,48,50,54,57,84,244,128,154,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20699 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20699_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20699_s.txt", Encoding.UTF8);

    public Test20699() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers0bb7ae45edef4594997d97499d26b519",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,56,54,57,52,49,84,244,137,151,157,84,84,49,48,56,54,57,55,55,84,244,137,152,129,84,84,49,48,56,54,57,56,57,84,244,137,152,141,84,84,49,48,56,54,57,57,49,84,244,137,152,143,84,84,49,48,56,54,57,57,50,84,244,137,152,144,84,84,49,48,56,55,48,48,53,84,244,137,152,157,84,84,49,48,56,55,48,52,49,84,244,137,153,129,84,84,49,48,56,55,48,53,51,84,244,137,153,141,84,84,49,48,56,55,48,53,53,84,244,137,153,143,84,84,49,48,56,55,48,53,54,84,244,137,153,144,84,84,49,48,56,55,48,54,57,84,244,137,153,157,84,84,49,48,56,55,49,48,53,84,244,137,154,129,84,84,49,48,56,55,49,49,55,84,244,137,154,141,84,84,49,48,56,55,49,49,57,84,244,137,154,143,84,84,49,48,56,55,49,50,48,84,244,137,154,144,84,84,49,48,56,55,49,51,51,84,244,137,154,157,84,84,49,48,56,55,49,54,57,84,244,137,155,129,84,84,49,48,56,55,49,56,49,84,244,137,155,141,84,84,49,48,56,55,49,56,51,84,244,137,155,143,84,84,49,48,56,55,49,56,52,84,244,137,155,144,84,84,49,48,56,55,49,57,55,84,244,137,155,157,84,84,49,48,56,55,50,51,51,84,244,137,156,129,84,84,49,48,56,55,50,52,53,84,244,137,156,141,84,84,49,48,56,55,50,52,55,84,244,137,156,143,84,84,49,48,56,55,50,52,56,84,244,137,156,144,84,84,49,48,56,55,50,54,49,84,244,137,156,157,84,84,49,48,56,55,50,57,54,84,244,137,157,128,84,84,49,48,56,55,50,57,55,84,244,137,157,129,84,84,49,48,56,55,50,57,56,84,244,137,157,130,84,84,49,48,56,55,50,57,57,84,244,137,157,131,84,84,49,48,56,55,51,48,48,84,244,137,157,132,84,84,49,48,56,55,51,48,49,84,244,137,157,133,84,84,49,48,56,55,51,48,50,84,244,137,157,134,84,84,49,48,56,55,51,48,51,84,244,137,157,135,84,84,49,48,56,55,51,48,52,84,244,137,157,136,84,84,49,48,56,55,51,48,53,84,244,137,157,137,84,84,49,48,56,55,51,48,54,84,244,137,157,138,84,84,49,48,56,55,51,48,55,84,244,137,157,139,84,84,49,48,56,55,51,48,56,84,244,137,157,140,84,84,49,48,56,55,51,48,57,84,244,137,157,141,84,84,49,48,56,55,51,49,48,84,244,137,157,142,84,84,49,48,56,55,51,49,49,84,244,137,157,143,84,84,49,48,56,55,51,49,50,84,244,137,157,144,84,84,49,48,56,55,51,49,51,84,244,137,157,145,84,84,49,48,56,55,51,49,52,84,244,137,157,146,84,84,49,48,56,55,51,49,53,84,244,137,157,147,84,84,49,48,56,55,51,49,54,84,244,137,157,148,84,84,49,48,56,55,51,49,55,84,244,137,157,149,84,84,49,48,56,55,51,49,56,84,244,137,157,150,84,84,49,48,56,55,51,49,57,84,244,137,157,151,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20130 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20130_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20130_s.txt", Encoding.UTF8);

    public Test20130() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers02552a2396c44255a61dd19b9714b3b6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,50,49,48,53,55,84,243,185,146,129,84,84,49,48,50,49,48,54,57,84,243,185,146,141,84,84,49,48,50,49,48,55,49,84,243,185,146,143,84,84,49,48,50,49,48,55,50,84,243,185,146,144,84,84,49,48,50,49,48,56,53,84,243,185,146,157,84,84,49,48,50,49,49,50,49,84,243,185,147,129,84,84,49,48,50,49,49,51,51,84,243,185,147,141,84,84,49,48,50,49,49,51,53,84,243,185,147,143,84,84,49,48,50,49,49,51,54,84,243,185,147,144,84,84,49,48,50,49,49,52,57,84,243,185,147,157,84,84,49,48,50,49,49,56,53,84,243,185,148,129,84,84,49,48,50,49,49,57,55,84,243,185,148,141,84,84,49,48,50,49,49,57,57,84,243,185,148,143,84,84,49,48,50,49,50,48,48,84,243,185,148,144,84,84,49,48,50,49,50,49,51,84,243,185,148,157,84,84,49,48,50,49,50,52,57,84,243,185,149,129,84,84,49,48,50,49,50,54,49,84,243,185,149,141,84,84,49,48,50,49,50,54,51,84,243,185,149,143,84,84,49,48,50,49,50,54,52,84,243,185,149,144,84,84,49,48,50,49,50,55,55,84,243,185,149,157,84,84,49,48,50,49,51,49,51,84,243,185,150,129,84,84,49,48,50,49,51,50,53,84,243,185,150,141,84,84,49,48,50,49,51,50,55,84,243,185,150,143,84,84,49,48,50,49,51,50,56,84,243,185,150,144,84,84,49,48,50,49,51,52,49,84,243,185,150,157,84,84,49,48,50,49,51,55,55,84,243,185,151,129,84,84,49,48,50,49,51,56,57,84,243,185,151,141,84,84,49,48,50,49,51,57,49,84,243,185,151,143,84,84,49,48,50,49,51,57,50,84,243,185,151,144,84,84,49,48,50,49,52,48,53,84,243,185,151,157,84,84,49,48,50,49,52,52,49,84,243,185,152,129,84,84,49,48,50,49,52,53,51,84,243,185,152,141,84,84,49,48,50,49,52,53,53,84,243,185,152,143,84,84,49,48,50,49,52,53,54,84,243,185,152,144,84,84,49,48,50,49,52,54,57,84,243,185,152,157,84,84,49,48,50,49,53,48,53,84,243,185,153,129,84,84,49,48,50,49,53,49,55,84,243,185,153,141,84,84,49,48,50,49,53,49,57,84,243,185,153,143,84,84,49,48,50,49,53,50,48,84,243,185,153,144,84,84,49,48,50,49,53,51,51,84,243,185,153,157,84,84,49,48,50,49,53,54,57,84,243,185,154,129,84,84,49,48,50,49,53,56,49,84,243,185,154,141,84,84,49,48,50,49,53,56,51,84,243,185,154,143,84,84,49,48,50,49,53,56,52,84,243,185,154,144,84,84,49,48,50,49,53,57,55,84,243,185,154,157,84,84,49,48,50,49,54,51,51,84,243,185,155,129,84,84,49,48,50,49,54,52,53,84,243,185,155,141,84,84,49,48,50,49,54,52,55,84,243,185,155,143,84,84,49,48,50,49,54,52,56,84,243,185,155,144,84,84,49,48,50,49,54,54,49,84,243,185,155,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20449 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20449_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20449_s.txt", Encoding.UTF8);

    public Test20449() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersee5ddc6232b847869028904d3d06a0f3",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,53,53,55,56,84,244,129,173,154,84,84,49,48,53,53,53,55,57,84,244,129,173,155,84,84,49,48,53,53,53,56,48,84,244,129,173,156,84,84,49,48,53,53,53,56,49,84,244,129,173,157,84,84,49,48,53,53,53,56,50,84,244,129,173,158,84,84,49,48,53,53,53,56,51,84,244,129,173,159,84,84,49,48,53,53,53,56,52,84,244,129,173,160,84,84,49,48,53,53,53,56,53,84,244,129,173,161,84,84,49,48,53,53,53,56,54,84,244,129,173,162,84,84,49,48,53,53,53,56,55,84,244,129,173,163,84,84,49,48,53,53,53,56,56,84,244,129,173,164,84,84,49,48,53,53,53,56,57,84,244,129,173,165,84,84,49,48,53,53,53,57,48,84,244,129,173,166,84,84,49,48,53,53,53,57,49,84,244,129,173,167,84,84,49,48,53,53,53,57,50,84,244,129,173,168,84,84,49,48,53,53,53,57,51,84,244,129,173,169,84,84,49,48,53,53,53,57,52,84,244,129,173,170,84,84,49,48,53,53,53,57,53,84,244,129,173,171,84,84,49,48,53,53,53,57,54,84,244,129,173,172,84,84,49,48,53,53,53,57,55,84,244,129,173,173,84,84,49,48,53,53,53,57,56,84,244,129,173,174,84,84,49,48,53,53,53,57,57,84,244,129,173,175,84,84,49,48,53,53,54,48,48,84,244,129,173,176,84,84,49,48,53,53,54,48,49,84,244,129,173,177,84,84,49,48,53,53,54,48,50,84,244,129,173,178,84,84,49,48,53,53,54,48,51,84,244,129,173,179,84,84,49,48,53,53,54,48,52,84,244,129,173,180,84,84,49,48,53,53,54,48,53,84,244,129,173,181,84,84,49,48,53,53,54,48,54,84,244,129,173,182,84,84,49,48,53,53,54,48,55,84,244,129,173,183,84,84,49,48,53,53,54,48,56,84,244,129,173,184,84,84,49,48,53,53,54,48,57,84,244,129,173,185,84,84,49,48,53,53,54,49,48,84,244,129,173,186,84,84,49,48,53,53,54,49,49,84,244,129,173,187,84,84,49,48,53,53,54,49,50,84,244,129,173,188,84,84,49,48,53,53,54,49,51,84,244,129,173,189,84,84,49,48,53,53,54,49,52,84,244,129,173,190,84,84,49,48,53,53,54,49,53,84,244,129,173,191,84,84,49,48,53,53,54,49,54,84,244,129,174,128,84,84,49,48,53,53,54,49,55,84,244,129,174,129,84,84,49,48,53,53,54,49,56,84,244,129,174,130,84,84,49,48,53,53,54,49,57,84,244,129,174,131,84,84,49,48,53,53,54,50,48,84,244,129,174,132,84,84,49,48,53,53,54,50,49,84,244,129,174,133,84,84,49,48,53,53,54,50,50,84,244,129,174,134,84,84,49,48,53,53,54,50,51,84,244,129,174,135,84,84,49,48,53,53,54,50,52,84,244,129,174,136,84,84,49,48,53,53,54,50,53,84,244,129,174,137,84,84,49,48,53,53,54,50,54,84,244,129,174,138,84,84,49,48,53,53,54,50,55,84,244,129,174,139,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20796 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20796_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20796_s.txt", Encoding.UTF8);

    public Test20796() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers8240a720eb234783afd6a68d24f64161",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,50,48,49,57,84,244,141,131,131,84,84,49,49,48,50,48,50,48,84,244,141,131,132,84,84,49,49,48,50,48,50,49,84,244,141,131,133,84,84,49,49,48,50,48,50,50,84,244,141,131,134,84,84,49,49,48,50,48,50,51,84,244,141,131,135,84,84,49,49,48,50,48,50,52,84,244,141,131,136,84,84,49,49,48,50,48,50,53,84,244,141,131,137,84,84,49,49,48,50,48,50,54,84,244,141,131,138,84,84,49,49,48,50,48,50,55,84,244,141,131,139,84,84,49,49,48,50,48,50,56,84,244,141,131,140,84,84,49,49,48,50,48,50,57,84,244,141,131,141,84,84,49,49,48,50,48,51,48,84,244,141,131,142,84,84,49,49,48,50,48,51,49,84,244,141,131,143,84,84,49,49,48,50,48,51,50,84,244,141,131,144,84,84,49,49,48,50,48,51,51,84,244,141,131,145,84,84,49,49,48,50,48,51,52,84,244,141,131,146,84,84,49,49,48,50,48,51,53,84,244,141,131,147,84,84,49,49,48,50,48,51,54,84,244,141,131,148,84,84,49,49,48,50,48,51,55,84,244,141,131,149,84,84,49,49,48,50,48,51,56,84,244,141,131,150,84,84,49,49,48,50,48,51,57,84,244,141,131,151,84,84,49,49,48,50,48,52,48,84,244,141,131,152,84,84,49,49,48,50,48,52,49,84,244,141,131,153,84,84,49,49,48,50,48,52,50,84,244,141,131,154,84,84,49,49,48,50,48,52,51,84,244,141,131,155,84,84,49,49,48,50,48,52,52,84,244,141,131,156,84,84,49,49,48,50,48,52,53,84,244,141,131,157,84,84,49,49,48,50,48,52,54,84,244,141,131,158,84,84,49,49,48,50,48,52,55,84,244,141,131,159,84,84,49,49,48,50,48,52,56,84,244,141,131,160,84,84,49,49,48,50,48,52,57,84,244,141,131,161,84,84,49,49,48,50,48,53,48,84,244,141,131,162,84,84,49,49,48,50,48,53,49,84,244,141,131,163,84,84,49,49,48,50,48,53,50,84,244,141,131,164,84,84,49,49,48,50,48,53,51,84,244,141,131,165,84,84,49,49,48,50,48,53,52,84,244,141,131,166,84,84,49,49,48,50,48,53,53,84,244,141,131,167,84,84,49,49,48,50,48,53,54,84,244,141,131,168,84,84,49,49,48,50,48,53,55,84,244,141,131,169,84,84,49,49,48,50,48,53,56,84,244,141,131,170,84,84,49,49,48,50,48,53,57,84,244,141,131,171,84,84,49,49,48,50,48,54,48,84,244,141,131,172,84,84,49,49,48,50,48,54,49,84,244,141,131,173,84,84,49,49,48,50,48,54,50,84,244,141,131,174,84,84,49,49,48,50,48,54,51,84,244,141,131,175,84,84,49,49,48,50,48,54,52,84,244,141,131,176,84,84,49,49,48,50,48,54,53,84,244,141,131,177,84,84,49,49,48,50,48,54,54,84,244,141,131,178,84,84,49,49,48,50,48,54,55,84,244,141,131,179,84,84,49,49,48,50,48,54,56,84,244,141,131,180,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20409 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20409_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20409_s.txt", Encoding.UTF8);

    public Test20409() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers7f83ba854dc4459da9078f97f691d28c",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,52,54,50,56,84,244,129,158,164,84,84,49,48,53,52,54,50,57,84,244,129,158,165,84,84,49,48,53,52,54,51,48,84,244,129,158,166,84,84,49,48,53,52,54,51,49,84,244,129,158,167,84,84,49,48,53,52,54,51,50,84,244,129,158,168,84,84,49,48,53,52,54,51,51,84,244,129,158,169,84,84,49,48,53,52,54,51,52,84,244,129,158,170,84,84,49,48,53,52,54,51,53,84,244,129,158,171,84,84,49,48,53,52,54,51,54,84,244,129,158,172,84,84,49,48,53,52,54,51,55,84,244,129,158,173,84,84,49,48,53,52,54,51,56,84,244,129,158,174,84,84,49,48,53,52,54,51,57,84,244,129,158,175,84,84,49,48,53,52,54,52,48,84,244,129,158,176,84,84,49,48,53,52,54,52,49,84,244,129,158,177,84,84,49,48,53,52,54,52,50,84,244,129,158,178,84,84,49,48,53,52,54,52,51,84,244,129,158,179,84,84,49,48,53,52,54,52,52,84,244,129,158,180,84,84,49,48,53,52,54,52,53,84,244,129,158,181,84,84,49,48,53,52,54,52,54,84,244,129,158,182,84,84,49,48,53,52,54,52,55,84,244,129,158,183,84,84,49,48,53,52,54,52,56,84,244,129,158,184,84,84,49,48,53,52,54,52,57,84,244,129,158,185,84,84,49,48,53,52,54,53,48,84,244,129,158,186,84,84,49,48,53,52,54,53,49,84,244,129,158,187,84,84,49,48,53,52,54,53,50,84,244,129,158,188,84,84,49,48,53,52,54,53,51,84,244,129,158,189,84,84,49,48,53,52,54,53,52,84,244,129,158,190,84,84,49,48,53,52,54,53,53,84,244,129,158,191,84,84,49,48,53,52,54,53,54,84,244,129,159,128,84,84,49,48,53,52,54,53,55,84,244,129,159,129,84,84,49,48,53,52,54,53,56,84,244,129,159,130,84,84,49,48,53,52,54,53,57,84,244,129,159,131,84,84,49,48,53,52,54,54,48,84,244,129,159,132,84,84,49,48,53,52,54,54,49,84,244,129,159,133,84,84,49,48,53,52,54,54,50,84,244,129,159,134,84,84,49,48,53,52,54,54,51,84,244,129,159,135,84,84,49,48,53,52,54,54,52,84,244,129,159,136,84,84,49,48,53,52,54,54,53,84,244,129,159,137,84,84,49,48,53,52,54,54,54,84,244,129,159,138,84,84,49,48,53,52,54,54,55,84,244,129,159,139,84,84,49,48,53,52,54,54,56,84,244,129,159,140,84,84,49,48,53,52,54,54,57,84,244,129,159,141,84,84,49,48,53,52,54,55,48,84,244,129,159,142,84,84,49,48,53,52,54,55,49,84,244,129,159,143,84,84,49,48,53,52,54,55,50,84,244,129,159,144,84,84,49,48,53,52,54,55,51,84,244,129,159,145,84,84,49,48,53,52,54,55,52,84,244,129,159,146,84,84,49,48,53,52,54,55,53,84,244,129,159,147,84,84,49,48,53,52,54,55,54,84,244,129,159,148,84,84,49,48,53,52,54,55,55,84,244,129,159,149,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20189 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20189_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20189_s.txt", Encoding.UTF8);

    public Test20189() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers2b6cdd6684eb4500abcaa682adc323b7",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,51,48,48,50,57,84,243,187,158,141,84,84,49,48,51,48,48,51,49,84,243,187,158,143,84,84,49,48,51,48,48,51,50,84,243,187,158,144,84,84,49,48,51,48,48,52,53,84,243,187,158,157,84,84,49,48,51,48,48,56,49,84,243,187,159,129,84,84,49,48,51,48,48,57,51,84,243,187,159,141,84,84,49,48,51,48,48,57,53,84,243,187,159,143,84,84,49,48,51,48,48,57,54,84,243,187,159,144,84,84,49,48,51,48,49,48,57,84,243,187,159,157,84,84,49,48,51,48,49,52,53,84,243,187,160,129,84,84,49,48,51,48,49,53,55,84,243,187,160,141,84,84,49,48,51,48,49,53,57,84,243,187,160,143,84,84,49,48,51,48,49,54,48,84,243,187,160,144,84,84,49,48,51,48,49,55,51,84,243,187,160,157,84,84,49,48,51,48,50,48,57,84,243,187,161,129,84,84,49,48,51,48,50,50,49,84,243,187,161,141,84,84,49,48,51,48,50,50,51,84,243,187,161,143,84,84,49,48,51,48,50,50,52,84,243,187,161,144,84,84,49,48,51,48,50,51,55,84,243,187,161,157,84,84,49,48,51,48,50,55,51,84,243,187,162,129,84,84,49,48,51,48,50,56,53,84,243,187,162,141,84,84,49,48,51,48,50,56,55,84,243,187,162,143,84,84,49,48,51,48,50,56,56,84,243,187,162,144,84,84,49,48,51,48,51,48,49,84,243,187,162,157,84,84,49,48,51,48,51,51,55,84,243,187,163,129,84,84,49,48,51,48,51,52,57,84,243,187,163,141,84,84,49,48,51,48,51,53,49,84,243,187,163,143,84,84,49,48,51,48,51,53,50,84,243,187,163,144,84,84,49,48,51,48,51,54,53,84,243,187,163,157,84,84,49,48,51,48,52,48,49,84,243,187,164,129,84,84,49,48,51,48,52,49,51,84,243,187,164,141,84,84,49,48,51,48,52,49,53,84,243,187,164,143,84,84,49,48,51,48,52,49,54,84,243,187,164,144,84,84,49,48,51,48,52,50,57,84,243,187,164,157,84,84,49,48,51,48,52,54,53,84,243,187,165,129,84,84,49,48,51,48,52,55,55,84,243,187,165,141,84,84,49,48,51,48,52,55,57,84,243,187,165,143,84,84,49,48,51,48,52,56,48,84,243,187,165,144,84,84,49,48,51,48,52,57,51,84,243,187,165,157,84,84,49,48,51,48,53,50,57,84,243,187,166,129,84,84,49,48,51,48,53,52,49,84,243,187,166,141,84,84,49,48,51,48,53,52,51,84,243,187,166,143,84,84,49,48,51,48,53,52,52,84,243,187,166,144,84,84,49,48,51,48,53,53,55,84,243,187,166,157,84,84,49,48,51,48,53,57,51,84,243,187,167,129,84,84,49,48,51,48,54,48,53,84,243,187,167,141,84,84,49,48,51,48,54,48,55,84,243,187,167,143,84,84,49,48,51,48,54,48,56,84,243,187,167,144,84,84,49,48,51,48,54,50,49,84,243,187,167,157,84,84,49,48,51,48,54,53,55,84,243,187,168,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20356 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20356_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20356_s.txt", Encoding.UTF8);

    public Test20356() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers319eca44915441a6b60a6025f5eab2bd",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,51,51,55,56,84,244,129,139,130,84,84,49,48,53,51,51,55,57,84,244,129,139,131,84,84,49,48,53,51,51,56,48,84,244,129,139,132,84,84,49,48,53,51,51,56,49,84,244,129,139,133,84,84,49,48,53,51,51,56,50,84,244,129,139,134,84,84,49,48,53,51,51,56,51,84,244,129,139,135,84,84,49,48,53,51,51,56,52,84,244,129,139,136,84,84,49,48,53,51,51,56,53,84,244,129,139,137,84,84,49,48,53,51,51,56,54,84,244,129,139,138,84,84,49,48,53,51,51,56,55,84,244,129,139,139,84,84,49,48,53,51,51,56,56,84,244,129,139,140,84,84,49,48,53,51,51,56,57,84,244,129,139,141,84,84,49,48,53,51,51,57,48,84,244,129,139,142,84,84,49,48,53,51,51,57,49,84,244,129,139,143,84,84,49,48,53,51,51,57,50,84,244,129,139,144,84,84,49,48,53,51,51,57,51,84,244,129,139,145,84,84,49,48,53,51,51,57,52,84,244,129,139,146,84,84,49,48,53,51,51,57,53,84,244,129,139,147,84,84,49,48,53,51,51,57,54,84,244,129,139,148,84,84,49,48,53,51,51,57,55,84,244,129,139,149,84,84,49,48,53,51,51,57,56,84,244,129,139,150,84,84,49,48,53,51,51,57,57,84,244,129,139,151,84,84,49,48,53,51,52,48,48,84,244,129,139,152,84,84,49,48,53,51,52,48,49,84,244,129,139,153,84,84,49,48,53,51,52,48,50,84,244,129,139,154,84,84,49,48,53,51,52,48,51,84,244,129,139,155,84,84,49,48,53,51,52,48,52,84,244,129,139,156,84,84,49,48,53,51,52,48,53,84,244,129,139,157,84,84,49,48,53,51,52,48,54,84,244,129,139,158,84,84,49,48,53,51,52,48,55,84,244,129,139,159,84,84,49,48,53,51,52,48,56,84,244,129,139,160,84,84,49,48,53,51,52,48,57,84,244,129,139,161,84,84,49,48,53,51,52,49,48,84,244,129,139,162,84,84,49,48,53,51,52,49,49,84,244,129,139,163,84,84,49,48,53,51,52,49,50,84,244,129,139,164,84,84,49,48,53,51,52,49,51,84,244,129,139,165,84,84,49,48,53,51,52,49,52,84,244,129,139,166,84,84,49,48,53,51,52,49,53,84,244,129,139,167,84,84,49,48,53,51,52,49,54,84,244,129,139,168,84,84,49,48,53,51,52,49,55,84,244,129,139,169,84,84,49,48,53,51,52,49,56,84,244,129,139,170,84,84,49,48,53,51,52,49,57,84,244,129,139,171,84,84,49,48,53,51,52,50,48,84,244,129,139,172,84,84,49,48,53,51,52,50,49,84,244,129,139,173,84,84,49,48,53,51,52,50,50,84,244,129,139,174,84,84,49,48,53,51,52,50,51,84,244,129,139,175,84,84,49,48,53,51,52,50,52,84,244,129,139,176,84,84,49,48,53,51,52,50,53,84,244,129,139,177,84,84,49,48,53,51,52,50,54,84,244,129,139,178,84,84,49,48,53,51,52,50,55,84,244,129,139,179,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19838 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19838_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19838_s.txt", Encoding.UTF8);

    public Test19838() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers3d1fce2fe43b489ca49e5d4066014499",
                        blob: Encoding.UTF8.GetString(new byte[]{84,54,50,52,48,52,84,239,143,132,84,84,54,50,52,48,53,84,239,143,133,84,84,54,50,52,48,54,84,239,143,134,84,84,54,50,52,48,55,84,239,143,135,84,84,54,50,52,48,56,84,239,143,136,84,84,54,50,52,48,57,84,239,143,137,84,84,54,50,52,49,48,84,239,143,138,84,84,54,50,52,49,49,84,239,143,139,84,84,54,50,52,49,50,84,239,143,140,84,84,54,50,52,49,51,84,239,143,141,84,84,54,50,52,49,52,84,239,143,142,84,84,54,50,52,49,53,84,239,143,143,84,84,54,50,52,49,54,84,239,143,144,84,84,54,50,52,49,55,84,239,143,145,84,84,54,50,52,49,56,84,239,143,146,84,84,54,50,52,49,57,84,239,143,147,84,84,54,50,52,50,48,84,239,143,148,84,84,54,50,52,50,49,84,239,143,149,84,84,54,50,52,50,50,84,239,143,150,84,84,54,50,52,50,51,84,239,143,151,84,84,54,50,52,50,52,84,239,143,152,84,84,54,50,52,50,53,84,239,143,153,84,84,54,50,52,50,54,84,239,143,154,84,84,54,50,52,50,55,84,239,143,155,84,84,54,50,52,50,56,84,239,143,156,84,84,54,50,52,50,57,84,239,143,157,84,84,54,50,52,51,48,84,239,143,158,84,84,54,50,52,51,49,84,239,143,159,84,84,54,50,52,51,50,84,239,143,160,84,84,54,50,52,51,51,84,239,143,161,84,84,54,50,52,51,52,84,239,143,162,84,84,54,50,52,51,53,84,239,143,163,84,84,54,50,52,51,54,84,239,143,164,84,84,54,50,52,51,55,84,239,143,165,84,84,54,50,52,51,56,84,239,143,166,84,84,54,50,52,51,57,84,239,143,167,84,84,54,50,52,52,48,84,239,143,168,84,84,54,50,52,52,49,84,239,143,169,84,84,54,50,52,52,50,84,239,143,170,84,84,54,50,52,52,51,84,239,143,171,84,84,54,50,52,52,52,84,239,143,172,84,84,54,50,52,52,53,84,239,143,173,84,84,54,50,52,52,54,84,239,143,174,84,84,54,50,52,52,55,84,239,143,175,84,84,54,50,52,52,56,84,239,143,176,84,84,54,50,52,52,57,84,239,143,177,84,84,54,50,52,53,48,84,239,143,178,84,84,54,50,52,53,49,84,239,143,179,84,84,54,50,52,53,50,84,239,143,180,84,84,54,50,52,53,51,84,239,143,181,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20919 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20919_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20919_s.txt", Encoding.UTF8);

    public Test20919() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers9e891393b2624599aedf317812121dcf",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,52,57,49,57,84,244,141,176,151,84,84,49,49,48,52,57,50,48,84,244,141,176,152,84,84,49,49,48,52,57,50,49,84,244,141,176,153,84,84,49,49,48,52,57,50,50,84,244,141,176,154,84,84,49,49,48,52,57,50,51,84,244,141,176,155,84,84,49,49,48,52,57,50,52,84,244,141,176,156,84,84,49,49,48,52,57,50,53,84,244,141,176,157,84,84,49,49,48,52,57,50,54,84,244,141,176,158,84,84,49,49,48,52,57,50,55,84,244,141,176,159,84,84,49,49,48,52,57,50,56,84,244,141,176,160,84,84,49,49,48,52,57,50,57,84,244,141,176,161,84,84,49,49,48,52,57,51,48,84,244,141,176,162,84,84,49,49,48,52,57,51,49,84,244,141,176,163,84,84,49,49,48,52,57,51,50,84,244,141,176,164,84,84,49,49,48,52,57,51,51,84,244,141,176,165,84,84,49,49,48,52,57,51,52,84,244,141,176,166,84,84,49,49,48,52,57,51,53,84,244,141,176,167,84,84,49,49,48,52,57,51,54,84,244,141,176,168,84,84,49,49,48,52,57,51,55,84,244,141,176,169,84,84,49,49,48,52,57,51,56,84,244,141,176,170,84,84,49,49,48,52,57,51,57,84,244,141,176,171,84,84,49,49,48,52,57,52,48,84,244,141,176,172,84,84,49,49,48,52,57,52,49,84,244,141,176,173,84,84,49,49,48,52,57,52,50,84,244,141,176,174,84,84,49,49,48,52,57,52,51,84,244,141,176,175,84,84,49,49,48,52,57,52,52,84,244,141,176,176,84,84,49,49,48,52,57,52,53,84,244,141,176,177,84,84,49,49,48,52,57,52,54,84,244,141,176,178,84,84,49,49,48,52,57,52,55,84,244,141,176,179,84,84,49,49,48,52,57,52,56,84,244,141,176,180,84,84,49,49,48,52,57,52,57,84,244,141,176,181,84,84,49,49,48,52,57,53,48,84,244,141,176,182,84,84,49,49,48,52,57,53,49,84,244,141,176,183,84,84,49,49,48,52,57,53,50,84,244,141,176,184,84,84,49,49,48,52,57,53,51,84,244,141,176,185,84,84,49,49,48,52,57,53,52,84,244,141,176,186,84,84,49,49,48,52,57,53,53,84,244,141,176,187,84,84,49,49,48,52,57,53,54,84,244,141,176,188,84,84,49,49,48,52,57,53,55,84,244,141,176,189,84,84,49,49,48,52,57,53,56,84,244,141,176,190,84,84,49,49,48,52,57,53,57,84,244,141,176,191,84,84,49,49,48,52,57,54,48,84,244,141,177,128,84,84,49,49,48,52,57,54,49,84,244,141,177,129,84,84,49,49,48,52,57,54,50,84,244,141,177,130,84,84,49,49,48,52,57,54,51,84,244,141,177,131,84,84,49,49,48,52,57,54,52,84,244,141,177,132,84,84,49,49,48,52,57,54,53,84,244,141,177,133,84,84,49,49,48,52,57,54,54,84,244,141,177,134,84,84,49,49,48,52,57,54,55,84,244,141,177,135,84,84,49,49,48,52,57,54,56,84,244,141,177,136,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21056 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21056_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21056_s.txt", Encoding.UTF8);

    public Test21056() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers98fd3eef9d4b4edcb3855acb5ae8645d",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,49,54,53,48,84,244,143,153,162,84,84,49,49,49,49,54,53,49,84,244,143,153,163,84,84,49,49,49,49,54,53,50,84,244,143,153,164,84,84,49,49,49,49,54,53,51,84,244,143,153,165,84,84,49,49,49,49,54,53,52,84,244,143,153,166,84,84,49,49,49,49,54,53,53,84,244,143,153,167,84,84,49,49,49,49,54,53,54,84,244,143,153,168,84,84,49,49,49,49,54,53,55,84,244,143,153,169,84,84,49,49,49,49,54,53,56,84,244,143,153,170,84,84,49,49,49,49,54,53,57,84,244,143,153,171,84,84,49,49,49,49,54,54,48,84,244,143,153,172,84,84,49,49,49,49,54,54,49,84,244,143,153,173,84,84,49,49,49,49,54,54,50,84,244,143,153,174,84,84,49,49,49,49,54,54,51,84,244,143,153,175,84,84,49,49,49,49,54,54,52,84,244,143,153,176,84,84,49,49,49,49,54,54,53,84,244,143,153,177,84,84,49,49,49,49,54,54,54,84,244,143,153,178,84,84,49,49,49,49,54,54,55,84,244,143,153,179,84,84,49,49,49,49,54,54,56,84,244,143,153,180,84,84,49,49,49,49,54,54,57,84,244,143,153,181,84,84,49,49,49,49,54,55,48,84,244,143,153,182,84,84,49,49,49,49,54,55,49,84,244,143,153,183,84,84,49,49,49,49,54,55,50,84,244,143,153,184,84,84,49,49,49,49,54,55,51,84,244,143,153,185,84,84,49,49,49,49,54,55,52,84,244,143,153,186,84,84,49,49,49,49,54,55,53,84,244,143,153,187,84,84,49,49,49,49,54,55,54,84,244,143,153,188,84,84,49,49,49,49,54,55,55,84,244,143,153,189,84,84,49,49,49,49,54,55,56,84,244,143,153,190,84,84,49,49,49,49,54,55,57,84,244,143,153,191,84,84,49,49,49,49,54,56,48,84,244,143,154,128,84,84,49,49,49,49,54,56,49,84,244,143,154,129,84,84,49,49,49,49,54,56,50,84,244,143,154,130,84,84,49,49,49,49,54,56,51,84,244,143,154,131,84,84,49,49,49,49,54,56,52,84,244,143,154,132,84,84,49,49,49,49,54,56,53,84,244,143,154,133,84,84,49,49,49,49,54,56,54,84,244,143,154,134,84,84,49,49,49,49,54,56,55,84,244,143,154,135,84,84,49,49,49,49,54,56,56,84,244,143,154,136,84,84,49,49,49,49,54,56,57,84,244,143,154,137,84,84,49,49,49,49,54,57,48,84,244,143,154,138,84,84,49,49,49,49,54,57,49,84,244,143,154,139,84,84,49,49,49,49,54,57,50,84,244,143,154,140,84,84,49,49,49,49,54,57,51,84,244,143,154,141,84,84,49,49,49,49,54,57,52,84,244,143,154,142,84,84,49,49,49,49,54,57,53,84,244,143,154,143,84,84,49,49,49,49,54,57,54,84,244,143,154,144,84,84,49,49,49,49,54,57,55,84,244,143,154,145,84,84,49,49,49,49,54,57,56,84,244,143,154,146,84,84,49,49,49,49,54,57,57,84,244,143,154,147,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19909 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19909_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19909_s.txt", Encoding.UTF8);

    public Test19909() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersf0a96ab3064046f8a2fc77e6e3ebae9e",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,56,55,48,56,53,84,243,176,191,141,84,84,57,56,55,48,56,55,84,243,176,191,143,84,84,57,56,55,48,56,56,84,243,176,191,144,84,84,57,56,55,49,48,49,84,243,176,191,157,84,84,57,56,55,49,51,55,84,243,177,128,129,84,84,57,56,55,49,52,57,84,243,177,128,141,84,84,57,56,55,49,53,49,84,243,177,128,143,84,84,57,56,55,49,53,50,84,243,177,128,144,84,84,57,56,55,49,54,53,84,243,177,128,157,84,84,57,56,55,50,48,48,84,243,177,129,128,84,84,57,56,55,50,48,49,84,243,177,129,129,84,84,57,56,55,50,48,50,84,243,177,129,130,84,84,57,56,55,50,48,51,84,243,177,129,131,84,84,57,56,55,50,48,52,84,243,177,129,132,84,84,57,56,55,50,48,53,84,243,177,129,133,84,84,57,56,55,50,48,54,84,243,177,129,134,84,84,57,56,55,50,48,55,84,243,177,129,135,84,84,57,56,55,50,48,56,84,243,177,129,136,84,84,57,56,55,50,48,57,84,243,177,129,137,84,84,57,56,55,50,49,48,84,243,177,129,138,84,84,57,56,55,50,49,49,84,243,177,129,139,84,84,57,56,55,50,49,50,84,243,177,129,140,84,84,57,56,55,50,49,51,84,243,177,129,141,84,84,57,56,55,50,49,52,84,243,177,129,142,84,84,57,56,55,50,49,53,84,243,177,129,143,84,84,57,56,55,50,49,54,84,243,177,129,144,84,84,57,56,55,50,49,55,84,243,177,129,145,84,84,57,56,55,50,49,56,84,243,177,129,146,84,84,57,56,55,50,49,57,84,243,177,129,147,84,84,57,56,55,50,50,48,84,243,177,129,148,84,84,57,56,55,50,50,49,84,243,177,129,149,84,84,57,56,55,50,50,50,84,243,177,129,150,84,84,57,56,55,50,50,51,84,243,177,129,151,84,84,57,56,55,50,50,52,84,243,177,129,152,84,84,57,56,55,50,50,53,84,243,177,129,153,84,84,57,56,55,50,50,54,84,243,177,129,154,84,84,57,56,55,50,50,55,84,243,177,129,155,84,84,57,56,55,50,50,56,84,243,177,129,156,84,84,57,56,55,50,50,57,84,243,177,129,157,84,84,57,56,55,50,51,48,84,243,177,129,158,84,84,57,56,55,50,51,49,84,243,177,129,159,84,84,57,56,55,50,51,50,84,243,177,129,160,84,84,57,56,55,50,51,51,84,243,177,129,161,84,84,57,56,55,50,51,52,84,243,177,129,162,84,84,57,56,55,50,51,53,84,243,177,129,163,84,84,57,56,55,50,51,54,84,243,177,129,164,84,84,57,56,55,50,51,55,84,243,177,129,165,84,84,57,56,55,50,51,56,84,243,177,129,166,84,84,57,56,55,50,51,57,84,243,177,129,167,84,84,57,56,55,50,52,48,84,243,177,129,168,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20570 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20570_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20570_s.txt", Encoding.UTF8);

    public Test20570() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers2997cf743a0f481c9f696984938aa742",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,54,54,56,54,53,84,244,132,157,177,84,84,49,48,54,54,56,54,54,84,244,132,157,178,84,84,49,48,54,54,56,54,55,84,244,132,157,179,84,84,49,48,54,54,56,54,56,84,244,132,157,180,84,84,49,48,54,54,56,54,57,84,244,132,157,181,84,84,49,48,54,54,56,55,48,84,244,132,157,182,84,84,49,48,54,54,56,55,49,84,244,132,157,183,84,84,49,48,54,54,56,55,50,84,244,132,157,184,84,84,49,48,54,54,56,55,51,84,244,132,157,185,84,84,49,48,54,54,56,55,52,84,244,132,157,186,84,84,49,48,54,54,56,55,53,84,244,132,157,187,84,84,49,48,54,54,56,55,54,84,244,132,157,188,84,84,49,48,54,54,56,55,55,84,244,132,157,189,84,84,49,48,54,54,56,55,56,84,244,132,157,190,84,84,49,48,54,54,56,55,57,84,244,132,157,191,84,84,49,48,54,54,56,56,49,84,244,132,158,129,84,84,49,48,54,54,56,57,51,84,244,132,158,141,84,84,49,48,54,54,56,57,53,84,244,132,158,143,84,84,49,48,54,54,56,57,54,84,244,132,158,144,84,84,49,48,54,54,57,48,57,84,244,132,158,157,84,84,49,48,54,54,57,52,53,84,244,132,159,129,84,84,49,48,54,54,57,53,55,84,244,132,159,141,84,84,49,48,54,54,57,53,57,84,244,132,159,143,84,84,49,48,54,54,57,54,48,84,244,132,159,144,84,84,49,48,54,54,57,55,51,84,244,132,159,157,84,84,49,48,54,55,48,48,57,84,244,132,160,129,84,84,49,48,54,55,48,50,49,84,244,132,160,141,84,84,49,48,54,55,48,50,51,84,244,132,160,143,84,84,49,48,54,55,48,50,52,84,244,132,160,144,84,84,49,48,54,55,48,51,55,84,244,132,160,157,84,84,49,48,54,55,48,55,51,84,244,132,161,129,84,84,49,48,54,55,48,56,53,84,244,132,161,141,84,84,49,48,54,55,48,56,55,84,244,132,161,143,84,84,49,48,54,55,48,56,56,84,244,132,161,144,84,84,49,48,54,55,49,48,49,84,244,132,161,157,84,84,49,48,54,55,49,51,55,84,244,132,162,129,84,84,49,48,54,55,49,52,57,84,244,132,162,141,84,84,49,48,54,55,49,53,49,84,244,132,162,143,84,84,49,48,54,55,49,53,50,84,244,132,162,144,84,84,49,48,54,55,49,54,53,84,244,132,162,157,84,84,49,48,54,55,50,48,49,84,244,132,163,129,84,84,49,48,54,55,50,49,51,84,244,132,163,141,84,84,49,48,54,55,50,49,53,84,244,132,163,143,84,84,49,48,54,55,50,49,54,84,244,132,163,144,84,84,49,48,54,55,50,50,57,84,244,132,163,157,84,84,49,48,54,55,50,54,53,84,244,132,164,129,84,84,49,48,54,55,50,55,55,84,244,132,164,141,84,84,49,48,54,55,50,55,57,84,244,132,164,143,84,84,49,48,54,55,50,56,48,84,244,132,164,144,84,84,49,48,54,55,50,57,51,84,244,132,164,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20259 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20259_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20259_s.txt", Encoding.UTF8);

    public Test20259() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersca1800aaa567470781b999118df6ba97",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,52,49,52,53,50,84,243,190,144,172,84,84,49,48,52,49,52,53,51,84,243,190,144,173,84,84,49,48,52,49,52,53,52,84,243,190,144,174,84,84,49,48,52,49,52,53,53,84,243,190,144,175,84,84,49,48,52,49,52,53,54,84,243,190,144,176,84,84,49,48,52,49,52,53,55,84,243,190,144,177,84,84,49,48,52,49,52,53,56,84,243,190,144,178,84,84,49,48,52,49,52,53,57,84,243,190,144,179,84,84,49,48,52,49,52,54,48,84,243,190,144,180,84,84,49,48,52,49,52,54,49,84,243,190,144,181,84,84,49,48,52,49,52,54,50,84,243,190,144,182,84,84,49,48,52,49,52,54,51,84,243,190,144,183,84,84,49,48,52,49,52,54,52,84,243,190,144,184,84,84,49,48,52,49,52,54,53,84,243,190,144,185,84,84,49,48,52,49,52,54,54,84,243,190,144,186,84,84,49,48,52,49,52,54,55,84,243,190,144,187,84,84,49,48,52,49,52,54,56,84,243,190,144,188,84,84,49,48,52,49,52,54,57,84,243,190,144,189,84,84,49,48,52,49,52,55,48,84,243,190,144,190,84,84,49,48,52,49,52,55,49,84,243,190,144,191,84,84,49,48,52,49,52,55,51,84,243,190,145,129,84,84,49,48,52,49,52,56,53,84,243,190,145,141,84,84,49,48,52,49,52,56,55,84,243,190,145,143,84,84,49,48,52,49,52,56,56,84,243,190,145,144,84,84,49,48,52,49,53,48,49,84,243,190,145,157,84,84,49,48,52,49,53,51,55,84,243,190,146,129,84,84,49,48,52,49,53,52,57,84,243,190,146,141,84,84,49,48,52,49,53,53,49,84,243,190,146,143,84,84,49,48,52,49,53,53,50,84,243,190,146,144,84,84,49,48,52,49,53,54,53,84,243,190,146,157,84,84,49,48,52,49,54,48,49,84,243,190,147,129,84,84,49,48,52,49,54,49,51,84,243,190,147,141,84,84,49,48,52,49,54,49,53,84,243,190,147,143,84,84,49,48,52,49,54,49,54,84,243,190,147,144,84,84,49,48,52,49,54,50,57,84,243,190,147,157,84,84,49,48,52,49,54,54,53,84,243,190,148,129,84,84,49,48,52,49,54,55,55,84,243,190,148,141,84,84,49,48,52,49,54,55,57,84,243,190,148,143,84,84,49,48,52,49,54,56,48,84,243,190,148,144,84,84,49,48,52,49,54,57,51,84,243,190,148,157,84,84,49,48,52,49,55,50,57,84,243,190,149,129,84,84,49,48,52,49,55,52,49,84,243,190,149,141,84,84,49,48,52,49,55,52,51,84,243,190,149,143,84,84,49,48,52,49,55,52,52,84,243,190,149,144,84,84,49,48,52,49,55,53,55,84,243,190,149,157,84,84,49,48,52,49,55,57,51,84,243,190,150,129,84,84,49,48,52,49,56,48,53,84,243,190,150,141,84,84,49,48,52,49,56,48,55,84,243,190,150,143,84,84,49,48,52,49,56,48,56,84,243,190,150,144,84,84,49,48,52,49,56,50,49,84,243,190,150,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20981 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20981_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20981_s.txt", Encoding.UTF8);

    public Test20981() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersdf87e0f5374149afa792ac52b484870e",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,56,53,48,57,84,244,142,168,157,84,84,49,49,48,56,53,52,53,84,244,142,169,129,84,84,49,49,48,56,53,53,55,84,244,142,169,141,84,84,49,49,48,56,53,53,57,84,244,142,169,143,84,84,49,49,48,56,53,54,48,84,244,142,169,144,84,84,49,49,48,56,53,55,51,84,244,142,169,157,84,84,49,49,48,56,54,48,57,84,244,142,170,129,84,84,49,49,48,56,54,50,49,84,244,142,170,141,84,84,49,49,48,56,54,50,51,84,244,142,170,143,84,84,49,49,48,56,54,50,52,84,244,142,170,144,84,84,49,49,48,56,54,51,55,84,244,142,170,157,84,84,49,49,48,56,54,55,51,84,244,142,171,129,84,84,49,49,48,56,54,56,53,84,244,142,171,141,84,84,49,49,48,56,54,56,55,84,244,142,171,143,84,84,49,49,48,56,54,56,56,84,244,142,171,144,84,84,49,49,48,56,55,48,49,84,244,142,171,157,84,84,49,49,48,56,55,51,55,84,244,142,172,129,84,84,49,49,48,56,55,52,57,84,244,142,172,141,84,84,49,49,48,56,55,53,49,84,244,142,172,143,84,84,49,49,48,56,55,53,50,84,244,142,172,144,84,84,49,49,48,56,55,54,53,84,244,142,172,157,84,84,49,49,48,56,56,48,49,84,244,142,173,129,84,84,49,49,48,56,56,49,51,84,244,142,173,141,84,84,49,49,48,56,56,49,53,84,244,142,173,143,84,84,49,49,48,56,56,49,54,84,244,142,173,144,84,84,49,49,48,56,56,50,57,84,244,142,173,157,84,84,49,49,48,56,56,54,53,84,244,142,174,129,84,84,49,49,48,56,56,55,55,84,244,142,174,141,84,84,49,49,48,56,56,55,57,84,244,142,174,143,84,84,49,49,48,56,56,56,48,84,244,142,174,144,84,84,49,49,48,56,56,57,51,84,244,142,174,157,84,84,49,49,48,56,57,50,57,84,244,142,175,129,84,84,49,49,48,56,57,52,49,84,244,142,175,141,84,84,49,49,48,56,57,52,51,84,244,142,175,143,84,84,49,49,48,56,57,52,52,84,244,142,175,144,84,84,49,49,48,56,57,53,55,84,244,142,175,157,84,84,49,49,48,56,57,57,51,84,244,142,176,129,84,84,49,49,48,57,48,48,53,84,244,142,176,141,84,84,49,49,48,57,48,48,55,84,244,142,176,143,84,84,49,49,48,57,48,48,56,84,244,142,176,144,84,84,49,49,48,57,48,50,49,84,244,142,176,157,84,84,49,49,48,57,48,53,55,84,244,142,177,129,84,84,49,49,48,57,48,54,57,84,244,142,177,141,84,84,49,49,48,57,48,55,49,84,244,142,177,143,84,84,49,49,48,57,48,55,50,84,244,142,177,144,84,84,49,49,48,57,48,56,53,84,244,142,177,157,84,84,49,49,48,57,49,50,49,84,244,142,178,129,84,84,49,49,48,57,49,51,51,84,244,142,178,141,84,84,49,49,48,57,49,51,53,84,244,142,178,143,84,84,49,49,48,57,49,51,54,84,244,142,178,144,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20036 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20036_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20036_s.txt", Encoding.UTF8);

    public Test20036() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers612d6939acd44cdbbba30cffbd18a713",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,48,54,54,48,53,84,243,181,176,141,84,84,49,48,48,54,54,48,55,84,243,181,176,143,84,84,49,48,48,54,54,48,56,84,243,181,176,144,84,84,49,48,48,54,54,50,49,84,243,181,176,157,84,84,49,48,48,54,54,53,55,84,243,181,177,129,84,84,49,48,48,54,54,54,57,84,243,181,177,141,84,84,49,48,48,54,54,55,49,84,243,181,177,143,84,84,49,48,48,54,54,55,50,84,243,181,177,144,84,84,49,48,48,54,54,56,53,84,243,181,177,157,84,84,49,48,48,54,55,50,49,84,243,181,178,129,84,84,49,48,48,54,55,51,51,84,243,181,178,141,84,84,49,48,48,54,55,51,53,84,243,181,178,143,84,84,49,48,48,54,55,51,54,84,243,181,178,144,84,84,49,48,48,54,55,52,57,84,243,181,178,157,84,84,49,48,48,54,55,56,53,84,243,181,179,129,84,84,49,48,48,54,55,57,55,84,243,181,179,141,84,84,49,48,48,54,55,57,57,84,243,181,179,143,84,84,49,48,48,54,56,48,48,84,243,181,179,144,84,84,49,48,48,54,56,49,51,84,243,181,179,157,84,84,49,48,48,54,56,52,57,84,243,181,180,129,84,84,49,48,48,54,56,54,49,84,243,181,180,141,84,84,49,48,48,54,56,54,51,84,243,181,180,143,84,84,49,48,48,54,56,54,52,84,243,181,180,144,84,84,49,48,48,54,56,55,55,84,243,181,180,157,84,84,49,48,48,54,57,49,51,84,243,181,181,129,84,84,49,48,48,54,57,50,53,84,243,181,181,141,84,84,49,48,48,54,57,50,55,84,243,181,181,143,84,84,49,48,48,54,57,50,56,84,243,181,181,144,84,84,49,48,48,54,57,52,49,84,243,181,181,157,84,84,49,48,48,54,57,55,55,84,243,181,182,129,84,84,49,48,48,54,57,56,57,84,243,181,182,141,84,84,49,48,48,54,57,57,49,84,243,181,182,143,84,84,49,48,48,54,57,57,50,84,243,181,182,144,84,84,49,48,48,55,48,48,53,84,243,181,182,157,84,84,49,48,48,55,48,52,49,84,243,181,183,129,84,84,49,48,48,55,48,53,51,84,243,181,183,141,84,84,49,48,48,55,48,53,53,84,243,181,183,143,84,84,49,48,48,55,48,53,54,84,243,181,183,144,84,84,49,48,48,55,48,54,57,84,243,181,183,157,84,84,49,48,48,55,49,48,53,84,243,181,184,129,84,84,49,48,48,55,49,49,55,84,243,181,184,141,84,84,49,48,48,55,49,49,57,84,243,181,184,143,84,84,49,48,48,55,49,50,48,84,243,181,184,144,84,84,49,48,48,55,49,51,51,84,243,181,184,157,84,84,49,48,48,55,49,54,57,84,243,181,185,129,84,84,49,48,48,55,49,56,49,84,243,181,185,141,84,84,49,48,48,55,49,56,51,84,243,181,185,143,84,84,49,48,48,55,49,56,52,84,243,181,185,144,84,84,49,48,48,55,49,57,55,84,243,181,185,157,84,84,49,48,48,55,50,51,51,84,243,181,186,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20638 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20638_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20638_s.txt", Encoding.UTF8);

    public Test20638() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers5f5b393ed8e742338d6031fb2e225092",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,55,56,49,52,49,84,244,135,141,189,84,84,49,48,55,56,49,52,50,84,244,135,141,190,84,84,49,48,55,56,49,52,51,84,244,135,141,191,84,84,49,48,55,56,49,52,53,84,244,135,142,129,84,84,49,48,55,56,49,53,55,84,244,135,142,141,84,84,49,48,55,56,49,53,57,84,244,135,142,143,84,84,49,48,55,56,49,54,48,84,244,135,142,144,84,84,49,48,55,56,49,55,51,84,244,135,142,157,84,84,49,48,55,56,50,48,56,84,244,135,143,128,84,84,49,48,55,56,50,48,57,84,244,135,143,129,84,84,49,48,55,56,50,49,48,84,244,135,143,130,84,84,49,48,55,56,50,49,49,84,244,135,143,131,84,84,49,48,55,56,50,49,50,84,244,135,143,132,84,84,49,48,55,56,50,49,51,84,244,135,143,133,84,84,49,48,55,56,50,49,52,84,244,135,143,134,84,84,49,48,55,56,50,49,53,84,244,135,143,135,84,84,49,48,55,56,50,49,54,84,244,135,143,136,84,84,49,48,55,56,50,49,55,84,244,135,143,137,84,84,49,48,55,56,50,49,56,84,244,135,143,138,84,84,49,48,55,56,50,49,57,84,244,135,143,139,84,84,49,48,55,56,50,50,48,84,244,135,143,140,84,84,49,48,55,56,50,50,49,84,244,135,143,141,84,84,49,48,55,56,50,50,50,84,244,135,143,142,84,84,49,48,55,56,50,50,51,84,244,135,143,143,84,84,49,48,55,56,50,50,52,84,244,135,143,144,84,84,49,48,55,56,50,50,53,84,244,135,143,145,84,84,49,48,55,56,50,50,54,84,244,135,143,146,84,84,49,48,55,56,50,50,55,84,244,135,143,147,84,84,49,48,55,56,50,50,56,84,244,135,143,148,84,84,49,48,55,56,50,50,57,84,244,135,143,149,84,84,49,48,55,56,50,51,48,84,244,135,143,150,84,84,49,48,55,56,50,51,49,84,244,135,143,151,84,84,49,48,55,56,50,51,50,84,244,135,143,152,84,84,49,48,55,56,50,51,51,84,244,135,143,153,84,84,49,48,55,56,50,51,52,84,244,135,143,154,84,84,49,48,55,56,50,51,53,84,244,135,143,155,84,84,49,48,55,56,50,51,54,84,244,135,143,156,84,84,49,48,55,56,50,51,55,84,244,135,143,157,84,84,49,48,55,56,50,51,56,84,244,135,143,158,84,84,49,48,55,56,50,51,57,84,244,135,143,159,84,84,49,48,55,56,50,52,48,84,244,135,143,160,84,84,49,48,55,56,50,52,49,84,244,135,143,161,84,84,49,48,55,56,50,52,50,84,244,135,143,162,84,84,49,48,55,56,50,52,51,84,244,135,143,163,84,84,49,48,55,56,50,52,52,84,244,135,143,164,84,84,49,48,55,56,50,52,53,84,244,135,143,165,84,84,49,48,55,56,50,52,54,84,244,135,143,166,84,84,49,48,55,56,50,52,55,84,244,135,143,167,84,84,49,48,55,56,50,52,56,84,244,135,143,168,84,84,49,48,55,56,50,52,57,84,244,135,143,169,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20701 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20701_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20701_s.txt", Encoding.UTF8);

    public Test20701() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers0bb7ae45edef4594997d97499d26b519",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,56,55,51,50,48,84,244,137,157,152,84,84,49,48,56,55,51,50,49,84,244,137,157,153,84,84,49,48,56,55,51,50,50,84,244,137,157,154,84,84,49,48,56,55,51,50,51,84,244,137,157,155,84,84,49,48,56,55,51,50,52,84,244,137,157,156,84,84,49,48,56,55,51,50,53,84,244,137,157,157,84,84,49,48,56,55,51,50,54,84,244,137,157,158,84,84,49,48,56,55,51,50,55,84,244,137,157,159,84,84,49,48,56,55,51,50,56,84,244,137,157,160,84,84,49,48,56,55,51,50,57,84,244,137,157,161,84,84,49,48,56,55,51,51,48,84,244,137,157,162,84,84,49,48,56,55,51,51,49,84,244,137,157,163,84,84,49,48,56,55,51,51,50,84,244,137,157,164,84,84,49,48,56,55,51,51,51,84,244,137,157,165,84,84,49,48,56,55,51,51,52,84,244,137,157,166,84,84,49,48,56,55,51,51,53,84,244,137,157,167,84,84,49,48,56,55,51,51,54,84,244,137,157,168,84,84,49,48,56,55,51,51,55,84,244,137,157,169,84,84,49,48,56,55,51,51,56,84,244,137,157,170,84,84,49,48,56,55,51,51,57,84,244,137,157,171,84,84,49,48,56,55,51,52,48,84,244,137,157,172,84,84,49,48,56,55,51,52,49,84,244,137,157,173,84,84,49,48,56,55,51,52,50,84,244,137,157,174,84,84,49,48,56,55,51,52,51,84,244,137,157,175,84,84,49,48,56,55,51,52,52,84,244,137,157,176,84,84,49,48,56,55,51,52,53,84,244,137,157,177,84,84,49,48,56,55,51,52,54,84,244,137,157,178,84,84,49,48,56,55,51,52,55,84,244,137,157,179,84,84,49,48,56,55,51,52,56,84,244,137,157,180,84,84,49,48,56,55,51,52,57,84,244,137,157,181,84,84,49,48,56,55,51,53,48,84,244,137,157,182,84,84,49,48,56,55,51,53,49,84,244,137,157,183,84,84,49,48,56,55,51,53,50,84,244,137,157,184,84,84,49,48,56,55,51,53,51,84,244,137,157,185,84,84,49,48,56,55,51,53,52,84,244,137,157,186,84,84,49,48,56,55,51,53,53,84,244,137,157,187,84,84,49,48,56,55,51,53,54,84,244,137,157,188,84,84,49,48,56,55,51,53,55,84,244,137,157,189,84,84,49,48,56,55,51,53,56,84,244,137,157,190,84,84,49,48,56,55,51,53,57,84,244,137,157,191,84,84,49,48,56,55,51,54,49,84,244,137,158,129,84,84,49,48,56,55,51,55,51,84,244,137,158,141,84,84,49,48,56,55,51,55,53,84,244,137,158,143,84,84,49,48,56,55,51,55,54,84,244,137,158,144,84,84,49,48,56,55,51,56,57,84,244,137,158,157,84,84,49,48,56,55,52,50,53,84,244,137,159,129,84,84,49,48,56,55,52,51,55,84,244,137,159,141,84,84,49,48,56,55,52,51,57,84,244,137,159,143,84,84,49,48,56,55,52,52,48,84,244,137,159,144,84,84,49,48,56,55,52,53,51,84,244,137,159,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20862 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20862_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20862_s.txt", Encoding.UTF8);

    public Test20862() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersdd41d3a5bb7f42709f7cec587f1a204a",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,51,53,54,57,84,244,141,155,145,84,84,49,49,48,51,53,55,48,84,244,141,155,146,84,84,49,49,48,51,53,55,49,84,244,141,155,147,84,84,49,49,48,51,53,55,50,84,244,141,155,148,84,84,49,49,48,51,53,55,51,84,244,141,155,149,84,84,49,49,48,51,53,55,52,84,244,141,155,150,84,84,49,49,48,51,53,55,53,84,244,141,155,151,84,84,49,49,48,51,53,55,54,84,244,141,155,152,84,84,49,49,48,51,53,55,55,84,244,141,155,153,84,84,49,49,48,51,53,55,56,84,244,141,155,154,84,84,49,49,48,51,53,55,57,84,244,141,155,155,84,84,49,49,48,51,53,56,48,84,244,141,155,156,84,84,49,49,48,51,53,56,49,84,244,141,155,157,84,84,49,49,48,51,53,56,50,84,244,141,155,158,84,84,49,49,48,51,53,56,51,84,244,141,155,159,84,84,49,49,48,51,53,56,52,84,244,141,155,160,84,84,49,49,48,51,53,56,53,84,244,141,155,161,84,84,49,49,48,51,53,56,54,84,244,141,155,162,84,84,49,49,48,51,53,56,55,84,244,141,155,163,84,84,49,49,48,51,53,56,56,84,244,141,155,164,84,84,49,49,48,51,53,56,57,84,244,141,155,165,84,84,49,49,48,51,53,57,48,84,244,141,155,166,84,84,49,49,48,51,53,57,49,84,244,141,155,167,84,84,49,49,48,51,53,57,50,84,244,141,155,168,84,84,49,49,48,51,53,57,51,84,244,141,155,169,84,84,49,49,48,51,53,57,52,84,244,141,155,170,84,84,49,49,48,51,53,57,53,84,244,141,155,171,84,84,49,49,48,51,53,57,54,84,244,141,155,172,84,84,49,49,48,51,53,57,55,84,244,141,155,173,84,84,49,49,48,51,53,57,56,84,244,141,155,174,84,84,49,49,48,51,53,57,57,84,244,141,155,175,84,84,49,49,48,51,54,48,48,84,244,141,155,176,84,84,49,49,48,51,54,48,49,84,244,141,155,177,84,84,49,49,48,51,54,48,50,84,244,141,155,178,84,84,49,49,48,51,54,48,51,84,244,141,155,179,84,84,49,49,48,51,54,48,52,84,244,141,155,180,84,84,49,49,48,51,54,48,53,84,244,141,155,181,84,84,49,49,48,51,54,48,54,84,244,141,155,182,84,84,49,49,48,51,54,48,55,84,244,141,155,183,84,84,49,49,48,51,54,48,56,84,244,141,155,184,84,84,49,49,48,51,54,48,57,84,244,141,155,185,84,84,49,49,48,51,54,49,48,84,244,141,155,186,84,84,49,49,48,51,54,49,49,84,244,141,155,187,84,84,49,49,48,51,54,49,50,84,244,141,155,188,84,84,49,49,48,51,54,49,51,84,244,141,155,189,84,84,49,49,48,51,54,49,52,84,244,141,155,190,84,84,49,49,48,51,54,49,53,84,244,141,155,191,84,84,49,49,48,51,54,49,54,84,244,141,156,128,84,84,49,49,48,51,54,49,55,84,244,141,156,129,84,84,49,49,48,51,54,49,56,84,244,141,156,130,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19967 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19967_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19967_s.txt", Encoding.UTF8);

    public Test19967() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersbf5ecfbea5a24d8a8188936c9be6fa20",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,57,54,50,48,50,84,243,179,141,170,84,84,57,57,54,50,48,51,84,243,179,141,171,84,84,57,57,54,50,48,52,84,243,179,141,172,84,84,57,57,54,50,48,53,84,243,179,141,173,84,84,57,57,54,50,48,54,84,243,179,141,174,84,84,57,57,54,50,48,55,84,243,179,141,175,84,84,57,57,54,50,48,56,84,243,179,141,176,84,84,57,57,54,50,48,57,84,243,179,141,177,84,84,57,57,54,50,49,48,84,243,179,141,178,84,84,57,57,54,50,49,49,84,243,179,141,179,84,84,57,57,54,50,49,50,84,243,179,141,180,84,84,57,57,54,50,49,51,84,243,179,141,181,84,84,57,57,54,50,49,52,84,243,179,141,182,84,84,57,57,54,50,49,53,84,243,179,141,183,84,84,57,57,54,50,49,54,84,243,179,141,184,84,84,57,57,54,50,49,55,84,243,179,141,185,84,84,57,57,54,50,49,56,84,243,179,141,186,84,84,57,57,54,50,49,57,84,243,179,141,187,84,84,57,57,54,50,50,48,84,243,179,141,188,84,84,57,57,54,50,50,49,84,243,179,141,189,84,84,57,57,54,50,50,50,84,243,179,141,190,84,84,57,57,54,50,50,51,84,243,179,141,191,84,84,57,57,54,50,50,53,84,243,179,142,129,84,84,57,57,54,50,51,55,84,243,179,142,141,84,84,57,57,54,50,51,57,84,243,179,142,143,84,84,57,57,54,50,52,48,84,243,179,142,144,84,84,57,57,54,50,53,51,84,243,179,142,157,84,84,57,57,54,50,56,56,84,243,179,143,128,84,84,57,57,54,50,56,57,84,243,179,143,129,84,84,57,57,54,50,57,48,84,243,179,143,130,84,84,57,57,54,50,57,49,84,243,179,143,131,84,84,57,57,54,50,57,50,84,243,179,143,132,84,84,57,57,54,50,57,51,84,243,179,143,133,84,84,57,57,54,50,57,52,84,243,179,143,134,84,84,57,57,54,50,57,53,84,243,179,143,135,84,84,57,57,54,50,57,54,84,243,179,143,136,84,84,57,57,54,50,57,55,84,243,179,143,137,84,84,57,57,54,50,57,56,84,243,179,143,138,84,84,57,57,54,50,57,57,84,243,179,143,139,84,84,57,57,54,51,48,48,84,243,179,143,140,84,84,57,57,54,51,48,49,84,243,179,143,141,84,84,57,57,54,51,48,50,84,243,179,143,142,84,84,57,57,54,51,48,51,84,243,179,143,143,84,84,57,57,54,51,48,52,84,243,179,143,144,84,84,57,57,54,51,48,53,84,243,179,143,145,84,84,57,57,54,51,48,54,84,243,179,143,146,84,84,57,57,54,51,48,55,84,243,179,143,147,84,84,57,57,54,51,48,56,84,243,179,143,148,84,84,57,57,54,51,48,57,84,243,179,143,149,84,84,57,57,54,51,49,48,84,243,179,143,150,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21058 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21058_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21058_s.txt", Encoding.UTF8);

    public Test21058() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers98fd3eef9d4b4edcb3855acb5ae8645d",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,49,55,48,48,84,244,143,154,148,84,84,49,49,49,49,55,48,49,84,244,143,154,149,84,84,49,49,49,49,55,48,50,84,244,143,154,150,84,84,49,49,49,49,55,48,51,84,244,143,154,151,84,84,49,49,49,49,55,48,52,84,244,143,154,152,84,84,49,49,49,49,55,48,53,84,244,143,154,153,84,84,49,49,49,49,55,48,54,84,244,143,154,154,84,84,49,49,49,49,55,48,55,84,244,143,154,155,84,84,49,49,49,49,55,48,56,84,244,143,154,156,84,84,49,49,49,49,55,48,57,84,244,143,154,157,84,84,49,49,49,49,55,49,48,84,244,143,154,158,84,84,49,49,49,49,55,49,49,84,244,143,154,159,84,84,49,49,49,49,55,49,50,84,244,143,154,160,84,84,49,49,49,49,55,49,51,84,244,143,154,161,84,84,49,49,49,49,55,49,52,84,244,143,154,162,84,84,49,49,49,49,55,49,53,84,244,143,154,163,84,84,49,49,49,49,55,49,54,84,244,143,154,164,84,84,49,49,49,49,55,49,55,84,244,143,154,165,84,84,49,49,49,49,55,49,56,84,244,143,154,166,84,84,49,49,49,49,55,49,57,84,244,143,154,167,84,84,49,49,49,49,55,50,48,84,244,143,154,168,84,84,49,49,49,49,55,50,49,84,244,143,154,169,84,84,49,49,49,49,55,50,50,84,244,143,154,170,84,84,49,49,49,49,55,50,51,84,244,143,154,171,84,84,49,49,49,49,55,50,52,84,244,143,154,172,84,84,49,49,49,49,55,50,53,84,244,143,154,173,84,84,49,49,49,49,55,50,54,84,244,143,154,174,84,84,49,49,49,49,55,50,55,84,244,143,154,175,84,84,49,49,49,49,55,50,56,84,244,143,154,176,84,84,49,49,49,49,55,50,57,84,244,143,154,177,84,84,49,49,49,49,55,51,48,84,244,143,154,178,84,84,49,49,49,49,55,51,49,84,244,143,154,179,84,84,49,49,49,49,55,51,50,84,244,143,154,180,84,84,49,49,49,49,55,51,51,84,244,143,154,181,84,84,49,49,49,49,55,51,52,84,244,143,154,182,84,84,49,49,49,49,55,51,53,84,244,143,154,183,84,84,49,49,49,49,55,51,54,84,244,143,154,184,84,84,49,49,49,49,55,51,55,84,244,143,154,185,84,84,49,49,49,49,55,51,56,84,244,143,154,186,84,84,49,49,49,49,55,51,57,84,244,143,154,187,84,84,49,49,49,49,55,52,48,84,244,143,154,188,84,84,49,49,49,49,55,52,49,84,244,143,154,189,84,84,49,49,49,49,55,52,50,84,244,143,154,190,84,84,49,49,49,49,55,52,51,84,244,143,154,191,84,84,49,49,49,49,55,52,52,84,244,143,155,128,84,84,49,49,49,49,55,52,53,84,244,143,155,129,84,84,49,49,49,49,55,52,54,84,244,143,155,130,84,84,49,49,49,49,55,52,55,84,244,143,155,131,84,84,49,49,49,49,55,52,56,84,244,143,155,132,84,84,49,49,49,49,55,52,57,84,244,143,155,133,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20358 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20358_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20358_s.txt", Encoding.UTF8);

    public Test20358() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers319eca44915441a6b60a6025f5eab2bd",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,51,52,50,56,84,244,129,139,180,84,84,49,48,53,51,52,50,57,84,244,129,139,181,84,84,49,48,53,51,52,51,48,84,244,129,139,182,84,84,49,48,53,51,52,51,49,84,244,129,139,183,84,84,49,48,53,51,52,51,50,84,244,129,139,184,84,84,49,48,53,51,52,51,51,84,244,129,139,185,84,84,49,48,53,51,52,51,52,84,244,129,139,186,84,84,49,48,53,51,52,51,53,84,244,129,139,187,84,84,49,48,53,51,52,51,54,84,244,129,139,188,84,84,49,48,53,51,52,51,55,84,244,129,139,189,84,84,49,48,53,51,52,51,56,84,244,129,139,190,84,84,49,48,53,51,52,51,57,84,244,129,139,191,84,84,49,48,53,51,52,52,48,84,244,129,140,128,84,84,49,48,53,51,52,52,49,84,244,129,140,129,84,84,49,48,53,51,52,52,50,84,244,129,140,130,84,84,49,48,53,51,52,52,51,84,244,129,140,131,84,84,49,48,53,51,52,52,52,84,244,129,140,132,84,84,49,48,53,51,52,52,53,84,244,129,140,133,84,84,49,48,53,51,52,52,54,84,244,129,140,134,84,84,49,48,53,51,52,52,55,84,244,129,140,135,84,84,49,48,53,51,52,52,56,84,244,129,140,136,84,84,49,48,53,51,52,52,57,84,244,129,140,137,84,84,49,48,53,51,52,53,48,84,244,129,140,138,84,84,49,48,53,51,52,53,49,84,244,129,140,139,84,84,49,48,53,51,52,53,50,84,244,129,140,140,84,84,49,48,53,51,52,53,51,84,244,129,140,141,84,84,49,48,53,51,52,53,52,84,244,129,140,142,84,84,49,48,53,51,52,53,53,84,244,129,140,143,84,84,49,48,53,51,52,53,54,84,244,129,140,144,84,84,49,48,53,51,52,53,55,84,244,129,140,145,84,84,49,48,53,51,52,53,56,84,244,129,140,146,84,84,49,48,53,51,52,53,57,84,244,129,140,147,84,84,49,48,53,51,52,54,48,84,244,129,140,148,84,84,49,48,53,51,52,54,49,84,244,129,140,149,84,84,49,48,53,51,52,54,50,84,244,129,140,150,84,84,49,48,53,51,52,54,51,84,244,129,140,151,84,84,49,48,53,51,52,54,52,84,244,129,140,152,84,84,49,48,53,51,52,54,53,84,244,129,140,153,84,84,49,48,53,51,52,54,54,84,244,129,140,154,84,84,49,48,53,51,52,54,55,84,244,129,140,155,84,84,49,48,53,51,52,54,56,84,244,129,140,156,84,84,49,48,53,51,52,54,57,84,244,129,140,157,84,84,49,48,53,51,52,55,48,84,244,129,140,158,84,84,49,48,53,51,52,55,49,84,244,129,140,159,84,84,49,48,53,51,52,55,50,84,244,129,140,160,84,84,49,48,53,51,52,55,51,84,244,129,140,161,84,84,49,48,53,51,52,55,52,84,244,129,140,162,84,84,49,48,53,51,52,55,53,84,244,129,140,163,84,84,49,48,53,51,52,55,54,84,244,129,140,164,84,84,49,48,53,51,52,55,55,84,244,129,140,165,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20451 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20451_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20451_s.txt", Encoding.UTF8);

    public Test20451() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersee5ddc6232b847869028904d3d06a0f3",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,53,54,50,56,84,244,129,174,140,84,84,49,48,53,53,54,50,57,84,244,129,174,141,84,84,49,48,53,53,54,51,48,84,244,129,174,142,84,84,49,48,53,53,54,51,49,84,244,129,174,143,84,84,49,48,53,53,54,51,50,84,244,129,174,144,84,84,49,48,53,53,54,51,51,84,244,129,174,145,84,84,49,48,53,53,54,51,52,84,244,129,174,146,84,84,49,48,53,53,54,51,53,84,244,129,174,147,84,84,49,48,53,53,54,51,54,84,244,129,174,148,84,84,49,48,53,53,54,51,55,84,244,129,174,149,84,84,49,48,53,53,54,51,56,84,244,129,174,150,84,84,49,48,53,53,54,51,57,84,244,129,174,151,84,84,49,48,53,53,54,52,48,84,244,129,174,152,84,84,49,48,53,53,54,52,49,84,244,129,174,153,84,84,49,48,53,53,54,52,50,84,244,129,174,154,84,84,49,48,53,53,54,52,51,84,244,129,174,155,84,84,49,48,53,53,54,52,52,84,244,129,174,156,84,84,49,48,53,53,54,52,53,84,244,129,174,157,84,84,49,48,53,53,54,52,54,84,244,129,174,158,84,84,49,48,53,53,54,52,55,84,244,129,174,159,84,84,49,48,53,53,54,52,56,84,244,129,174,160,84,84,49,48,53,53,54,52,57,84,244,129,174,161,84,84,49,48,53,53,54,53,48,84,244,129,174,162,84,84,49,48,53,53,54,53,49,84,244,129,174,163,84,84,49,48,53,53,54,53,50,84,244,129,174,164,84,84,49,48,53,53,54,53,51,84,244,129,174,165,84,84,49,48,53,53,54,53,52,84,244,129,174,166,84,84,49,48,53,53,54,53,53,84,244,129,174,167,84,84,49,48,53,53,54,53,54,84,244,129,174,168,84,84,49,48,53,53,54,53,55,84,244,129,174,169,84,84,49,48,53,53,54,53,56,84,244,129,174,170,84,84,49,48,53,53,54,53,57,84,244,129,174,171,84,84,49,48,53,53,54,54,48,84,244,129,174,172,84,84,49,48,53,53,54,54,49,84,244,129,174,173,84,84,49,48,53,53,54,54,50,84,244,129,174,174,84,84,49,48,53,53,54,54,51,84,244,129,174,175,84,84,49,48,53,53,54,54,52,84,244,129,174,176,84,84,49,48,53,53,54,54,53,84,244,129,174,177,84,84,49,48,53,53,54,54,54,84,244,129,174,178,84,84,49,48,53,53,54,54,55,84,244,129,174,179,84,84,49,48,53,53,54,54,56,84,244,129,174,180,84,84,49,48,53,53,54,54,57,84,244,129,174,181,84,84,49,48,53,53,54,55,48,84,244,129,174,182,84,84,49,48,53,53,54,55,49,84,244,129,174,183,84,84,49,48,53,53,54,55,50,84,244,129,174,184,84,84,49,48,53,53,54,55,51,84,244,129,174,185,84,84,49,48,53,53,54,55,52,84,244,129,174,186,84,84,49,48,53,53,54,55,53,84,244,129,174,187,84,84,49,48,53,53,54,55,54,84,244,129,174,188,84,84,49,48,53,53,54,55,55,84,244,129,174,189,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20703 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20703_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20703_s.txt", Encoding.UTF8);

    public Test20703() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers0bb7ae45edef4594997d97499d26b519",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,56,55,52,56,57,84,244,137,160,129,84,84,49,48,56,55,53,48,49,84,244,137,160,141,84,84,49,48,56,55,53,48,51,84,244,137,160,143,84,84,49,48,56,55,53,48,52,84,244,137,160,144,84,84,49,48,56,55,53,49,55,84,244,137,160,157,84,84,49,48,56,55,53,53,51,84,244,137,161,129,84,84,49,48,56,55,53,54,53,84,244,137,161,141,84,84,49,48,56,55,53,54,55,84,244,137,161,143,84,84,49,48,56,55,53,54,56,84,244,137,161,144,84,84,49,48,56,55,53,56,49,84,244,137,161,157,84,84,49,48,56,55,54,49,55,84,244,137,162,129,84,84,49,48,56,55,54,50,57,84,244,137,162,141,84,84,49,48,56,55,54,51,49,84,244,137,162,143,84,84,49,48,56,55,54,51,50,84,244,137,162,144,84,84,49,48,56,55,54,52,53,84,244,137,162,157,84,84,49,48,56,55,54,56,49,84,244,137,163,129,84,84,49,48,56,55,54,57,51,84,244,137,163,141,84,84,49,48,56,55,54,57,53,84,244,137,163,143,84,84,49,48,56,55,54,57,54,84,244,137,163,144,84,84,49,48,56,55,55,48,57,84,244,137,163,157,84,84,49,48,56,55,55,52,53,84,244,137,164,129,84,84,49,48,56,55,55,53,55,84,244,137,164,141,84,84,49,48,56,55,55,53,57,84,244,137,164,143,84,84,49,48,56,55,55,54,48,84,244,137,164,144,84,84,49,48,56,55,55,55,51,84,244,137,164,157,84,84,49,48,56,55,56,48,57,84,244,137,165,129,84,84,49,48,56,55,56,50,49,84,244,137,165,141,84,84,49,48,56,55,56,50,51,84,244,137,165,143,84,84,49,48,56,55,56,50,52,84,244,137,165,144,84,84,49,48,56,55,56,51,55,84,244,137,165,157,84,84,49,48,56,55,56,55,51,84,244,137,166,129,84,84,49,48,56,55,56,56,53,84,244,137,166,141,84,84,49,48,56,55,56,56,55,84,244,137,166,143,84,84,49,48,56,55,56,56,56,84,244,137,166,144,84,84,49,48,56,55,57,48,49,84,244,137,166,157,84,84,49,48,56,55,57,51,55,84,244,137,167,129,84,84,49,48,56,55,57,52,57,84,244,137,167,141,84,84,49,48,56,55,57,53,49,84,244,137,167,143,84,84,49,48,56,55,57,53,50,84,244,137,167,144,84,84,49,48,56,55,57,54,53,84,244,137,167,157,84,84,49,48,56,56,48,48,49,84,244,137,168,129,84,84,49,48,56,56,48,49,51,84,244,137,168,141,84,84,49,48,56,56,48,49,53,84,244,137,168,143,84,84,49,48,56,56,48,49,54,84,244,137,168,144,84,84,49,48,56,56,48,50,57,84,244,137,168,157,84,84,49,48,56,56,48,54,53,84,244,137,169,129,84,84,49,48,56,56,48,55,55,84,244,137,169,141,84,84,49,48,56,56,48,55,57,84,244,137,169,143,84,84,49,48,56,56,48,56,48,84,244,137,169,144,84,84,49,48,56,56,48,57,51,84,244,137,169,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20132 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20132_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20132_s.txt", Encoding.UTF8);

    public Test20132() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers02552a2396c44255a61dd19b9714b3b6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,50,49,54,57,55,84,243,185,156,129,84,84,49,48,50,49,55,48,57,84,243,185,156,141,84,84,49,48,50,49,55,49,49,84,243,185,156,143,84,84,49,48,50,49,55,49,50,84,243,185,156,144,84,84,49,48,50,49,55,50,53,84,243,185,156,157,84,84,49,48,50,49,55,54,48,84,243,185,157,128,84,84,49,48,50,49,55,54,49,84,243,185,157,129,84,84,49,48,50,49,55,54,50,84,243,185,157,130,84,84,49,48,50,49,55,54,51,84,243,185,157,131,84,84,49,48,50,49,55,54,52,84,243,185,157,132,84,84,49,48,50,49,55,54,53,84,243,185,157,133,84,84,49,48,50,49,55,54,54,84,243,185,157,134,84,84,49,48,50,49,55,54,55,84,243,185,157,135,84,84,49,48,50,49,55,54,56,84,243,185,157,136,84,84,49,48,50,49,55,54,57,84,243,185,157,137,84,84,49,48,50,49,55,55,48,84,243,185,157,138,84,84,49,48,50,49,55,55,49,84,243,185,157,139,84,84,49,48,50,49,55,55,50,84,243,185,157,140,84,84,49,48,50,49,55,55,51,84,243,185,157,141,84,84,49,48,50,49,55,55,52,84,243,185,157,142,84,84,49,48,50,49,55,55,53,84,243,185,157,143,84,84,49,48,50,49,55,55,54,84,243,185,157,144,84,84,49,48,50,49,55,55,55,84,243,185,157,145,84,84,49,48,50,49,55,55,56,84,243,185,157,146,84,84,49,48,50,49,55,55,57,84,243,185,157,147,84,84,49,48,50,49,55,56,48,84,243,185,157,148,84,84,49,48,50,49,55,56,49,84,243,185,157,149,84,84,49,48,50,49,55,56,50,84,243,185,157,150,84,84,49,48,50,49,55,56,51,84,243,185,157,151,84,84,49,48,50,49,55,56,52,84,243,185,157,152,84,84,49,48,50,49,55,56,53,84,243,185,157,153,84,84,49,48,50,49,55,56,54,84,243,185,157,154,84,84,49,48,50,49,55,56,55,84,243,185,157,155,84,84,49,48,50,49,55,56,56,84,243,185,157,156,84,84,49,48,50,49,55,56,57,84,243,185,157,157,84,84,49,48,50,49,55,57,48,84,243,185,157,158,84,84,49,48,50,49,55,57,49,84,243,185,157,159,84,84,49,48,50,49,55,57,50,84,243,185,157,160,84,84,49,48,50,49,55,57,51,84,243,185,157,161,84,84,49,48,50,49,55,57,52,84,243,185,157,162,84,84,49,48,50,49,55,57,53,84,243,185,157,163,84,84,49,48,50,49,55,57,54,84,243,185,157,164,84,84,49,48,50,49,55,57,55,84,243,185,157,165,84,84,49,48,50,49,55,57,56,84,243,185,157,166,84,84,49,48,50,49,55,57,57,84,243,185,157,167,84,84,49,48,50,49,56,48,48,84,243,185,157,168,84,84,49,48,50,49,56,48,49,84,243,185,157,169,84,84,49,48,50,49,56,48,50,84,243,185,157,170,84,84,49,48,50,49,56,48,51,84,243,185,157,171,84,84,49,48,50,49,56,48,52,84,243,185,157,172,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20191 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20191_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20191_s.txt", Encoding.UTF8);

    public Test20191() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers2b6cdd6684eb4500abcaa682adc323b7",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,51,48,54,54,57,84,243,187,168,141,84,84,49,48,51,48,54,55,49,84,243,187,168,143,84,84,49,48,51,48,54,55,50,84,243,187,168,144,84,84,49,48,51,48,54,56,53,84,243,187,168,157,84,84,49,48,51,48,55,50,49,84,243,187,169,129,84,84,49,48,51,48,55,51,51,84,243,187,169,141,84,84,49,48,51,48,55,51,53,84,243,187,169,143,84,84,49,48,51,48,55,51,54,84,243,187,169,144,84,84,49,48,51,48,55,52,57,84,243,187,169,157,84,84,49,48,51,48,55,56,53,84,243,187,170,129,84,84,49,48,51,48,55,57,55,84,243,187,170,141,84,84,49,48,51,48,55,57,57,84,243,187,170,143,84,84,49,48,51,48,56,48,48,84,243,187,170,144,84,84,49,48,51,48,56,49,51,84,243,187,170,157,84,84,49,48,51,48,56,52,57,84,243,187,171,129,84,84,49,48,51,48,56,54,49,84,243,187,171,141,84,84,49,48,51,48,56,54,51,84,243,187,171,143,84,84,49,48,51,48,56,54,52,84,243,187,171,144,84,84,49,48,51,48,56,55,55,84,243,187,171,157,84,84,49,48,51,48,57,49,51,84,243,187,172,129,84,84,49,48,51,48,57,50,53,84,243,187,172,141,84,84,49,48,51,48,57,50,55,84,243,187,172,143,84,84,49,48,51,48,57,50,56,84,243,187,172,144,84,84,49,48,51,48,57,52,49,84,243,187,172,157,84,84,49,48,51,48,57,55,55,84,243,187,173,129,84,84,49,48,51,48,57,56,57,84,243,187,173,141,84,84,49,48,51,48,57,57,49,84,243,187,173,143,84,84,49,48,51,48,57,57,50,84,243,187,173,144,84,84,49,48,51,49,48,48,53,84,243,187,173,157,84,84,49,48,51,49,48,52,49,84,243,187,174,129,84,84,49,48,51,49,48,53,51,84,243,187,174,141,84,84,49,48,51,49,48,53,53,84,243,187,174,143,84,84,49,48,51,49,48,53,54,84,243,187,174,144,84,84,49,48,51,49,48,54,57,84,243,187,174,157,84,84,49,48,51,49,49,48,53,84,243,187,175,129,84,84,49,48,51,49,49,49,55,84,243,187,175,141,84,84,49,48,51,49,49,49,57,84,243,187,175,143,84,84,49,48,51,49,49,50,48,84,243,187,175,144,84,84,49,48,51,49,49,51,51,84,243,187,175,157,84,84,49,48,51,49,49,54,57,84,243,187,176,129,84,84,49,48,51,49,49,56,49,84,243,187,176,141,84,84,49,48,51,49,49,56,51,84,243,187,176,143,84,84,49,48,51,49,49,56,52,84,243,187,176,144,84,84,49,48,51,49,49,57,55,84,243,187,176,157,84,84,49,48,51,49,50,51,51,84,243,187,177,129,84,84,49,48,51,49,50,52,53,84,243,187,177,141,84,84,49,48,51,49,50,52,55,84,243,187,177,143,84,84,49,48,51,49,50,52,56,84,243,187,177,144,84,84,49,48,51,49,50,54,49,84,243,187,177,157,84,84,49,48,51,49,50,57,55,84,243,187,178,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19911 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19911_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19911_s.txt", Encoding.UTF8);

    public Test19911() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersf0a96ab3064046f8a2fc77e6e3ebae9e",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,56,55,50,52,49,84,243,177,129,169,84,84,57,56,55,50,52,50,84,243,177,129,170,84,84,57,56,55,50,52,51,84,243,177,129,171,84,84,57,56,55,50,52,52,84,243,177,129,172,84,84,57,56,55,50,52,53,84,243,177,129,173,84,84,57,56,55,50,52,54,84,243,177,129,174,84,84,57,56,55,50,52,55,84,243,177,129,175,84,84,57,56,55,50,52,56,84,243,177,129,176,84,84,57,56,55,50,52,57,84,243,177,129,177,84,84,57,56,55,50,53,48,84,243,177,129,178,84,84,57,56,55,50,53,49,84,243,177,129,179,84,84,57,56,55,50,53,50,84,243,177,129,180,84,84,57,56,55,50,53,51,84,243,177,129,181,84,84,57,56,55,50,53,52,84,243,177,129,182,84,84,57,56,55,50,53,53,84,243,177,129,183,84,84,57,56,55,50,53,54,84,243,177,129,184,84,84,57,56,55,50,53,55,84,243,177,129,185,84,84,57,56,55,50,53,56,84,243,177,129,186,84,84,57,56,55,50,53,57,84,243,177,129,187,84,84,57,56,55,50,54,48,84,243,177,129,188,84,84,57,56,55,50,54,49,84,243,177,129,189,84,84,57,56,55,50,54,50,84,243,177,129,190,84,84,57,56,55,50,54,51,84,243,177,129,191,84,84,57,56,55,50,54,53,84,243,177,130,129,84,84,57,56,55,50,55,55,84,243,177,130,141,84,84,57,56,55,50,55,57,84,243,177,130,143,84,84,57,56,55,50,56,48,84,243,177,130,144,84,84,57,56,55,50,57,51,84,243,177,130,157,84,84,57,56,55,51,50,57,84,243,177,131,129,84,84,57,56,55,51,52,49,84,243,177,131,141,84,84,57,56,55,51,52,51,84,243,177,131,143,84,84,57,56,55,51,52,52,84,243,177,131,144,84,84,57,56,55,51,53,55,84,243,177,131,157,84,84,57,56,55,51,57,51,84,243,177,132,129,84,84,57,56,55,52,48,53,84,243,177,132,141,84,84,57,56,55,52,48,55,84,243,177,132,143,84,84,57,56,55,52,48,56,84,243,177,132,144,84,84,57,56,55,52,50,49,84,243,177,132,157,84,84,57,56,55,52,53,55,84,243,177,133,129,84,84,57,56,55,52,54,57,84,243,177,133,141,84,84,57,56,55,52,55,49,84,243,177,133,143,84,84,57,56,55,52,55,50,84,243,177,133,144,84,84,57,56,55,52,56,53,84,243,177,133,157,84,84,57,56,55,53,50,49,84,243,177,134,129,84,84,57,56,55,53,51,51,84,243,177,134,141,84,84,57,56,55,53,51,53,84,243,177,134,143,84,84,57,56,55,53,51,54,84,243,177,134,144,84,84,57,56,55,53,52,57,84,243,177,134,157,84,84,57,56,55,53,56,53,84,243,177,135,129,84,84,57,56,55,53,57,55,84,243,177,135,141,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21116 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21116_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21116_s.txt", Encoding.UTF8);

    public Test21116() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers56d1c908d8f44b69abe6817b1847a0f6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,51,48,53,48,84,244,143,175,154,84,84,49,49,49,51,48,53,49,84,244,143,175,155,84,84,49,49,49,51,48,53,50,84,244,143,175,156,84,84,49,49,49,51,48,53,51,84,244,143,175,157,84,84,49,49,49,51,48,53,52,84,244,143,175,158,84,84,49,49,49,51,48,53,53,84,244,143,175,159,84,84,49,49,49,51,48,53,54,84,244,143,175,160,84,84,49,49,49,51,48,53,55,84,244,143,175,161,84,84,49,49,49,51,48,53,56,84,244,143,175,162,84,84,49,49,49,51,48,53,57,84,244,143,175,163,84,84,49,49,49,51,48,54,48,84,244,143,175,164,84,84,49,49,49,51,48,54,49,84,244,143,175,165,84,84,49,49,49,51,48,54,50,84,244,143,175,166,84,84,49,49,49,51,48,54,51,84,244,143,175,167,84,84,49,49,49,51,48,54,52,84,244,143,175,168,84,84,49,49,49,51,48,54,53,84,244,143,175,169,84,84,49,49,49,51,48,54,54,84,244,143,175,170,84,84,49,49,49,51,48,54,55,84,244,143,175,171,84,84,49,49,49,51,48,54,56,84,244,143,175,172,84,84,49,49,49,51,48,54,57,84,244,143,175,173,84,84,49,49,49,51,48,55,48,84,244,143,175,174,84,84,49,49,49,51,48,55,49,84,244,143,175,175,84,84,49,49,49,51,48,55,50,84,244,143,175,176,84,84,49,49,49,51,48,55,51,84,244,143,175,177,84,84,49,49,49,51,48,55,52,84,244,143,175,178,84,84,49,49,49,51,48,55,53,84,244,143,175,179,84,84,49,49,49,51,48,55,54,84,244,143,175,180,84,84,49,49,49,51,48,55,55,84,244,143,175,181,84,84,49,49,49,51,48,55,56,84,244,143,175,182,84,84,49,49,49,51,48,55,57,84,244,143,175,183,84,84,49,49,49,51,48,56,48,84,244,143,175,184,84,84,49,49,49,51,48,56,49,84,244,143,175,185,84,84,49,49,49,51,48,56,50,84,244,143,175,186,84,84,49,49,49,51,48,56,51,84,244,143,175,187,84,84,49,49,49,51,48,56,52,84,244,143,175,188,84,84,49,49,49,51,48,56,53,84,244,143,175,189,84,84,49,49,49,51,48,56,54,84,244,143,175,190,84,84,49,49,49,51,48,56,55,84,244,143,175,191,84,84,49,49,49,51,48,56,56,84,244,143,176,128,84,84,49,49,49,51,48,56,57,84,244,143,176,129,84,84,49,49,49,51,48,57,48,84,244,143,176,130,84,84,49,49,49,51,48,57,49,84,244,143,176,131,84,84,49,49,49,51,48,57,50,84,244,143,176,132,84,84,49,49,49,51,48,57,51,84,244,143,176,133,84,84,49,49,49,51,48,57,52,84,244,143,176,134,84,84,49,49,49,51,48,57,53,84,244,143,176,135,84,84,49,49,49,51,48,57,54,84,244,143,176,136,84,84,49,49,49,51,48,57,55,84,244,143,176,137,84,84,49,49,49,51,48,57,56,84,244,143,176,138,84,84,49,49,49,51,48,57,57,84,244,143,176,139,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19840 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19840_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19840_s.txt", Encoding.UTF8);

    public Test19840() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers3d1fce2fe43b489ca49e5d4066014499",
                        blob: Encoding.UTF8.GetString(new byte[]{84,54,50,52,53,52,84,239,143,182,84,84,54,50,52,53,53,84,239,143,183,84,84,54,50,52,53,54,84,239,143,184,84,84,54,50,52,53,55,84,239,143,185,84,84,54,50,52,53,56,84,239,143,186,84,84,54,50,52,53,57,84,239,143,187,84,84,54,50,52,54,48,84,239,143,188,84,84,54,50,52,54,49,84,239,143,189,84,84,54,50,52,54,50,84,239,143,190,84,84,54,50,52,54,51,84,239,143,191,84,84,54,50,52,54,52,84,239,144,128,84,84,54,50,52,54,53,84,239,144,129,84,84,54,50,52,54,54,84,239,144,130,84,84,54,50,52,54,55,84,239,144,131,84,84,54,50,52,54,56,84,239,144,132,84,84,54,50,52,54,57,84,239,144,133,84,84,54,50,52,55,48,84,239,144,134,84,84,54,50,52,55,49,84,239,144,135,84,84,54,50,52,55,50,84,239,144,136,84,84,54,50,52,55,51,84,239,144,137,84,84,54,50,52,55,52,84,239,144,138,84,84,54,50,52,55,53,84,239,144,139,84,84,54,50,52,55,54,84,239,144,140,84,84,54,50,52,55,55,84,239,144,141,84,84,54,50,52,55,56,84,239,144,142,84,84,54,50,52,55,57,84,239,144,143,84,84,54,50,52,56,48,84,239,144,144,84,84,54,50,52,56,49,84,239,144,145,84,84,54,50,52,56,50,84,239,144,146,84,84,54,50,52,56,51,84,239,144,147,84,84,54,50,52,56,52,84,239,144,148,84,84,54,50,52,56,53,84,239,144,149,84,84,54,50,52,56,54,84,239,144,150,84,84,54,50,52,56,55,84,239,144,151,84,84,54,50,52,56,56,84,239,144,152,84,84,54,50,52,56,57,84,239,144,153,84,84,54,50,52,57,48,84,239,144,154,84,84,54,50,52,57,49,84,239,144,155,84,84,54,50,52,57,50,84,239,144,156,84,84,54,50,52,57,51,84,239,144,157,84,84,54,50,52,57,52,84,239,144,158,84,84,54,50,52,57,53,84,239,144,159,84,84,54,50,52,57,54,84,239,144,160,84,84,54,50,52,57,55,84,239,144,161,84,84,54,50,52,57,56,84,239,144,162,84,84,54,50,52,57,57,84,239,144,163,84,84,54,50,53,48,48,84,239,144,164,84,84,54,50,53,48,49,84,239,144,165,84,84,54,50,53,48,50,84,239,144,166,84,84,54,50,53,48,51,84,239,144,167,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20261 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20261_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20261_s.txt", Encoding.UTF8);

    public Test20261() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersca1800aaa567470781b999118df6ba97",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,52,49,56,53,55,84,243,190,151,129,84,84,49,48,52,49,56,54,57,84,243,190,151,141,84,84,49,48,52,49,56,55,49,84,243,190,151,143,84,84,49,48,52,49,56,55,50,84,243,190,151,144,84,84,49,48,52,49,56,56,53,84,243,190,151,157,84,84,49,48,52,49,57,50,49,84,243,190,152,129,84,84,49,48,52,49,57,51,51,84,243,190,152,141,84,84,49,48,52,49,57,51,53,84,243,190,152,143,84,84,49,48,52,49,57,51,54,84,243,190,152,144,84,84,49,48,52,49,57,52,57,84,243,190,152,157,84,84,49,48,52,49,57,56,53,84,243,190,153,129,84,84,49,48,52,49,57,57,55,84,243,190,153,141,84,84,49,48,52,49,57,57,57,84,243,190,153,143,84,84,49,48,52,50,48,48,48,84,243,190,153,144,84,84,49,48,52,50,48,49,51,84,243,190,153,157,84,84,49,48,52,50,48,52,57,84,243,190,154,129,84,84,49,48,52,50,48,54,49,84,243,190,154,141,84,84,49,48,52,50,48,54,51,84,243,190,154,143,84,84,49,48,52,50,48,54,52,84,243,190,154,144,84,84,49,48,52,50,48,55,55,84,243,190,154,157,84,84,49,48,52,50,49,49,51,84,243,190,155,129,84,84,49,48,52,50,49,50,53,84,243,190,155,141,84,84,49,48,52,50,49,50,55,84,243,190,155,143,84,84,49,48,52,50,49,50,56,84,243,190,155,144,84,84,49,48,52,50,49,52,49,84,243,190,155,157,84,84,49,48,52,50,49,55,55,84,243,190,156,129,84,84,49,48,52,50,49,56,57,84,243,190,156,141,84,84,49,48,52,50,49,57,49,84,243,190,156,143,84,84,49,48,52,50,49,57,50,84,243,190,156,144,84,84,49,48,52,50,50,48,53,84,243,190,156,157,84,84,49,48,52,50,50,52,48,84,243,190,157,128,84,84,49,48,52,50,50,52,49,84,243,190,157,129,84,84,49,48,52,50,50,52,50,84,243,190,157,130,84,84,49,48,52,50,50,52,51,84,243,190,157,131,84,84,49,48,52,50,50,52,52,84,243,190,157,132,84,84,49,48,52,50,50,52,53,84,243,190,157,133,84,84,49,48,52,50,50,52,54,84,243,190,157,134,84,84,49,48,52,50,50,52,55,84,243,190,157,135,84,84,49,48,52,50,50,52,56,84,243,190,157,136,84,84,49,48,52,50,50,52,57,84,243,190,157,137,84,84,49,48,52,50,50,53,48,84,243,190,157,138,84,84,49,48,52,50,50,53,49,84,243,190,157,139,84,84,49,48,52,50,50,53,50,84,243,190,157,140,84,84,49,48,52,50,50,53,51,84,243,190,157,141,84,84,49,48,52,50,50,53,52,84,243,190,157,142,84,84,49,48,52,50,50,53,53,84,243,190,157,143,84,84,49,48,52,50,50,53,54,84,243,190,157,144,84,84,49,48,52,50,50,53,55,84,243,190,157,145,84,84,49,48,52,50,50,53,56,84,243,190,157,146,84,84,49,48,52,50,50,53,57,84,243,190,157,147,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20360 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20360_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20360_s.txt", Encoding.UTF8);

    public Test20360() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers319eca44915441a6b60a6025f5eab2bd",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,51,52,55,56,84,244,129,140,166,84,84,49,48,53,51,52,55,57,84,244,129,140,167,84,84,49,48,53,51,52,56,48,84,244,129,140,168,84,84,49,48,53,51,52,56,49,84,244,129,140,169,84,84,49,48,53,51,52,56,50,84,244,129,140,170,84,84,49,48,53,51,52,56,51,84,244,129,140,171,84,84,49,48,53,51,52,56,52,84,244,129,140,172,84,84,49,48,53,51,52,56,53,84,244,129,140,173,84,84,49,48,53,51,52,56,54,84,244,129,140,174,84,84,49,48,53,51,52,56,55,84,244,129,140,175,84,84,49,48,53,51,52,56,56,84,244,129,140,176,84,84,49,48,53,51,52,56,57,84,244,129,140,177,84,84,49,48,53,51,52,57,48,84,244,129,140,178,84,84,49,48,53,51,52,57,49,84,244,129,140,179,84,84,49,48,53,51,52,57,50,84,244,129,140,180,84,84,49,48,53,51,52,57,51,84,244,129,140,181,84,84,49,48,53,51,52,57,52,84,244,129,140,182,84,84,49,48,53,51,52,57,53,84,244,129,140,183,84,84,49,48,53,51,52,57,54,84,244,129,140,184,84,84,49,48,53,51,52,57,55,84,244,129,140,185,84,84,49,48,53,51,52,57,56,84,244,129,140,186,84,84,49,48,53,51,52,57,57,84,244,129,140,187,84,84,49,48,53,51,53,48,48,84,244,129,140,188,84,84,49,48,53,51,53,48,49,84,244,129,140,189,84,84,49,48,53,51,53,48,50,84,244,129,140,190,84,84,49,48,53,51,53,48,51,84,244,129,140,191,84,84,49,48,53,51,53,48,52,84,244,129,141,128,84,84,49,48,53,51,53,48,53,84,244,129,141,129,84,84,49,48,53,51,53,48,54,84,244,129,141,130,84,84,49,48,53,51,53,48,55,84,244,129,141,131,84,84,49,48,53,51,53,48,56,84,244,129,141,132,84,84,49,48,53,51,53,48,57,84,244,129,141,133,84,84,49,48,53,51,53,49,48,84,244,129,141,134,84,84,49,48,53,51,53,49,49,84,244,129,141,135,84,84,49,48,53,51,53,49,50,84,244,129,141,136,84,84,49,48,53,51,53,49,51,84,244,129,141,137,84,84,49,48,53,51,53,49,52,84,244,129,141,138,84,84,49,48,53,51,53,49,53,84,244,129,141,139,84,84,49,48,53,51,53,49,54,84,244,129,141,140,84,84,49,48,53,51,53,49,55,84,244,129,141,141,84,84,49,48,53,51,53,49,56,84,244,129,141,142,84,84,49,48,53,51,53,49,57,84,244,129,141,143,84,84,49,48,53,51,53,50,48,84,244,129,141,144,84,84,49,48,53,51,53,50,49,84,244,129,141,145,84,84,49,48,53,51,53,50,50,84,244,129,141,146,84,84,49,48,53,51,53,50,51,84,244,129,141,147,84,84,49,48,53,51,53,50,52,84,244,129,141,148,84,84,49,48,53,51,53,50,53,84,244,129,141,149,84,84,49,48,53,51,53,50,54,84,244,129,141,150,84,84,49,48,53,51,53,50,55,84,244,129,141,151,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20038 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20038_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20038_s.txt", Encoding.UTF8);

    public Test20038() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers612d6939acd44cdbbba30cffbd18a713",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,48,55,50,52,53,84,243,181,186,141,84,84,49,48,48,55,50,52,55,84,243,181,186,143,84,84,49,48,48,55,50,52,56,84,243,181,186,144,84,84,49,48,48,55,50,54,49,84,243,181,186,157,84,84,49,48,48,55,50,57,55,84,243,181,187,129,84,84,49,48,48,55,51,48,57,84,243,181,187,141,84,84,49,48,48,55,51,49,49,84,243,181,187,143,84,84,49,48,48,55,51,49,50,84,243,181,187,144,84,84,49,48,48,55,51,50,53,84,243,181,187,157,84,84,49,48,48,55,51,54,49,84,243,181,188,129,84,84,49,48,48,55,51,55,51,84,243,181,188,141,84,84,49,48,48,55,51,55,53,84,243,181,188,143,84,84,49,48,48,55,51,55,54,84,243,181,188,144,84,84,49,48,48,55,51,56,57,84,243,181,188,157,84,84,49,48,48,55,52,50,53,84,243,181,189,129,84,84,49,48,48,55,52,51,55,84,243,181,189,141,84,84,49,48,48,55,52,51,57,84,243,181,189,143,84,84,49,48,48,55,52,52,48,84,243,181,189,144,84,84,49,48,48,55,52,53,51,84,243,181,189,157,84,84,49,48,48,55,52,56,57,84,243,181,190,129,84,84,49,48,48,55,53,48,49,84,243,181,190,141,84,84,49,48,48,55,53,48,51,84,243,181,190,143,84,84,49,48,48,55,53,48,52,84,243,181,190,144,84,84,49,48,48,55,53,49,55,84,243,181,190,157,84,84,49,48,48,55,53,53,51,84,243,181,191,129,84,84,49,48,48,55,53,54,53,84,243,181,191,141,84,84,49,48,48,55,53,54,55,84,243,181,191,143,84,84,49,48,48,55,53,54,56,84,243,181,191,144,84,84,49,48,48,55,53,56,49,84,243,181,191,157,84,84,49,48,48,55,54,49,55,84,243,182,128,129,84,84,49,48,48,55,54,50,57,84,243,182,128,141,84,84,49,48,48,55,54,51,49,84,243,182,128,143,84,84,49,48,48,55,54,51,50,84,243,182,128,144,84,84,49,48,48,55,54,52,53,84,243,182,128,157,84,84,49,48,48,55,54,56,48,84,243,182,129,128,84,84,49,48,48,55,54,56,49,84,243,182,129,129,84,84,49,48,48,55,54,56,50,84,243,182,129,130,84,84,49,48,48,55,54,56,51,84,243,182,129,131,84,84,49,48,48,55,54,56,52,84,243,182,129,132,84,84,49,48,48,55,54,56,53,84,243,182,129,133,84,84,49,48,48,55,54,56,54,84,243,182,129,134,84,84,49,48,48,55,54,56,55,84,243,182,129,135,84,84,49,48,48,55,54,56,56,84,243,182,129,136,84,84,49,48,48,55,54,56,57,84,243,182,129,137,84,84,49,48,48,55,54,57,48,84,243,182,129,138,84,84,49,48,48,55,54,57,49,84,243,182,129,139,84,84,49,48,48,55,54,57,50,84,243,182,129,140,84,84,49,48,48,55,54,57,51,84,243,182,129,141,84,84,49,48,48,55,54,57,52,84,243,182,129,142,84,84,49,48,48,55,54,57,53,84,243,182,129,143,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20705 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20705_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20705_s.txt", Encoding.UTF8);

    public Test20705() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers0bb7ae45edef4594997d97499d26b519",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,56,56,49,50,57,84,244,137,170,129,84,84,49,48,56,56,49,52,49,84,244,137,170,141,84,84,49,48,56,56,49,52,51,84,244,137,170,143,84,84,49,48,56,56,49,52,52,84,244,137,170,144,84,84,49,48,56,56,49,53,55,84,244,137,170,157,84,84,49,48,56,56,49,57,51,84,244,137,171,129,84,84,49,48,56,56,50,48,53,84,244,137,171,141,84,84,49,48,56,56,50,48,55,84,244,137,171,143,84,84,49,48,56,56,50,48,56,84,244,137,171,144,84,84,49,48,56,56,50,50,49,84,244,137,171,157,84,84,49,48,56,56,50,53,55,84,244,137,172,129,84,84,49,48,56,56,50,54,57,84,244,137,172,141,84,84,49,48,56,56,50,55,49,84,244,137,172,143,84,84,49,48,56,56,50,55,50,84,244,137,172,144,84,84,49,48,56,56,50,56,53,84,244,137,172,157,84,84,49,48,56,56,51,50,49,84,244,137,173,129,84,84,49,48,56,56,51,51,51,84,244,137,173,141,84,84,49,48,56,56,51,51,53,84,244,137,173,143,84,84,49,48,56,56,51,51,54,84,244,137,173,144,84,84,49,48,56,56,51,52,57,84,244,137,173,157,84,84,49,48,56,56,51,56,53,84,244,137,174,129,84,84,49,48,56,56,51,57,55,84,244,137,174,141,84,84,49,48,56,56,51,57,57,84,244,137,174,143,84,84,49,48,56,56,52,48,48,84,244,137,174,144,84,84,49,48,56,56,52,49,51,84,244,137,174,157,84,84,49,48,56,56,52,52,57,84,244,137,175,129,84,84,49,48,56,56,52,54,49,84,244,137,175,141,84,84,49,48,56,56,52,54,51,84,244,137,175,143,84,84,49,48,56,56,52,54,52,84,244,137,175,144,84,84,49,48,56,56,52,55,55,84,244,137,175,157,84,84,49,48,56,56,53,49,51,84,244,137,176,129,84,84,49,48,56,56,53,50,53,84,244,137,176,141,84,84,49,48,56,56,53,50,55,84,244,137,176,143,84,84,49,48,56,56,53,50,56,84,244,137,176,144,84,84,49,48,56,56,53,52,49,84,244,137,176,157,84,84,49,48,56,56,53,55,55,84,244,137,177,129,84,84,49,48,56,56,53,56,57,84,244,137,177,141,84,84,49,48,56,56,53,57,49,84,244,137,177,143,84,84,49,48,56,56,53,57,50,84,244,137,177,144,84,84,49,48,56,56,54,48,53,84,244,137,177,157,84,84,49,48,56,56,54,52,49,84,244,137,178,129,84,84,49,48,56,56,54,53,51,84,244,137,178,141,84,84,49,48,56,56,54,53,53,84,244,137,178,143,84,84,49,48,56,56,54,53,54,84,244,137,178,144,84,84,49,48,56,56,54,54,57,84,244,137,178,157,84,84,49,48,56,56,55,48,53,84,244,137,179,129,84,84,49,48,56,56,55,49,55,84,244,137,179,141,84,84,49,48,56,56,55,49,57,84,244,137,179,143,84,84,49,48,56,56,55,50,48,84,244,137,179,144,84,84,49,48,56,56,55,51,51,84,244,137,179,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20798 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20798_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20798_s.txt", Encoding.UTF8);

    public Test20798() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers8240a720eb234783afd6a68d24f64161",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,50,48,54,57,84,244,141,131,181,84,84,49,49,48,50,48,55,48,84,244,141,131,182,84,84,49,49,48,50,48,55,49,84,244,141,131,183,84,84,49,49,48,50,48,55,50,84,244,141,131,184,84,84,49,49,48,50,48,55,51,84,244,141,131,185,84,84,49,49,48,50,48,55,52,84,244,141,131,186,84,84,49,49,48,50,48,55,53,84,244,141,131,187,84,84,49,49,48,50,48,55,54,84,244,141,131,188,84,84,49,49,48,50,48,55,55,84,244,141,131,189,84,84,49,49,48,50,48,55,56,84,244,141,131,190,84,84,49,49,48,50,48,55,57,84,244,141,131,191,84,84,49,49,48,50,48,56,48,84,244,141,132,128,84,84,49,49,48,50,48,56,49,84,244,141,132,129,84,84,49,49,48,50,48,56,50,84,244,141,132,130,84,84,49,49,48,50,48,56,51,84,244,141,132,131,84,84,49,49,48,50,48,56,52,84,244,141,132,132,84,84,49,49,48,50,48,56,53,84,244,141,132,133,84,84,49,49,48,50,48,56,54,84,244,141,132,134,84,84,49,49,48,50,48,56,55,84,244,141,132,135,84,84,49,49,48,50,48,56,56,84,244,141,132,136,84,84,49,49,48,50,48,56,57,84,244,141,132,137,84,84,49,49,48,50,48,57,48,84,244,141,132,138,84,84,49,49,48,50,48,57,49,84,244,141,132,139,84,84,49,49,48,50,48,57,50,84,244,141,132,140,84,84,49,49,48,50,48,57,51,84,244,141,132,141,84,84,49,49,48,50,48,57,52,84,244,141,132,142,84,84,49,49,48,50,48,57,53,84,244,141,132,143,84,84,49,49,48,50,48,57,54,84,244,141,132,144,84,84,49,49,48,50,48,57,55,84,244,141,132,145,84,84,49,49,48,50,48,57,56,84,244,141,132,146,84,84,49,49,48,50,48,57,57,84,244,141,132,147,84,84,49,49,48,50,49,48,48,84,244,141,132,148,84,84,49,49,48,50,49,48,49,84,244,141,132,149,84,84,49,49,48,50,49,48,50,84,244,141,132,150,84,84,49,49,48,50,49,48,51,84,244,141,132,151,84,84,49,49,48,50,49,48,52,84,244,141,132,152,84,84,49,49,48,50,49,48,53,84,244,141,132,153,84,84,49,49,48,50,49,48,54,84,244,141,132,154,84,84,49,49,48,50,49,48,55,84,244,141,132,155,84,84,49,49,48,50,49,48,56,84,244,141,132,156,84,84,49,49,48,50,49,48,57,84,244,141,132,157,84,84,49,49,48,50,49,49,48,84,244,141,132,158,84,84,49,49,48,50,49,49,49,84,244,141,132,159,84,84,49,49,48,50,49,49,50,84,244,141,132,160,84,84,49,49,48,50,49,49,51,84,244,141,132,161,84,84,49,49,48,50,49,49,52,84,244,141,132,162,84,84,49,49,48,50,49,49,53,84,244,141,132,163,84,84,49,49,48,50,49,49,54,84,244,141,132,164,84,84,49,49,48,50,49,49,55,84,244,141,132,165,84,84,49,49,48,50,49,49,56,84,244,141,132,166,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20263 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20263_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20263_s.txt", Encoding.UTF8);

    public Test20263() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersca1800aaa567470781b999118df6ba97",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,52,50,50,54,48,84,243,190,157,148,84,84,49,48,52,50,50,54,49,84,243,190,157,149,84,84,49,48,52,50,50,54,50,84,243,190,157,150,84,84,49,48,52,50,50,54,51,84,243,190,157,151,84,84,49,48,52,50,50,54,52,84,243,190,157,152,84,84,49,48,52,50,50,54,53,84,243,190,157,153,84,84,49,48,52,50,50,54,54,84,243,190,157,154,84,84,49,48,52,50,50,54,55,84,243,190,157,155,84,84,49,48,52,50,50,54,56,84,243,190,157,156,84,84,49,48,52,50,50,54,57,84,243,190,157,157,84,84,49,48,52,50,50,55,48,84,243,190,157,158,84,84,49,48,52,50,50,55,49,84,243,190,157,159,84,84,49,48,52,50,50,55,50,84,243,190,157,160,84,84,49,48,52,50,50,55,51,84,243,190,157,161,84,84,49,48,52,50,50,55,52,84,243,190,157,162,84,84,49,48,52,50,50,55,53,84,243,190,157,163,84,84,49,48,52,50,50,55,54,84,243,190,157,164,84,84,49,48,52,50,50,55,55,84,243,190,157,165,84,84,49,48,52,50,50,55,56,84,243,190,157,166,84,84,49,48,52,50,50,55,57,84,243,190,157,167,84,84,49,48,52,50,50,56,48,84,243,190,157,168,84,84,49,48,52,50,50,56,49,84,243,190,157,169,84,84,49,48,52,50,50,56,50,84,243,190,157,170,84,84,49,48,52,50,50,56,51,84,243,190,157,171,84,84,49,48,52,50,50,56,52,84,243,190,157,172,84,84,49,48,52,50,50,56,53,84,243,190,157,173,84,84,49,48,52,50,50,56,54,84,243,190,157,174,84,84,49,48,52,50,50,56,55,84,243,190,157,175,84,84,49,48,52,50,50,56,56,84,243,190,157,176,84,84,49,48,52,50,50,56,57,84,243,190,157,177,84,84,49,48,52,50,50,57,48,84,243,190,157,178,84,84,49,48,52,50,50,57,49,84,243,190,157,179,84,84,49,48,52,50,50,57,50,84,243,190,157,180,84,84,49,48,52,50,50,57,51,84,243,190,157,181,84,84,49,48,52,50,50,57,52,84,243,190,157,182,84,84,49,48,52,50,50,57,53,84,243,190,157,183,84,84,49,48,52,50,50,57,54,84,243,190,157,184,84,84,49,48,52,50,50,57,55,84,243,190,157,185,84,84,49,48,52,50,50,57,56,84,243,190,157,186,84,84,49,48,52,50,50,57,57,84,243,190,157,187,84,84,49,48,52,50,51,48,48,84,243,190,157,188,84,84,49,48,52,50,51,48,49,84,243,190,157,189,84,84,49,48,52,50,51,48,50,84,243,190,157,190,84,84,49,48,52,50,51,48,51,84,243,190,157,191,84,84,49,48,52,50,51,48,53,84,243,190,158,129,84,84,49,48,52,50,51,49,55,84,243,190,158,141,84,84,49,48,52,50,51,49,57,84,243,190,158,143,84,84,49,48,52,50,51,50,48,84,243,190,158,144,84,84,49,48,52,50,51,51,51,84,243,190,158,157,84,84,49,48,52,50,51,54,57,84,243,190,159,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20453 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20453_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20453_s.txt", Encoding.UTF8);

    public Test20453() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersee5ddc6232b847869028904d3d06a0f3",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,53,54,55,56,84,244,129,174,190,84,84,49,48,53,53,54,55,57,84,244,129,174,191,84,84,49,48,53,53,54,56,48,84,244,129,175,128,84,84,49,48,53,53,54,56,49,84,244,129,175,129,84,84,49,48,53,53,54,56,50,84,244,129,175,130,84,84,49,48,53,53,54,56,51,84,244,129,175,131,84,84,49,48,53,53,54,56,52,84,244,129,175,132,84,84,49,48,53,53,54,56,53,84,244,129,175,133,84,84,49,48,53,53,54,56,54,84,244,129,175,134,84,84,49,48,53,53,54,56,55,84,244,129,175,135,84,84,49,48,53,53,54,56,56,84,244,129,175,136,84,84,49,48,53,53,54,56,57,84,244,129,175,137,84,84,49,48,53,53,54,57,48,84,244,129,175,138,84,84,49,48,53,53,54,57,49,84,244,129,175,139,84,84,49,48,53,53,54,57,50,84,244,129,175,140,84,84,49,48,53,53,54,57,51,84,244,129,175,141,84,84,49,48,53,53,54,57,52,84,244,129,175,142,84,84,49,48,53,53,54,57,53,84,244,129,175,143,84,84,49,48,53,53,54,57,54,84,244,129,175,144,84,84,49,48,53,53,54,57,55,84,244,129,175,145,84,84,49,48,53,53,54,57,56,84,244,129,175,146,84,84,49,48,53,53,54,57,57,84,244,129,175,147,84,84,49,48,53,53,55,48,48,84,244,129,175,148,84,84,49,48,53,53,55,48,49,84,244,129,175,149,84,84,49,48,53,53,55,48,50,84,244,129,175,150,84,84,49,48,53,53,55,48,51,84,244,129,175,151,84,84,49,48,53,53,55,48,52,84,244,129,175,152,84,84,49,48,53,53,55,48,53,84,244,129,175,153,84,84,49,48,53,53,55,48,54,84,244,129,175,154,84,84,49,48,53,53,55,48,55,84,244,129,175,155,84,84,49,48,53,53,55,48,56,84,244,129,175,156,84,84,49,48,53,53,55,48,57,84,244,129,175,157,84,84,49,48,53,53,55,49,48,84,244,129,175,158,84,84,49,48,53,53,55,49,49,84,244,129,175,159,84,84,49,48,53,53,55,49,50,84,244,129,175,160,84,84,49,48,53,53,55,49,51,84,244,129,175,161,84,84,49,48,53,53,55,49,52,84,244,129,175,162,84,84,49,48,53,53,55,49,53,84,244,129,175,163,84,84,49,48,53,53,55,49,54,84,244,129,175,164,84,84,49,48,53,53,55,49,55,84,244,129,175,165,84,84,49,48,53,53,55,49,56,84,244,129,175,166,84,84,49,48,53,53,55,49,57,84,244,129,175,167,84,84,49,48,53,53,55,50,48,84,244,129,175,168,84,84,49,48,53,53,55,50,49,84,244,129,175,169,84,84,49,48,53,53,55,50,50,84,244,129,175,170,84,84,49,48,53,53,55,50,51,84,244,129,175,171,84,84,49,48,53,53,55,50,52,84,244,129,175,172,84,84,49,48,53,53,55,50,53,84,244,129,175,173,84,84,49,48,53,53,55,50,54,84,244,129,175,174,84,84,49,48,53,53,55,50,55,84,244,129,175,175,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20864 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20864_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20864_s.txt", Encoding.UTF8);

    public Test20864() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersdd41d3a5bb7f42709f7cec587f1a204a",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,51,54,49,57,84,244,141,156,131,84,84,49,49,48,51,54,50,48,84,244,141,156,132,84,84,49,49,48,51,54,50,49,84,244,141,156,133,84,84,49,49,48,51,54,50,50,84,244,141,156,134,84,84,49,49,48,51,54,50,51,84,244,141,156,135,84,84,49,49,48,51,54,50,52,84,244,141,156,136,84,84,49,49,48,51,54,50,53,84,244,141,156,137,84,84,49,49,48,51,54,50,54,84,244,141,156,138,84,84,49,49,48,51,54,50,55,84,244,141,156,139,84,84,49,49,48,51,54,50,56,84,244,141,156,140,84,84,49,49,48,51,54,50,57,84,244,141,156,141,84,84,49,49,48,51,54,51,48,84,244,141,156,142,84,84,49,49,48,51,54,51,49,84,244,141,156,143,84,84,49,49,48,51,54,51,50,84,244,141,156,144,84,84,49,49,48,51,54,51,51,84,244,141,156,145,84,84,49,49,48,51,54,51,52,84,244,141,156,146,84,84,49,49,48,51,54,51,53,84,244,141,156,147,84,84,49,49,48,51,54,51,54,84,244,141,156,148,84,84,49,49,48,51,54,51,55,84,244,141,156,149,84,84,49,49,48,51,54,51,56,84,244,141,156,150,84,84,49,49,48,51,54,51,57,84,244,141,156,151,84,84,49,49,48,51,54,52,48,84,244,141,156,152,84,84,49,49,48,51,54,52,49,84,244,141,156,153,84,84,49,49,48,51,54,52,50,84,244,141,156,154,84,84,49,49,48,51,54,52,51,84,244,141,156,155,84,84,49,49,48,51,54,52,52,84,244,141,156,156,84,84,49,49,48,51,54,52,53,84,244,141,156,157,84,84,49,49,48,51,54,52,54,84,244,141,156,158,84,84,49,49,48,51,54,52,55,84,244,141,156,159,84,84,49,49,48,51,54,52,56,84,244,141,156,160,84,84,49,49,48,51,54,52,57,84,244,141,156,161,84,84,49,49,48,51,54,53,48,84,244,141,156,162,84,84,49,49,48,51,54,53,49,84,244,141,156,163,84,84,49,49,48,51,54,53,50,84,244,141,156,164,84,84,49,49,48,51,54,53,51,84,244,141,156,165,84,84,49,49,48,51,54,53,52,84,244,141,156,166,84,84,49,49,48,51,54,53,53,84,244,141,156,167,84,84,49,49,48,51,54,53,54,84,244,141,156,168,84,84,49,49,48,51,54,53,55,84,244,141,156,169,84,84,49,49,48,51,54,53,56,84,244,141,156,170,84,84,49,49,48,51,54,53,57,84,244,141,156,171,84,84,49,49,48,51,54,54,48,84,244,141,156,172,84,84,49,49,48,51,54,54,49,84,244,141,156,173,84,84,49,49,48,51,54,54,50,84,244,141,156,174,84,84,49,49,48,51,54,54,51,84,244,141,156,175,84,84,49,49,48,51,54,54,52,84,244,141,156,176,84,84,49,49,48,51,54,54,53,84,244,141,156,177,84,84,49,49,48,51,54,54,54,84,244,141,156,178,84,84,49,49,48,51,54,54,55,84,244,141,156,179,84,84,49,49,48,51,54,54,56,84,244,141,156,180,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20983 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20983_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20983_s.txt", Encoding.UTF8);

    public Test20983() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersdf87e0f5374149afa792ac52b484870e",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,57,49,52,57,84,244,142,178,157,84,84,49,49,48,57,49,56,53,84,244,142,179,129,84,84,49,49,48,57,49,57,55,84,244,142,179,141,84,84,49,49,48,57,49,57,57,84,244,142,179,143,84,84,49,49,48,57,50,48,48,84,244,142,179,144,84,84,49,49,48,57,50,49,51,84,244,142,179,157,84,84,49,49,48,57,50,52,57,84,244,142,180,129,84,84,49,49,48,57,50,54,49,84,244,142,180,141,84,84,49,49,48,57,50,54,51,84,244,142,180,143,84,84,49,49,48,57,50,54,52,84,244,142,180,144,84,84,49,49,48,57,50,55,55,84,244,142,180,157,84,84,49,49,48,57,51,49,51,84,244,142,181,129,84,84,49,49,48,57,51,50,53,84,244,142,181,141,84,84,49,49,48,57,51,50,55,84,244,142,181,143,84,84,49,49,48,57,51,50,56,84,244,142,181,144,84,84,49,49,48,57,51,52,49,84,244,142,181,157,84,84,49,49,48,57,51,55,55,84,244,142,182,129,84,84,49,49,48,57,51,56,57,84,244,142,182,141,84,84,49,49,48,57,51,57,49,84,244,142,182,143,84,84,49,49,48,57,51,57,50,84,244,142,182,144,84,84,49,49,48,57,52,48,53,84,244,142,182,157,84,84,49,49,48,57,52,52,49,84,244,142,183,129,84,84,49,49,48,57,52,53,51,84,244,142,183,141,84,84,49,49,48,57,52,53,53,84,244,142,183,143,84,84,49,49,48,57,52,53,54,84,244,142,183,144,84,84,49,49,48,57,52,54,57,84,244,142,183,157,84,84,49,49,48,57,53,48,53,84,244,142,184,129,84,84,49,49,48,57,53,49,55,84,244,142,184,141,84,84,49,49,48,57,53,49,57,84,244,142,184,143,84,84,49,49,48,57,53,50,48,84,244,142,184,144,84,84,49,49,48,57,53,51,51,84,244,142,184,157,84,84,49,49,48,57,53,54,57,84,244,142,185,129,84,84,49,49,48,57,53,56,49,84,244,142,185,141,84,84,49,49,48,57,53,56,51,84,244,142,185,143,84,84,49,49,48,57,53,56,52,84,244,142,185,144,84,84,49,49,48,57,53,57,55,84,244,142,185,157,84,84,49,49,48,57,54,51,51,84,244,142,186,129,84,84,49,49,48,57,54,52,53,84,244,142,186,141,84,84,49,49,48,57,54,52,55,84,244,142,186,143,84,84,49,49,48,57,54,52,56,84,244,142,186,144,84,84,49,49,48,57,54,54,49,84,244,142,186,157,84,84,49,49,48,57,54,57,55,84,244,142,187,129,84,84,49,49,48,57,55,48,57,84,244,142,187,141,84,84,49,49,48,57,55,49,49,84,244,142,187,143,84,84,49,49,48,57,55,49,50,84,244,142,187,144,84,84,49,49,48,57,55,50,53,84,244,142,187,157,84,84,49,49,48,57,55,54,49,84,244,142,188,129,84,84,49,49,48,57,55,55,51,84,244,142,188,141,84,84,49,49,48,57,55,55,53,84,244,142,188,143,84,84,49,49,48,57,55,55,54,84,244,142,188,144,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21060 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21060_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21060_s.txt", Encoding.UTF8);

    public Test21060() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers98fd3eef9d4b4edcb3855acb5ae8645d",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,49,55,53,48,84,244,143,155,134,84,84,49,49,49,49,55,53,49,84,244,143,155,135,84,84,49,49,49,49,55,53,50,84,244,143,155,136,84,84,49,49,49,49,55,53,51,84,244,143,155,137,84,84,49,49,49,49,55,53,52,84,244,143,155,138,84,84,49,49,49,49,55,53,53,84,244,143,155,139,84,84,49,49,49,49,55,53,54,84,244,143,155,140,84,84,49,49,49,49,55,53,55,84,244,143,155,141,84,84,49,49,49,49,55,53,56,84,244,143,155,142,84,84,49,49,49,49,55,53,57,84,244,143,155,143,84,84,49,49,49,49,55,54,48,84,244,143,155,144,84,84,49,49,49,49,55,54,49,84,244,143,155,145,84,84,49,49,49,49,55,54,50,84,244,143,155,146,84,84,49,49,49,49,55,54,51,84,244,143,155,147,84,84,49,49,49,49,55,54,52,84,244,143,155,148,84,84,49,49,49,49,55,54,53,84,244,143,155,149,84,84,49,49,49,49,55,54,54,84,244,143,155,150,84,84,49,49,49,49,55,54,55,84,244,143,155,151,84,84,49,49,49,49,55,54,56,84,244,143,155,152,84,84,49,49,49,49,55,54,57,84,244,143,155,153,84,84,49,49,49,49,55,55,48,84,244,143,155,154,84,84,49,49,49,49,55,55,49,84,244,143,155,155,84,84,49,49,49,49,55,55,50,84,244,143,155,156,84,84,49,49,49,49,55,55,51,84,244,143,155,157,84,84,49,49,49,49,55,55,52,84,244,143,155,158,84,84,49,49,49,49,55,55,53,84,244,143,155,159,84,84,49,49,49,49,55,55,54,84,244,143,155,160,84,84,49,49,49,49,55,55,55,84,244,143,155,161,84,84,49,49,49,49,55,55,56,84,244,143,155,162,84,84,49,49,49,49,55,55,57,84,244,143,155,163,84,84,49,49,49,49,55,56,48,84,244,143,155,164,84,84,49,49,49,49,55,56,49,84,244,143,155,165,84,84,49,49,49,49,55,56,50,84,244,143,155,166,84,84,49,49,49,49,55,56,51,84,244,143,155,167,84,84,49,49,49,49,55,56,52,84,244,143,155,168,84,84,49,49,49,49,55,56,53,84,244,143,155,169,84,84,49,49,49,49,55,56,54,84,244,143,155,170,84,84,49,49,49,49,55,56,55,84,244,143,155,171,84,84,49,49,49,49,55,56,56,84,244,143,155,172,84,84,49,49,49,49,55,56,57,84,244,143,155,173,84,84,49,49,49,49,55,57,48,84,244,143,155,174,84,84,49,49,49,49,55,57,49,84,244,143,155,175,84,84,49,49,49,49,55,57,50,84,244,143,155,176,84,84,49,49,49,49,55,57,51,84,244,143,155,177,84,84,49,49,49,49,55,57,52,84,244,143,155,178,84,84,49,49,49,49,55,57,53,84,244,143,155,179,84,84,49,49,49,49,55,57,54,84,244,143,155,180,84,84,49,49,49,49,55,57,55,84,244,143,155,181,84,84,49,49,49,49,55,57,56,84,244,143,155,182,84,84,49,49,49,49,55,57,57,84,244,143,155,183,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19971 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19971_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19971_s.txt", Encoding.UTF8);

    public Test19971() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersc5d3e7c5509046d2aa3f8bb095571b82",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,57,54,51,49,49,84,243,179,143,151,84,84,57,57,54,51,49,50,84,243,179,143,152,84,84,57,57,54,51,49,51,84,243,179,143,153,84,84,57,57,54,51,49,52,84,243,179,143,154,84,84,57,57,54,51,49,53,84,243,179,143,155,84,84,57,57,54,51,49,54,84,243,179,143,156,84,84,57,57,54,51,49,55,84,243,179,143,157,84,84,57,57,54,51,49,56,84,243,179,143,158,84,84,57,57,54,51,49,57,84,243,179,143,159,84,84,57,57,54,51,50,48,84,243,179,143,160,84,84,57,57,54,51,50,49,84,243,179,143,161,84,84,57,57,54,51,50,50,84,243,179,143,162,84,84,57,57,54,51,50,51,84,243,179,143,163,84,84,57,57,54,51,50,52,84,243,179,143,164,84,84,57,57,54,51,50,53,84,243,179,143,165,84,84,57,57,54,51,50,54,84,243,179,143,166,84,84,57,57,54,51,50,55,84,243,179,143,167,84,84,57,57,54,51,50,56,84,243,179,143,168,84,84,57,57,54,51,50,57,84,243,179,143,169,84,84,57,57,54,51,51,48,84,243,179,143,170,84,84,57,57,54,51,51,49,84,243,179,143,171,84,84,57,57,54,51,51,50,84,243,179,143,172,84,84,57,57,54,51,51,51,84,243,179,143,173,84,84,57,57,54,51,51,52,84,243,179,143,174,84,84,57,57,54,51,51,53,84,243,179,143,175,84,84,57,57,54,51,51,54,84,243,179,143,176,84,84,57,57,54,51,51,55,84,243,179,143,177,84,84,57,57,54,51,51,56,84,243,179,143,178,84,84,57,57,54,51,51,57,84,243,179,143,179,84,84,57,57,54,51,52,48,84,243,179,143,180,84,84,57,57,54,51,52,49,84,243,179,143,181,84,84,57,57,54,51,52,50,84,243,179,143,182,84,84,57,57,54,51,52,51,84,243,179,143,183,84,84,57,57,54,51,52,52,84,243,179,143,184,84,84,57,57,54,51,52,53,84,243,179,143,185,84,84,57,57,54,51,52,54,84,243,179,143,186,84,84,57,57,54,51,52,55,84,243,179,143,187,84,84,57,57,54,51,52,56,84,243,179,143,188,84,84,57,57,54,51,52,57,84,243,179,143,189,84,84,57,57,54,51,53,48,84,243,179,143,190,84,84,57,57,54,51,53,49,84,243,179,143,191,84,84,57,57,54,51,53,50,84,243,179,144,128,84,84,57,57,54,51,53,51,84,243,179,144,129,84,84,57,57,54,51,53,52,84,243,179,144,130,84,84,57,57,54,51,53,53,84,243,179,144,131,84,84,57,57,54,51,53,54,84,243,179,144,132,84,84,57,57,54,51,53,55,84,243,179,144,133,84,84,57,57,54,51,53,56,84,243,179,144,134,84,84,57,57,54,51,53,57,84,243,179,144,135,84,84,57,57,54,51,54,48,84,243,179,144,136,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20921 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20921_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20921_s.txt", Encoding.UTF8);

    public Test20921() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers9e891393b2624599aedf317812121dcf",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,52,57,54,57,84,244,141,177,137,84,84,49,49,48,52,57,55,48,84,244,141,177,138,84,84,49,49,48,52,57,55,49,84,244,141,177,139,84,84,49,49,48,52,57,55,50,84,244,141,177,140,84,84,49,49,48,52,57,55,51,84,244,141,177,141,84,84,49,49,48,52,57,55,52,84,244,141,177,142,84,84,49,49,48,52,57,55,53,84,244,141,177,143,84,84,49,49,48,52,57,55,54,84,244,141,177,144,84,84,49,49,48,52,57,55,55,84,244,141,177,145,84,84,49,49,48,52,57,55,56,84,244,141,177,146,84,84,49,49,48,52,57,55,57,84,244,141,177,147,84,84,49,49,48,52,57,56,48,84,244,141,177,148,84,84,49,49,48,52,57,56,49,84,244,141,177,149,84,84,49,49,48,52,57,56,50,84,244,141,177,150,84,84,49,49,48,52,57,56,51,84,244,141,177,151,84,84,49,49,48,52,57,56,52,84,244,141,177,152,84,84,49,49,48,52,57,56,53,84,244,141,177,153,84,84,49,49,48,52,57,56,54,84,244,141,177,154,84,84,49,49,48,52,57,56,55,84,244,141,177,155,84,84,49,49,48,52,57,56,56,84,244,141,177,156,84,84,49,49,48,52,57,56,57,84,244,141,177,157,84,84,49,49,48,52,57,57,48,84,244,141,177,158,84,84,49,49,48,52,57,57,49,84,244,141,177,159,84,84,49,49,48,52,57,57,50,84,244,141,177,160,84,84,49,49,48,52,57,57,51,84,244,141,177,161,84,84,49,49,48,52,57,57,52,84,244,141,177,162,84,84,49,49,48,52,57,57,53,84,244,141,177,163,84,84,49,49,48,52,57,57,54,84,244,141,177,164,84,84,49,49,48,52,57,57,55,84,244,141,177,165,84,84,49,49,48,52,57,57,56,84,244,141,177,166,84,84,49,49,48,52,57,57,57,84,244,141,177,167,84,84,49,49,48,53,48,48,48,84,244,141,177,168,84,84,49,49,48,53,48,48,49,84,244,141,177,169,84,84,49,49,48,53,48,48,50,84,244,141,177,170,84,84,49,49,48,53,48,48,51,84,244,141,177,171,84,84,49,49,48,53,48,48,52,84,244,141,177,172,84,84,49,49,48,53,48,48,53,84,244,141,177,173,84,84,49,49,48,53,48,48,54,84,244,141,177,174,84,84,49,49,48,53,48,48,55,84,244,141,177,175,84,84,49,49,48,53,48,48,56,84,244,141,177,176,84,84,49,49,48,53,48,48,57,84,244,141,177,177,84,84,49,49,48,53,48,49,48,84,244,141,177,178,84,84,49,49,48,53,48,49,49,84,244,141,177,179,84,84,49,49,48,53,48,49,50,84,244,141,177,180,84,84,49,49,48,53,48,49,51,84,244,141,177,181,84,84,49,49,48,53,48,49,52,84,244,141,177,182,84,84,49,49,48,53,48,49,53,84,244,141,177,183,84,84,49,49,48,53,48,49,54,84,244,141,177,184,84,84,49,49,48,53,48,49,55,84,244,141,177,185,84,84,49,49,48,53,48,49,56,84,244,141,177,186,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20800 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20800_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20800_s.txt", Encoding.UTF8);

    public Test20800() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers8240a720eb234783afd6a68d24f64161",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,50,49,49,57,84,244,141,132,167,84,84,49,49,48,50,49,50,48,84,244,141,132,168,84,84,49,49,48,50,49,50,49,84,244,141,132,169,84,84,49,49,48,50,49,50,50,84,244,141,132,170,84,84,49,49,48,50,49,50,51,84,244,141,132,171,84,84,49,49,48,50,49,50,52,84,244,141,132,172,84,84,49,49,48,50,49,50,53,84,244,141,132,173,84,84,49,49,48,50,49,50,54,84,244,141,132,174,84,84,49,49,48,50,49,50,55,84,244,141,132,175,84,84,49,49,48,50,49,50,56,84,244,141,132,176,84,84,49,49,48,50,49,50,57,84,244,141,132,177,84,84,49,49,48,50,49,51,48,84,244,141,132,178,84,84,49,49,48,50,49,51,49,84,244,141,132,179,84,84,49,49,48,50,49,51,50,84,244,141,132,180,84,84,49,49,48,50,49,51,51,84,244,141,132,181,84,84,49,49,48,50,49,51,52,84,244,141,132,182,84,84,49,49,48,50,49,51,53,84,244,141,132,183,84,84,49,49,48,50,49,51,54,84,244,141,132,184,84,84,49,49,48,50,49,51,55,84,244,141,132,185,84,84,49,49,48,50,49,51,56,84,244,141,132,186,84,84,49,49,48,50,49,51,57,84,244,141,132,187,84,84,49,49,48,50,49,52,48,84,244,141,132,188,84,84,49,49,48,50,49,52,49,84,244,141,132,189,84,84,49,49,48,50,49,52,50,84,244,141,132,190,84,84,49,49,48,50,49,52,51,84,244,141,132,191,84,84,49,49,48,50,49,52,52,84,244,141,133,128,84,84,49,49,48,50,49,52,53,84,244,141,133,129,84,84,49,49,48,50,49,52,54,84,244,141,133,130,84,84,49,49,48,50,49,52,55,84,244,141,133,131,84,84,49,49,48,50,49,52,56,84,244,141,133,132,84,84,49,49,48,50,49,52,57,84,244,141,133,133,84,84,49,49,48,50,49,53,48,84,244,141,133,134,84,84,49,49,48,50,49,53,49,84,244,141,133,135,84,84,49,49,48,50,49,53,50,84,244,141,133,136,84,84,49,49,48,50,49,53,51,84,244,141,133,137,84,84,49,49,48,50,49,53,52,84,244,141,133,138,84,84,49,49,48,50,49,53,53,84,244,141,133,139,84,84,49,49,48,50,49,53,54,84,244,141,133,140,84,84,49,49,48,50,49,53,55,84,244,141,133,141,84,84,49,49,48,50,49,53,56,84,244,141,133,142,84,84,49,49,48,50,49,53,57,84,244,141,133,143,84,84,49,49,48,50,49,54,48,84,244,141,133,144,84,84,49,49,48,50,49,54,49,84,244,141,133,145,84,84,49,49,48,50,49,54,50,84,244,141,133,146,84,84,49,49,48,50,49,54,51,84,244,141,133,147,84,84,49,49,48,50,49,54,52,84,244,141,133,148,84,84,49,49,48,50,49,54,53,84,244,141,133,149,84,84,49,49,48,50,49,54,54,84,244,141,133,150,84,84,49,49,48,50,49,54,55,84,244,141,133,151,84,84,49,49,48,50,49,54,56,84,244,141,133,152,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19844 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19844_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19844_s.txt", Encoding.UTF8);

    public Test19844() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers7032abc4111d4702bce9d36696a0a648",
                        blob: Encoding.UTF8.GetString(new byte[]{84,54,50,53,48,52,84,239,144,168,84,84,54,50,53,48,53,84,239,144,169,84,84,54,50,53,48,54,84,239,144,170,84,84,54,50,53,48,55,84,239,144,171,84,84,54,50,53,48,56,84,239,144,172,84,84,54,50,53,48,57,84,239,144,173,84,84,54,50,53,49,48,84,239,144,174,84,84,54,50,53,49,49,84,239,144,175,84,84,54,50,53,49,50,84,239,144,176,84,84,54,50,53,49,51,84,239,144,177,84,84,54,50,53,49,52,84,239,144,178,84,84,54,50,53,49,53,84,239,144,179,84,84,54,50,53,49,54,84,239,144,180,84,84,54,50,53,49,55,84,239,144,181,84,84,54,50,53,49,56,84,239,144,182,84,84,54,50,53,49,57,84,239,144,183,84,84,54,50,53,50,48,84,239,144,184,84,84,54,50,53,50,49,84,239,144,185,84,84,54,50,53,50,50,84,239,144,186,84,84,54,50,53,50,51,84,239,144,187,84,84,54,50,53,50,52,84,239,144,188,84,84,54,50,53,50,53,84,239,144,189,84,84,54,50,53,50,54,84,239,144,190,84,84,54,50,53,50,55,84,239,144,191,84,84,54,50,53,50,57,84,239,145,129,84,84,54,50,53,52,49,84,239,145,141,84,84,54,50,53,52,51,84,239,145,143,84,84,54,50,53,52,52,84,239,145,144,84,84,54,50,53,53,55,84,239,145,157,84,84,54,50,53,57,51,84,239,146,129,84,84,54,50,54,48,53,84,239,146,141,84,84,54,50,54,48,55,84,239,146,143,84,84,54,50,54,48,56,84,239,146,144,84,84,54,50,54,50,49,84,239,146,157,84,84,54,50,54,53,55,84,239,147,129,84,84,54,50,54,54,57,84,239,147,141,84,84,54,50,54,55,49,84,239,147,143,84,84,54,50,54,55,50,84,239,147,144,84,84,54,50,54,56,53,84,239,147,157,84,84,54,50,55,50,49,84,239,148,129,84,84,54,50,55,51,51,84,239,148,141,84,84,54,50,55,51,53,84,239,148,143,84,84,54,50,55,51,54,84,239,148,144,84,84,54,50,55,52,57,84,239,148,157,84,84,54,50,55,56,53,84,239,149,129,84,84,54,50,55,57,55,84,239,149,141,84,84,54,50,55,57,57,84,239,149,143,84,84,54,50,56,48,48,84,239,149,144,84,84,54,50,56,49,51,84,239,149,157,84,84,54,50,56,52,57,84,239,150,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20640 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20640_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20640_s.txt", Encoding.UTF8);

    public Test20640() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers5f5b393ed8e742338d6031fb2e225092",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,55,56,50,53,48,84,244,135,143,170,84,84,49,48,55,56,50,53,49,84,244,135,143,171,84,84,49,48,55,56,50,53,50,84,244,135,143,172,84,84,49,48,55,56,50,53,51,84,244,135,143,173,84,84,49,48,55,56,50,53,52,84,244,135,143,174,84,84,49,48,55,56,50,53,53,84,244,135,143,175,84,84,49,48,55,56,50,53,54,84,244,135,143,176,84,84,49,48,55,56,50,53,55,84,244,135,143,177,84,84,49,48,55,56,50,53,56,84,244,135,143,178,84,84,49,48,55,56,50,53,57,84,244,135,143,179,84,84,49,48,55,56,50,54,48,84,244,135,143,180,84,84,49,48,55,56,50,54,49,84,244,135,143,181,84,84,49,48,55,56,50,54,50,84,244,135,143,182,84,84,49,48,55,56,50,54,51,84,244,135,143,183,84,84,49,48,55,56,50,54,52,84,244,135,143,184,84,84,49,48,55,56,50,54,53,84,244,135,143,185,84,84,49,48,55,56,50,54,54,84,244,135,143,186,84,84,49,48,55,56,50,54,55,84,244,135,143,187,84,84,49,48,55,56,50,54,56,84,244,135,143,188,84,84,49,48,55,56,50,54,57,84,244,135,143,189,84,84,49,48,55,56,50,55,48,84,244,135,143,190,84,84,49,48,55,56,50,55,49,84,244,135,143,191,84,84,49,48,55,56,50,55,50,84,244,135,144,128,84,84,49,48,55,56,50,55,51,84,244,135,144,129,84,84,49,48,55,56,50,55,52,84,244,135,144,130,84,84,49,48,55,56,50,55,53,84,244,135,144,131,84,84,49,48,55,56,50,55,54,84,244,135,144,132,84,84,49,48,55,56,50,55,55,84,244,135,144,133,84,84,49,48,55,56,50,55,56,84,244,135,144,134,84,84,49,48,55,56,50,55,57,84,244,135,144,135,84,84,49,48,55,56,50,56,48,84,244,135,144,136,84,84,49,48,55,56,50,56,49,84,244,135,144,137,84,84,49,48,55,56,50,56,50,84,244,135,144,138,84,84,49,48,55,56,50,56,51,84,244,135,144,139,84,84,49,48,55,56,50,56,52,84,244,135,144,140,84,84,49,48,55,56,50,56,53,84,244,135,144,141,84,84,49,48,55,56,50,56,54,84,244,135,144,142,84,84,49,48,55,56,50,56,55,84,244,135,144,143,84,84,49,48,55,56,50,56,56,84,244,135,144,144,84,84,49,48,55,56,50,56,57,84,244,135,144,145,84,84,49,48,55,56,50,57,48,84,244,135,144,146,84,84,49,48,55,56,50,57,49,84,244,135,144,147,84,84,49,48,55,56,50,57,50,84,244,135,144,148,84,84,49,48,55,56,50,57,51,84,244,135,144,149,84,84,49,48,55,56,50,57,52,84,244,135,144,150,84,84,49,48,55,56,50,57,53,84,244,135,144,151,84,84,49,48,55,56,50,57,54,84,244,135,144,152,84,84,49,48,55,56,50,57,55,84,244,135,144,153,84,84,49,48,55,56,50,57,56,84,244,135,144,154,84,84,49,48,55,56,50,57,57,84,244,135,144,155,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19913 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19913_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19913_s.txt", Encoding.UTF8);

    public Test19913() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersf0a96ab3064046f8a2fc77e6e3ebae9e",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,56,55,53,57,57,84,243,177,135,143,84,84,57,56,55,54,48,48,84,243,177,135,144,84,84,57,56,55,54,49,51,84,243,177,135,157,84,84,57,56,55,54,52,57,84,243,177,136,129,84,84,57,56,55,54,54,49,84,243,177,136,141,84,84,57,56,55,54,54,51,84,243,177,136,143,84,84,57,56,55,54,54,52,84,243,177,136,144,84,84,57,56,55,54,55,55,84,243,177,136,157,84,84,57,56,55,55,49,51,84,243,177,137,129,84,84,57,56,55,55,50,53,84,243,177,137,141,84,84,57,56,55,55,50,55,84,243,177,137,143,84,84,57,56,55,55,50,56,84,243,177,137,144,84,84,57,56,55,55,52,49,84,243,177,137,157,84,84,57,56,55,55,55,55,84,243,177,138,129,84,84,57,56,55,55,56,57,84,243,177,138,141,84,84,57,56,55,55,57,49,84,243,177,138,143,84,84,57,56,55,55,57,50,84,243,177,138,144,84,84,57,56,55,56,48,53,84,243,177,138,157,84,84,57,56,55,56,52,49,84,243,177,139,129,84,84,57,56,55,56,53,51,84,243,177,139,141,84,84,57,56,55,56,53,53,84,243,177,139,143,84,84,57,56,55,56,53,54,84,243,177,139,144,84,84,57,56,55,56,54,57,84,243,177,139,157,84,84,57,56,55,57,48,53,84,243,177,140,129,84,84,57,56,55,57,49,55,84,243,177,140,141,84,84,57,56,55,57,49,57,84,243,177,140,143,84,84,57,56,55,57,50,48,84,243,177,140,144,84,84,57,56,55,57,51,51,84,243,177,140,157,84,84,57,56,55,57,54,56,84,243,177,141,128,84,84,57,56,55,57,54,57,84,243,177,141,129,84,84,57,56,55,57,55,48,84,243,177,141,130,84,84,57,56,55,57,55,49,84,243,177,141,131,84,84,57,56,55,57,55,50,84,243,177,141,132,84,84,57,56,55,57,55,51,84,243,177,141,133,84,84,57,56,55,57,55,52,84,243,177,141,134,84,84,57,56,55,57,55,53,84,243,177,141,135,84,84,57,56,55,57,55,54,84,243,177,141,136,84,84,57,56,55,57,55,55,84,243,177,141,137,84,84,57,56,55,57,55,56,84,243,177,141,138,84,84,57,56,55,57,55,57,84,243,177,141,139,84,84,57,56,55,57,56,48,84,243,177,141,140,84,84,57,56,55,57,56,49,84,243,177,141,141,84,84,57,56,55,57,56,50,84,243,177,141,142,84,84,57,56,55,57,56,51,84,243,177,141,143,84,84,57,56,55,57,56,52,84,243,177,141,144,84,84,57,56,55,57,56,53,84,243,177,141,145,84,84,57,56,55,57,56,54,84,243,177,141,146,84,84,57,56,55,57,56,55,84,243,177,141,147,84,84,57,56,55,57,56,56,84,243,177,141,148,84,84,57,56,55,57,56,57,84,243,177,141,149,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20455 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20455_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20455_s.txt", Encoding.UTF8);

    public Test20455() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersee5ddc6232b847869028904d3d06a0f3",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,53,55,50,56,84,244,129,175,176,84,84,49,48,53,53,55,50,57,84,244,129,175,177,84,84,49,48,53,53,55,51,48,84,244,129,175,178,84,84,49,48,53,53,55,51,49,84,244,129,175,179,84,84,49,48,53,53,55,51,50,84,244,129,175,180,84,84,49,48,53,53,55,51,51,84,244,129,175,181,84,84,49,48,53,53,55,51,52,84,244,129,175,182,84,84,49,48,53,53,55,51,53,84,244,129,175,183,84,84,49,48,53,53,55,51,54,84,244,129,175,184,84,84,49,48,53,53,55,51,55,84,244,129,175,185,84,84,49,48,53,53,55,51,56,84,244,129,175,186,84,84,49,48,53,53,55,51,57,84,244,129,175,187,84,84,49,48,53,53,55,52,48,84,244,129,175,188,84,84,49,48,53,53,55,52,49,84,244,129,175,189,84,84,49,48,53,53,55,52,50,84,244,129,175,190,84,84,49,48,53,53,55,52,51,84,244,129,175,191,84,84,49,48,53,53,55,52,52,84,244,129,176,128,84,84,49,48,53,53,55,52,53,84,244,129,176,129,84,84,49,48,53,53,55,52,54,84,244,129,176,130,84,84,49,48,53,53,55,52,55,84,244,129,176,131,84,84,49,48,53,53,55,52,56,84,244,129,176,132,84,84,49,48,53,53,55,52,57,84,244,129,176,133,84,84,49,48,53,53,55,53,48,84,244,129,176,134,84,84,49,48,53,53,55,53,49,84,244,129,176,135,84,84,49,48,53,53,55,53,50,84,244,129,176,136,84,84,49,48,53,53,55,53,51,84,244,129,176,137,84,84,49,48,53,53,55,53,52,84,244,129,176,138,84,84,49,48,53,53,55,53,53,84,244,129,176,139,84,84,49,48,53,53,55,53,54,84,244,129,176,140,84,84,49,48,53,53,55,53,55,84,244,129,176,141,84,84,49,48,53,53,55,53,56,84,244,129,176,142,84,84,49,48,53,53,55,53,57,84,244,129,176,143,84,84,49,48,53,53,55,54,48,84,244,129,176,144,84,84,49,48,53,53,55,54,49,84,244,129,176,145,84,84,49,48,53,53,55,54,50,84,244,129,176,146,84,84,49,48,53,53,55,54,51,84,244,129,176,147,84,84,49,48,53,53,55,54,52,84,244,129,176,148,84,84,49,48,53,53,55,54,53,84,244,129,176,149,84,84,49,48,53,53,55,54,54,84,244,129,176,150,84,84,49,48,53,53,55,54,55,84,244,129,176,151,84,84,49,48,53,53,55,54,56,84,244,129,176,152,84,84,49,48,53,53,55,54,57,84,244,129,176,153,84,84,49,48,53,53,55,55,48,84,244,129,176,154,84,84,49,48,53,53,55,55,49,84,244,129,176,155,84,84,49,48,53,53,55,55,50,84,244,129,176,156,84,84,49,48,53,53,55,55,51,84,244,129,176,157,84,84,49,48,53,53,55,55,52,84,244,129,176,158,84,84,49,48,53,53,55,55,53,84,244,129,176,159,84,84,49,48,53,53,55,55,54,84,244,129,176,160,84,84,49,48,53,53,55,55,55,84,244,129,176,161,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20193 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20193_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20193_s.txt", Encoding.UTF8);

    public Test20193() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers2b6cdd6684eb4500abcaa682adc323b7",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,51,49,51,48,57,84,243,187,178,141,84,84,49,48,51,49,51,49,49,84,243,187,178,143,84,84,49,48,51,49,51,49,50,84,243,187,178,144,84,84,49,48,51,49,51,50,53,84,243,187,178,157,84,84,49,48,51,49,51,54,49,84,243,187,179,129,84,84,49,48,51,49,51,55,51,84,243,187,179,141,84,84,49,48,51,49,51,55,53,84,243,187,179,143,84,84,49,48,51,49,51,55,54,84,243,187,179,144,84,84,49,48,51,49,51,56,57,84,243,187,179,157,84,84,49,48,51,49,52,50,53,84,243,187,180,129,84,84,49,48,51,49,52,51,55,84,243,187,180,141,84,84,49,48,51,49,52,51,57,84,243,187,180,143,84,84,49,48,51,49,52,52,48,84,243,187,180,144,84,84,49,48,51,49,52,53,51,84,243,187,180,157,84,84,49,48,51,49,52,56,57,84,243,187,181,129,84,84,49,48,51,49,53,48,49,84,243,187,181,141,84,84,49,48,51,49,53,48,51,84,243,187,181,143,84,84,49,48,51,49,53,48,52,84,243,187,181,144,84,84,49,48,51,49,53,49,55,84,243,187,181,157,84,84,49,48,51,49,53,53,51,84,243,187,182,129,84,84,49,48,51,49,53,54,53,84,243,187,182,141,84,84,49,48,51,49,53,54,55,84,243,187,182,143,84,84,49,48,51,49,53,54,56,84,243,187,182,144,84,84,49,48,51,49,53,56,49,84,243,187,182,157,84,84,49,48,51,49,54,49,55,84,243,187,183,129,84,84,49,48,51,49,54,50,57,84,243,187,183,141,84,84,49,48,51,49,54,51,49,84,243,187,183,143,84,84,49,48,51,49,54,51,50,84,243,187,183,144,84,84,49,48,51,49,54,52,53,84,243,187,183,157,84,84,49,48,51,49,54,56,49,84,243,187,184,129,84,84,49,48,51,49,54,57,51,84,243,187,184,141,84,84,49,48,51,49,54,57,53,84,243,187,184,143,84,84,49,48,51,49,54,57,54,84,243,187,184,144,84,84,49,48,51,49,55,48,57,84,243,187,184,157,84,84,49,48,51,49,55,52,53,84,243,187,185,129,84,84,49,48,51,49,55,53,55,84,243,187,185,141,84,84,49,48,51,49,55,53,57,84,243,187,185,143,84,84,49,48,51,49,55,54,48,84,243,187,185,144,84,84,49,48,51,49,55,55,51,84,243,187,185,157,84,84,49,48,51,49,56,48,57,84,243,187,186,129,84,84,49,48,51,49,56,50,49,84,243,187,186,141,84,84,49,48,51,49,56,50,51,84,243,187,186,143,84,84,49,48,51,49,56,50,52,84,243,187,186,144,84,84,49,48,51,49,56,51,55,84,243,187,186,157,84,84,49,48,51,49,56,55,51,84,243,187,187,129,84,84,49,48,51,49,56,56,53,84,243,187,187,141,84,84,49,48,51,49,56,56,55,84,243,187,187,143,84,84,49,48,51,49,56,56,56,84,243,187,187,144,84,84,49,48,51,49,57,48,49,84,243,187,187,157,84,84,49,48,51,49,57,51,55,84,243,187,188,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20134 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20134_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20134_s.txt", Encoding.UTF8);

    public Test20134() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers02552a2396c44255a61dd19b9714b3b6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,50,49,56,48,53,84,243,185,157,173,84,84,49,48,50,49,56,48,54,84,243,185,157,174,84,84,49,48,50,49,56,48,55,84,243,185,157,175,84,84,49,48,50,49,56,48,56,84,243,185,157,176,84,84,49,48,50,49,56,48,57,84,243,185,157,177,84,84,49,48,50,49,56,49,48,84,243,185,157,178,84,84,49,48,50,49,56,49,49,84,243,185,157,179,84,84,49,48,50,49,56,49,50,84,243,185,157,180,84,84,49,48,50,49,56,49,51,84,243,185,157,181,84,84,49,48,50,49,56,49,52,84,243,185,157,182,84,84,49,48,50,49,56,49,53,84,243,185,157,183,84,84,49,48,50,49,56,49,54,84,243,185,157,184,84,84,49,48,50,49,56,49,55,84,243,185,157,185,84,84,49,48,50,49,56,49,56,84,243,185,157,186,84,84,49,48,50,49,56,49,57,84,243,185,157,187,84,84,49,48,50,49,56,50,48,84,243,185,157,188,84,84,49,48,50,49,56,50,49,84,243,185,157,189,84,84,49,48,50,49,56,50,50,84,243,185,157,190,84,84,49,48,50,49,56,50,51,84,243,185,157,191,84,84,49,48,50,49,56,50,53,84,243,185,158,129,84,84,49,48,50,49,56,51,55,84,243,185,158,141,84,84,49,48,50,49,56,51,57,84,243,185,158,143,84,84,49,48,50,49,56,52,48,84,243,185,158,144,84,84,49,48,50,49,56,53,51,84,243,185,158,157,84,84,49,48,50,49,56,56,57,84,243,185,159,129,84,84,49,48,50,49,57,48,49,84,243,185,159,141,84,84,49,48,50,49,57,48,51,84,243,185,159,143,84,84,49,48,50,49,57,48,52,84,243,185,159,144,84,84,49,48,50,49,57,49,55,84,243,185,159,157,84,84,49,48,50,49,57,53,51,84,243,185,160,129,84,84,49,48,50,49,57,54,53,84,243,185,160,141,84,84,49,48,50,49,57,54,55,84,243,185,160,143,84,84,49,48,50,49,57,54,56,84,243,185,160,144,84,84,49,48,50,49,57,56,49,84,243,185,160,157,84,84,49,48,50,50,48,49,55,84,243,185,161,129,84,84,49,48,50,50,48,50,57,84,243,185,161,141,84,84,49,48,50,50,48,51,49,84,243,185,161,143,84,84,49,48,50,50,48,51,50,84,243,185,161,144,84,84,49,48,50,50,48,52,53,84,243,185,161,157,84,84,49,48,50,50,48,56,49,84,243,185,162,129,84,84,49,48,50,50,48,57,51,84,243,185,162,141,84,84,49,48,50,50,48,57,53,84,243,185,162,143,84,84,49,48,50,50,48,57,54,84,243,185,162,144,84,84,49,48,50,50,49,48,57,84,243,185,162,157,84,84,49,48,50,50,49,52,53,84,243,185,163,129,84,84,49,48,50,50,49,53,55,84,243,185,163,141,84,84,49,48,50,50,49,53,57,84,243,185,163,143,84,84,49,48,50,50,49,54,48,84,243,185,163,144,84,84,49,48,50,50,49,55,51,84,243,185,163,157,84,84,49,48,50,50,50,48,57,84,243,185,164,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21118 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21118_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21118_s.txt", Encoding.UTF8);

    public Test21118() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers56d1c908d8f44b69abe6817b1847a0f6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,51,49,48,48,84,244,143,176,140,84,84,49,49,49,51,49,48,49,84,244,143,176,141,84,84,49,49,49,51,49,48,50,84,244,143,176,142,84,84,49,49,49,51,49,48,51,84,244,143,176,143,84,84,49,49,49,51,49,48,52,84,244,143,176,144,84,84,49,49,49,51,49,48,53,84,244,143,176,145,84,84,49,49,49,51,49,48,54,84,244,143,176,146,84,84,49,49,49,51,49,48,55,84,244,143,176,147,84,84,49,49,49,51,49,48,56,84,244,143,176,148,84,84,49,49,49,51,49,48,57,84,244,143,176,149,84,84,49,49,49,51,49,49,48,84,244,143,176,150,84,84,49,49,49,51,49,49,49,84,244,143,176,151,84,84,49,49,49,51,49,49,50,84,244,143,176,152,84,84,49,49,49,51,49,49,51,84,244,143,176,153,84,84,49,49,49,51,49,49,52,84,244,143,176,154,84,84,49,49,49,51,49,49,53,84,244,143,176,155,84,84,49,49,49,51,49,49,54,84,244,143,176,156,84,84,49,49,49,51,49,49,55,84,244,143,176,157,84,84,49,49,49,51,49,49,56,84,244,143,176,158,84,84,49,49,49,51,49,49,57,84,244,143,176,159,84,84,49,49,49,51,49,50,48,84,244,143,176,160,84,84,49,49,49,51,49,50,49,84,244,143,176,161,84,84,49,49,49,51,49,50,50,84,244,143,176,162,84,84,49,49,49,51,49,50,51,84,244,143,176,163,84,84,49,49,49,51,49,50,52,84,244,143,176,164,84,84,49,49,49,51,49,50,53,84,244,143,176,165,84,84,49,49,49,51,49,50,54,84,244,143,176,166,84,84,49,49,49,51,49,50,55,84,244,143,176,167,84,84,49,49,49,51,49,50,56,84,244,143,176,168,84,84,49,49,49,51,49,50,57,84,244,143,176,169,84,84,49,49,49,51,49,51,48,84,244,143,176,170,84,84,49,49,49,51,49,51,49,84,244,143,176,171,84,84,49,49,49,51,49,51,50,84,244,143,176,172,84,84,49,49,49,51,49,51,51,84,244,143,176,173,84,84,49,49,49,51,49,51,52,84,244,143,176,174,84,84,49,49,49,51,49,51,53,84,244,143,176,175,84,84,49,49,49,51,49,51,54,84,244,143,176,176,84,84,49,49,49,51,49,51,55,84,244,143,176,177,84,84,49,49,49,51,49,51,56,84,244,143,176,178,84,84,49,49,49,51,49,51,57,84,244,143,176,179,84,84,49,49,49,51,49,52,48,84,244,143,176,180,84,84,49,49,49,51,49,52,49,84,244,143,176,181,84,84,49,49,49,51,49,52,50,84,244,143,176,182,84,84,49,49,49,51,49,52,51,84,244,143,176,183,84,84,49,49,49,51,49,52,52,84,244,143,176,184,84,84,49,49,49,51,49,52,53,84,244,143,176,185,84,84,49,49,49,51,49,52,54,84,244,143,176,186,84,84,49,49,49,51,49,52,55,84,244,143,176,187,84,84,49,49,49,51,49,52,56,84,244,143,176,188,84,84,49,49,49,51,49,52,57,84,244,143,176,189,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20866 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20866_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20866_s.txt", Encoding.UTF8);

    public Test20866() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersdd41d3a5bb7f42709f7cec587f1a204a",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,51,54,54,57,84,244,141,156,181,84,84,49,49,48,51,54,55,48,84,244,141,156,182,84,84,49,49,48,51,54,55,49,84,244,141,156,183,84,84,49,49,48,51,54,55,50,84,244,141,156,184,84,84,49,49,48,51,54,55,51,84,244,141,156,185,84,84,49,49,48,51,54,55,52,84,244,141,156,186,84,84,49,49,48,51,54,55,53,84,244,141,156,187,84,84,49,49,48,51,54,55,54,84,244,141,156,188,84,84,49,49,48,51,54,55,55,84,244,141,156,189,84,84,49,49,48,51,54,55,56,84,244,141,156,190,84,84,49,49,48,51,54,55,57,84,244,141,156,191,84,84,49,49,48,51,54,56,48,84,244,141,157,128,84,84,49,49,48,51,54,56,49,84,244,141,157,129,84,84,49,49,48,51,54,56,50,84,244,141,157,130,84,84,49,49,48,51,54,56,51,84,244,141,157,131,84,84,49,49,48,51,54,56,52,84,244,141,157,132,84,84,49,49,48,51,54,56,53,84,244,141,157,133,84,84,49,49,48,51,54,56,54,84,244,141,157,134,84,84,49,49,48,51,54,56,55,84,244,141,157,135,84,84,49,49,48,51,54,56,56,84,244,141,157,136,84,84,49,49,48,51,54,56,57,84,244,141,157,137,84,84,49,49,48,51,54,57,48,84,244,141,157,138,84,84,49,49,48,51,54,57,49,84,244,141,157,139,84,84,49,49,48,51,54,57,50,84,244,141,157,140,84,84,49,49,48,51,54,57,51,84,244,141,157,141,84,84,49,49,48,51,54,57,52,84,244,141,157,142,84,84,49,49,48,51,54,57,53,84,244,141,157,143,84,84,49,49,48,51,54,57,54,84,244,141,157,144,84,84,49,49,48,51,54,57,55,84,244,141,157,145,84,84,49,49,48,51,54,57,56,84,244,141,157,146,84,84,49,49,48,51,54,57,57,84,244,141,157,147,84,84,49,49,48,51,55,48,48,84,244,141,157,148,84,84,49,49,48,51,55,48,49,84,244,141,157,149,84,84,49,49,48,51,55,48,50,84,244,141,157,150,84,84,49,49,48,51,55,48,51,84,244,141,157,151,84,84,49,49,48,51,55,48,52,84,244,141,157,152,84,84,49,49,48,51,55,48,53,84,244,141,157,153,84,84,49,49,48,51,55,48,54,84,244,141,157,154,84,84,49,49,48,51,55,48,55,84,244,141,157,155,84,84,49,49,48,51,55,48,56,84,244,141,157,156,84,84,49,49,48,51,55,48,57,84,244,141,157,157,84,84,49,49,48,51,55,49,48,84,244,141,157,158,84,84,49,49,48,51,55,49,49,84,244,141,157,159,84,84,49,49,48,51,55,49,50,84,244,141,157,160,84,84,49,49,48,51,55,49,51,84,244,141,157,161,84,84,49,49,48,51,55,49,52,84,244,141,157,162,84,84,49,49,48,51,55,49,53,84,244,141,157,163,84,84,49,49,48,51,55,49,54,84,244,141,157,164,84,84,49,49,48,51,55,49,55,84,244,141,157,165,84,84,49,49,48,51,55,49,56,84,244,141,157,166,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20707 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20707_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20707_s.txt", Encoding.UTF8);

    public Test20707() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers0bb7ae45edef4594997d97499d26b519",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,56,56,55,54,57,84,244,137,180,129,84,84,49,48,56,56,55,56,49,84,244,137,180,141,84,84,49,48,56,56,55,56,51,84,244,137,180,143,84,84,49,48,56,56,55,56,52,84,244,137,180,144,84,84,49,48,56,56,55,57,55,84,244,137,180,157,84,84,49,48,56,56,56,51,51,84,244,137,181,129,84,84,49,48,56,56,56,52,53,84,244,137,181,141,84,84,49,48,56,56,56,52,55,84,244,137,181,143,84,84,49,48,56,56,56,52,56,84,244,137,181,144,84,84,49,48,56,56,56,54,49,84,244,137,181,157,84,84,49,48,56,56,56,57,55,84,244,137,182,129,84,84,49,48,56,56,57,48,57,84,244,137,182,141,84,84,49,48,56,56,57,49,49,84,244,137,182,143,84,84,49,48,56,56,57,49,50,84,244,137,182,144,84,84,49,48,56,56,57,50,53,84,244,137,182,157,84,84,49,48,56,56,57,54,49,84,244,137,183,129,84,84,49,48,56,56,57,55,51,84,244,137,183,141,84,84,49,48,56,56,57,55,53,84,244,137,183,143,84,84,49,48,56,56,57,55,54,84,244,137,183,144,84,84,49,48,56,56,57,56,57,84,244,137,183,157,84,84,49,48,56,57,48,50,53,84,244,137,184,129,84,84,49,48,56,57,48,51,55,84,244,137,184,141,84,84,49,48,56,57,48,51,57,84,244,137,184,143,84,84,49,48,56,57,48,52,48,84,244,137,184,144,84,84,49,48,56,57,48,53,51,84,244,137,184,157,84,84,49,48,56,57,48,56,57,84,244,137,185,129,84,84,49,48,56,57,49,48,49,84,244,137,185,141,84,84,49,48,56,57,49,48,51,84,244,137,185,143,84,84,49,48,56,57,49,48,52,84,244,137,185,144,84,84,49,48,56,57,49,49,55,84,244,137,185,157,84,84,49,48,56,57,49,53,51,84,244,137,186,129,84,84,49,48,56,57,49,54,53,84,244,137,186,141,84,84,49,48,56,57,49,54,55,84,244,137,186,143,84,84,49,48,56,57,49,54,56,84,244,137,186,144,84,84,49,48,56,57,49,56,49,84,244,137,186,157,84,84,49,48,56,57,50,49,55,84,244,137,187,129,84,84,49,48,56,57,50,50,57,84,244,137,187,141,84,84,49,48,56,57,50,51,49,84,244,137,187,143,84,84,49,48,56,57,50,51,50,84,244,137,187,144,84,84,49,48,56,57,50,52,53,84,244,137,187,157,84,84,49,48,56,57,50,56,49,84,244,137,188,129,84,84,49,48,56,57,50,57,51,84,244,137,188,141,84,84,49,48,56,57,50,57,53,84,244,137,188,143,84,84,49,48,56,57,50,57,54,84,244,137,188,144,84,84,49,48,56,57,51,48,57,84,244,137,188,157,84,84,49,48,56,57,51,52,53,84,244,137,189,129,84,84,49,48,56,57,51,53,55,84,244,137,189,141,84,84,49,48,56,57,51,53,57,84,244,137,189,143,84,84,49,48,56,57,51,54,48,84,244,137,189,144,84,84,49,48,56,57,51,55,51,84,244,137,189,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20362 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20362_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20362_s.txt", Encoding.UTF8);

    public Test20362() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers319eca44915441a6b60a6025f5eab2bd",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,51,53,50,56,84,244,129,141,152,84,84,49,48,53,51,53,50,57,84,244,129,141,153,84,84,49,48,53,51,53,51,48,84,244,129,141,154,84,84,49,48,53,51,53,51,49,84,244,129,141,155,84,84,49,48,53,51,53,51,50,84,244,129,141,156,84,84,49,48,53,51,53,51,51,84,244,129,141,157,84,84,49,48,53,51,53,51,52,84,244,129,141,158,84,84,49,48,53,51,53,51,53,84,244,129,141,159,84,84,49,48,53,51,53,51,54,84,244,129,141,160,84,84,49,48,53,51,53,51,55,84,244,129,141,161,84,84,49,48,53,51,53,51,56,84,244,129,141,162,84,84,49,48,53,51,53,51,57,84,244,129,141,163,84,84,49,48,53,51,53,52,48,84,244,129,141,164,84,84,49,48,53,51,53,52,49,84,244,129,141,165,84,84,49,48,53,51,53,52,50,84,244,129,141,166,84,84,49,48,53,51,53,52,51,84,244,129,141,167,84,84,49,48,53,51,53,52,52,84,244,129,141,168,84,84,49,48,53,51,53,52,53,84,244,129,141,169,84,84,49,48,53,51,53,52,54,84,244,129,141,170,84,84,49,48,53,51,53,52,55,84,244,129,141,171,84,84,49,48,53,51,53,52,56,84,244,129,141,172,84,84,49,48,53,51,53,52,57,84,244,129,141,173,84,84,49,48,53,51,53,53,48,84,244,129,141,174,84,84,49,48,53,51,53,53,49,84,244,129,141,175,84,84,49,48,53,51,53,53,50,84,244,129,141,176,84,84,49,48,53,51,53,53,51,84,244,129,141,177,84,84,49,48,53,51,53,53,52,84,244,129,141,178,84,84,49,48,53,51,53,53,53,84,244,129,141,179,84,84,49,48,53,51,53,53,54,84,244,129,141,180,84,84,49,48,53,51,53,53,55,84,244,129,141,181,84,84,49,48,53,51,53,53,56,84,244,129,141,182,84,84,49,48,53,51,53,53,57,84,244,129,141,183,84,84,49,48,53,51,53,54,48,84,244,129,141,184,84,84,49,48,53,51,53,54,49,84,244,129,141,185,84,84,49,48,53,51,53,54,50,84,244,129,141,186,84,84,49,48,53,51,53,54,51,84,244,129,141,187,84,84,49,48,53,51,53,54,52,84,244,129,141,188,84,84,49,48,53,51,53,54,53,84,244,129,141,189,84,84,49,48,53,51,53,54,54,84,244,129,141,190,84,84,49,48,53,51,53,54,55,84,244,129,141,191,84,84,49,48,53,51,53,54,56,84,244,129,142,128,84,84,49,48,53,51,53,54,57,84,244,129,142,129,84,84,49,48,53,51,53,55,48,84,244,129,142,130,84,84,49,48,53,51,53,55,49,84,244,129,142,131,84,84,49,48,53,51,53,55,50,84,244,129,142,132,84,84,49,48,53,51,53,55,51,84,244,129,142,133,84,84,49,48,53,51,53,55,52,84,244,129,142,134,84,84,49,48,53,51,53,55,53,84,244,129,142,135,84,84,49,48,53,51,53,55,54,84,244,129,142,136,84,84,49,48,53,51,53,55,55,84,244,129,142,137,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20802 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20802_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20802_s.txt", Encoding.UTF8);

    public Test20802() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers8240a720eb234783afd6a68d24f64161",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,50,49,54,57,84,244,141,133,153,84,84,49,49,48,50,49,55,48,84,244,141,133,154,84,84,49,49,48,50,49,55,49,84,244,141,133,155,84,84,49,49,48,50,49,55,50,84,244,141,133,156,84,84,49,49,48,50,49,55,51,84,244,141,133,157,84,84,49,49,48,50,49,55,52,84,244,141,133,158,84,84,49,49,48,50,49,55,53,84,244,141,133,159,84,84,49,49,48,50,49,55,54,84,244,141,133,160,84,84,49,49,48,50,49,55,55,84,244,141,133,161,84,84,49,49,48,50,49,55,56,84,244,141,133,162,84,84,49,49,48,50,49,55,57,84,244,141,133,163,84,84,49,49,48,50,49,56,48,84,244,141,133,164,84,84,49,49,48,50,49,56,49,84,244,141,133,165,84,84,49,49,48,50,49,56,50,84,244,141,133,166,84,84,49,49,48,50,49,56,51,84,244,141,133,167,84,84,49,49,48,50,49,56,52,84,244,141,133,168,84,84,49,49,48,50,49,56,53,84,244,141,133,169,84,84,49,49,48,50,49,56,54,84,244,141,133,170,84,84,49,49,48,50,49,56,55,84,244,141,133,171,84,84,49,49,48,50,49,56,56,84,244,141,133,172,84,84,49,49,48,50,49,56,57,84,244,141,133,173,84,84,49,49,48,50,49,57,48,84,244,141,133,174,84,84,49,49,48,50,49,57,49,84,244,141,133,175,84,84,49,49,48,50,49,57,50,84,244,141,133,176,84,84,49,49,48,50,49,57,51,84,244,141,133,177,84,84,49,49,48,50,49,57,52,84,244,141,133,178,84,84,49,49,48,50,49,57,53,84,244,141,133,179,84,84,49,49,48,50,49,57,54,84,244,141,133,180,84,84,49,49,48,50,49,57,55,84,244,141,133,181,84,84,49,49,48,50,49,57,56,84,244,141,133,182,84,84,49,49,48,50,49,57,57,84,244,141,133,183,84,84,49,49,48,50,50,48,48,84,244,141,133,184,84,84,49,49,48,50,50,48,49,84,244,141,133,185,84,84,49,49,48,50,50,48,50,84,244,141,133,186,84,84,49,49,48,50,50,48,51,84,244,141,133,187,84,84,49,49,48,50,50,48,52,84,244,141,133,188,84,84,49,49,48,50,50,48,53,84,244,141,133,189,84,84,49,49,48,50,50,48,54,84,244,141,133,190,84,84,49,49,48,50,50,48,55,84,244,141,133,191,84,84,49,49,48,50,50,48,56,84,244,141,134,128,84,84,49,49,48,50,50,48,57,84,244,141,134,129,84,84,49,49,48,50,50,49,48,84,244,141,134,130,84,84,49,49,48,50,50,49,49,84,244,141,134,131,84,84,49,49,48,50,50,49,50,84,244,141,134,132,84,84,49,49,48,50,50,49,51,84,244,141,134,133,84,84,49,49,48,50,50,49,52,84,244,141,134,134,84,84,49,49,48,50,50,49,53,84,244,141,134,135,84,84,49,49,48,50,50,49,54,84,244,141,134,136,84,84,49,49,48,50,50,49,55,84,244,141,134,137,84,84,49,49,48,50,50,49,56,84,244,141,134,138,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20040 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20040_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20040_s.txt", Encoding.UTF8);

    public Test20040() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers612d6939acd44cdbbba30cffbd18a713",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,48,55,54,57,54,84,243,182,129,144,84,84,49,48,48,55,54,57,55,84,243,182,129,145,84,84,49,48,48,55,54,57,56,84,243,182,129,146,84,84,49,48,48,55,54,57,57,84,243,182,129,147,84,84,49,48,48,55,55,48,48,84,243,182,129,148,84,84,49,48,48,55,55,48,49,84,243,182,129,149,84,84,49,48,48,55,55,48,50,84,243,182,129,150,84,84,49,48,48,55,55,48,51,84,243,182,129,151,84,84,49,48,48,55,55,48,52,84,243,182,129,152,84,84,49,48,48,55,55,48,53,84,243,182,129,153,84,84,49,48,48,55,55,48,54,84,243,182,129,154,84,84,49,48,48,55,55,48,55,84,243,182,129,155,84,84,49,48,48,55,55,48,56,84,243,182,129,156,84,84,49,48,48,55,55,48,57,84,243,182,129,157,84,84,49,48,48,55,55,49,48,84,243,182,129,158,84,84,49,48,48,55,55,49,49,84,243,182,129,159,84,84,49,48,48,55,55,49,50,84,243,182,129,160,84,84,49,48,48,55,55,49,51,84,243,182,129,161,84,84,49,48,48,55,55,49,52,84,243,182,129,162,84,84,49,48,48,55,55,49,53,84,243,182,129,163,84,84,49,48,48,55,55,49,54,84,243,182,129,164,84,84,49,48,48,55,55,49,55,84,243,182,129,165,84,84,49,48,48,55,55,49,56,84,243,182,129,166,84,84,49,48,48,55,55,49,57,84,243,182,129,167,84,84,49,48,48,55,55,50,48,84,243,182,129,168,84,84,49,48,48,55,55,50,49,84,243,182,129,169,84,84,49,48,48,55,55,50,50,84,243,182,129,170,84,84,49,48,48,55,55,50,51,84,243,182,129,171,84,84,49,48,48,55,55,50,52,84,243,182,129,172,84,84,49,48,48,55,55,50,53,84,243,182,129,173,84,84,49,48,48,55,55,50,54,84,243,182,129,174,84,84,49,48,48,55,55,50,55,84,243,182,129,175,84,84,49,48,48,55,55,50,56,84,243,182,129,176,84,84,49,48,48,55,55,50,57,84,243,182,129,177,84,84,49,48,48,55,55,51,48,84,243,182,129,178,84,84,49,48,48,55,55,51,49,84,243,182,129,179,84,84,49,48,48,55,55,51,50,84,243,182,129,180,84,84,49,48,48,55,55,51,51,84,243,182,129,181,84,84,49,48,48,55,55,51,52,84,243,182,129,182,84,84,49,48,48,55,55,51,53,84,243,182,129,183,84,84,49,48,48,55,55,51,54,84,243,182,129,184,84,84,49,48,48,55,55,51,55,84,243,182,129,185,84,84,49,48,48,55,55,51,56,84,243,182,129,186,84,84,49,48,48,55,55,51,57,84,243,182,129,187,84,84,49,48,48,55,55,52,48,84,243,182,129,188,84,84,49,48,48,55,55,52,49,84,243,182,129,189,84,84,49,48,48,55,55,52,50,84,243,182,129,190,84,84,49,48,48,55,55,52,51,84,243,182,129,191,84,84,49,48,48,55,55,52,53,84,243,182,130,129,84,84,49,48,48,55,55,53,55,84,243,182,130,141,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19431 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19431_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19431_s.txt", Encoding.UTF8);

    public Test19431() : base(recordedRequest, recordedResponse, "accounts8d43a024a0ff30a")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a024a0ff30a",
                        container: "$root",
                        blob: "foo",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19915 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19915_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19915_s.txt", Encoding.UTF8);

    public Test19915() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersf0a96ab3064046f8a2fc77e6e3ebae9e",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,56,55,57,57,48,84,243,177,141,150,84,84,57,56,55,57,57,49,84,243,177,141,151,84,84,57,56,55,57,57,50,84,243,177,141,152,84,84,57,56,55,57,57,51,84,243,177,141,153,84,84,57,56,55,57,57,52,84,243,177,141,154,84,84,57,56,55,57,57,53,84,243,177,141,155,84,84,57,56,55,57,57,54,84,243,177,141,156,84,84,57,56,55,57,57,55,84,243,177,141,157,84,84,57,56,55,57,57,56,84,243,177,141,158,84,84,57,56,55,57,57,57,84,243,177,141,159,84,84,57,56,56,48,48,48,84,243,177,141,160,84,84,57,56,56,48,48,49,84,243,177,141,161,84,84,57,56,56,48,48,50,84,243,177,141,162,84,84,57,56,56,48,48,51,84,243,177,141,163,84,84,57,56,56,48,48,52,84,243,177,141,164,84,84,57,56,56,48,48,53,84,243,177,141,165,84,84,57,56,56,48,48,54,84,243,177,141,166,84,84,57,56,56,48,48,55,84,243,177,141,167,84,84,57,56,56,48,48,56,84,243,177,141,168,84,84,57,56,56,48,48,57,84,243,177,141,169,84,84,57,56,56,48,49,48,84,243,177,141,170,84,84,57,56,56,48,49,49,84,243,177,141,171,84,84,57,56,56,48,49,50,84,243,177,141,172,84,84,57,56,56,48,49,51,84,243,177,141,173,84,84,57,56,56,48,49,52,84,243,177,141,174,84,84,57,56,56,48,49,53,84,243,177,141,175,84,84,57,56,56,48,49,54,84,243,177,141,176,84,84,57,56,56,48,49,55,84,243,177,141,177,84,84,57,56,56,48,49,56,84,243,177,141,178,84,84,57,56,56,48,49,57,84,243,177,141,179,84,84,57,56,56,48,50,48,84,243,177,141,180,84,84,57,56,56,48,50,49,84,243,177,141,181,84,84,57,56,56,48,50,50,84,243,177,141,182,84,84,57,56,56,48,50,51,84,243,177,141,183,84,84,57,56,56,48,50,52,84,243,177,141,184,84,84,57,56,56,48,50,53,84,243,177,141,185,84,84,57,56,56,48,50,54,84,243,177,141,186,84,84,57,56,56,48,50,55,84,243,177,141,187,84,84,57,56,56,48,50,56,84,243,177,141,188,84,84,57,56,56,48,50,57,84,243,177,141,189,84,84,57,56,56,48,51,48,84,243,177,141,190,84,84,57,56,56,48,51,49,84,243,177,141,191,84,84,57,56,56,48,51,51,84,243,177,142,129,84,84,57,56,56,48,52,53,84,243,177,142,141,84,84,57,56,56,48,52,55,84,243,177,142,143,84,84,57,56,56,48,52,56,84,243,177,142,144,84,84,57,56,56,48,54,49,84,243,177,142,157,84,84,57,56,56,48,57,54,84,243,177,143,128,84,84,57,56,56,48,57,55,84,243,177,143,129,84,84,57,56,56,48,57,56,84,243,177,143,130,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19846 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19846_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19846_s.txt", Encoding.UTF8);

    public Test19846() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers7032abc4111d4702bce9d36696a0a648",
                        blob: Encoding.UTF8.GetString(new byte[]{84,54,50,56,54,49,84,239,150,141,84,84,54,50,56,54,51,84,239,150,143,84,84,54,50,56,54,52,84,239,150,144,84,84,54,50,56,55,55,84,239,150,157,84,84,54,50,57,49,51,84,239,151,129,84,84,54,50,57,50,53,84,239,151,141,84,84,54,50,57,50,55,84,239,151,143,84,84,54,50,57,50,56,84,239,151,144,84,84,54,50,57,52,49,84,239,151,157,84,84,54,50,57,55,55,84,239,152,129,84,84,54,50,57,56,57,84,239,152,141,84,84,54,50,57,57,49,84,239,152,143,84,84,54,50,57,57,50,84,239,152,144,84,84,54,51,48,48,53,84,239,152,157,84,84,54,51,48,52,49,84,239,153,129,84,84,54,51,48,53,51,84,239,153,141,84,84,54,51,48,53,53,84,239,153,143,84,84,54,51,48,53,54,84,239,153,144,84,84,54,51,48,54,57,84,239,153,157,84,84,54,51,49,48,53,84,239,154,129,84,84,54,51,49,49,55,84,239,154,141,84,84,54,51,49,49,57,84,239,154,143,84,84,54,51,49,50,48,84,239,154,144,84,84,54,51,49,51,51,84,239,154,157,84,84,54,51,49,54,57,84,239,155,129,84,84,54,51,49,56,49,84,239,155,141,84,84,54,51,49,56,51,84,239,155,143,84,84,54,51,49,56,52,84,239,155,144,84,84,54,51,49,57,55,84,239,155,157,84,84,54,51,50,51,51,84,239,156,129,84,84,54,51,50,52,53,84,239,156,141,84,84,54,51,50,52,55,84,239,156,143,84,84,54,51,50,52,56,84,239,156,144,84,84,54,51,50,54,49,84,239,156,157,84,84,54,51,50,57,54,84,239,157,128,84,84,54,51,50,57,55,84,239,157,129,84,84,54,51,50,57,56,84,239,157,130,84,84,54,51,50,57,57,84,239,157,131,84,84,54,51,51,48,48,84,239,157,132,84,84,54,51,51,48,49,84,239,157,133,84,84,54,51,51,48,50,84,239,157,134,84,84,54,51,51,48,51,84,239,157,135,84,84,54,51,51,48,52,84,239,157,136,84,84,54,51,51,48,53,84,239,157,137,84,84,54,51,51,48,54,84,239,157,138,84,84,54,51,51,48,55,84,239,157,139,84,84,54,51,51,48,56,84,239,157,140,84,84,54,51,51,48,57,84,239,157,141,84,84,54,51,51,49,48,84,239,157,142,84,84,54,51,51,49,49,84,239,157,143,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20868 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20868_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20868_s.txt", Encoding.UTF8);

    public Test20868() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersdd41d3a5bb7f42709f7cec587f1a204a",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,51,55,49,57,84,244,141,157,167,84,84,49,49,48,51,55,50,48,84,244,141,157,168,84,84,49,49,48,51,55,50,49,84,244,141,157,169,84,84,49,49,48,51,55,50,50,84,244,141,157,170,84,84,49,49,48,51,55,50,51,84,244,141,157,171,84,84,49,49,48,51,55,50,52,84,244,141,157,172,84,84,49,49,48,51,55,50,53,84,244,141,157,173,84,84,49,49,48,51,55,50,54,84,244,141,157,174,84,84,49,49,48,51,55,50,55,84,244,141,157,175,84,84,49,49,48,51,55,50,56,84,244,141,157,176,84,84,49,49,48,51,55,50,57,84,244,141,157,177,84,84,49,49,48,51,55,51,48,84,244,141,157,178,84,84,49,49,48,51,55,51,49,84,244,141,157,179,84,84,49,49,48,51,55,51,50,84,244,141,157,180,84,84,49,49,48,51,55,51,51,84,244,141,157,181,84,84,49,49,48,51,55,51,52,84,244,141,157,182,84,84,49,49,48,51,55,51,53,84,244,141,157,183,84,84,49,49,48,51,55,51,54,84,244,141,157,184,84,84,49,49,48,51,55,51,55,84,244,141,157,185,84,84,49,49,48,51,55,51,56,84,244,141,157,186,84,84,49,49,48,51,55,51,57,84,244,141,157,187,84,84,49,49,48,51,55,52,48,84,244,141,157,188,84,84,49,49,48,51,55,52,49,84,244,141,157,189,84,84,49,49,48,51,55,52,50,84,244,141,157,190,84,84,49,49,48,51,55,52,51,84,244,141,157,191,84,84,49,49,48,51,55,52,52,84,244,141,158,128,84,84,49,49,48,51,55,52,53,84,244,141,158,129,84,84,49,49,48,51,55,52,54,84,244,141,158,130,84,84,49,49,48,51,55,52,55,84,244,141,158,131,84,84,49,49,48,51,55,52,56,84,244,141,158,132,84,84,49,49,48,51,55,52,57,84,244,141,158,133,84,84,49,49,48,51,55,53,48,84,244,141,158,134,84,84,49,49,48,51,55,53,49,84,244,141,158,135,84,84,49,49,48,51,55,53,50,84,244,141,158,136,84,84,49,49,48,51,55,53,51,84,244,141,158,137,84,84,49,49,48,51,55,53,52,84,244,141,158,138,84,84,49,49,48,51,55,53,53,84,244,141,158,139,84,84,49,49,48,51,55,53,54,84,244,141,158,140,84,84,49,49,48,51,55,53,55,84,244,141,158,141,84,84,49,49,48,51,55,53,56,84,244,141,158,142,84,84,49,49,48,51,55,53,57,84,244,141,158,143,84,84,49,49,48,51,55,54,48,84,244,141,158,144,84,84,49,49,48,51,55,54,49,84,244,141,158,145,84,84,49,49,48,51,55,54,50,84,244,141,158,146,84,84,49,49,48,51,55,54,51,84,244,141,158,147,84,84,49,49,48,51,55,54,52,84,244,141,158,148,84,84,49,49,48,51,55,54,53,84,244,141,158,149,84,84,49,49,48,51,55,54,54,84,244,141,158,150,84,84,49,49,48,51,55,54,55,84,244,141,158,151,84,84,49,49,48,51,55,54,56,84,244,141,158,152,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20267 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20267_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20267_s.txt", Encoding.UTF8);

    public Test20267() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers712afb35b54344eb8fa90647f752cd92",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,52,50,51,56,49,84,243,190,159,141,84,84,49,48,52,50,51,56,51,84,243,190,159,143,84,84,49,48,52,50,51,56,52,84,243,190,159,144,84,84,49,48,52,50,51,57,55,84,243,190,159,157,84,84,49,48,52,50,52,51,51,84,243,190,160,129,84,84,49,48,52,50,52,52,53,84,243,190,160,141,84,84,49,48,52,50,52,52,55,84,243,190,160,143,84,84,49,48,52,50,52,52,56,84,243,190,160,144,84,84,49,48,52,50,52,54,49,84,243,190,160,157,84,84,49,48,52,50,52,57,55,84,243,190,161,129,84,84,49,48,52,50,53,48,57,84,243,190,161,141,84,84,49,48,52,50,53,49,49,84,243,190,161,143,84,84,49,48,52,50,53,49,50,84,243,190,161,144,84,84,49,48,52,50,53,50,53,84,243,190,161,157,84,84,49,48,52,50,53,54,49,84,243,190,162,129,84,84,49,48,52,50,53,55,51,84,243,190,162,141,84,84,49,48,52,50,53,55,53,84,243,190,162,143,84,84,49,48,52,50,53,55,54,84,243,190,162,144,84,84,49,48,52,50,53,56,57,84,243,190,162,157,84,84,49,48,52,50,54,50,53,84,243,190,163,129,84,84,49,48,52,50,54,51,55,84,243,190,163,141,84,84,49,48,52,50,54,51,57,84,243,190,163,143,84,84,49,48,52,50,54,52,48,84,243,190,163,144,84,84,49,48,52,50,54,53,51,84,243,190,163,157,84,84,49,48,52,50,54,56,57,84,243,190,164,129,84,84,49,48,52,50,55,48,49,84,243,190,164,141,84,84,49,48,52,50,55,48,51,84,243,190,164,143,84,84,49,48,52,50,55,48,52,84,243,190,164,144,84,84,49,48,52,50,55,49,55,84,243,190,164,157,84,84,49,48,52,50,55,53,51,84,243,190,165,129,84,84,49,48,52,50,55,54,53,84,243,190,165,141,84,84,49,48,52,50,55,54,55,84,243,190,165,143,84,84,49,48,52,50,55,54,56,84,243,190,165,144,84,84,49,48,52,50,55,56,49,84,243,190,165,157,84,84,49,48,52,50,56,49,55,84,243,190,166,129,84,84,49,48,52,50,56,50,57,84,243,190,166,141,84,84,49,48,52,50,56,51,49,84,243,190,166,143,84,84,49,48,52,50,56,51,50,84,243,190,166,144,84,84,49,48,52,50,56,52,53,84,243,190,166,157,84,84,49,48,52,50,56,56,49,84,243,190,167,129,84,84,49,48,52,50,56,57,51,84,243,190,167,141,84,84,49,48,52,50,56,57,53,84,243,190,167,143,84,84,49,48,52,50,56,57,54,84,243,190,167,144,84,84,49,48,52,50,57,48,57,84,243,190,167,157,84,84,49,48,52,50,57,52,53,84,243,190,168,129,84,84,49,48,52,50,57,53,55,84,243,190,168,141,84,84,49,48,52,50,57,53,57,84,243,190,168,143,84,84,49,48,52,50,57,54,48,84,243,190,168,144,84,84,49,48,52,50,57,55,51,84,243,190,168,157,84,84,49,48,52,51,48,48,57,84,243,190,169,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20195 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20195_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20195_s.txt", Encoding.UTF8);

    public Test20195() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers2b6cdd6684eb4500abcaa682adc323b7",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,51,49,57,52,57,84,243,187,188,141,84,84,49,48,51,49,57,53,49,84,243,187,188,143,84,84,49,48,51,49,57,53,50,84,243,187,188,144,84,84,49,48,51,49,57,54,53,84,243,187,188,157,84,84,49,48,51,50,48,48,49,84,243,187,189,129,84,84,49,48,51,50,48,49,51,84,243,187,189,141,84,84,49,48,51,50,48,49,53,84,243,187,189,143,84,84,49,48,51,50,48,49,54,84,243,187,189,144,84,84,49,48,51,50,48,50,57,84,243,187,189,157,84,84,49,48,51,50,48,54,53,84,243,187,190,129,84,84,49,48,51,50,48,55,55,84,243,187,190,141,84,84,49,48,51,50,48,55,57,84,243,187,190,143,84,84,49,48,51,50,48,56,48,84,243,187,190,144,84,84,49,48,51,50,48,57,51,84,243,187,190,157,84,84,49,48,51,50,49,50,57,84,243,187,191,129,84,84,49,48,51,50,49,52,49,84,243,187,191,141,84,84,49,48,51,50,49,52,51,84,243,187,191,143,84,84,49,48,51,50,49,52,52,84,243,187,191,144,84,84,49,48,51,50,49,53,55,84,243,187,191,157,84,84,49,48,51,50,49,57,51,84,243,188,128,129,84,84,49,48,51,50,50,48,53,84,243,188,128,141,84,84,49,48,51,50,50,48,55,84,243,188,128,143,84,84,49,48,51,50,50,48,56,84,243,188,128,144,84,84,49,48,51,50,50,50,49,84,243,188,128,157,84,84,49,48,51,50,50,53,54,84,243,188,129,128,84,84,49,48,51,50,50,53,55,84,243,188,129,129,84,84,49,48,51,50,50,53,56,84,243,188,129,130,84,84,49,48,51,50,50,53,57,84,243,188,129,131,84,84,49,48,51,50,50,54,48,84,243,188,129,132,84,84,49,48,51,50,50,54,49,84,243,188,129,133,84,84,49,48,51,50,50,54,50,84,243,188,129,134,84,84,49,48,51,50,50,54,51,84,243,188,129,135,84,84,49,48,51,50,50,54,52,84,243,188,129,136,84,84,49,48,51,50,50,54,53,84,243,188,129,137,84,84,49,48,51,50,50,54,54,84,243,188,129,138,84,84,49,48,51,50,50,54,55,84,243,188,129,139,84,84,49,48,51,50,50,54,56,84,243,188,129,140,84,84,49,48,51,50,50,54,57,84,243,188,129,141,84,84,49,48,51,50,50,55,48,84,243,188,129,142,84,84,49,48,51,50,50,55,49,84,243,188,129,143,84,84,49,48,51,50,50,55,50,84,243,188,129,144,84,84,49,48,51,50,50,55,51,84,243,188,129,145,84,84,49,48,51,50,50,55,52,84,243,188,129,146,84,84,49,48,51,50,50,55,53,84,243,188,129,147,84,84,49,48,51,50,50,55,54,84,243,188,129,148,84,84,49,48,51,50,50,55,55,84,243,188,129,149,84,84,49,48,51,50,50,55,56,84,243,188,129,150,84,84,49,48,51,50,50,55,57,84,243,188,129,151,84,84,49,48,51,50,50,56,48,84,243,188,129,152,84,84,49,48,51,50,50,56,49,84,243,188,129,153,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20136 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20136_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20136_s.txt", Encoding.UTF8);

    public Test20136() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers02552a2396c44255a61dd19b9714b3b6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,50,50,50,50,49,84,243,185,164,141,84,84,49,48,50,50,50,50,51,84,243,185,164,143,84,84,49,48,50,50,50,50,52,84,243,185,164,144,84,84,49,48,50,50,50,51,55,84,243,185,164,157,84,84,49,48,50,50,50,55,51,84,243,185,165,129,84,84,49,48,50,50,50,56,53,84,243,185,165,141,84,84,49,48,50,50,50,56,55,84,243,185,165,143,84,84,49,48,50,50,50,56,56,84,243,185,165,144,84,84,49,48,50,50,51,48,49,84,243,185,165,157,84,84,49,48,50,50,51,51,55,84,243,185,166,129,84,84,49,48,50,50,51,52,57,84,243,185,166,141,84,84,49,48,50,50,51,53,49,84,243,185,166,143,84,84,49,48,50,50,51,53,50,84,243,185,166,144,84,84,49,48,50,50,51,54,53,84,243,185,166,157,84,84,49,48,50,50,52,48,49,84,243,185,167,129,84,84,49,48,50,50,52,49,51,84,243,185,167,141,84,84,49,48,50,50,52,49,53,84,243,185,167,143,84,84,49,48,50,50,52,49,54,84,243,185,167,144,84,84,49,48,50,50,52,50,57,84,243,185,167,157,84,84,49,48,50,50,52,54,53,84,243,185,168,129,84,84,49,48,50,50,52,55,55,84,243,185,168,141,84,84,49,48,50,50,52,55,57,84,243,185,168,143,84,84,49,48,50,50,52,56,48,84,243,185,168,144,84,84,49,48,50,50,52,57,51,84,243,185,168,157,84,84,49,48,50,50,53,50,57,84,243,185,169,129,84,84,49,48,50,50,53,52,49,84,243,185,169,141,84,84,49,48,50,50,53,52,51,84,243,185,169,143,84,84,49,48,50,50,53,52,52,84,243,185,169,144,84,84,49,48,50,50,53,53,55,84,243,185,169,157,84,84,49,48,50,50,53,57,51,84,243,185,170,129,84,84,49,48,50,50,54,48,53,84,243,185,170,141,84,84,49,48,50,50,54,48,55,84,243,185,170,143,84,84,49,48,50,50,54,48,56,84,243,185,170,144,84,84,49,48,50,50,54,50,49,84,243,185,170,157,84,84,49,48,50,50,54,53,55,84,243,185,171,129,84,84,49,48,50,50,54,54,57,84,243,185,171,141,84,84,49,48,50,50,54,55,49,84,243,185,171,143,84,84,49,48,50,50,54,55,50,84,243,185,171,144,84,84,49,48,50,50,54,56,53,84,243,185,171,157,84,84,49,48,50,50,55,50,49,84,243,185,172,129,84,84,49,48,50,50,55,51,51,84,243,185,172,141,84,84,49,48,50,50,55,51,53,84,243,185,172,143,84,84,49,48,50,50,55,51,54,84,243,185,172,144,84,84,49,48,50,50,55,52,57,84,243,185,172,157,84,84,49,48,50,50,55,56,53,84,243,185,173,129,84,84,49,48,50,50,55,57,55,84,243,185,173,141,84,84,49,48,50,50,55,57,57,84,243,185,173,143,84,84,49,48,50,50,56,48,48,84,243,185,173,144,84,84,49,48,50,50,56,49,51,84,243,185,173,157,84,84,49,48,50,50,56,52,57,84,243,185,174,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21062 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21062_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21062_s.txt", Encoding.UTF8);

    public Test21062() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers98fd3eef9d4b4edcb3855acb5ae8645d",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,49,56,48,48,84,244,143,155,184,84,84,49,49,49,49,56,48,49,84,244,143,155,185,84,84,49,49,49,49,56,48,50,84,244,143,155,186,84,84,49,49,49,49,56,48,51,84,244,143,155,187,84,84,49,49,49,49,56,48,52,84,244,143,155,188,84,84,49,49,49,49,56,48,53,84,244,143,155,189,84,84,49,49,49,49,56,48,54,84,244,143,155,190,84,84,49,49,49,49,56,48,55,84,244,143,155,191,84,84,49,49,49,49,56,48,56,84,244,143,156,128,84,84,49,49,49,49,56,48,57,84,244,143,156,129,84,84,49,49,49,49,56,49,48,84,244,143,156,130,84,84,49,49,49,49,56,49,49,84,244,143,156,131,84,84,49,49,49,49,56,49,50,84,244,143,156,132,84,84,49,49,49,49,56,49,51,84,244,143,156,133,84,84,49,49,49,49,56,49,52,84,244,143,156,134,84,84,49,49,49,49,56,49,53,84,244,143,156,135,84,84,49,49,49,49,56,49,54,84,244,143,156,136,84,84,49,49,49,49,56,49,55,84,244,143,156,137,84,84,49,49,49,49,56,49,56,84,244,143,156,138,84,84,49,49,49,49,56,49,57,84,244,143,156,139,84,84,49,49,49,49,56,50,48,84,244,143,156,140,84,84,49,49,49,49,56,50,49,84,244,143,156,141,84,84,49,49,49,49,56,50,50,84,244,143,156,142,84,84,49,49,49,49,56,50,51,84,244,143,156,143,84,84,49,49,49,49,56,50,52,84,244,143,156,144,84,84,49,49,49,49,56,50,53,84,244,143,156,145,84,84,49,49,49,49,56,50,54,84,244,143,156,146,84,84,49,49,49,49,56,50,55,84,244,143,156,147,84,84,49,49,49,49,56,50,56,84,244,143,156,148,84,84,49,49,49,49,56,50,57,84,244,143,156,149,84,84,49,49,49,49,56,51,48,84,244,143,156,150,84,84,49,49,49,49,56,51,49,84,244,143,156,151,84,84,49,49,49,49,56,51,50,84,244,143,156,152,84,84,49,49,49,49,56,51,51,84,244,143,156,153,84,84,49,49,49,49,56,51,52,84,244,143,156,154,84,84,49,49,49,49,56,51,53,84,244,143,156,155,84,84,49,49,49,49,56,51,54,84,244,143,156,156,84,84,49,49,49,49,56,51,55,84,244,143,156,157,84,84,49,49,49,49,56,51,56,84,244,143,156,158,84,84,49,49,49,49,56,51,57,84,244,143,156,159,84,84,49,49,49,49,56,52,48,84,244,143,156,160,84,84,49,49,49,49,56,52,49,84,244,143,156,161,84,84,49,49,49,49,56,52,50,84,244,143,156,162,84,84,49,49,49,49,56,52,51,84,244,143,156,163,84,84,49,49,49,49,56,52,52,84,244,143,156,164,84,84,49,49,49,49,56,52,53,84,244,143,156,165,84,84,49,49,49,49,56,52,54,84,244,143,156,166,84,84,49,49,49,49,56,52,55,84,244,143,156,167,84,84,49,49,49,49,56,52,56,84,244,143,156,168,84,84,49,49,49,49,56,52,57,84,244,143,156,169,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20985 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20985_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20985_s.txt", Encoding.UTF8);

    public Test20985() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersdf87e0f5374149afa792ac52b484870e",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,57,55,56,57,84,244,142,188,157,84,84,49,49,48,57,56,50,53,84,244,142,189,129,84,84,49,49,48,57,56,51,55,84,244,142,189,141,84,84,49,49,48,57,56,51,57,84,244,142,189,143,84,84,49,49,48,57,56,52,48,84,244,142,189,144,84,84,49,49,48,57,56,53,51,84,244,142,189,157,84,84,49,49,48,57,56,56,57,84,244,142,190,129,84,84,49,49,48,57,57,48,49,84,244,142,190,141,84,84,49,49,48,57,57,48,51,84,244,142,190,143,84,84,49,49,48,57,57,48,52,84,244,142,190,144,84,84,49,49,48,57,57,49,55,84,244,142,190,157,84,84,49,49,48,57,57,53,51,84,244,142,191,129,84,84,49,49,48,57,57,54,53,84,244,142,191,141,84,84,49,49,48,57,57,54,55,84,244,142,191,143,84,84,49,49,48,57,57,54,56,84,244,142,191,144,84,84,49,49,48,57,57,56,49,84,244,142,191,157,84,84,49,49,49,48,48,49,54,84,244,143,128,128,84,84,49,49,49,48,48,49,55,84,244,143,128,129,84,84,49,49,49,48,48,49,56,84,244,143,128,130,84,84,49,49,49,48,48,49,57,84,244,143,128,131,84,84,49,49,49,48,48,50,48,84,244,143,128,132,84,84,49,49,49,48,48,50,49,84,244,143,128,133,84,84,49,49,49,48,48,50,50,84,244,143,128,134,84,84,49,49,49,48,48,50,51,84,244,143,128,135,84,84,49,49,49,48,48,50,52,84,244,143,128,136,84,84,49,49,49,48,48,50,53,84,244,143,128,137,84,84,49,49,49,48,48,50,54,84,244,143,128,138,84,84,49,49,49,48,48,50,55,84,244,143,128,139,84,84,49,49,49,48,48,50,56,84,244,143,128,140,84,84,49,49,49,48,48,50,57,84,244,143,128,141,84,84,49,49,49,48,48,51,48,84,244,143,128,142,84,84,49,49,49,48,48,51,49,84,244,143,128,143,84,84,49,49,49,48,48,51,50,84,244,143,128,144,84,84,49,49,49,48,48,51,51,84,244,143,128,145,84,84,49,49,49,48,48,51,52,84,244,143,128,146,84,84,49,49,49,48,48,51,53,84,244,143,128,147,84,84,49,49,49,48,48,51,54,84,244,143,128,148,84,84,49,49,49,48,48,51,55,84,244,143,128,149,84,84,49,49,49,48,48,51,56,84,244,143,128,150,84,84,49,49,49,48,48,51,57,84,244,143,128,151,84,84,49,49,49,48,48,52,48,84,244,143,128,152,84,84,49,49,49,48,48,52,49,84,244,143,128,153,84,84,49,49,49,48,48,52,50,84,244,143,128,154,84,84,49,49,49,48,48,52,51,84,244,143,128,155,84,84,49,49,49,48,48,52,52,84,244,143,128,156,84,84,49,49,49,48,48,52,53,84,244,143,128,157,84,84,49,49,49,48,48,52,54,84,244,143,128,158,84,84,49,49,49,48,48,52,55,84,244,143,128,159,84,84,49,49,49,48,48,52,56,84,244,143,128,160,84,84,49,49,49,48,48,52,57,84,244,143,128,161,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19973 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19973_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19973_s.txt", Encoding.UTF8);

    public Test19973() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersc5d3e7c5509046d2aa3f8bb095571b82",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,57,54,51,54,49,84,243,179,144,137,84,84,57,57,54,51,54,50,84,243,179,144,138,84,84,57,57,54,51,54,51,84,243,179,144,139,84,84,57,57,54,51,54,52,84,243,179,144,140,84,84,57,57,54,51,54,53,84,243,179,144,141,84,84,57,57,54,51,54,54,84,243,179,144,142,84,84,57,57,54,51,54,55,84,243,179,144,143,84,84,57,57,54,51,54,56,84,243,179,144,144,84,84,57,57,54,51,54,57,84,243,179,144,145,84,84,57,57,54,51,55,48,84,243,179,144,146,84,84,57,57,54,51,55,49,84,243,179,144,147,84,84,57,57,54,51,55,50,84,243,179,144,148,84,84,57,57,54,51,55,51,84,243,179,144,149,84,84,57,57,54,51,55,52,84,243,179,144,150,84,84,57,57,54,51,55,53,84,243,179,144,151,84,84,57,57,54,51,55,54,84,243,179,144,152,84,84,57,57,54,51,55,55,84,243,179,144,153,84,84,57,57,54,51,55,56,84,243,179,144,154,84,84,57,57,54,51,55,57,84,243,179,144,155,84,84,57,57,54,51,56,48,84,243,179,144,156,84,84,57,57,54,51,56,49,84,243,179,144,157,84,84,57,57,54,51,56,50,84,243,179,144,158,84,84,57,57,54,51,56,51,84,243,179,144,159,84,84,57,57,54,51,56,52,84,243,179,144,160,84,84,57,57,54,51,56,53,84,243,179,144,161,84,84,57,57,54,51,56,54,84,243,179,144,162,84,84,57,57,54,51,56,55,84,243,179,144,163,84,84,57,57,54,51,56,56,84,243,179,144,164,84,84,57,57,54,51,56,57,84,243,179,144,165,84,84,57,57,54,51,57,48,84,243,179,144,166,84,84,57,57,54,51,57,49,84,243,179,144,167,84,84,57,57,54,51,57,50,84,243,179,144,168,84,84,57,57,54,51,57,51,84,243,179,144,169,84,84,57,57,54,51,57,52,84,243,179,144,170,84,84,57,57,54,51,57,53,84,243,179,144,171,84,84,57,57,54,51,57,54,84,243,179,144,172,84,84,57,57,54,51,57,55,84,243,179,144,173,84,84,57,57,54,51,57,56,84,243,179,144,174,84,84,57,57,54,51,57,57,84,243,179,144,175,84,84,57,57,54,52,48,48,84,243,179,144,176,84,84,57,57,54,52,48,49,84,243,179,144,177,84,84,57,57,54,52,48,50,84,243,179,144,178,84,84,57,57,54,52,48,51,84,243,179,144,179,84,84,57,57,54,52,48,52,84,243,179,144,180,84,84,57,57,54,52,48,53,84,243,179,144,181,84,84,57,57,54,52,48,54,84,243,179,144,182,84,84,57,57,54,52,48,55,84,243,179,144,183,84,84,57,57,54,52,48,56,84,243,179,144,184,84,84,57,57,54,52,48,57,84,243,179,144,185,84,84,57,57,54,52,49,48,84,243,179,144,186,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20923 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20923_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20923_s.txt", Encoding.UTF8);

    public Test20923() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers9e891393b2624599aedf317812121dcf",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,53,48,49,57,84,244,141,177,187,84,84,49,49,48,53,48,50,48,84,244,141,177,188,84,84,49,49,48,53,48,50,49,84,244,141,177,189,84,84,49,49,48,53,48,50,50,84,244,141,177,190,84,84,49,49,48,53,48,50,51,84,244,141,177,191,84,84,49,49,48,53,48,50,52,84,244,141,178,128,84,84,49,49,48,53,48,50,53,84,244,141,178,129,84,84,49,49,48,53,48,50,54,84,244,141,178,130,84,84,49,49,48,53,48,50,55,84,244,141,178,131,84,84,49,49,48,53,48,50,56,84,244,141,178,132,84,84,49,49,48,53,48,50,57,84,244,141,178,133,84,84,49,49,48,53,48,51,48,84,244,141,178,134,84,84,49,49,48,53,48,51,49,84,244,141,178,135,84,84,49,49,48,53,48,51,50,84,244,141,178,136,84,84,49,49,48,53,48,51,51,84,244,141,178,137,84,84,49,49,48,53,48,51,52,84,244,141,178,138,84,84,49,49,48,53,48,51,53,84,244,141,178,139,84,84,49,49,48,53,48,51,54,84,244,141,178,140,84,84,49,49,48,53,48,51,55,84,244,141,178,141,84,84,49,49,48,53,48,51,56,84,244,141,178,142,84,84,49,49,48,53,48,51,57,84,244,141,178,143,84,84,49,49,48,53,48,52,48,84,244,141,178,144,84,84,49,49,48,53,48,52,49,84,244,141,178,145,84,84,49,49,48,53,48,52,50,84,244,141,178,146,84,84,49,49,48,53,48,52,51,84,244,141,178,147,84,84,49,49,48,53,48,52,52,84,244,141,178,148,84,84,49,49,48,53,48,52,53,84,244,141,178,149,84,84,49,49,48,53,48,52,54,84,244,141,178,150,84,84,49,49,48,53,48,52,55,84,244,141,178,151,84,84,49,49,48,53,48,52,56,84,244,141,178,152,84,84,49,49,48,53,48,52,57,84,244,141,178,153,84,84,49,49,48,53,48,53,48,84,244,141,178,154,84,84,49,49,48,53,48,53,49,84,244,141,178,155,84,84,49,49,48,53,48,53,50,84,244,141,178,156,84,84,49,49,48,53,48,53,51,84,244,141,178,157,84,84,49,49,48,53,48,53,52,84,244,141,178,158,84,84,49,49,48,53,48,53,53,84,244,141,178,159,84,84,49,49,48,53,48,53,54,84,244,141,178,160,84,84,49,49,48,53,48,53,55,84,244,141,178,161,84,84,49,49,48,53,48,53,56,84,244,141,178,162,84,84,49,49,48,53,48,53,57,84,244,141,178,163,84,84,49,49,48,53,48,54,48,84,244,141,178,164,84,84,49,49,48,53,48,54,49,84,244,141,178,165,84,84,49,49,48,53,48,54,50,84,244,141,178,166,84,84,49,49,48,53,48,54,51,84,244,141,178,167,84,84,49,49,48,53,48,54,52,84,244,141,178,168,84,84,49,49,48,53,48,54,53,84,244,141,178,169,84,84,49,49,48,53,48,54,54,84,244,141,178,170,84,84,49,49,48,53,48,54,55,84,244,141,178,171,84,84,49,49,48,53,48,54,56,84,244,141,178,172,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20457 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20457_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20457_s.txt", Encoding.UTF8);

    public Test20457() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersee5ddc6232b847869028904d3d06a0f3",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,53,55,55,56,84,244,129,176,162,84,84,49,48,53,53,55,55,57,84,244,129,176,163,84,84,49,48,53,53,55,56,48,84,244,129,176,164,84,84,49,48,53,53,55,56,49,84,244,129,176,165,84,84,49,48,53,53,55,56,50,84,244,129,176,166,84,84,49,48,53,53,55,56,51,84,244,129,176,167,84,84,49,48,53,53,55,56,52,84,244,129,176,168,84,84,49,48,53,53,55,56,53,84,244,129,176,169,84,84,49,48,53,53,55,56,54,84,244,129,176,170,84,84,49,48,53,53,55,56,55,84,244,129,176,171,84,84,49,48,53,53,55,56,56,84,244,129,176,172,84,84,49,48,53,53,55,56,57,84,244,129,176,173,84,84,49,48,53,53,55,57,48,84,244,129,176,174,84,84,49,48,53,53,55,57,49,84,244,129,176,175,84,84,49,48,53,53,55,57,50,84,244,129,176,176,84,84,49,48,53,53,55,57,51,84,244,129,176,177,84,84,49,48,53,53,55,57,52,84,244,129,176,178,84,84,49,48,53,53,55,57,53,84,244,129,176,179,84,84,49,48,53,53,55,57,54,84,244,129,176,180,84,84,49,48,53,53,55,57,55,84,244,129,176,181,84,84,49,48,53,53,55,57,56,84,244,129,176,182,84,84,49,48,53,53,55,57,57,84,244,129,176,183,84,84,49,48,53,53,56,48,48,84,244,129,176,184,84,84,49,48,53,53,56,48,49,84,244,129,176,185,84,84,49,48,53,53,56,48,50,84,244,129,176,186,84,84,49,48,53,53,56,48,51,84,244,129,176,187,84,84,49,48,53,53,56,48,52,84,244,129,176,188,84,84,49,48,53,53,56,48,53,84,244,129,176,189,84,84,49,48,53,53,56,48,54,84,244,129,176,190,84,84,49,48,53,53,56,48,55,84,244,129,176,191,84,84,49,48,53,53,56,48,56,84,244,129,177,128,84,84,49,48,53,53,56,48,57,84,244,129,177,129,84,84,49,48,53,53,56,49,48,84,244,129,177,130,84,84,49,48,53,53,56,49,49,84,244,129,177,131,84,84,49,48,53,53,56,49,50,84,244,129,177,132,84,84,49,48,53,53,56,49,51,84,244,129,177,133,84,84,49,48,53,53,56,49,52,84,244,129,177,134,84,84,49,48,53,53,56,49,53,84,244,129,177,135,84,84,49,48,53,53,56,49,54,84,244,129,177,136,84,84,49,48,53,53,56,49,55,84,244,129,177,137,84,84,49,48,53,53,56,49,56,84,244,129,177,138,84,84,49,48,53,53,56,49,57,84,244,129,177,139,84,84,49,48,53,53,56,50,48,84,244,129,177,140,84,84,49,48,53,53,56,50,49,84,244,129,177,141,84,84,49,48,53,53,56,50,50,84,244,129,177,142,84,84,49,48,53,53,56,50,51,84,244,129,177,143,84,84,49,48,53,53,56,50,52,84,244,129,177,144,84,84,49,48,53,53,56,50,53,84,244,129,177,145,84,84,49,48,53,53,56,50,54,84,244,129,177,146,84,84,49,48,53,53,56,50,55,84,244,129,177,147,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20642 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20642_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20642_s.txt", Encoding.UTF8);

    public Test20642() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers5f5b393ed8e742338d6031fb2e225092",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,55,56,51,48,48,84,244,135,144,156,84,84,49,48,55,56,51,48,49,84,244,135,144,157,84,84,49,48,55,56,51,48,50,84,244,135,144,158,84,84,49,48,55,56,51,48,51,84,244,135,144,159,84,84,49,48,55,56,51,48,52,84,244,135,144,160,84,84,49,48,55,56,51,48,53,84,244,135,144,161,84,84,49,48,55,56,51,48,54,84,244,135,144,162,84,84,49,48,55,56,51,48,55,84,244,135,144,163,84,84,49,48,55,56,51,48,56,84,244,135,144,164,84,84,49,48,55,56,51,48,57,84,244,135,144,165,84,84,49,48,55,56,51,49,48,84,244,135,144,166,84,84,49,48,55,56,51,49,49,84,244,135,144,167,84,84,49,48,55,56,51,49,50,84,244,135,144,168,84,84,49,48,55,56,51,49,51,84,244,135,144,169,84,84,49,48,55,56,51,49,52,84,244,135,144,170,84,84,49,48,55,56,51,49,53,84,244,135,144,171,84,84,49,48,55,56,51,49,54,84,244,135,144,172,84,84,49,48,55,56,51,49,55,84,244,135,144,173,84,84,49,48,55,56,51,49,56,84,244,135,144,174,84,84,49,48,55,56,51,49,57,84,244,135,144,175,84,84,49,48,55,56,51,50,48,84,244,135,144,176,84,84,49,48,55,56,51,50,49,84,244,135,144,177,84,84,49,48,55,56,51,50,50,84,244,135,144,178,84,84,49,48,55,56,51,50,51,84,244,135,144,179,84,84,49,48,55,56,51,50,52,84,244,135,144,180,84,84,49,48,55,56,51,50,53,84,244,135,144,181,84,84,49,48,55,56,51,50,54,84,244,135,144,182,84,84,49,48,55,56,51,50,55,84,244,135,144,183,84,84,49,48,55,56,51,50,56,84,244,135,144,184,84,84,49,48,55,56,51,50,57,84,244,135,144,185,84,84,49,48,55,56,51,51,48,84,244,135,144,186,84,84,49,48,55,56,51,51,49,84,244,135,144,187,84,84,49,48,55,56,51,51,50,84,244,135,144,188,84,84,49,48,55,56,51,51,51,84,244,135,144,189,84,84,49,48,55,56,51,51,52,84,244,135,144,190,84,84,49,48,55,56,51,51,53,84,244,135,144,191,84,84,49,48,55,56,51,51,55,84,244,135,145,129,84,84,49,48,55,56,51,52,57,84,244,135,145,141,84,84,49,48,55,56,51,53,49,84,244,135,145,143,84,84,49,48,55,56,51,53,50,84,244,135,145,144,84,84,49,48,55,56,51,54,53,84,244,135,145,157,84,84,49,48,55,56,52,48,49,84,244,135,146,129,84,84,49,48,55,56,52,49,51,84,244,135,146,141,84,84,49,48,55,56,52,49,53,84,244,135,146,143,84,84,49,48,55,56,52,49,54,84,244,135,146,144,84,84,49,48,55,56,52,50,57,84,244,135,146,157,84,84,49,48,55,56,52,54,53,84,244,135,147,129,84,84,49,48,55,56,52,55,55,84,244,135,147,141,84,84,49,48,55,56,52,55,57,84,244,135,147,143,84,84,49,48,55,56,52,56,48,84,244,135,147,144,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21120 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21120_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21120_s.txt", Encoding.UTF8);

    public Test21120() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers56d1c908d8f44b69abe6817b1847a0f6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,51,49,53,48,84,244,143,176,190,84,84,49,49,49,51,49,53,49,84,244,143,176,191,84,84,49,49,49,51,49,53,50,84,244,143,177,128,84,84,49,49,49,51,49,53,51,84,244,143,177,129,84,84,49,49,49,51,49,53,52,84,244,143,177,130,84,84,49,49,49,51,49,53,53,84,244,143,177,131,84,84,49,49,49,51,49,53,54,84,244,143,177,132,84,84,49,49,49,51,49,53,55,84,244,143,177,133,84,84,49,49,49,51,49,53,56,84,244,143,177,134,84,84,49,49,49,51,49,53,57,84,244,143,177,135,84,84,49,49,49,51,49,54,48,84,244,143,177,136,84,84,49,49,49,51,49,54,49,84,244,143,177,137,84,84,49,49,49,51,49,54,50,84,244,143,177,138,84,84,49,49,49,51,49,54,51,84,244,143,177,139,84,84,49,49,49,51,49,54,52,84,244,143,177,140,84,84,49,49,49,51,49,54,53,84,244,143,177,141,84,84,49,49,49,51,49,54,54,84,244,143,177,142,84,84,49,49,49,51,49,54,55,84,244,143,177,143,84,84,49,49,49,51,49,54,56,84,244,143,177,144,84,84,49,49,49,51,49,54,57,84,244,143,177,145,84,84,49,49,49,51,49,55,48,84,244,143,177,146,84,84,49,49,49,51,49,55,49,84,244,143,177,147,84,84,49,49,49,51,49,55,50,84,244,143,177,148,84,84,49,49,49,51,49,55,51,84,244,143,177,149,84,84,49,49,49,51,49,55,52,84,244,143,177,150,84,84,49,49,49,51,49,55,53,84,244,143,177,151,84,84,49,49,49,51,49,55,54,84,244,143,177,152,84,84,49,49,49,51,49,55,55,84,244,143,177,153,84,84,49,49,49,51,49,55,56,84,244,143,177,154,84,84,49,49,49,51,49,55,57,84,244,143,177,155,84,84,49,49,49,51,49,56,48,84,244,143,177,156,84,84,49,49,49,51,49,56,49,84,244,143,177,157,84,84,49,49,49,51,49,56,50,84,244,143,177,158,84,84,49,49,49,51,49,56,51,84,244,143,177,159,84,84,49,49,49,51,49,56,52,84,244,143,177,160,84,84,49,49,49,51,49,56,53,84,244,143,177,161,84,84,49,49,49,51,49,56,54,84,244,143,177,162,84,84,49,49,49,51,49,56,55,84,244,143,177,163,84,84,49,49,49,51,49,56,56,84,244,143,177,164,84,84,49,49,49,51,49,56,57,84,244,143,177,165,84,84,49,49,49,51,49,57,48,84,244,143,177,166,84,84,49,49,49,51,49,57,49,84,244,143,177,167,84,84,49,49,49,51,49,57,50,84,244,143,177,168,84,84,49,49,49,51,49,57,51,84,244,143,177,169,84,84,49,49,49,51,49,57,52,84,244,143,177,170,84,84,49,49,49,51,49,57,53,84,244,143,177,171,84,84,49,49,49,51,49,57,54,84,244,143,177,172,84,84,49,49,49,51,49,57,55,84,244,143,177,173,84,84,49,49,49,51,49,57,56,84,244,143,177,174,84,84,49,49,49,51,49,57,57,84,244,143,177,175,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19848 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19848_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19848_s.txt", Encoding.UTF8);

    public Test19848() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers7032abc4111d4702bce9d36696a0a648",
                        blob: Encoding.UTF8.GetString(new byte[]{84,54,51,51,49,50,84,239,157,144,84,84,54,51,51,49,51,84,239,157,145,84,84,54,51,51,49,52,84,239,157,146,84,84,54,51,51,49,53,84,239,157,147,84,84,54,51,51,49,54,84,239,157,148,84,84,54,51,51,49,55,84,239,157,149,84,84,54,51,51,49,56,84,239,157,150,84,84,54,51,51,49,57,84,239,157,151,84,84,54,51,51,50,48,84,239,157,152,84,84,54,51,51,50,49,84,239,157,153,84,84,54,51,51,50,50,84,239,157,154,84,84,54,51,51,50,51,84,239,157,155,84,84,54,51,51,50,52,84,239,157,156,84,84,54,51,51,50,53,84,239,157,157,84,84,54,51,51,50,54,84,239,157,158,84,84,54,51,51,50,55,84,239,157,159,84,84,54,51,51,50,56,84,239,157,160,84,84,54,51,51,50,57,84,239,157,161,84,84,54,51,51,51,48,84,239,157,162,84,84,54,51,51,51,49,84,239,157,163,84,84,54,51,51,51,50,84,239,157,164,84,84,54,51,51,51,51,84,239,157,165,84,84,54,51,51,51,52,84,239,157,166,84,84,54,51,51,51,53,84,239,157,167,84,84,54,51,51,51,54,84,239,157,168,84,84,54,51,51,51,55,84,239,157,169,84,84,54,51,51,51,56,84,239,157,170,84,84,54,51,51,51,57,84,239,157,171,84,84,54,51,51,52,48,84,239,157,172,84,84,54,51,51,52,49,84,239,157,173,84,84,54,51,51,52,50,84,239,157,174,84,84,54,51,51,52,51,84,239,157,175,84,84,54,51,51,52,52,84,239,157,176,84,84,54,51,51,52,53,84,239,157,177,84,84,54,51,51,52,54,84,239,157,178,84,84,54,51,51,52,55,84,239,157,179,84,84,54,51,51,52,56,84,239,157,180,84,84,54,51,51,52,57,84,239,157,181,84,84,54,51,51,53,48,84,239,157,182,84,84,54,51,51,53,49,84,239,157,183,84,84,54,51,51,53,50,84,239,157,184,84,84,54,51,51,53,51,84,239,157,185,84,84,54,51,51,53,52,84,239,157,186,84,84,54,51,51,53,53,84,239,157,187,84,84,54,51,51,53,54,84,239,157,188,84,84,54,51,51,53,55,84,239,157,189,84,84,54,51,51,53,56,84,239,157,190,84,84,54,51,51,53,57,84,239,157,191,84,84,54,51,51,54,49,84,239,158,129,84,84,54,51,51,55,51,84,239,158,141,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19917 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19917_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19917_s.txt", Encoding.UTF8);

    public Test19917() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersf0a96ab3064046f8a2fc77e6e3ebae9e",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,56,56,48,57,57,84,243,177,143,131,84,84,57,56,56,49,48,48,84,243,177,143,132,84,84,57,56,56,49,48,49,84,243,177,143,133,84,84,57,56,56,49,48,50,84,243,177,143,134,84,84,57,56,56,49,48,51,84,243,177,143,135,84,84,57,56,56,49,48,52,84,243,177,143,136,84,84,57,56,56,49,48,53,84,243,177,143,137,84,84,57,56,56,49,48,54,84,243,177,143,138,84,84,57,56,56,49,48,55,84,243,177,143,139,84,84,57,56,56,49,48,56,84,243,177,143,140,84,84,57,56,56,49,48,57,84,243,177,143,141,84,84,57,56,56,49,49,48,84,243,177,143,142,84,84,57,56,56,49,49,49,84,243,177,143,143,84,84,57,56,56,49,49,50,84,243,177,143,144,84,84,57,56,56,49,49,51,84,243,177,143,145,84,84,57,56,56,49,49,52,84,243,177,143,146,84,84,57,56,56,49,49,53,84,243,177,143,147,84,84,57,56,56,49,49,54,84,243,177,143,148,84,84,57,56,56,49,49,55,84,243,177,143,149,84,84,57,56,56,49,49,56,84,243,177,143,150,84,84,57,56,56,49,49,57,84,243,177,143,151,84,84,57,56,56,49,50,48,84,243,177,143,152,84,84,57,56,56,49,50,49,84,243,177,143,153,84,84,57,56,56,49,50,50,84,243,177,143,154,84,84,57,56,56,49,50,51,84,243,177,143,155,84,84,57,56,56,49,50,52,84,243,177,143,156,84,84,57,56,56,49,50,53,84,243,177,143,157,84,84,57,56,56,49,50,54,84,243,177,143,158,84,84,57,56,56,49,50,55,84,243,177,143,159,84,84,57,56,56,49,50,56,84,243,177,143,160,84,84,57,56,56,49,50,57,84,243,177,143,161,84,84,57,56,56,49,51,48,84,243,177,143,162,84,84,57,56,56,49,51,49,84,243,177,143,163,84,84,57,56,56,49,51,50,84,243,177,143,164,84,84,57,56,56,49,51,51,84,243,177,143,165,84,84,57,56,56,49,51,52,84,243,177,143,166,84,84,57,56,56,49,51,53,84,243,177,143,167,84,84,57,56,56,49,51,54,84,243,177,143,168,84,84,57,56,56,49,51,55,84,243,177,143,169,84,84,57,56,56,49,51,56,84,243,177,143,170,84,84,57,56,56,49,51,57,84,243,177,143,171,84,84,57,56,56,49,52,48,84,243,177,143,172,84,84,57,56,56,49,52,49,84,243,177,143,173,84,84,57,56,56,49,52,50,84,243,177,143,174,84,84,57,56,56,49,52,51,84,243,177,143,175,84,84,57,56,56,49,52,52,84,243,177,143,176,84,84,57,56,56,49,52,53,84,243,177,143,177,84,84,57,56,56,49,52,54,84,243,177,143,178,84,84,57,56,56,49,52,55,84,243,177,143,179,84,84,57,56,56,49,52,56,84,243,177,143,180,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20709 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20709_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20709_s.txt", Encoding.UTF8);

    public Test20709() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers0bb7ae45edef4594997d97499d26b519",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,56,57,52,48,57,84,244,137,190,129,84,84,49,48,56,57,52,50,49,84,244,137,190,141,84,84,49,48,56,57,52,50,51,84,244,137,190,143,84,84,49,48,56,57,52,50,52,84,244,137,190,144,84,84,49,48,56,57,52,51,55,84,244,137,190,157,84,84,49,48,56,57,52,55,51,84,244,137,191,129,84,84,49,48,56,57,52,56,53,84,244,137,191,141,84,84,49,48,56,57,52,56,55,84,244,137,191,143,84,84,49,48,56,57,52,56,56,84,244,137,191,144,84,84,49,48,56,57,53,48,49,84,244,137,191,157,84,84,49,48,56,57,53,51,55,84,244,138,128,129,84,84,49,48,56,57,53,52,57,84,244,138,128,141,84,84,49,48,56,57,53,53,49,84,244,138,128,143,84,84,49,48,56,57,53,53,50,84,244,138,128,144,84,84,49,48,56,57,53,54,53,84,244,138,128,157,84,84,49,48,56,57,54,48,48,84,244,138,129,128,84,84,49,48,56,57,54,48,49,84,244,138,129,129,84,84,49,48,56,57,54,48,50,84,244,138,129,130,84,84,49,48,56,57,54,48,51,84,244,138,129,131,84,84,49,48,56,57,54,48,52,84,244,138,129,132,84,84,49,48,56,57,54,48,53,84,244,138,129,133,84,84,49,48,56,57,54,48,54,84,244,138,129,134,84,84,49,48,56,57,54,48,55,84,244,138,129,135,84,84,49,48,56,57,54,48,56,84,244,138,129,136,84,84,49,48,56,57,54,48,57,84,244,138,129,137,84,84,49,48,56,57,54,49,48,84,244,138,129,138,84,84,49,48,56,57,54,49,49,84,244,138,129,139,84,84,49,48,56,57,54,49,50,84,244,138,129,140,84,84,49,48,56,57,54,49,51,84,244,138,129,141,84,84,49,48,56,57,54,49,52,84,244,138,129,142,84,84,49,48,56,57,54,49,53,84,244,138,129,143,84,84,49,48,56,57,54,49,54,84,244,138,129,144,84,84,49,48,56,57,54,49,55,84,244,138,129,145,84,84,49,48,56,57,54,49,56,84,244,138,129,146,84,84,49,48,56,57,54,49,57,84,244,138,129,147,84,84,49,48,56,57,54,50,48,84,244,138,129,148,84,84,49,48,56,57,54,50,49,84,244,138,129,149,84,84,49,48,56,57,54,50,50,84,244,138,129,150,84,84,49,48,56,57,54,50,51,84,244,138,129,151,84,84,49,48,56,57,54,50,52,84,244,138,129,152,84,84,49,48,56,57,54,50,53,84,244,138,129,153,84,84,49,48,56,57,54,50,54,84,244,138,129,154,84,84,49,48,56,57,54,50,55,84,244,138,129,155,84,84,49,48,56,57,54,50,56,84,244,138,129,156,84,84,49,48,56,57,54,50,57,84,244,138,129,157,84,84,49,48,56,57,54,51,48,84,244,138,129,158,84,84,49,48,56,57,54,51,49,84,244,138,129,159,84,84,49,48,56,57,54,51,50,84,244,138,129,160,84,84,49,48,56,57,54,51,51,84,244,138,129,161,84,84,49,48,56,57,54,51,52,84,244,138,129,162,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20364 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20364_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20364_s.txt", Encoding.UTF8);

    public Test20364() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers319eca44915441a6b60a6025f5eab2bd",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,51,53,55,56,84,244,129,142,138,84,84,49,48,53,51,53,55,57,84,244,129,142,139,84,84,49,48,53,51,53,56,48,84,244,129,142,140,84,84,49,48,53,51,53,56,49,84,244,129,142,141,84,84,49,48,53,51,53,56,50,84,244,129,142,142,84,84,49,48,53,51,53,56,51,84,244,129,142,143,84,84,49,48,53,51,53,56,52,84,244,129,142,144,84,84,49,48,53,51,53,56,53,84,244,129,142,145,84,84,49,48,53,51,53,56,54,84,244,129,142,146,84,84,49,48,53,51,53,56,55,84,244,129,142,147,84,84,49,48,53,51,53,56,56,84,244,129,142,148,84,84,49,48,53,51,53,56,57,84,244,129,142,149,84,84,49,48,53,51,53,57,48,84,244,129,142,150,84,84,49,48,53,51,53,57,49,84,244,129,142,151,84,84,49,48,53,51,53,57,50,84,244,129,142,152,84,84,49,48,53,51,53,57,51,84,244,129,142,153,84,84,49,48,53,51,53,57,52,84,244,129,142,154,84,84,49,48,53,51,53,57,53,84,244,129,142,155,84,84,49,48,53,51,53,57,54,84,244,129,142,156,84,84,49,48,53,51,53,57,55,84,244,129,142,157,84,84,49,48,53,51,53,57,56,84,244,129,142,158,84,84,49,48,53,51,53,57,57,84,244,129,142,159,84,84,49,48,53,51,54,48,48,84,244,129,142,160,84,84,49,48,53,51,54,48,49,84,244,129,142,161,84,84,49,48,53,51,54,48,50,84,244,129,142,162,84,84,49,48,53,51,54,48,51,84,244,129,142,163,84,84,49,48,53,51,54,48,52,84,244,129,142,164,84,84,49,48,53,51,54,48,53,84,244,129,142,165,84,84,49,48,53,51,54,48,54,84,244,129,142,166,84,84,49,48,53,51,54,48,55,84,244,129,142,167,84,84,49,48,53,51,54,48,56,84,244,129,142,168,84,84,49,48,53,51,54,48,57,84,244,129,142,169,84,84,49,48,53,51,54,49,48,84,244,129,142,170,84,84,49,48,53,51,54,49,49,84,244,129,142,171,84,84,49,48,53,51,54,49,50,84,244,129,142,172,84,84,49,48,53,51,54,49,51,84,244,129,142,173,84,84,49,48,53,51,54,49,52,84,244,129,142,174,84,84,49,48,53,51,54,49,53,84,244,129,142,175,84,84,49,48,53,51,54,49,54,84,244,129,142,176,84,84,49,48,53,51,54,49,55,84,244,129,142,177,84,84,49,48,53,51,54,49,56,84,244,129,142,178,84,84,49,48,53,51,54,49,57,84,244,129,142,179,84,84,49,48,53,51,54,50,48,84,244,129,142,180,84,84,49,48,53,51,54,50,49,84,244,129,142,181,84,84,49,48,53,51,54,50,50,84,244,129,142,182,84,84,49,48,53,51,54,50,51,84,244,129,142,183,84,84,49,48,53,51,54,50,52,84,244,129,142,184,84,84,49,48,53,51,54,50,53,84,244,129,142,185,84,84,49,48,53,51,54,50,54,84,244,129,142,186,84,84,49,48,53,51,54,50,55,84,244,129,142,187,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20042 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20042_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20042_s.txt", Encoding.UTF8);

    public Test20042() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers612d6939acd44cdbbba30cffbd18a713",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,48,55,55,53,57,84,243,182,130,143,84,84,49,48,48,55,55,54,48,84,243,182,130,144,84,84,49,48,48,55,55,55,51,84,243,182,130,157,84,84,49,48,48,55,56,48,57,84,243,182,131,129,84,84,49,48,48,55,56,50,49,84,243,182,131,141,84,84,49,48,48,55,56,50,51,84,243,182,131,143,84,84,49,48,48,55,56,50,52,84,243,182,131,144,84,84,49,48,48,55,56,51,55,84,243,182,131,157,84,84,49,48,48,55,56,55,51,84,243,182,132,129,84,84,49,48,48,55,56,56,53,84,243,182,132,141,84,84,49,48,48,55,56,56,55,84,243,182,132,143,84,84,49,48,48,55,56,56,56,84,243,182,132,144,84,84,49,48,48,55,57,48,49,84,243,182,132,157,84,84,49,48,48,55,57,51,55,84,243,182,133,129,84,84,49,48,48,55,57,52,57,84,243,182,133,141,84,84,49,48,48,55,57,53,49,84,243,182,133,143,84,84,49,48,48,55,57,53,50,84,243,182,133,144,84,84,49,48,48,55,57,54,53,84,243,182,133,157,84,84,49,48,48,56,48,48,49,84,243,182,134,129,84,84,49,48,48,56,48,49,51,84,243,182,134,141,84,84,49,48,48,56,48,49,53,84,243,182,134,143,84,84,49,48,48,56,48,49,54,84,243,182,134,144,84,84,49,48,48,56,48,50,57,84,243,182,134,157,84,84,49,48,48,56,48,54,53,84,243,182,135,129,84,84,49,48,48,56,48,55,55,84,243,182,135,141,84,84,49,48,48,56,48,55,57,84,243,182,135,143,84,84,49,48,48,56,48,56,48,84,243,182,135,144,84,84,49,48,48,56,48,57,51,84,243,182,135,157,84,84,49,48,48,56,49,50,57,84,243,182,136,129,84,84,49,48,48,56,49,52,49,84,243,182,136,141,84,84,49,48,48,56,49,52,51,84,243,182,136,143,84,84,49,48,48,56,49,52,52,84,243,182,136,144,84,84,49,48,48,56,49,53,55,84,243,182,136,157,84,84,49,48,48,56,49,57,51,84,243,182,137,129,84,84,49,48,48,56,50,48,53,84,243,182,137,141,84,84,49,48,48,56,50,48,55,84,243,182,137,143,84,84,49,48,48,56,50,48,56,84,243,182,137,144,84,84,49,48,48,56,50,50,49,84,243,182,137,157,84,84,49,48,48,56,50,53,55,84,243,182,138,129,84,84,49,48,48,56,50,54,57,84,243,182,138,141,84,84,49,48,48,56,50,55,49,84,243,182,138,143,84,84,49,48,48,56,50,55,50,84,243,182,138,144,84,84,49,48,48,56,50,56,53,84,243,182,138,157,84,84,49,48,48,56,51,50,49,84,243,182,139,129,84,84,49,48,48,56,51,51,51,84,243,182,139,141,84,84,49,48,48,56,51,51,53,84,243,182,139,143,84,84,49,48,48,56,51,51,54,84,243,182,139,144,84,84,49,48,48,56,51,52,57,84,243,182,139,157,84,84,49,48,48,56,51,56,53,84,243,182,140,129,84,84,49,48,48,56,51,57,55,84,243,182,140,141,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20870 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20870_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20870_s.txt", Encoding.UTF8);

    public Test20870() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersdd41d3a5bb7f42709f7cec587f1a204a",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,51,55,54,57,84,244,141,158,153,84,84,49,49,48,51,55,55,48,84,244,141,158,154,84,84,49,49,48,51,55,55,49,84,244,141,158,155,84,84,49,49,48,51,55,55,50,84,244,141,158,156,84,84,49,49,48,51,55,55,51,84,244,141,158,157,84,84,49,49,48,51,55,55,52,84,244,141,158,158,84,84,49,49,48,51,55,55,53,84,244,141,158,159,84,84,49,49,48,51,55,55,54,84,244,141,158,160,84,84,49,49,48,51,55,55,55,84,244,141,158,161,84,84,49,49,48,51,55,55,56,84,244,141,158,162,84,84,49,49,48,51,55,55,57,84,244,141,158,163,84,84,49,49,48,51,55,56,48,84,244,141,158,164,84,84,49,49,48,51,55,56,49,84,244,141,158,165,84,84,49,49,48,51,55,56,50,84,244,141,158,166,84,84,49,49,48,51,55,56,51,84,244,141,158,167,84,84,49,49,48,51,55,56,52,84,244,141,158,168,84,84,49,49,48,51,55,56,53,84,244,141,158,169,84,84,49,49,48,51,55,56,54,84,244,141,158,170,84,84,49,49,48,51,55,56,55,84,244,141,158,171,84,84,49,49,48,51,55,56,56,84,244,141,158,172,84,84,49,49,48,51,55,56,57,84,244,141,158,173,84,84,49,49,48,51,55,57,48,84,244,141,158,174,84,84,49,49,48,51,55,57,49,84,244,141,158,175,84,84,49,49,48,51,55,57,50,84,244,141,158,176,84,84,49,49,48,51,55,57,51,84,244,141,158,177,84,84,49,49,48,51,55,57,52,84,244,141,158,178,84,84,49,49,48,51,55,57,53,84,244,141,158,179,84,84,49,49,48,51,55,57,54,84,244,141,158,180,84,84,49,49,48,51,55,57,55,84,244,141,158,181,84,84,49,49,48,51,55,57,56,84,244,141,158,182,84,84,49,49,48,51,55,57,57,84,244,141,158,183,84,84,49,49,48,51,56,48,48,84,244,141,158,184,84,84,49,49,48,51,56,48,49,84,244,141,158,185,84,84,49,49,48,51,56,48,50,84,244,141,158,186,84,84,49,49,48,51,56,48,51,84,244,141,158,187,84,84,49,49,48,51,56,48,52,84,244,141,158,188,84,84,49,49,48,51,56,48,53,84,244,141,158,189,84,84,49,49,48,51,56,48,54,84,244,141,158,190,84,84,49,49,48,51,56,48,55,84,244,141,158,191,84,84,49,49,48,51,56,48,56,84,244,141,159,128,84,84,49,49,48,51,56,48,57,84,244,141,159,129,84,84,49,49,48,51,56,49,48,84,244,141,159,130,84,84,49,49,48,51,56,49,49,84,244,141,159,131,84,84,49,49,48,51,56,49,50,84,244,141,159,132,84,84,49,49,48,51,56,49,51,84,244,141,159,133,84,84,49,49,48,51,56,49,52,84,244,141,159,134,84,84,49,49,48,51,56,49,53,84,244,141,159,135,84,84,49,49,48,51,56,49,54,84,244,141,159,136,84,84,49,49,48,51,56,49,55,84,244,141,159,137,84,84,49,49,48,51,56,49,56,84,244,141,159,138,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20197 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20197_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20197_s.txt", Encoding.UTF8);

    public Test20197() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers2b6cdd6684eb4500abcaa682adc323b7",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,51,50,50,56,50,84,243,188,129,154,84,84,49,48,51,50,50,56,51,84,243,188,129,155,84,84,49,48,51,50,50,56,52,84,243,188,129,156,84,84,49,48,51,50,50,56,53,84,243,188,129,157,84,84,49,48,51,50,50,56,54,84,243,188,129,158,84,84,49,48,51,50,50,56,55,84,243,188,129,159,84,84,49,48,51,50,50,56,56,84,243,188,129,160,84,84,49,48,51,50,50,56,57,84,243,188,129,161,84,84,49,48,51,50,50,57,48,84,243,188,129,162,84,84,49,48,51,50,50,57,49,84,243,188,129,163,84,84,49,48,51,50,50,57,50,84,243,188,129,164,84,84,49,48,51,50,50,57,51,84,243,188,129,165,84,84,49,48,51,50,50,57,52,84,243,188,129,166,84,84,49,48,51,50,50,57,53,84,243,188,129,167,84,84,49,48,51,50,50,57,54,84,243,188,129,168,84,84,49,48,51,50,50,57,55,84,243,188,129,169,84,84,49,48,51,50,50,57,56,84,243,188,129,170,84,84,49,48,51,50,50,57,57,84,243,188,129,171,84,84,49,48,51,50,51,48,48,84,243,188,129,172,84,84,49,48,51,50,51,48,49,84,243,188,129,173,84,84,49,48,51,50,51,48,50,84,243,188,129,174,84,84,49,48,51,50,51,48,51,84,243,188,129,175,84,84,49,48,51,50,51,48,52,84,243,188,129,176,84,84,49,48,51,50,51,48,53,84,243,188,129,177,84,84,49,48,51,50,51,48,54,84,243,188,129,178,84,84,49,48,51,50,51,48,55,84,243,188,129,179,84,84,49,48,51,50,51,48,56,84,243,188,129,180,84,84,49,48,51,50,51,48,57,84,243,188,129,181,84,84,49,48,51,50,51,49,48,84,243,188,129,182,84,84,49,48,51,50,51,49,49,84,243,188,129,183,84,84,49,48,51,50,51,49,50,84,243,188,129,184,84,84,49,48,51,50,51,49,51,84,243,188,129,185,84,84,49,48,51,50,51,49,52,84,243,188,129,186,84,84,49,48,51,50,51,49,53,84,243,188,129,187,84,84,49,48,51,50,51,49,54,84,243,188,129,188,84,84,49,48,51,50,51,49,55,84,243,188,129,189,84,84,49,48,51,50,51,49,56,84,243,188,129,190,84,84,49,48,51,50,51,49,57,84,243,188,129,191,84,84,49,48,51,50,51,50,49,84,243,188,130,129,84,84,49,48,51,50,51,51,51,84,243,188,130,141,84,84,49,48,51,50,51,51,53,84,243,188,130,143,84,84,49,48,51,50,51,51,54,84,243,188,130,144,84,84,49,48,51,50,51,52,57,84,243,188,130,157,84,84,49,48,51,50,51,56,53,84,243,188,131,129,84,84,49,48,51,50,51,57,55,84,243,188,131,141,84,84,49,48,51,50,51,57,57,84,243,188,131,143,84,84,49,48,51,50,52,48,48,84,243,188,131,144,84,84,49,48,51,50,52,49,51,84,243,188,131,157,84,84,49,48,51,50,52,52,57,84,243,188,132,129,84,84,49,48,51,50,52,54,49,84,243,188,132,141,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19975 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19975_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19975_s.txt", Encoding.UTF8);

    public Test19975() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersc5d3e7c5509046d2aa3f8bb095571b82",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,57,54,52,49,49,84,243,179,144,187,84,84,57,57,54,52,49,50,84,243,179,144,188,84,84,57,57,54,52,49,51,84,243,179,144,189,84,84,57,57,54,52,49,52,84,243,179,144,190,84,84,57,57,54,52,49,53,84,243,179,144,191,84,84,57,57,54,52,49,55,84,243,179,145,129,84,84,57,57,54,52,50,57,84,243,179,145,141,84,84,57,57,54,52,51,49,84,243,179,145,143,84,84,57,57,54,52,51,50,84,243,179,145,144,84,84,57,57,54,52,52,53,84,243,179,145,157,84,84,57,57,54,52,56,49,84,243,179,146,129,84,84,57,57,54,52,57,51,84,243,179,146,141,84,84,57,57,54,52,57,53,84,243,179,146,143,84,84,57,57,54,52,57,54,84,243,179,146,144,84,84,57,57,54,53,48,57,84,243,179,146,157,84,84,57,57,54,53,52,53,84,243,179,147,129,84,84,57,57,54,53,53,55,84,243,179,147,141,84,84,57,57,54,53,53,57,84,243,179,147,143,84,84,57,57,54,53,54,48,84,243,179,147,144,84,84,57,57,54,53,55,51,84,243,179,147,157,84,84,57,57,54,54,48,57,84,243,179,148,129,84,84,57,57,54,54,50,49,84,243,179,148,141,84,84,57,57,54,54,50,51,84,243,179,148,143,84,84,57,57,54,54,50,52,84,243,179,148,144,84,84,57,57,54,54,51,55,84,243,179,148,157,84,84,57,57,54,54,55,51,84,243,179,149,129,84,84,57,57,54,54,56,53,84,243,179,149,141,84,84,57,57,54,54,56,55,84,243,179,149,143,84,84,57,57,54,54,56,56,84,243,179,149,144,84,84,57,57,54,55,48,49,84,243,179,149,157,84,84,57,57,54,55,51,55,84,243,179,150,129,84,84,57,57,54,55,52,57,84,243,179,150,141,84,84,57,57,54,55,53,49,84,243,179,150,143,84,84,57,57,54,55,53,50,84,243,179,150,144,84,84,57,57,54,55,54,53,84,243,179,150,157,84,84,57,57,54,56,48,49,84,243,179,151,129,84,84,57,57,54,56,49,51,84,243,179,151,141,84,84,57,57,54,56,49,53,84,243,179,151,143,84,84,57,57,54,56,49,54,84,243,179,151,144,84,84,57,57,54,56,50,57,84,243,179,151,157,84,84,57,57,54,56,54,53,84,243,179,152,129,84,84,57,57,54,56,55,55,84,243,179,152,141,84,84,57,57,54,56,55,57,84,243,179,152,143,84,84,57,57,54,56,56,48,84,243,179,152,144,84,84,57,57,54,56,57,51,84,243,179,152,157,84,84,57,57,54,57,50,57,84,243,179,153,129,84,84,57,57,54,57,52,49,84,243,179,153,141,84,84,57,57,54,57,52,51,84,243,179,153,143,84,84,57,57,54,57,52,52,84,243,179,153,144,84,84,57,57,54,57,53,55,84,243,179,153,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20644 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20644_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20644_s.txt", Encoding.UTF8);

    public Test20644() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers5f5b393ed8e742338d6031fb2e225092",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,55,56,52,57,51,84,244,135,147,157,84,84,49,48,55,56,53,50,57,84,244,135,148,129,84,84,49,48,55,56,53,52,49,84,244,135,148,141,84,84,49,48,55,56,53,52,51,84,244,135,148,143,84,84,49,48,55,56,53,52,52,84,244,135,148,144,84,84,49,48,55,56,53,53,55,84,244,135,148,157,84,84,49,48,55,56,53,57,51,84,244,135,149,129,84,84,49,48,55,56,54,48,53,84,244,135,149,141,84,84,49,48,55,56,54,48,55,84,244,135,149,143,84,84,49,48,55,56,54,48,56,84,244,135,149,144,84,84,49,48,55,56,54,50,49,84,244,135,149,157,84,84,49,48,55,56,54,53,55,84,244,135,150,129,84,84,49,48,55,56,54,54,57,84,244,135,150,141,84,84,49,48,55,56,54,55,49,84,244,135,150,143,84,84,49,48,55,56,54,55,50,84,244,135,150,144,84,84,49,48,55,56,54,56,53,84,244,135,150,157,84,84,49,48,55,56,55,50,49,84,244,135,151,129,84,84,49,48,55,56,55,51,51,84,244,135,151,141,84,84,49,48,55,56,55,51,53,84,244,135,151,143,84,84,49,48,55,56,55,51,54,84,244,135,151,144,84,84,49,48,55,56,55,52,57,84,244,135,151,157,84,84,49,48,55,56,55,56,53,84,244,135,152,129,84,84,49,48,55,56,55,57,55,84,244,135,152,141,84,84,49,48,55,56,55,57,57,84,244,135,152,143,84,84,49,48,55,56,56,48,48,84,244,135,152,144,84,84,49,48,55,56,56,49,51,84,244,135,152,157,84,84,49,48,55,56,56,52,57,84,244,135,153,129,84,84,49,48,55,56,56,54,49,84,244,135,153,141,84,84,49,48,55,56,56,54,51,84,244,135,153,143,84,84,49,48,55,56,56,54,52,84,244,135,153,144,84,84,49,48,55,56,56,55,55,84,244,135,153,157,84,84,49,48,55,56,57,49,51,84,244,135,154,129,84,84,49,48,55,56,57,50,53,84,244,135,154,141,84,84,49,48,55,56,57,50,55,84,244,135,154,143,84,84,49,48,55,56,57,50,56,84,244,135,154,144,84,84,49,48,55,56,57,52,49,84,244,135,154,157,84,84,49,48,55,56,57,55,55,84,244,135,155,129,84,84,49,48,55,56,57,56,57,84,244,135,155,141,84,84,49,48,55,56,57,57,49,84,244,135,155,143,84,84,49,48,55,56,57,57,50,84,244,135,155,144,84,84,49,48,55,57,48,48,53,84,244,135,155,157,84,84,49,48,55,57,48,52,49,84,244,135,156,129,84,84,49,48,55,57,48,53,51,84,244,135,156,141,84,84,49,48,55,57,48,53,53,84,244,135,156,143,84,84,49,48,55,57,48,53,54,84,244,135,156,144,84,84,49,48,55,57,48,54,57,84,244,135,156,157,84,84,49,48,55,57,49,48,52,84,244,135,157,128,84,84,49,48,55,57,49,48,53,84,244,135,157,129,84,84,49,48,55,57,49,48,54,84,244,135,157,130,84,84,49,48,55,57,49,48,55,84,244,135,157,131,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20269 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20269_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20269_s.txt", Encoding.UTF8);

    public Test20269() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers712afb35b54344eb8fa90647f752cd92",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,52,51,48,50,49,84,243,190,169,141,84,84,49,48,52,51,48,50,51,84,243,190,169,143,84,84,49,48,52,51,48,50,52,84,243,190,169,144,84,84,49,48,52,51,48,51,55,84,243,190,169,157,84,84,49,48,52,51,48,55,51,84,243,190,170,129,84,84,49,48,52,51,48,56,53,84,243,190,170,141,84,84,49,48,52,51,48,56,55,84,243,190,170,143,84,84,49,48,52,51,48,56,56,84,243,190,170,144,84,84,49,48,52,51,49,48,49,84,243,190,170,157,84,84,49,48,52,51,49,51,55,84,243,190,171,129,84,84,49,48,52,51,49,52,57,84,243,190,171,141,84,84,49,48,52,51,49,53,49,84,243,190,171,143,84,84,49,48,52,51,49,53,50,84,243,190,171,144,84,84,49,48,52,51,49,54,53,84,243,190,171,157,84,84,49,48,52,51,50,48,49,84,243,190,172,129,84,84,49,48,52,51,50,49,51,84,243,190,172,141,84,84,49,48,52,51,50,49,53,84,243,190,172,143,84,84,49,48,52,51,50,49,54,84,243,190,172,144,84,84,49,48,52,51,50,50,57,84,243,190,172,157,84,84,49,48,52,51,50,54,53,84,243,190,173,129,84,84,49,48,52,51,50,55,55,84,243,190,173,141,84,84,49,48,52,51,50,55,57,84,243,190,173,143,84,84,49,48,52,51,50,56,48,84,243,190,173,144,84,84,49,48,52,51,50,57,51,84,243,190,173,157,84,84,49,48,52,51,51,50,57,84,243,190,174,129,84,84,49,48,52,51,51,52,49,84,243,190,174,141,84,84,49,48,52,51,51,52,51,84,243,190,174,143,84,84,49,48,52,51,51,52,52,84,243,190,174,144,84,84,49,48,52,51,51,53,55,84,243,190,174,157,84,84,49,48,52,51,51,57,51,84,243,190,175,129,84,84,49,48,52,51,52,48,53,84,243,190,175,141,84,84,49,48,52,51,52,48,55,84,243,190,175,143,84,84,49,48,52,51,52,48,56,84,243,190,175,144,84,84,49,48,52,51,52,50,49,84,243,190,175,157,84,84,49,48,52,51,52,53,55,84,243,190,176,129,84,84,49,48,52,51,52,54,57,84,243,190,176,141,84,84,49,48,52,51,52,55,49,84,243,190,176,143,84,84,49,48,52,51,52,55,50,84,243,190,176,144,84,84,49,48,52,51,52,56,53,84,243,190,176,157,84,84,49,48,52,51,53,50,49,84,243,190,177,129,84,84,49,48,52,51,53,51,51,84,243,190,177,141,84,84,49,48,52,51,53,51,53,84,243,190,177,143,84,84,49,48,52,51,53,51,54,84,243,190,177,144,84,84,49,48,52,51,53,52,57,84,243,190,177,157,84,84,49,48,52,51,53,56,53,84,243,190,178,129,84,84,49,48,52,51,53,57,55,84,243,190,178,141,84,84,49,48,52,51,53,57,57,84,243,190,178,143,84,84,49,48,52,51,54,48,48,84,243,190,178,144,84,84,49,48,52,51,54,49,51,84,243,190,178,157,84,84,49,48,52,51,54,52,57,84,243,190,179,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20925 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20925_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20925_s.txt", Encoding.UTF8);

    public Test20925() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers9e891393b2624599aedf317812121dcf",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,53,48,54,57,84,244,141,178,173,84,84,49,49,48,53,48,55,48,84,244,141,178,174,84,84,49,49,48,53,48,55,49,84,244,141,178,175,84,84,49,49,48,53,48,55,50,84,244,141,178,176,84,84,49,49,48,53,48,55,51,84,244,141,178,177,84,84,49,49,48,53,48,55,52,84,244,141,178,178,84,84,49,49,48,53,48,55,53,84,244,141,178,179,84,84,49,49,48,53,48,55,54,84,244,141,178,180,84,84,49,49,48,53,48,55,55,84,244,141,178,181,84,84,49,49,48,53,48,55,56,84,244,141,178,182,84,84,49,49,48,53,48,55,57,84,244,141,178,183,84,84,49,49,48,53,48,56,48,84,244,141,178,184,84,84,49,49,48,53,48,56,49,84,244,141,178,185,84,84,49,49,48,53,48,56,50,84,244,141,178,186,84,84,49,49,48,53,48,56,51,84,244,141,178,187,84,84,49,49,48,53,48,56,52,84,244,141,178,188,84,84,49,49,48,53,48,56,53,84,244,141,178,189,84,84,49,49,48,53,48,56,54,84,244,141,178,190,84,84,49,49,48,53,48,56,55,84,244,141,178,191,84,84,49,49,48,53,48,56,56,84,244,141,179,128,84,84,49,49,48,53,48,56,57,84,244,141,179,129,84,84,49,49,48,53,48,57,48,84,244,141,179,130,84,84,49,49,48,53,48,57,49,84,244,141,179,131,84,84,49,49,48,53,48,57,50,84,244,141,179,132,84,84,49,49,48,53,48,57,51,84,244,141,179,133,84,84,49,49,48,53,48,57,52,84,244,141,179,134,84,84,49,49,48,53,48,57,53,84,244,141,179,135,84,84,49,49,48,53,48,57,54,84,244,141,179,136,84,84,49,49,48,53,48,57,55,84,244,141,179,137,84,84,49,49,48,53,48,57,56,84,244,141,179,138,84,84,49,49,48,53,48,57,57,84,244,141,179,139,84,84,49,49,48,53,49,48,48,84,244,141,179,140,84,84,49,49,48,53,49,48,49,84,244,141,179,141,84,84,49,49,48,53,49,48,50,84,244,141,179,142,84,84,49,49,48,53,49,48,51,84,244,141,179,143,84,84,49,49,48,53,49,48,52,84,244,141,179,144,84,84,49,49,48,53,49,48,53,84,244,141,179,145,84,84,49,49,48,53,49,48,54,84,244,141,179,146,84,84,49,49,48,53,49,48,55,84,244,141,179,147,84,84,49,49,48,53,49,48,56,84,244,141,179,148,84,84,49,49,48,53,49,48,57,84,244,141,179,149,84,84,49,49,48,53,49,49,48,84,244,141,179,150,84,84,49,49,48,53,49,49,49,84,244,141,179,151,84,84,49,49,48,53,49,49,50,84,244,141,179,152,84,84,49,49,48,53,49,49,51,84,244,141,179,153,84,84,49,49,48,53,49,49,52,84,244,141,179,154,84,84,49,49,48,53,49,49,53,84,244,141,179,155,84,84,49,49,48,53,49,49,54,84,244,141,179,156,84,84,49,49,48,53,49,49,55,84,244,141,179,157,84,84,49,49,48,53,49,49,56,84,244,141,179,158,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20804 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20804_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20804_s.txt", Encoding.UTF8);

    public Test20804() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers8240a720eb234783afd6a68d24f64161",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,50,50,49,57,84,244,141,134,139,84,84,49,49,48,50,50,50,48,84,244,141,134,140,84,84,49,49,48,50,50,50,49,84,244,141,134,141,84,84,49,49,48,50,50,50,50,84,244,141,134,142,84,84,49,49,48,50,50,50,51,84,244,141,134,143,84,84,49,49,48,50,50,50,52,84,244,141,134,144,84,84,49,49,48,50,50,50,53,84,244,141,134,145,84,84,49,49,48,50,50,50,54,84,244,141,134,146,84,84,49,49,48,50,50,50,55,84,244,141,134,147,84,84,49,49,48,50,50,50,56,84,244,141,134,148,84,84,49,49,48,50,50,50,57,84,244,141,134,149,84,84,49,49,48,50,50,51,48,84,244,141,134,150,84,84,49,49,48,50,50,51,49,84,244,141,134,151,84,84,49,49,48,50,50,51,50,84,244,141,134,152,84,84,49,49,48,50,50,51,51,84,244,141,134,153,84,84,49,49,48,50,50,51,52,84,244,141,134,154,84,84,49,49,48,50,50,51,53,84,244,141,134,155,84,84,49,49,48,50,50,51,54,84,244,141,134,156,84,84,49,49,48,50,50,51,55,84,244,141,134,157,84,84,49,49,48,50,50,51,56,84,244,141,134,158,84,84,49,49,48,50,50,51,57,84,244,141,134,159,84,84,49,49,48,50,50,52,48,84,244,141,134,160,84,84,49,49,48,50,50,52,49,84,244,141,134,161,84,84,49,49,48,50,50,52,50,84,244,141,134,162,84,84,49,49,48,50,50,52,51,84,244,141,134,163,84,84,49,49,48,50,50,52,52,84,244,141,134,164,84,84,49,49,48,50,50,52,53,84,244,141,134,165,84,84,49,49,48,50,50,52,54,84,244,141,134,166,84,84,49,49,48,50,50,52,55,84,244,141,134,167,84,84,49,49,48,50,50,52,56,84,244,141,134,168,84,84,49,49,48,50,50,52,57,84,244,141,134,169,84,84,49,49,48,50,50,53,48,84,244,141,134,170,84,84,49,49,48,50,50,53,49,84,244,141,134,171,84,84,49,49,48,50,50,53,50,84,244,141,134,172,84,84,49,49,48,50,50,53,51,84,244,141,134,173,84,84,49,49,48,50,50,53,52,84,244,141,134,174,84,84,49,49,48,50,50,53,53,84,244,141,134,175,84,84,49,49,48,50,50,53,54,84,244,141,134,176,84,84,49,49,48,50,50,53,55,84,244,141,134,177,84,84,49,49,48,50,50,53,56,84,244,141,134,178,84,84,49,49,48,50,50,53,57,84,244,141,134,179,84,84,49,49,48,50,50,54,48,84,244,141,134,180,84,84,49,49,48,50,50,54,49,84,244,141,134,181,84,84,49,49,48,50,50,54,50,84,244,141,134,182,84,84,49,49,48,50,50,54,51,84,244,141,134,183,84,84,49,49,48,50,50,54,52,84,244,141,134,184,84,84,49,49,48,50,50,54,53,84,244,141,134,185,84,84,49,49,48,50,50,54,54,84,244,141,134,186,84,84,49,49,48,50,50,54,55,84,244,141,134,187,84,84,49,49,48,50,50,54,56,84,244,141,134,188,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21064 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21064_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21064_s.txt", Encoding.UTF8);

    public Test21064() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers98fd3eef9d4b4edcb3855acb5ae8645d",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,49,56,53,48,84,244,143,156,170,84,84,49,49,49,49,56,53,49,84,244,143,156,171,84,84,49,49,49,49,56,53,50,84,244,143,156,172,84,84,49,49,49,49,56,53,51,84,244,143,156,173,84,84,49,49,49,49,56,53,52,84,244,143,156,174,84,84,49,49,49,49,56,53,53,84,244,143,156,175,84,84,49,49,49,49,56,53,54,84,244,143,156,176,84,84,49,49,49,49,56,53,55,84,244,143,156,177,84,84,49,49,49,49,56,53,56,84,244,143,156,178,84,84,49,49,49,49,56,53,57,84,244,143,156,179,84,84,49,49,49,49,56,54,48,84,244,143,156,180,84,84,49,49,49,49,56,54,49,84,244,143,156,181,84,84,49,49,49,49,56,54,50,84,244,143,156,182,84,84,49,49,49,49,56,54,51,84,244,143,156,183,84,84,49,49,49,49,56,54,52,84,244,143,156,184,84,84,49,49,49,49,56,54,53,84,244,143,156,185,84,84,49,49,49,49,56,54,54,84,244,143,156,186,84,84,49,49,49,49,56,54,55,84,244,143,156,187,84,84,49,49,49,49,56,54,56,84,244,143,156,188,84,84,49,49,49,49,56,54,57,84,244,143,156,189,84,84,49,49,49,49,56,55,48,84,244,143,156,190,84,84,49,49,49,49,56,55,49,84,244,143,156,191,84,84,49,49,49,49,56,55,50,84,244,143,157,128,84,84,49,49,49,49,56,55,51,84,244,143,157,129,84,84,49,49,49,49,56,55,52,84,244,143,157,130,84,84,49,49,49,49,56,55,53,84,244,143,157,131,84,84,49,49,49,49,56,55,54,84,244,143,157,132,84,84,49,49,49,49,56,55,55,84,244,143,157,133,84,84,49,49,49,49,56,55,56,84,244,143,157,134,84,84,49,49,49,49,56,55,57,84,244,143,157,135,84,84,49,49,49,49,56,56,48,84,244,143,157,136,84,84,49,49,49,49,56,56,49,84,244,143,157,137,84,84,49,49,49,49,56,56,50,84,244,143,157,138,84,84,49,49,49,49,56,56,51,84,244,143,157,139,84,84,49,49,49,49,56,56,52,84,244,143,157,140,84,84,49,49,49,49,56,56,53,84,244,143,157,141,84,84,49,49,49,49,56,56,54,84,244,143,157,142,84,84,49,49,49,49,56,56,55,84,244,143,157,143,84,84,49,49,49,49,56,56,56,84,244,143,157,144,84,84,49,49,49,49,56,56,57,84,244,143,157,145,84,84,49,49,49,49,56,57,48,84,244,143,157,146,84,84,49,49,49,49,56,57,49,84,244,143,157,147,84,84,49,49,49,49,56,57,50,84,244,143,157,148,84,84,49,49,49,49,56,57,51,84,244,143,157,149,84,84,49,49,49,49,56,57,52,84,244,143,157,150,84,84,49,49,49,49,56,57,53,84,244,143,157,151,84,84,49,49,49,49,56,57,54,84,244,143,157,152,84,84,49,49,49,49,56,57,55,84,244,143,157,153,84,84,49,49,49,49,56,57,56,84,244,143,157,154,84,84,49,49,49,49,56,57,57,84,244,143,157,155,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20044 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20044_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20044_s.txt", Encoding.UTF8);

    public Test20044() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers612d6939acd44cdbbba30cffbd18a713",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,48,56,51,57,57,84,243,182,140,143,84,84,49,48,48,56,52,48,48,84,243,182,140,144,84,84,49,48,48,56,52,49,51,84,243,182,140,157,84,84,49,48,48,56,52,52,56,84,243,182,141,128,84,84,49,48,48,56,52,52,57,84,243,182,141,129,84,84,49,48,48,56,52,53,48,84,243,182,141,130,84,84,49,48,48,56,52,53,49,84,243,182,141,131,84,84,49,48,48,56,52,53,50,84,243,182,141,132,84,84,49,48,48,56,52,53,51,84,243,182,141,133,84,84,49,48,48,56,52,53,52,84,243,182,141,134,84,84,49,48,48,56,52,53,53,84,243,182,141,135,84,84,49,48,48,56,52,53,54,84,243,182,141,136,84,84,49,48,48,56,52,53,55,84,243,182,141,137,84,84,49,48,48,56,52,53,56,84,243,182,141,138,84,84,49,48,48,56,52,53,57,84,243,182,141,139,84,84,49,48,48,56,52,54,48,84,243,182,141,140,84,84,49,48,48,56,52,54,49,84,243,182,141,141,84,84,49,48,48,56,52,54,50,84,243,182,141,142,84,84,49,48,48,56,52,54,51,84,243,182,141,143,84,84,49,48,48,56,52,54,52,84,243,182,141,144,84,84,49,48,48,56,52,54,53,84,243,182,141,145,84,84,49,48,48,56,52,54,54,84,243,182,141,146,84,84,49,48,48,56,52,54,55,84,243,182,141,147,84,84,49,48,48,56,52,54,56,84,243,182,141,148,84,84,49,48,48,56,52,54,57,84,243,182,141,149,84,84,49,48,48,56,52,55,48,84,243,182,141,150,84,84,49,48,48,56,52,55,49,84,243,182,141,151,84,84,49,48,48,56,52,55,50,84,243,182,141,152,84,84,49,48,48,56,52,55,51,84,243,182,141,153,84,84,49,48,48,56,52,55,52,84,243,182,141,154,84,84,49,48,48,56,52,55,53,84,243,182,141,155,84,84,49,48,48,56,52,55,54,84,243,182,141,156,84,84,49,48,48,56,52,55,55,84,243,182,141,157,84,84,49,48,48,56,52,55,56,84,243,182,141,158,84,84,49,48,48,56,52,55,57,84,243,182,141,159,84,84,49,48,48,56,52,56,48,84,243,182,141,160,84,84,49,48,48,56,52,56,49,84,243,182,141,161,84,84,49,48,48,56,52,56,50,84,243,182,141,162,84,84,49,48,48,56,52,56,51,84,243,182,141,163,84,84,49,48,48,56,52,56,52,84,243,182,141,164,84,84,49,48,48,56,52,56,53,84,243,182,141,165,84,84,49,48,48,56,52,56,54,84,243,182,141,166,84,84,49,48,48,56,52,56,55,84,243,182,141,167,84,84,49,48,48,56,52,56,56,84,243,182,141,168,84,84,49,48,48,56,52,56,57,84,243,182,141,169,84,84,49,48,48,56,52,57,48,84,243,182,141,170,84,84,49,48,48,56,52,57,49,84,243,182,141,171,84,84,49,48,48,56,52,57,50,84,243,182,141,172,84,84,49,48,48,56,52,57,51,84,243,182,141,173,84,84,49,48,48,56,52,57,52,84,243,182,141,174,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21122 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21122_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21122_s.txt", Encoding.UTF8);

    public Test21122() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers56d1c908d8f44b69abe6817b1847a0f6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,51,50,48,48,84,244,143,177,176,84,84,49,49,49,51,50,48,49,84,244,143,177,177,84,84,49,49,49,51,50,48,50,84,244,143,177,178,84,84,49,49,49,51,50,48,51,84,244,143,177,179,84,84,49,49,49,51,50,48,52,84,244,143,177,180,84,84,49,49,49,51,50,48,53,84,244,143,177,181,84,84,49,49,49,51,50,48,54,84,244,143,177,182,84,84,49,49,49,51,50,48,55,84,244,143,177,183,84,84,49,49,49,51,50,48,56,84,244,143,177,184,84,84,49,49,49,51,50,48,57,84,244,143,177,185,84,84,49,49,49,51,50,49,48,84,244,143,177,186,84,84,49,49,49,51,50,49,49,84,244,143,177,187,84,84,49,49,49,51,50,49,50,84,244,143,177,188,84,84,49,49,49,51,50,49,51,84,244,143,177,189,84,84,49,49,49,51,50,49,52,84,244,143,177,190,84,84,49,49,49,51,50,49,53,84,244,143,177,191,84,84,49,49,49,51,50,49,54,84,244,143,178,128,84,84,49,49,49,51,50,49,55,84,244,143,178,129,84,84,49,49,49,51,50,49,56,84,244,143,178,130,84,84,49,49,49,51,50,49,57,84,244,143,178,131,84,84,49,49,49,51,50,50,48,84,244,143,178,132,84,84,49,49,49,51,50,50,49,84,244,143,178,133,84,84,49,49,49,51,50,50,50,84,244,143,178,134,84,84,49,49,49,51,50,50,51,84,244,143,178,135,84,84,49,49,49,51,50,50,52,84,244,143,178,136,84,84,49,49,49,51,50,50,53,84,244,143,178,137,84,84,49,49,49,51,50,50,54,84,244,143,178,138,84,84,49,49,49,51,50,50,55,84,244,143,178,139,84,84,49,49,49,51,50,50,56,84,244,143,178,140,84,84,49,49,49,51,50,50,57,84,244,143,178,141,84,84,49,49,49,51,50,51,48,84,244,143,178,142,84,84,49,49,49,51,50,51,49,84,244,143,178,143,84,84,49,49,49,51,50,51,50,84,244,143,178,144,84,84,49,49,49,51,50,51,51,84,244,143,178,145,84,84,49,49,49,51,50,51,52,84,244,143,178,146,84,84,49,49,49,51,50,51,53,84,244,143,178,147,84,84,49,49,49,51,50,51,54,84,244,143,178,148,84,84,49,49,49,51,50,51,55,84,244,143,178,149,84,84,49,49,49,51,50,51,56,84,244,143,178,150,84,84,49,49,49,51,50,51,57,84,244,143,178,151,84,84,49,49,49,51,50,52,48,84,244,143,178,152,84,84,49,49,49,51,50,52,49,84,244,143,178,153,84,84,49,49,49,51,50,52,50,84,244,143,178,154,84,84,49,49,49,51,50,52,51,84,244,143,178,155,84,84,49,49,49,51,50,52,52,84,244,143,178,156,84,84,49,49,49,51,50,52,53,84,244,143,178,157,84,84,49,49,49,51,50,52,54,84,244,143,178,158,84,84,49,49,49,51,50,52,55,84,244,143,178,159,84,84,49,49,49,51,50,52,56,84,244,143,178,160,84,84,49,49,49,51,50,52,57,84,244,143,178,161,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20711 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20711_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20711_s.txt", Encoding.UTF8);

    public Test20711() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers0bb7ae45edef4594997d97499d26b519",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,56,57,54,51,53,84,244,138,129,163,84,84,49,48,56,57,54,51,54,84,244,138,129,164,84,84,49,48,56,57,54,51,55,84,244,138,129,165,84,84,49,48,56,57,54,51,56,84,244,138,129,166,84,84,49,48,56,57,54,51,57,84,244,138,129,167,84,84,49,48,56,57,54,52,48,84,244,138,129,168,84,84,49,48,56,57,54,52,49,84,244,138,129,169,84,84,49,48,56,57,54,52,50,84,244,138,129,170,84,84,49,48,56,57,54,52,51,84,244,138,129,171,84,84,49,48,56,57,54,52,52,84,244,138,129,172,84,84,49,48,56,57,54,52,53,84,244,138,129,173,84,84,49,48,56,57,54,52,54,84,244,138,129,174,84,84,49,48,56,57,54,52,55,84,244,138,129,175,84,84,49,48,56,57,54,52,56,84,244,138,129,176,84,84,49,48,56,57,54,52,57,84,244,138,129,177,84,84,49,48,56,57,54,53,48,84,244,138,129,178,84,84,49,48,56,57,54,53,49,84,244,138,129,179,84,84,49,48,56,57,54,53,50,84,244,138,129,180,84,84,49,48,56,57,54,53,51,84,244,138,129,181,84,84,49,48,56,57,54,53,52,84,244,138,129,182,84,84,49,48,56,57,54,53,53,84,244,138,129,183,84,84,49,48,56,57,54,53,54,84,244,138,129,184,84,84,49,48,56,57,54,53,55,84,244,138,129,185,84,84,49,48,56,57,54,53,56,84,244,138,129,186,84,84,49,48,56,57,54,53,57,84,244,138,129,187,84,84,49,48,56,57,54,54,48,84,244,138,129,188,84,84,49,48,56,57,54,54,49,84,244,138,129,189,84,84,49,48,56,57,54,54,50,84,244,138,129,190,84,84,49,48,56,57,54,54,51,84,244,138,129,191,84,84,49,48,56,57,54,54,53,84,244,138,130,129,84,84,49,48,56,57,54,55,55,84,244,138,130,141,84,84,49,48,56,57,54,55,57,84,244,138,130,143,84,84,49,48,56,57,54,56,48,84,244,138,130,144,84,84,49,48,56,57,54,57,51,84,244,138,130,157,84,84,49,48,56,57,55,50,57,84,244,138,131,129,84,84,49,48,56,57,55,52,49,84,244,138,131,141,84,84,49,48,56,57,55,52,51,84,244,138,131,143,84,84,49,48,56,57,55,52,52,84,244,138,131,144,84,84,49,48,56,57,55,53,55,84,244,138,131,157,84,84,49,48,56,57,55,57,51,84,244,138,132,129,84,84,49,48,56,57,56,48,53,84,244,138,132,141,84,84,49,48,56,57,56,48,55,84,244,138,132,143,84,84,49,48,56,57,56,48,56,84,244,138,132,144,84,84,49,48,56,57,56,50,49,84,244,138,132,157,84,84,49,48,56,57,56,53,55,84,244,138,133,129,84,84,49,48,56,57,56,54,57,84,244,138,133,141,84,84,49,48,56,57,56,55,49,84,244,138,133,143,84,84,49,48,56,57,56,55,50,84,244,138,133,144,84,84,49,48,56,57,56,56,53,84,244,138,133,157,84,84,49,48,56,57,57,50,49,84,244,138,134,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20140 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20140_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20140_s.txt", Encoding.UTF8);

    public Test20140() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers4f3362aed9424bd2bfac6751ee820ab9",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,50,50,56,54,49,84,243,185,174,141,84,84,49,48,50,50,56,54,51,84,243,185,174,143,84,84,49,48,50,50,56,54,52,84,243,185,174,144,84,84,49,48,50,50,56,55,55,84,243,185,174,157,84,84,49,48,50,50,57,49,51,84,243,185,175,129,84,84,49,48,50,50,57,50,53,84,243,185,175,141,84,84,49,48,50,50,57,50,55,84,243,185,175,143,84,84,49,48,50,50,57,50,56,84,243,185,175,144,84,84,49,48,50,50,57,52,49,84,243,185,175,157,84,84,49,48,50,50,57,55,55,84,243,185,176,129,84,84,49,48,50,50,57,56,57,84,243,185,176,141,84,84,49,48,50,50,57,57,49,84,243,185,176,143,84,84,49,48,50,50,57,57,50,84,243,185,176,144,84,84,49,48,50,51,48,48,53,84,243,185,176,157,84,84,49,48,50,51,48,52,49,84,243,185,177,129,84,84,49,48,50,51,48,53,51,84,243,185,177,141,84,84,49,48,50,51,48,53,53,84,243,185,177,143,84,84,49,48,50,51,48,53,54,84,243,185,177,144,84,84,49,48,50,51,48,54,57,84,243,185,177,157,84,84,49,48,50,51,49,48,53,84,243,185,178,129,84,84,49,48,50,51,49,49,55,84,243,185,178,141,84,84,49,48,50,51,49,49,57,84,243,185,178,143,84,84,49,48,50,51,49,50,48,84,243,185,178,144,84,84,49,48,50,51,49,51,51,84,243,185,178,157,84,84,49,48,50,51,49,54,57,84,243,185,179,129,84,84,49,48,50,51,49,56,49,84,243,185,179,141,84,84,49,48,50,51,49,56,51,84,243,185,179,143,84,84,49,48,50,51,49,56,52,84,243,185,179,144,84,84,49,48,50,51,49,57,55,84,243,185,179,157,84,84,49,48,50,51,50,51,51,84,243,185,180,129,84,84,49,48,50,51,50,52,53,84,243,185,180,141,84,84,49,48,50,51,50,52,55,84,243,185,180,143,84,84,49,48,50,51,50,52,56,84,243,185,180,144,84,84,49,48,50,51,50,54,49,84,243,185,180,157,84,84,49,48,50,51,50,57,55,84,243,185,181,129,84,84,49,48,50,51,51,48,57,84,243,185,181,141,84,84,49,48,50,51,51,49,49,84,243,185,181,143,84,84,49,48,50,51,51,49,50,84,243,185,181,144,84,84,49,48,50,51,51,50,53,84,243,185,181,157,84,84,49,48,50,51,51,54,49,84,243,185,182,129,84,84,49,48,50,51,51,55,51,84,243,185,182,141,84,84,49,48,50,51,51,55,53,84,243,185,182,143,84,84,49,48,50,51,51,55,54,84,243,185,182,144,84,84,49,48,50,51,51,56,57,84,243,185,182,157,84,84,49,48,50,51,52,50,53,84,243,185,183,129,84,84,49,48,50,51,52,51,55,84,243,185,183,141,84,84,49,48,50,51,52,51,57,84,243,185,183,143,84,84,49,48,50,51,52,52,48,84,243,185,183,144,84,84,49,48,50,51,52,53,51,84,243,185,183,157,84,84,49,48,50,51,52,56,57,84,243,185,184,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20366 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20366_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20366_s.txt", Encoding.UTF8);

    public Test20366() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers319eca44915441a6b60a6025f5eab2bd",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,51,54,50,56,84,244,129,142,188,84,84,49,48,53,51,54,50,57,84,244,129,142,189,84,84,49,48,53,51,54,51,48,84,244,129,142,190,84,84,49,48,53,51,54,51,49,84,244,129,142,191,84,84,49,48,53,51,54,51,50,84,244,129,143,128,84,84,49,48,53,51,54,51,51,84,244,129,143,129,84,84,49,48,53,51,54,51,52,84,244,129,143,130,84,84,49,48,53,51,54,51,53,84,244,129,143,131,84,84,49,48,53,51,54,51,54,84,244,129,143,132,84,84,49,48,53,51,54,51,55,84,244,129,143,133,84,84,49,48,53,51,54,51,56,84,244,129,143,134,84,84,49,48,53,51,54,51,57,84,244,129,143,135,84,84,49,48,53,51,54,52,48,84,244,129,143,136,84,84,49,48,53,51,54,52,49,84,244,129,143,137,84,84,49,48,53,51,54,52,50,84,244,129,143,138,84,84,49,48,53,51,54,52,51,84,244,129,143,139,84,84,49,48,53,51,54,52,52,84,244,129,143,140,84,84,49,48,53,51,54,52,53,84,244,129,143,141,84,84,49,48,53,51,54,52,54,84,244,129,143,142,84,84,49,48,53,51,54,52,55,84,244,129,143,143,84,84,49,48,53,51,54,52,56,84,244,129,143,144,84,84,49,48,53,51,54,52,57,84,244,129,143,145,84,84,49,48,53,51,54,53,48,84,244,129,143,146,84,84,49,48,53,51,54,53,49,84,244,129,143,147,84,84,49,48,53,51,54,53,50,84,244,129,143,148,84,84,49,48,53,51,54,53,51,84,244,129,143,149,84,84,49,48,53,51,54,53,52,84,244,129,143,150,84,84,49,48,53,51,54,53,53,84,244,129,143,151,84,84,49,48,53,51,54,53,54,84,244,129,143,152,84,84,49,48,53,51,54,53,55,84,244,129,143,153,84,84,49,48,53,51,54,53,56,84,244,129,143,154,84,84,49,48,53,51,54,53,57,84,244,129,143,155,84,84,49,48,53,51,54,54,48,84,244,129,143,156,84,84,49,48,53,51,54,54,49,84,244,129,143,157,84,84,49,48,53,51,54,54,50,84,244,129,143,158,84,84,49,48,53,51,54,54,51,84,244,129,143,159,84,84,49,48,53,51,54,54,52,84,244,129,143,160,84,84,49,48,53,51,54,54,53,84,244,129,143,161,84,84,49,48,53,51,54,54,54,84,244,129,143,162,84,84,49,48,53,51,54,54,55,84,244,129,143,163,84,84,49,48,53,51,54,54,56,84,244,129,143,164,84,84,49,48,53,51,54,54,57,84,244,129,143,165,84,84,49,48,53,51,54,55,48,84,244,129,143,166,84,84,49,48,53,51,54,55,49,84,244,129,143,167,84,84,49,48,53,51,54,55,50,84,244,129,143,168,84,84,49,48,53,51,54,55,51,84,244,129,143,169,84,84,49,48,53,51,54,55,52,84,244,129,143,170,84,84,49,48,53,51,54,55,53,84,244,129,143,171,84,84,49,48,53,51,54,55,54,84,244,129,143,172,84,84,49,48,53,51,54,55,55,84,244,129,143,173,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19919 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19919_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19919_s.txt", Encoding.UTF8);

    public Test19919() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersf0a96ab3064046f8a2fc77e6e3ebae9e",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,56,56,49,52,57,84,243,177,143,181,84,84,57,56,56,49,53,48,84,243,177,143,182,84,84,57,56,56,49,53,49,84,243,177,143,183,84,84,57,56,56,49,53,50,84,243,177,143,184,84,84,57,56,56,49,53,51,84,243,177,143,185,84,84,57,56,56,49,53,52,84,243,177,143,186,84,84,57,56,56,49,53,53,84,243,177,143,187,84,84,57,56,56,49,53,54,84,243,177,143,188,84,84,57,56,56,49,53,55,84,243,177,143,189,84,84,57,56,56,49,53,56,84,243,177,143,190,84,84,57,56,56,49,53,57,84,243,177,143,191,84,84,57,56,56,49,54,48,84,243,177,144,128,84,84,57,56,56,49,54,49,84,243,177,144,129,84,84,57,56,56,49,54,50,84,243,177,144,130,84,84,57,56,56,49,54,51,84,243,177,144,131,84,84,57,56,56,49,54,52,84,243,177,144,132,84,84,57,56,56,49,54,53,84,243,177,144,133,84,84,57,56,56,49,54,54,84,243,177,144,134,84,84,57,56,56,49,54,55,84,243,177,144,135,84,84,57,56,56,49,54,56,84,243,177,144,136,84,84,57,56,56,49,54,57,84,243,177,144,137,84,84,57,56,56,49,55,48,84,243,177,144,138,84,84,57,56,56,49,55,49,84,243,177,144,139,84,84,57,56,56,49,55,50,84,243,177,144,140,84,84,57,56,56,49,55,51,84,243,177,144,141,84,84,57,56,56,49,55,52,84,243,177,144,142,84,84,57,56,56,49,55,53,84,243,177,144,143,84,84,57,56,56,49,55,54,84,243,177,144,144,84,84,57,56,56,49,55,55,84,243,177,144,145,84,84,57,56,56,49,55,56,84,243,177,144,146,84,84,57,56,56,49,55,57,84,243,177,144,147,84,84,57,56,56,49,56,48,84,243,177,144,148,84,84,57,56,56,49,56,49,84,243,177,144,149,84,84,57,56,56,49,56,50,84,243,177,144,150,84,84,57,56,56,49,56,51,84,243,177,144,151,84,84,57,56,56,49,56,52,84,243,177,144,152,84,84,57,56,56,49,56,53,84,243,177,144,153,84,84,57,56,56,49,56,54,84,243,177,144,154,84,84,57,56,56,49,56,55,84,243,177,144,155,84,84,57,56,56,49,56,56,84,243,177,144,156,84,84,57,56,56,49,56,57,84,243,177,144,157,84,84,57,56,56,49,57,48,84,243,177,144,158,84,84,57,56,56,49,57,49,84,243,177,144,159,84,84,57,56,56,49,57,50,84,243,177,144,160,84,84,57,56,56,49,57,51,84,243,177,144,161,84,84,57,56,56,49,57,52,84,243,177,144,162,84,84,57,56,56,49,57,53,84,243,177,144,163,84,84,57,56,56,49,57,54,84,243,177,144,164,84,84,57,56,56,49,57,55,84,243,177,144,165,84,84,57,56,56,49,57,56,84,243,177,144,166,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20271 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20271_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20271_s.txt", Encoding.UTF8);

    public Test20271() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers712afb35b54344eb8fa90647f752cd92",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,52,51,54,54,49,84,243,190,179,141,84,84,49,48,52,51,54,54,51,84,243,190,179,143,84,84,49,48,52,51,54,54,52,84,243,190,179,144,84,84,49,48,52,51,54,55,55,84,243,190,179,157,84,84,49,48,52,51,55,49,51,84,243,190,180,129,84,84,49,48,52,51,55,50,53,84,243,190,180,141,84,84,49,48,52,51,55,50,55,84,243,190,180,143,84,84,49,48,52,51,55,50,56,84,243,190,180,144,84,84,49,48,52,51,55,52,49,84,243,190,180,157,84,84,49,48,52,51,55,55,55,84,243,190,181,129,84,84,49,48,52,51,55,56,57,84,243,190,181,141,84,84,49,48,52,51,55,57,49,84,243,190,181,143,84,84,49,48,52,51,55,57,50,84,243,190,181,144,84,84,49,48,52,51,56,48,53,84,243,190,181,157,84,84,49,48,52,51,56,52,49,84,243,190,182,129,84,84,49,48,52,51,56,53,51,84,243,190,182,141,84,84,49,48,52,51,56,53,53,84,243,190,182,143,84,84,49,48,52,51,56,53,54,84,243,190,182,144,84,84,49,48,52,51,56,54,57,84,243,190,182,157,84,84,49,48,52,51,57,48,53,84,243,190,183,129,84,84,49,48,52,51,57,49,55,84,243,190,183,141,84,84,49,48,52,51,57,49,57,84,243,190,183,143,84,84,49,48,52,51,57,50,48,84,243,190,183,144,84,84,49,48,52,51,57,51,51,84,243,190,183,157,84,84,49,48,52,51,57,54,57,84,243,190,184,129,84,84,49,48,52,51,57,56,49,84,243,190,184,141,84,84,49,48,52,51,57,56,51,84,243,190,184,143,84,84,49,48,52,51,57,56,52,84,243,190,184,144,84,84,49,48,52,51,57,57,55,84,243,190,184,157,84,84,49,48,52,52,48,51,51,84,243,190,185,129,84,84,49,48,52,52,48,52,53,84,243,190,185,141,84,84,49,48,52,52,48,52,55,84,243,190,185,143,84,84,49,48,52,52,48,52,56,84,243,190,185,144,84,84,49,48,52,52,48,54,49,84,243,190,185,157,84,84,49,48,52,52,48,57,55,84,243,190,186,129,84,84,49,48,52,52,49,48,57,84,243,190,186,141,84,84,49,48,52,52,49,49,49,84,243,190,186,143,84,84,49,48,52,52,49,49,50,84,243,190,186,144,84,84,49,48,52,52,49,50,53,84,243,190,186,157,84,84,49,48,52,52,49,54,49,84,243,190,187,129,84,84,49,48,52,52,49,55,51,84,243,190,187,141,84,84,49,48,52,52,49,55,53,84,243,190,187,143,84,84,49,48,52,52,49,55,54,84,243,190,187,144,84,84,49,48,52,52,49,56,57,84,243,190,187,157,84,84,49,48,52,52,50,50,53,84,243,190,188,129,84,84,49,48,52,52,50,51,55,84,243,190,188,141,84,84,49,48,52,52,50,51,57,84,243,190,188,143,84,84,49,48,52,52,50,52,48,84,243,190,188,144,84,84,49,48,52,52,50,53,51,84,243,190,188,157,84,84,49,48,52,52,50,56,57,84,243,190,189,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20459 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20459_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20459_s.txt", Encoding.UTF8);

    public Test20459() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersee5ddc6232b847869028904d3d06a0f3",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,53,56,50,56,84,244,129,177,148,84,84,49,48,53,53,56,50,57,84,244,129,177,149,84,84,49,48,53,53,56,51,48,84,244,129,177,150,84,84,49,48,53,53,56,51,49,84,244,129,177,151,84,84,49,48,53,53,56,51,50,84,244,129,177,152,84,84,49,48,53,53,56,51,51,84,244,129,177,153,84,84,49,48,53,53,56,51,52,84,244,129,177,154,84,84,49,48,53,53,56,51,53,84,244,129,177,155,84,84,49,48,53,53,56,51,54,84,244,129,177,156,84,84,49,48,53,53,56,51,55,84,244,129,177,157,84,84,49,48,53,53,56,51,56,84,244,129,177,158,84,84,49,48,53,53,56,51,57,84,244,129,177,159,84,84,49,48,53,53,56,52,48,84,244,129,177,160,84,84,49,48,53,53,56,52,49,84,244,129,177,161,84,84,49,48,53,53,56,52,50,84,244,129,177,162,84,84,49,48,53,53,56,52,51,84,244,129,177,163,84,84,49,48,53,53,56,52,52,84,244,129,177,164,84,84,49,48,53,53,56,52,53,84,244,129,177,165,84,84,49,48,53,53,56,52,54,84,244,129,177,166,84,84,49,48,53,53,56,52,55,84,244,129,177,167,84,84,49,48,53,53,56,52,56,84,244,129,177,168,84,84,49,48,53,53,56,52,57,84,244,129,177,169,84,84,49,48,53,53,56,53,48,84,244,129,177,170,84,84,49,48,53,53,56,53,49,84,244,129,177,171,84,84,49,48,53,53,56,53,50,84,244,129,177,172,84,84,49,48,53,53,56,53,51,84,244,129,177,173,84,84,49,48,53,53,56,53,52,84,244,129,177,174,84,84,49,48,53,53,56,53,53,84,244,129,177,175,84,84,49,48,53,53,56,53,54,84,244,129,177,176,84,84,49,48,53,53,56,53,55,84,244,129,177,177,84,84,49,48,53,53,56,53,56,84,244,129,177,178,84,84,49,48,53,53,56,53,57,84,244,129,177,179,84,84,49,48,53,53,56,54,48,84,244,129,177,180,84,84,49,48,53,53,56,54,49,84,244,129,177,181,84,84,49,48,53,53,56,54,50,84,244,129,177,182,84,84,49,48,53,53,56,54,51,84,244,129,177,183,84,84,49,48,53,53,56,54,52,84,244,129,177,184,84,84,49,48,53,53,56,54,53,84,244,129,177,185,84,84,49,48,53,53,56,54,54,84,244,129,177,186,84,84,49,48,53,53,56,54,55,84,244,129,177,187,84,84,49,48,53,53,56,54,56,84,244,129,177,188,84,84,49,48,53,53,56,54,57,84,244,129,177,189,84,84,49,48,53,53,56,55,48,84,244,129,177,190,84,84,49,48,53,53,56,55,49,84,244,129,177,191,84,84,49,48,53,53,56,55,50,84,244,129,178,128,84,84,49,48,53,53,56,55,51,84,244,129,178,129,84,84,49,48,53,53,56,55,52,84,244,129,178,130,84,84,49,48,53,53,56,55,53,84,244,129,178,131,84,84,49,48,53,53,56,55,54,84,244,129,178,132,84,84,49,48,53,53,56,55,55,84,244,129,178,133,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20927 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20927_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20927_s.txt", Encoding.UTF8);

    public Test20927() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers9e891393b2624599aedf317812121dcf",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,53,49,49,57,84,244,141,179,159,84,84,49,49,48,53,49,50,48,84,244,141,179,160,84,84,49,49,48,53,49,50,49,84,244,141,179,161,84,84,49,49,48,53,49,50,50,84,244,141,179,162,84,84,49,49,48,53,49,50,51,84,244,141,179,163,84,84,49,49,48,53,49,50,52,84,244,141,179,164,84,84,49,49,48,53,49,50,53,84,244,141,179,165,84,84,49,49,48,53,49,50,54,84,244,141,179,166,84,84,49,49,48,53,49,50,55,84,244,141,179,167,84,84,49,49,48,53,49,50,56,84,244,141,179,168,84,84,49,49,48,53,49,50,57,84,244,141,179,169,84,84,49,49,48,53,49,51,48,84,244,141,179,170,84,84,49,49,48,53,49,51,49,84,244,141,179,171,84,84,49,49,48,53,49,51,50,84,244,141,179,172,84,84,49,49,48,53,49,51,51,84,244,141,179,173,84,84,49,49,48,53,49,51,52,84,244,141,179,174,84,84,49,49,48,53,49,51,53,84,244,141,179,175,84,84,49,49,48,53,49,51,54,84,244,141,179,176,84,84,49,49,48,53,49,51,55,84,244,141,179,177,84,84,49,49,48,53,49,51,56,84,244,141,179,178,84,84,49,49,48,53,49,51,57,84,244,141,179,179,84,84,49,49,48,53,49,52,48,84,244,141,179,180,84,84,49,49,48,53,49,52,49,84,244,141,179,181,84,84,49,49,48,53,49,52,50,84,244,141,179,182,84,84,49,49,48,53,49,52,51,84,244,141,179,183,84,84,49,49,48,53,49,52,52,84,244,141,179,184,84,84,49,49,48,53,49,52,53,84,244,141,179,185,84,84,49,49,48,53,49,52,54,84,244,141,179,186,84,84,49,49,48,53,49,52,55,84,244,141,179,187,84,84,49,49,48,53,49,52,56,84,244,141,179,188,84,84,49,49,48,53,49,52,57,84,244,141,179,189,84,84,49,49,48,53,49,53,48,84,244,141,179,190,84,84,49,49,48,53,49,53,49,84,244,141,179,191,84,84,49,49,48,53,49,53,50,84,244,141,180,128,84,84,49,49,48,53,49,53,51,84,244,141,180,129,84,84,49,49,48,53,49,53,52,84,244,141,180,130,84,84,49,49,48,53,49,53,53,84,244,141,180,131,84,84,49,49,48,53,49,53,54,84,244,141,180,132,84,84,49,49,48,53,49,53,55,84,244,141,180,133,84,84,49,49,48,53,49,53,56,84,244,141,180,134,84,84,49,49,48,53,49,53,57,84,244,141,180,135,84,84,49,49,48,53,49,54,48,84,244,141,180,136,84,84,49,49,48,53,49,54,49,84,244,141,180,137,84,84,49,49,48,53,49,54,50,84,244,141,180,138,84,84,49,49,48,53,49,54,51,84,244,141,180,139,84,84,49,49,48,53,49,54,52,84,244,141,180,140,84,84,49,49,48,53,49,54,53,84,244,141,180,141,84,84,49,49,48,53,49,54,54,84,244,141,180,142,84,84,49,49,48,53,49,54,55,84,244,141,180,143,84,84,49,49,48,53,49,54,56,84,244,141,180,144,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20872 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20872_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20872_s.txt", Encoding.UTF8);

    public Test20872() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersdd41d3a5bb7f42709f7cec587f1a204a",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,51,56,49,57,84,244,141,159,139,84,84,49,49,48,51,56,50,48,84,244,141,159,140,84,84,49,49,48,51,56,50,49,84,244,141,159,141,84,84,49,49,48,51,56,50,50,84,244,141,159,142,84,84,49,49,48,51,56,50,51,84,244,141,159,143,84,84,49,49,48,51,56,50,52,84,244,141,159,144,84,84,49,49,48,51,56,50,53,84,244,141,159,145,84,84,49,49,48,51,56,50,54,84,244,141,159,146,84,84,49,49,48,51,56,50,55,84,244,141,159,147,84,84,49,49,48,51,56,50,56,84,244,141,159,148,84,84,49,49,48,51,56,50,57,84,244,141,159,149,84,84,49,49,48,51,56,51,48,84,244,141,159,150,84,84,49,49,48,51,56,51,49,84,244,141,159,151,84,84,49,49,48,51,56,51,50,84,244,141,159,152,84,84,49,49,48,51,56,51,51,84,244,141,159,153,84,84,49,49,48,51,56,51,52,84,244,141,159,154,84,84,49,49,48,51,56,51,53,84,244,141,159,155,84,84,49,49,48,51,56,51,54,84,244,141,159,156,84,84,49,49,48,51,56,51,55,84,244,141,159,157,84,84,49,49,48,51,56,51,56,84,244,141,159,158,84,84,49,49,48,51,56,51,57,84,244,141,159,159,84,84,49,49,48,51,56,52,48,84,244,141,159,160,84,84,49,49,48,51,56,52,49,84,244,141,159,161,84,84,49,49,48,51,56,52,50,84,244,141,159,162,84,84,49,49,48,51,56,52,51,84,244,141,159,163,84,84,49,49,48,51,56,52,52,84,244,141,159,164,84,84,49,49,48,51,56,52,53,84,244,141,159,165,84,84,49,49,48,51,56,52,54,84,244,141,159,166,84,84,49,49,48,51,56,52,55,84,244,141,159,167,84,84,49,49,48,51,56,52,56,84,244,141,159,168,84,84,49,49,48,51,56,52,57,84,244,141,159,169,84,84,49,49,48,51,56,53,48,84,244,141,159,170,84,84,49,49,48,51,56,53,49,84,244,141,159,171,84,84,49,49,48,51,56,53,50,84,244,141,159,172,84,84,49,49,48,51,56,53,51,84,244,141,159,173,84,84,49,49,48,51,56,53,52,84,244,141,159,174,84,84,49,49,48,51,56,53,53,84,244,141,159,175,84,84,49,49,48,51,56,53,54,84,244,141,159,176,84,84,49,49,48,51,56,53,55,84,244,141,159,177,84,84,49,49,48,51,56,53,56,84,244,141,159,178,84,84,49,49,48,51,56,53,57,84,244,141,159,179,84,84,49,49,48,51,56,54,48,84,244,141,159,180,84,84,49,49,48,51,56,54,49,84,244,141,159,181,84,84,49,49,48,51,56,54,50,84,244,141,159,182,84,84,49,49,48,51,56,54,51,84,244,141,159,183,84,84,49,49,48,51,56,54,52,84,244,141,159,184,84,84,49,49,48,51,56,54,53,84,244,141,159,185,84,84,49,49,48,51,56,54,54,84,244,141,159,186,84,84,49,49,48,51,56,54,55,84,244,141,159,187,84,84,49,49,48,51,56,54,56,84,244,141,159,188,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20646 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20646_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20646_s.txt", Encoding.UTF8);

    public Test20646() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers5f5b393ed8e742338d6031fb2e225092",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,55,57,49,48,56,84,244,135,157,132,84,84,49,48,55,57,49,48,57,84,244,135,157,133,84,84,49,48,55,57,49,49,48,84,244,135,157,134,84,84,49,48,55,57,49,49,49,84,244,135,157,135,84,84,49,48,55,57,49,49,50,84,244,135,157,136,84,84,49,48,55,57,49,49,51,84,244,135,157,137,84,84,49,48,55,57,49,49,52,84,244,135,157,138,84,84,49,48,55,57,49,49,53,84,244,135,157,139,84,84,49,48,55,57,49,49,54,84,244,135,157,140,84,84,49,48,55,57,49,49,55,84,244,135,157,141,84,84,49,48,55,57,49,49,56,84,244,135,157,142,84,84,49,48,55,57,49,49,57,84,244,135,157,143,84,84,49,48,55,57,49,50,48,84,244,135,157,144,84,84,49,48,55,57,49,50,49,84,244,135,157,145,84,84,49,48,55,57,49,50,50,84,244,135,157,146,84,84,49,48,55,57,49,50,51,84,244,135,157,147,84,84,49,48,55,57,49,50,52,84,244,135,157,148,84,84,49,48,55,57,49,50,53,84,244,135,157,149,84,84,49,48,55,57,49,50,54,84,244,135,157,150,84,84,49,48,55,57,49,50,55,84,244,135,157,151,84,84,49,48,55,57,49,50,56,84,244,135,157,152,84,84,49,48,55,57,49,50,57,84,244,135,157,153,84,84,49,48,55,57,49,51,48,84,244,135,157,154,84,84,49,48,55,57,49,51,49,84,244,135,157,155,84,84,49,48,55,57,49,51,50,84,244,135,157,156,84,84,49,48,55,57,49,51,51,84,244,135,157,157,84,84,49,48,55,57,49,51,52,84,244,135,157,158,84,84,49,48,55,57,49,51,53,84,244,135,157,159,84,84,49,48,55,57,49,51,54,84,244,135,157,160,84,84,49,48,55,57,49,51,55,84,244,135,157,161,84,84,49,48,55,57,49,51,56,84,244,135,157,162,84,84,49,48,55,57,49,51,57,84,244,135,157,163,84,84,49,48,55,57,49,52,48,84,244,135,157,164,84,84,49,48,55,57,49,52,49,84,244,135,157,165,84,84,49,48,55,57,49,52,50,84,244,135,157,166,84,84,49,48,55,57,49,52,51,84,244,135,157,167,84,84,49,48,55,57,49,52,52,84,244,135,157,168,84,84,49,48,55,57,49,52,53,84,244,135,157,169,84,84,49,48,55,57,49,52,54,84,244,135,157,170,84,84,49,48,55,57,49,52,55,84,244,135,157,171,84,84,49,48,55,57,49,52,56,84,244,135,157,172,84,84,49,48,55,57,49,52,57,84,244,135,157,173,84,84,49,48,55,57,49,53,48,84,244,135,157,174,84,84,49,48,55,57,49,53,49,84,244,135,157,175,84,84,49,48,55,57,49,53,50,84,244,135,157,176,84,84,49,48,55,57,49,53,51,84,244,135,157,177,84,84,49,48,55,57,49,53,52,84,244,135,157,178,84,84,49,48,55,57,49,53,53,84,244,135,157,179,84,84,49,48,55,57,49,53,54,84,244,135,157,180,84,84,49,48,55,57,49,53,55,84,244,135,157,181,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19850 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19850_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19850_s.txt", Encoding.UTF8);

    public Test19850() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers7032abc4111d4702bce9d36696a0a648",
                        blob: Encoding.UTF8.GetString(new byte[]{84,54,51,51,55,53,84,239,158,143,84,84,54,51,51,55,54,84,239,158,144,84,84,54,51,51,56,57,84,239,158,157,84,84,54,51,52,50,53,84,239,159,129,84,84,54,51,52,51,55,84,239,159,141,84,84,54,51,52,51,57,84,239,159,143,84,84,54,51,52,52,48,84,239,159,144,84,84,54,51,52,53,51,84,239,159,157,84,84,54,51,52,56,57,84,239,160,129,84,84,54,51,53,48,49,84,239,160,141,84,84,54,51,53,48,51,84,239,160,143,84,84,54,51,53,48,52,84,239,160,144,84,84,54,51,53,49,55,84,239,160,157,84,84,54,51,53,53,51,84,239,161,129,84,84,54,51,53,54,53,84,239,161,141,84,84,54,51,53,54,55,84,239,161,143,84,84,54,51,53,54,56,84,239,161,144,84,84,54,51,53,56,49,84,239,161,157,84,84,54,51,54,49,55,84,239,162,129,84,84,54,51,54,50,57,84,239,162,141,84,84,54,51,54,51,49,84,239,162,143,84,84,54,51,54,51,50,84,239,162,144,84,84,54,51,54,52,53,84,239,162,157,84,84,54,51,54,56,49,84,239,163,129,84,84,54,51,54,57,51,84,239,163,141,84,84,54,51,54,57,53,84,239,163,143,84,84,54,51,54,57,54,84,239,163,144,84,84,54,51,55,48,57,84,239,163,157,84,84,54,51,55,52,53,84,239,164,129,84,84,54,51,55,53,55,84,239,164,141,84,84,54,51,55,53,57,84,239,164,143,84,84,54,51,55,54,48,84,239,164,144,84,84,54,51,55,55,51,84,239,164,157,84,84,54,51,56,48,57,84,239,165,129,84,84,54,51,56,50,49,84,239,165,141,84,84,54,51,56,50,51,84,239,165,143,84,84,54,51,56,50,52,84,239,165,144,84,84,54,51,56,51,55,84,239,165,157,84,84,54,51,56,55,51,84,239,166,129,84,84,54,51,56,56,53,84,239,166,141,84,84,54,51,56,56,55,84,239,166,143,84,84,54,51,56,56,56,84,239,166,144,84,84,54,51,57,48,49,84,239,166,157,84,84,54,51,57,51,55,84,239,167,129,84,84,54,51,57,52,57,84,239,167,141,84,84,54,51,57,53,49,84,239,167,143,84,84,54,51,57,53,50,84,239,167,144,84,84,54,51,57,54,53,84,239,167,157,84,84,54,52,48,48,49,84,239,168,129,84,84,54,52,48,49,51,84,239,168,141,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20199 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20199_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20199_s.txt", Encoding.UTF8);

    public Test20199() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers2b6cdd6684eb4500abcaa682adc323b7",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,51,50,52,54,51,84,243,188,132,143,84,84,49,48,51,50,52,54,52,84,243,188,132,144,84,84,49,48,51,50,52,55,55,84,243,188,132,157,84,84,49,48,51,50,53,49,51,84,243,188,133,129,84,84,49,48,51,50,53,50,53,84,243,188,133,141,84,84,49,48,51,50,53,50,55,84,243,188,133,143,84,84,49,48,51,50,53,50,56,84,243,188,133,144,84,84,49,48,51,50,53,52,49,84,243,188,133,157,84,84,49,48,51,50,53,55,55,84,243,188,134,129,84,84,49,48,51,50,53,56,57,84,243,188,134,141,84,84,49,48,51,50,53,57,49,84,243,188,134,143,84,84,49,48,51,50,53,57,50,84,243,188,134,144,84,84,49,48,51,50,54,48,53,84,243,188,134,157,84,84,49,48,51,50,54,52,49,84,243,188,135,129,84,84,49,48,51,50,54,53,51,84,243,188,135,141,84,84,49,48,51,50,54,53,53,84,243,188,135,143,84,84,49,48,51,50,54,53,54,84,243,188,135,144,84,84,49,48,51,50,54,54,57,84,243,188,135,157,84,84,49,48,51,50,55,48,53,84,243,188,136,129,84,84,49,48,51,50,55,49,55,84,243,188,136,141,84,84,49,48,51,50,55,49,57,84,243,188,136,143,84,84,49,48,51,50,55,50,48,84,243,188,136,144,84,84,49,48,51,50,55,51,51,84,243,188,136,157,84,84,49,48,51,50,55,54,57,84,243,188,137,129,84,84,49,48,51,50,55,56,49,84,243,188,137,141,84,84,49,48,51,50,55,56,51,84,243,188,137,143,84,84,49,48,51,50,55,56,52,84,243,188,137,144,84,84,49,48,51,50,55,57,55,84,243,188,137,157,84,84,49,48,51,50,56,51,51,84,243,188,138,129,84,84,49,48,51,50,56,52,53,84,243,188,138,141,84,84,49,48,51,50,56,52,55,84,243,188,138,143,84,84,49,48,51,50,56,52,56,84,243,188,138,144,84,84,49,48,51,50,56,54,49,84,243,188,138,157,84,84,49,48,51,50,56,57,55,84,243,188,139,129,84,84,49,48,51,50,57,48,57,84,243,188,139,141,84,84,49,48,51,50,57,49,49,84,243,188,139,143,84,84,49,48,51,50,57,49,50,84,243,188,139,144,84,84,49,48,51,50,57,50,53,84,243,188,139,157,84,84,49,48,51,50,57,54,49,84,243,188,140,129,84,84,49,48,51,50,57,55,51,84,243,188,140,141,84,84,49,48,51,50,57,55,53,84,243,188,140,143,84,84,49,48,51,50,57,55,54,84,243,188,140,144,84,84,49,48,51,50,57,56,57,84,243,188,140,157,84,84,49,48,51,51,48,50,52,84,243,188,141,128,84,84,49,48,51,51,48,50,53,84,243,188,141,129,84,84,49,48,51,51,48,50,54,84,243,188,141,130,84,84,49,48,51,51,48,50,55,84,243,188,141,131,84,84,49,48,51,51,48,50,56,84,243,188,141,132,84,84,49,48,51,51,48,50,57,84,243,188,141,133,84,84,49,48,51,51,48,51,48,84,243,188,141,134,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20806 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20806_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20806_s.txt", Encoding.UTF8);

    public Test20806() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers8240a720eb234783afd6a68d24f64161",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,50,50,54,57,84,244,141,134,189,84,84,49,49,48,50,50,55,48,84,244,141,134,190,84,84,49,49,48,50,50,55,49,84,244,141,134,191,84,84,49,49,48,50,50,55,50,84,244,141,135,128,84,84,49,49,48,50,50,55,51,84,244,141,135,129,84,84,49,49,48,50,50,55,52,84,244,141,135,130,84,84,49,49,48,50,50,55,53,84,244,141,135,131,84,84,49,49,48,50,50,55,54,84,244,141,135,132,84,84,49,49,48,50,50,55,55,84,244,141,135,133,84,84,49,49,48,50,50,55,56,84,244,141,135,134,84,84,49,49,48,50,50,55,57,84,244,141,135,135,84,84,49,49,48,50,50,56,48,84,244,141,135,136,84,84,49,49,48,50,50,56,49,84,244,141,135,137,84,84,49,49,48,50,50,56,50,84,244,141,135,138,84,84,49,49,48,50,50,56,51,84,244,141,135,139,84,84,49,49,48,50,50,56,52,84,244,141,135,140,84,84,49,49,48,50,50,56,53,84,244,141,135,141,84,84,49,49,48,50,50,56,54,84,244,141,135,142,84,84,49,49,48,50,50,56,55,84,244,141,135,143,84,84,49,49,48,50,50,56,56,84,244,141,135,144,84,84,49,49,48,50,50,56,57,84,244,141,135,145,84,84,49,49,48,50,50,57,48,84,244,141,135,146,84,84,49,49,48,50,50,57,49,84,244,141,135,147,84,84,49,49,48,50,50,57,50,84,244,141,135,148,84,84,49,49,48,50,50,57,51,84,244,141,135,149,84,84,49,49,48,50,50,57,52,84,244,141,135,150,84,84,49,49,48,50,50,57,53,84,244,141,135,151,84,84,49,49,48,50,50,57,54,84,244,141,135,152,84,84,49,49,48,50,50,57,55,84,244,141,135,153,84,84,49,49,48,50,50,57,56,84,244,141,135,154,84,84,49,49,48,50,50,57,57,84,244,141,135,155,84,84,49,49,48,50,51,48,48,84,244,141,135,156,84,84,49,49,48,50,51,48,49,84,244,141,135,157,84,84,49,49,48,50,51,48,50,84,244,141,135,158,84,84,49,49,48,50,51,48,51,84,244,141,135,159,84,84,49,49,48,50,51,48,52,84,244,141,135,160,84,84,49,49,48,50,51,48,53,84,244,141,135,161,84,84,49,49,48,50,51,48,54,84,244,141,135,162,84,84,49,49,48,50,51,48,55,84,244,141,135,163,84,84,49,49,48,50,51,48,56,84,244,141,135,164,84,84,49,49,48,50,51,48,57,84,244,141,135,165,84,84,49,49,48,50,51,49,48,84,244,141,135,166,84,84,49,49,48,50,51,49,49,84,244,141,135,167,84,84,49,49,48,50,51,49,50,84,244,141,135,168,84,84,49,49,48,50,51,49,51,84,244,141,135,169,84,84,49,49,48,50,51,49,52,84,244,141,135,170,84,84,49,49,48,50,51,49,53,84,244,141,135,171,84,84,49,49,48,50,51,49,54,84,244,141,135,172,84,84,49,49,48,50,51,49,55,84,244,141,135,173,84,84,49,49,48,50,51,49,56,84,244,141,135,174,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19977 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19977_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19977_s.txt", Encoding.UTF8);

    public Test19977() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersc5d3e7c5509046d2aa3f8bb095571b82",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,57,54,57,57,51,84,243,179,154,129,84,84,57,57,55,48,48,53,84,243,179,154,141,84,84,57,57,55,48,48,55,84,243,179,154,143,84,84,57,57,55,48,48,56,84,243,179,154,144,84,84,57,57,55,48,50,49,84,243,179,154,157,84,84,57,57,55,48,53,55,84,243,179,155,129,84,84,57,57,55,48,54,57,84,243,179,155,141,84,84,57,57,55,48,55,49,84,243,179,155,143,84,84,57,57,55,48,55,50,84,243,179,155,144,84,84,57,57,55,48,56,53,84,243,179,155,157,84,84,57,57,55,49,50,49,84,243,179,156,129,84,84,57,57,55,49,51,51,84,243,179,156,141,84,84,57,57,55,49,51,53,84,243,179,156,143,84,84,57,57,55,49,51,54,84,243,179,156,144,84,84,57,57,55,49,52,57,84,243,179,156,157,84,84,57,57,55,49,56,52,84,243,179,157,128,84,84,57,57,55,49,56,53,84,243,179,157,129,84,84,57,57,55,49,56,54,84,243,179,157,130,84,84,57,57,55,49,56,55,84,243,179,157,131,84,84,57,57,55,49,56,56,84,243,179,157,132,84,84,57,57,55,49,56,57,84,243,179,157,133,84,84,57,57,55,49,57,48,84,243,179,157,134,84,84,57,57,55,49,57,49,84,243,179,157,135,84,84,57,57,55,49,57,50,84,243,179,157,136,84,84,57,57,55,49,57,51,84,243,179,157,137,84,84,57,57,55,49,57,52,84,243,179,157,138,84,84,57,57,55,49,57,53,84,243,179,157,139,84,84,57,57,55,49,57,54,84,243,179,157,140,84,84,57,57,55,49,57,55,84,243,179,157,141,84,84,57,57,55,49,57,56,84,243,179,157,142,84,84,57,57,55,49,57,57,84,243,179,157,143,84,84,57,57,55,50,48,48,84,243,179,157,144,84,84,57,57,55,50,48,49,84,243,179,157,145,84,84,57,57,55,50,48,50,84,243,179,157,146,84,84,57,57,55,50,48,51,84,243,179,157,147,84,84,57,57,55,50,48,52,84,243,179,157,148,84,84,57,57,55,50,48,53,84,243,179,157,149,84,84,57,57,55,50,48,54,84,243,179,157,150,84,84,57,57,55,50,48,55,84,243,179,157,151,84,84,57,57,55,50,48,56,84,243,179,157,152,84,84,57,57,55,50,48,57,84,243,179,157,153,84,84,57,57,55,50,49,48,84,243,179,157,154,84,84,57,57,55,50,49,49,84,243,179,157,155,84,84,57,57,55,50,49,50,84,243,179,157,156,84,84,57,57,55,50,49,51,84,243,179,157,157,84,84,57,57,55,50,49,52,84,243,179,157,158,84,84,57,57,55,50,49,53,84,243,179,157,159,84,84,57,57,55,50,49,54,84,243,179,157,160,84,84,57,57,55,50,49,55,84,243,179,157,161,84,84,57,57,55,50,49,56,84,243,179,157,162,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20046 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20046_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20046_s.txt", Encoding.UTF8);

    public Test20046() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers612d6939acd44cdbbba30cffbd18a713",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,48,56,52,57,53,84,243,182,141,175,84,84,49,48,48,56,52,57,54,84,243,182,141,176,84,84,49,48,48,56,52,57,55,84,243,182,141,177,84,84,49,48,48,56,52,57,56,84,243,182,141,178,84,84,49,48,48,56,52,57,57,84,243,182,141,179,84,84,49,48,48,56,53,48,48,84,243,182,141,180,84,84,49,48,48,56,53,48,49,84,243,182,141,181,84,84,49,48,48,56,53,48,50,84,243,182,141,182,84,84,49,48,48,56,53,48,51,84,243,182,141,183,84,84,49,48,48,56,53,48,52,84,243,182,141,184,84,84,49,48,48,56,53,48,53,84,243,182,141,185,84,84,49,48,48,56,53,48,54,84,243,182,141,186,84,84,49,48,48,56,53,48,55,84,243,182,141,187,84,84,49,48,48,56,53,48,56,84,243,182,141,188,84,84,49,48,48,56,53,48,57,84,243,182,141,189,84,84,49,48,48,56,53,49,48,84,243,182,141,190,84,84,49,48,48,56,53,49,49,84,243,182,141,191,84,84,49,48,48,56,53,49,51,84,243,182,142,129,84,84,49,48,48,56,53,50,53,84,243,182,142,141,84,84,49,48,48,56,53,50,55,84,243,182,142,143,84,84,49,48,48,56,53,50,56,84,243,182,142,144,84,84,49,48,48,56,53,52,49,84,243,182,142,157,84,84,49,48,48,56,53,55,54,84,243,182,143,128,84,84,49,48,48,56,53,55,55,84,243,182,143,129,84,84,49,48,48,56,53,55,56,84,243,182,143,130,84,84,49,48,48,56,53,55,57,84,243,182,143,131,84,84,49,48,48,56,53,56,48,84,243,182,143,132,84,84,49,48,48,56,53,56,49,84,243,182,143,133,84,84,49,48,48,56,53,56,50,84,243,182,143,134,84,84,49,48,48,56,53,56,51,84,243,182,143,135,84,84,49,48,48,56,53,56,52,84,243,182,143,136,84,84,49,48,48,56,53,56,53,84,243,182,143,137,84,84,49,48,48,56,53,56,54,84,243,182,143,138,84,84,49,48,48,56,53,56,55,84,243,182,143,139,84,84,49,48,48,56,53,56,56,84,243,182,143,140,84,84,49,48,48,56,53,56,57,84,243,182,143,141,84,84,49,48,48,56,53,57,48,84,243,182,143,142,84,84,49,48,48,56,53,57,49,84,243,182,143,143,84,84,49,48,48,56,53,57,50,84,243,182,143,144,84,84,49,48,48,56,53,57,51,84,243,182,143,145,84,84,49,48,48,56,53,57,52,84,243,182,143,146,84,84,49,48,48,56,53,57,53,84,243,182,143,147,84,84,49,48,48,56,53,57,54,84,243,182,143,148,84,84,49,48,48,56,53,57,55,84,243,182,143,149,84,84,49,48,48,56,53,57,56,84,243,182,143,150,84,84,49,48,48,56,53,57,57,84,243,182,143,151,84,84,49,48,48,56,54,48,48,84,243,182,143,152,84,84,49,48,48,56,54,48,49,84,243,182,143,153,84,84,49,48,48,56,54,48,50,84,243,182,143,154,84,84,49,48,48,56,54,48,51,84,243,182,143,155,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21124 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21124_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21124_s.txt", Encoding.UTF8);

    public Test21124() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers56d1c908d8f44b69abe6817b1847a0f6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,51,50,53,48,84,244,143,178,162,84,84,49,49,49,51,50,53,49,84,244,143,178,163,84,84,49,49,49,51,50,53,50,84,244,143,178,164,84,84,49,49,49,51,50,53,51,84,244,143,178,165,84,84,49,49,49,51,50,53,52,84,244,143,178,166,84,84,49,49,49,51,50,53,53,84,244,143,178,167,84,84,49,49,49,51,50,53,54,84,244,143,178,168,84,84,49,49,49,51,50,53,55,84,244,143,178,169,84,84,49,49,49,51,50,53,56,84,244,143,178,170,84,84,49,49,49,51,50,53,57,84,244,143,178,171,84,84,49,49,49,51,50,54,48,84,244,143,178,172,84,84,49,49,49,51,50,54,49,84,244,143,178,173,84,84,49,49,49,51,50,54,50,84,244,143,178,174,84,84,49,49,49,51,50,54,51,84,244,143,178,175,84,84,49,49,49,51,50,54,52,84,244,143,178,176,84,84,49,49,49,51,50,54,53,84,244,143,178,177,84,84,49,49,49,51,50,54,54,84,244,143,178,178,84,84,49,49,49,51,50,54,55,84,244,143,178,179,84,84,49,49,49,51,50,54,56,84,244,143,178,180,84,84,49,49,49,51,50,54,57,84,244,143,178,181,84,84,49,49,49,51,50,55,48,84,244,143,178,182,84,84,49,49,49,51,50,55,49,84,244,143,178,183,84,84,49,49,49,51,50,55,50,84,244,143,178,184,84,84,49,49,49,51,50,55,51,84,244,143,178,185,84,84,49,49,49,51,50,55,52,84,244,143,178,186,84,84,49,49,49,51,50,55,53,84,244,143,178,187,84,84,49,49,49,51,50,55,54,84,244,143,178,188,84,84,49,49,49,51,50,55,55,84,244,143,178,189,84,84,49,49,49,51,50,55,56,84,244,143,178,190,84,84,49,49,49,51,50,55,57,84,244,143,178,191,84,84,49,49,49,51,50,56,48,84,244,143,179,128,84,84,49,49,49,51,50,56,49,84,244,143,179,129,84,84,49,49,49,51,50,56,50,84,244,143,179,130,84,84,49,49,49,51,50,56,51,84,244,143,179,131,84,84,49,49,49,51,50,56,52,84,244,143,179,132,84,84,49,49,49,51,50,56,53,84,244,143,179,133,84,84,49,49,49,51,50,56,54,84,244,143,179,134,84,84,49,49,49,51,50,56,55,84,244,143,179,135,84,84,49,49,49,51,50,56,56,84,244,143,179,136,84,84,49,49,49,51,50,56,57,84,244,143,179,137,84,84,49,49,49,51,50,57,48,84,244,143,179,138,84,84,49,49,49,51,50,57,49,84,244,143,179,139,84,84,49,49,49,51,50,57,50,84,244,143,179,140,84,84,49,49,49,51,50,57,51,84,244,143,179,141,84,84,49,49,49,51,50,57,52,84,244,143,179,142,84,84,49,49,49,51,50,57,53,84,244,143,179,143,84,84,49,49,49,51,50,57,54,84,244,143,179,144,84,84,49,49,49,51,50,57,55,84,244,143,179,145,84,84,49,49,49,51,50,57,56,84,244,143,179,146,84,84,49,49,49,51,50,57,57,84,244,143,179,147,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20273 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20273_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20273_s.txt", Encoding.UTF8);

    public Test20273() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers712afb35b54344eb8fa90647f752cd92",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,52,52,51,48,49,84,243,190,189,141,84,84,49,48,52,52,51,48,51,84,243,190,189,143,84,84,49,48,52,52,51,48,52,84,243,190,189,144,84,84,49,48,52,52,51,49,55,84,243,190,189,157,84,84,49,48,52,52,51,53,51,84,243,190,190,129,84,84,49,48,52,52,51,54,53,84,243,190,190,141,84,84,49,48,52,52,51,54,55,84,243,190,190,143,84,84,49,48,52,52,51,54,56,84,243,190,190,144,84,84,49,48,52,52,51,56,49,84,243,190,190,157,84,84,49,48,52,52,52,49,55,84,243,190,191,129,84,84,49,48,52,52,52,50,57,84,243,190,191,141,84,84,49,48,52,52,52,51,49,84,243,190,191,143,84,84,49,48,52,52,52,51,50,84,243,190,191,144,84,84,49,48,52,52,52,52,53,84,243,190,191,157,84,84,49,48,52,52,52,56,49,84,243,191,128,129,84,84,49,48,52,52,52,57,51,84,243,191,128,141,84,84,49,48,52,52,52,57,53,84,243,191,128,143,84,84,49,48,52,52,52,57,54,84,243,191,128,144,84,84,49,48,52,52,53,48,57,84,243,191,128,157,84,84,49,48,52,52,53,52,52,84,243,191,129,128,84,84,49,48,52,52,53,52,53,84,243,191,129,129,84,84,49,48,52,52,53,52,54,84,243,191,129,130,84,84,49,48,52,52,53,52,55,84,243,191,129,131,84,84,49,48,52,52,53,52,56,84,243,191,129,132,84,84,49,48,52,52,53,52,57,84,243,191,129,133,84,84,49,48,52,52,53,53,48,84,243,191,129,134,84,84,49,48,52,52,53,53,49,84,243,191,129,135,84,84,49,48,52,52,53,53,50,84,243,191,129,136,84,84,49,48,52,52,53,53,51,84,243,191,129,137,84,84,49,48,52,52,53,53,52,84,243,191,129,138,84,84,49,48,52,52,53,53,53,84,243,191,129,139,84,84,49,48,52,52,53,53,54,84,243,191,129,140,84,84,49,48,52,52,53,53,55,84,243,191,129,141,84,84,49,48,52,52,53,53,56,84,243,191,129,142,84,84,49,48,52,52,53,53,57,84,243,191,129,143,84,84,49,48,52,52,53,54,48,84,243,191,129,144,84,84,49,48,52,52,53,54,49,84,243,191,129,145,84,84,49,48,52,52,53,54,50,84,243,191,129,146,84,84,49,48,52,52,53,54,51,84,243,191,129,147,84,84,49,48,52,52,53,54,52,84,243,191,129,148,84,84,49,48,52,52,53,54,53,84,243,191,129,149,84,84,49,48,52,52,53,54,54,84,243,191,129,150,84,84,49,48,52,52,53,54,55,84,243,191,129,151,84,84,49,48,52,52,53,54,56,84,243,191,129,152,84,84,49,48,52,52,53,54,57,84,243,191,129,153,84,84,49,48,52,52,53,55,48,84,243,191,129,154,84,84,49,48,52,52,53,55,49,84,243,191,129,155,84,84,49,48,52,52,53,55,50,84,243,191,129,156,84,84,49,48,52,52,53,55,51,84,243,191,129,157,84,84,49,48,52,52,53,55,52,84,243,191,129,158,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21066 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21066_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21066_s.txt", Encoding.UTF8);

    public Test21066() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers98fd3eef9d4b4edcb3855acb5ae8645d",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,49,57,48,48,84,244,143,157,156,84,84,49,49,49,49,57,48,49,84,244,143,157,157,84,84,49,49,49,49,57,48,50,84,244,143,157,158,84,84,49,49,49,49,57,48,51,84,244,143,157,159,84,84,49,49,49,49,57,48,52,84,244,143,157,160,84,84,49,49,49,49,57,48,53,84,244,143,157,161,84,84,49,49,49,49,57,48,54,84,244,143,157,162,84,84,49,49,49,49,57,48,55,84,244,143,157,163,84,84,49,49,49,49,57,48,56,84,244,143,157,164,84,84,49,49,49,49,57,48,57,84,244,143,157,165,84,84,49,49,49,49,57,49,48,84,244,143,157,166,84,84,49,49,49,49,57,49,49,84,244,143,157,167,84,84,49,49,49,49,57,49,50,84,244,143,157,168,84,84,49,49,49,49,57,49,51,84,244,143,157,169,84,84,49,49,49,49,57,49,52,84,244,143,157,170,84,84,49,49,49,49,57,49,53,84,244,143,157,171,84,84,49,49,49,49,57,49,54,84,244,143,157,172,84,84,49,49,49,49,57,49,55,84,244,143,157,173,84,84,49,49,49,49,57,49,56,84,244,143,157,174,84,84,49,49,49,49,57,49,57,84,244,143,157,175,84,84,49,49,49,49,57,50,48,84,244,143,157,176,84,84,49,49,49,49,57,50,49,84,244,143,157,177,84,84,49,49,49,49,57,50,50,84,244,143,157,178,84,84,49,49,49,49,57,50,51,84,244,143,157,179,84,84,49,49,49,49,57,50,52,84,244,143,157,180,84,84,49,49,49,49,57,50,53,84,244,143,157,181,84,84,49,49,49,49,57,50,54,84,244,143,157,182,84,84,49,49,49,49,57,50,55,84,244,143,157,183,84,84,49,49,49,49,57,50,56,84,244,143,157,184,84,84,49,49,49,49,57,50,57,84,244,143,157,185,84,84,49,49,49,49,57,51,48,84,244,143,157,186,84,84,49,49,49,49,57,51,49,84,244,143,157,187,84,84,49,49,49,49,57,51,50,84,244,143,157,188,84,84,49,49,49,49,57,51,51,84,244,143,157,189,84,84,49,49,49,49,57,51,52,84,244,143,157,190,84,84,49,49,49,49,57,51,53,84,244,143,157,191,84,84,49,49,49,49,57,51,54,84,244,143,158,128,84,84,49,49,49,49,57,51,55,84,244,143,158,129,84,84,49,49,49,49,57,51,56,84,244,143,158,130,84,84,49,49,49,49,57,51,57,84,244,143,158,131,84,84,49,49,49,49,57,52,48,84,244,143,158,132,84,84,49,49,49,49,57,52,49,84,244,143,158,133,84,84,49,49,49,49,57,52,50,84,244,143,158,134,84,84,49,49,49,49,57,52,51,84,244,143,158,135,84,84,49,49,49,49,57,52,52,84,244,143,158,136,84,84,49,49,49,49,57,52,53,84,244,143,158,137,84,84,49,49,49,49,57,52,54,84,244,143,158,138,84,84,49,49,49,49,57,52,55,84,244,143,158,139,84,84,49,49,49,49,57,52,56,84,244,143,158,140,84,84,49,49,49,49,57,52,57,84,244,143,158,141,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20713 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20713_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20713_s.txt", Encoding.UTF8);

    public Test20713() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers0bb7ae45edef4594997d97499d26b519",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,56,57,57,51,51,84,244,138,134,141,84,84,49,48,56,57,57,51,53,84,244,138,134,143,84,84,49,48,56,57,57,51,54,84,244,138,134,144,84,84,49,48,56,57,57,52,57,84,244,138,134,157,84,84,49,48,56,57,57,56,53,84,244,138,135,129,84,84,49,48,56,57,57,57,55,84,244,138,135,141,84,84,49,48,56,57,57,57,57,84,244,138,135,143,84,84,49,48,57,48,48,48,48,84,244,138,135,144,84,84,49,48,57,48,48,49,51,84,244,138,135,157,84,84,49,48,57,48,48,52,57,84,244,138,136,129,84,84,49,48,57,48,48,54,49,84,244,138,136,141,84,84,49,48,57,48,48,54,51,84,244,138,136,143,84,84,49,48,57,48,48,54,52,84,244,138,136,144,84,84,49,48,57,48,48,55,55,84,244,138,136,157,84,84,49,48,57,48,49,49,51,84,244,138,137,129,84,84,49,48,57,48,49,50,53,84,244,138,137,141,84,84,49,48,57,48,49,50,55,84,244,138,137,143,84,84,49,48,57,48,49,50,56,84,244,138,137,144,84,84,49,48,57,48,49,52,49,84,244,138,137,157,84,84,49,48,57,48,49,55,55,84,244,138,138,129,84,84,49,48,57,48,49,56,57,84,244,138,138,141,84,84,49,48,57,48,49,57,49,84,244,138,138,143,84,84,49,48,57,48,49,57,50,84,244,138,138,144,84,84,49,48,57,48,50,48,53,84,244,138,138,157,84,84,49,48,57,48,50,52,49,84,244,138,139,129,84,84,49,48,57,48,50,53,51,84,244,138,139,141,84,84,49,48,57,48,50,53,53,84,244,138,139,143,84,84,49,48,57,48,50,53,54,84,244,138,139,144,84,84,49,48,57,48,50,54,57,84,244,138,139,157,84,84,49,48,57,48,51,48,53,84,244,138,140,129,84,84,49,48,57,48,51,49,55,84,244,138,140,141,84,84,49,48,57,48,51,49,57,84,244,138,140,143,84,84,49,48,57,48,51,50,48,84,244,138,140,144,84,84,49,48,57,48,51,51,51,84,244,138,140,157,84,84,49,48,57,48,51,54,56,84,244,138,141,128,84,84,49,48,57,48,51,54,57,84,244,138,141,129,84,84,49,48,57,48,51,55,48,84,244,138,141,130,84,84,49,48,57,48,51,55,49,84,244,138,141,131,84,84,49,48,57,48,51,55,50,84,244,138,141,132,84,84,49,48,57,48,51,55,51,84,244,138,141,133,84,84,49,48,57,48,51,55,52,84,244,138,141,134,84,84,49,48,57,48,51,55,53,84,244,138,141,135,84,84,49,48,57,48,51,55,54,84,244,138,141,136,84,84,49,48,57,48,51,55,55,84,244,138,141,137,84,84,49,48,57,48,51,55,56,84,244,138,141,138,84,84,49,48,57,48,51,55,57,84,244,138,141,139,84,84,49,48,57,48,51,56,48,84,244,138,141,140,84,84,49,48,57,48,51,56,49,84,244,138,141,141,84,84,49,48,57,48,51,56,50,84,244,138,141,142,84,84,49,48,57,48,51,56,51,84,244,138,141,143,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20461 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20461_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20461_s.txt", Encoding.UTF8);

    public Test20461() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersee5ddc6232b847869028904d3d06a0f3",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,53,56,55,56,84,244,129,178,134,84,84,49,48,53,53,56,55,57,84,244,129,178,135,84,84,49,48,53,53,56,56,48,84,244,129,178,136,84,84,49,48,53,53,56,56,49,84,244,129,178,137,84,84,49,48,53,53,56,56,50,84,244,129,178,138,84,84,49,48,53,53,56,56,51,84,244,129,178,139,84,84,49,48,53,53,56,56,52,84,244,129,178,140,84,84,49,48,53,53,56,56,53,84,244,129,178,141,84,84,49,48,53,53,56,56,54,84,244,129,178,142,84,84,49,48,53,53,56,56,55,84,244,129,178,143,84,84,49,48,53,53,56,56,56,84,244,129,178,144,84,84,49,48,53,53,56,56,57,84,244,129,178,145,84,84,49,48,53,53,56,57,48,84,244,129,178,146,84,84,49,48,53,53,56,57,49,84,244,129,178,147,84,84,49,48,53,53,56,57,50,84,244,129,178,148,84,84,49,48,53,53,56,57,51,84,244,129,178,149,84,84,49,48,53,53,56,57,52,84,244,129,178,150,84,84,49,48,53,53,56,57,53,84,244,129,178,151,84,84,49,48,53,53,56,57,54,84,244,129,178,152,84,84,49,48,53,53,56,57,55,84,244,129,178,153,84,84,49,48,53,53,56,57,56,84,244,129,178,154,84,84,49,48,53,53,56,57,57,84,244,129,178,155,84,84,49,48,53,53,57,48,48,84,244,129,178,156,84,84,49,48,53,53,57,48,49,84,244,129,178,157,84,84,49,48,53,53,57,48,50,84,244,129,178,158,84,84,49,48,53,53,57,48,51,84,244,129,178,159,84,84,49,48,53,53,57,48,52,84,244,129,178,160,84,84,49,48,53,53,57,48,53,84,244,129,178,161,84,84,49,48,53,53,57,48,54,84,244,129,178,162,84,84,49,48,53,53,57,48,55,84,244,129,178,163,84,84,49,48,53,53,57,48,56,84,244,129,178,164,84,84,49,48,53,53,57,48,57,84,244,129,178,165,84,84,49,48,53,53,57,49,48,84,244,129,178,166,84,84,49,48,53,53,57,49,49,84,244,129,178,167,84,84,49,48,53,53,57,49,50,84,244,129,178,168,84,84,49,48,53,53,57,49,51,84,244,129,178,169,84,84,49,48,53,53,57,49,52,84,244,129,178,170,84,84,49,48,53,53,57,49,53,84,244,129,178,171,84,84,49,48,53,53,57,49,54,84,244,129,178,172,84,84,49,48,53,53,57,49,55,84,244,129,178,173,84,84,49,48,53,53,57,49,56,84,244,129,178,174,84,84,49,48,53,53,57,49,57,84,244,129,178,175,84,84,49,48,53,53,57,50,48,84,244,129,178,176,84,84,49,48,53,53,57,50,49,84,244,129,178,177,84,84,49,48,53,53,57,50,50,84,244,129,178,178,84,84,49,48,53,53,57,50,51,84,244,129,178,179,84,84,49,48,53,53,57,50,52,84,244,129,178,180,84,84,49,48,53,53,57,50,53,84,244,129,178,181,84,84,49,48,53,53,57,50,54,84,244,129,178,182,84,84,49,48,53,53,57,50,55,84,244,129,178,183,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20989 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20989_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20989_s.txt", Encoding.UTF8);

    public Test20989() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersd35ea9f156764511b97173ebc769448f",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,48,48,53,48,84,244,143,128,162,84,84,49,49,49,48,48,53,49,84,244,143,128,163,84,84,49,49,49,48,48,53,50,84,244,143,128,164,84,84,49,49,49,48,48,53,51,84,244,143,128,165,84,84,49,49,49,48,48,53,52,84,244,143,128,166,84,84,49,49,49,48,48,53,53,84,244,143,128,167,84,84,49,49,49,48,48,53,54,84,244,143,128,168,84,84,49,49,49,48,48,53,55,84,244,143,128,169,84,84,49,49,49,48,48,53,56,84,244,143,128,170,84,84,49,49,49,48,48,53,57,84,244,143,128,171,84,84,49,49,49,48,48,54,48,84,244,143,128,172,84,84,49,49,49,48,48,54,49,84,244,143,128,173,84,84,49,49,49,48,48,54,50,84,244,143,128,174,84,84,49,49,49,48,48,54,51,84,244,143,128,175,84,84,49,49,49,48,48,54,52,84,244,143,128,176,84,84,49,49,49,48,48,54,53,84,244,143,128,177,84,84,49,49,49,48,48,54,54,84,244,143,128,178,84,84,49,49,49,48,48,54,55,84,244,143,128,179,84,84,49,49,49,48,48,54,56,84,244,143,128,180,84,84,49,49,49,48,48,54,57,84,244,143,128,181,84,84,49,49,49,48,48,55,48,84,244,143,128,182,84,84,49,49,49,48,48,55,49,84,244,143,128,183,84,84,49,49,49,48,48,55,50,84,244,143,128,184,84,84,49,49,49,48,48,55,51,84,244,143,128,185,84,84,49,49,49,48,48,55,52,84,244,143,128,186,84,84,49,49,49,48,48,55,53,84,244,143,128,187,84,84,49,49,49,48,48,55,54,84,244,143,128,188,84,84,49,49,49,48,48,55,55,84,244,143,128,189,84,84,49,49,49,48,48,55,56,84,244,143,128,190,84,84,49,49,49,48,48,55,57,84,244,143,128,191,84,84,49,49,49,48,48,56,48,84,244,143,129,128,84,84,49,49,49,48,48,56,49,84,244,143,129,129,84,84,49,49,49,48,48,56,50,84,244,143,129,130,84,84,49,49,49,48,48,56,51,84,244,143,129,131,84,84,49,49,49,48,48,56,52,84,244,143,129,132,84,84,49,49,49,48,48,56,53,84,244,143,129,133,84,84,49,49,49,48,48,56,54,84,244,143,129,134,84,84,49,49,49,48,48,56,55,84,244,143,129,135,84,84,49,49,49,48,48,56,56,84,244,143,129,136,84,84,49,49,49,48,48,56,57,84,244,143,129,137,84,84,49,49,49,48,48,57,48,84,244,143,129,138,84,84,49,49,49,48,48,57,49,84,244,143,129,139,84,84,49,49,49,48,48,57,50,84,244,143,129,140,84,84,49,49,49,48,48,57,51,84,244,143,129,141,84,84,49,49,49,48,48,57,52,84,244,143,129,142,84,84,49,49,49,48,48,57,53,84,244,143,129,143,84,84,49,49,49,48,48,57,54,84,244,143,129,144,84,84,49,49,49,48,48,57,55,84,244,143,129,145,84,84,49,49,49,48,48,57,56,84,244,143,129,146,84,84,49,49,49,48,48,57,57,84,244,143,129,147,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20874 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20874_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20874_s.txt", Encoding.UTF8);

    public Test20874() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersdd41d3a5bb7f42709f7cec587f1a204a",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,51,56,54,57,84,244,141,159,189,84,84,49,49,48,51,56,55,48,84,244,141,159,190,84,84,49,49,48,51,56,55,49,84,244,141,159,191,84,84,49,49,48,51,56,55,50,84,244,141,160,128,84,84,49,49,48,51,56,55,51,84,244,141,160,129,84,84,49,49,48,51,56,55,52,84,244,141,160,130,84,84,49,49,48,51,56,55,53,84,244,141,160,131,84,84,49,49,48,51,56,55,54,84,244,141,160,132,84,84,49,49,48,51,56,55,55,84,244,141,160,133,84,84,49,49,48,51,56,55,56,84,244,141,160,134,84,84,49,49,48,51,56,55,57,84,244,141,160,135,84,84,49,49,48,51,56,56,48,84,244,141,160,136,84,84,49,49,48,51,56,56,49,84,244,141,160,137,84,84,49,49,48,51,56,56,50,84,244,141,160,138,84,84,49,49,48,51,56,56,51,84,244,141,160,139,84,84,49,49,48,51,56,56,52,84,244,141,160,140,84,84,49,49,48,51,56,56,53,84,244,141,160,141,84,84,49,49,48,51,56,56,54,84,244,141,160,142,84,84,49,49,48,51,56,56,55,84,244,141,160,143,84,84,49,49,48,51,56,56,56,84,244,141,160,144,84,84,49,49,48,51,56,56,57,84,244,141,160,145,84,84,49,49,48,51,56,57,48,84,244,141,160,146,84,84,49,49,48,51,56,57,49,84,244,141,160,147,84,84,49,49,48,51,56,57,50,84,244,141,160,148,84,84,49,49,48,51,56,57,51,84,244,141,160,149,84,84,49,49,48,51,56,57,52,84,244,141,160,150,84,84,49,49,48,51,56,57,53,84,244,141,160,151,84,84,49,49,48,51,56,57,54,84,244,141,160,152,84,84,49,49,48,51,56,57,55,84,244,141,160,153,84,84,49,49,48,51,56,57,56,84,244,141,160,154,84,84,49,49,48,51,56,57,57,84,244,141,160,155,84,84,49,49,48,51,57,48,48,84,244,141,160,156,84,84,49,49,48,51,57,48,49,84,244,141,160,157,84,84,49,49,48,51,57,48,50,84,244,141,160,158,84,84,49,49,48,51,57,48,51,84,244,141,160,159,84,84,49,49,48,51,57,48,52,84,244,141,160,160,84,84,49,49,48,51,57,48,53,84,244,141,160,161,84,84,49,49,48,51,57,48,54,84,244,141,160,162,84,84,49,49,48,51,57,48,55,84,244,141,160,163,84,84,49,49,48,51,57,48,56,84,244,141,160,164,84,84,49,49,48,51,57,48,57,84,244,141,160,165,84,84,49,49,48,51,57,49,48,84,244,141,160,166,84,84,49,49,48,51,57,49,49,84,244,141,160,167,84,84,49,49,48,51,57,49,50,84,244,141,160,168,84,84,49,49,48,51,57,49,51,84,244,141,160,169,84,84,49,49,48,51,57,49,52,84,244,141,160,170,84,84,49,49,48,51,57,49,53,84,244,141,160,171,84,84,49,49,48,51,57,49,54,84,244,141,160,172,84,84,49,49,48,51,57,49,55,84,244,141,160,173,84,84,49,49,48,51,57,49,56,84,244,141,160,174,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19852 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19852_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19852_s.txt", Encoding.UTF8);

    public Test19852() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers7032abc4111d4702bce9d36696a0a648",
                        blob: Encoding.UTF8.GetString(new byte[]{84,54,52,48,49,53,84,239,168,143,84,84,54,52,48,49,54,84,239,168,144,84,84,54,52,48,50,57,84,239,168,157,84,84,54,52,48,54,53,84,239,169,129,84,84,54,52,48,55,55,84,239,169,141,84,84,54,52,48,55,57,84,239,169,143,84,84,54,52,48,56,48,84,239,169,144,84,84,54,52,48,57,51,84,239,169,157,84,84,54,52,49,50,57,84,239,170,129,84,84,54,52,49,52,49,84,239,170,141,84,84,54,52,49,52,51,84,239,170,143,84,84,54,52,49,52,52,84,239,170,144,84,84,54,52,49,53,55,84,239,170,157,84,84,54,52,49,57,51,84,239,171,129,84,84,54,52,50,48,53,84,239,171,141,84,84,54,52,50,48,55,84,239,171,143,84,84,54,52,50,48,56,84,239,171,144,84,84,54,52,50,50,49,84,239,171,157,84,84,54,52,50,53,55,84,239,172,129,84,84,54,52,50,54,57,84,239,172,141,84,84,54,52,50,55,49,84,239,172,143,84,84,54,52,50,55,50,84,239,172,144,84,84,54,52,50,56,53,84,239,172,157,84,84,54,52,51,50,49,84,239,173,129,84,84,54,52,51,51,51,84,239,173,141,84,84,54,52,51,51,53,84,239,173,143,84,84,54,52,51,51,54,84,239,173,144,84,84,54,52,51,52,57,84,239,173,157,84,84,54,52,51,56,53,84,239,174,129,84,84,54,52,51,57,55,84,239,174,141,84,84,54,52,51,57,57,84,239,174,143,84,84,54,52,52,48,48,84,239,174,144,84,84,54,52,52,49,51,84,239,174,157,84,84,54,52,52,52,57,84,239,175,129,84,84,54,52,52,54,49,84,239,175,141,84,84,54,52,52,54,51,84,239,175,143,84,84,54,52,52,54,52,84,239,175,144,84,84,54,52,52,55,55,84,239,175,157,84,84,54,52,53,49,51,84,239,176,129,84,84,54,52,53,50,53,84,239,176,141,84,84,54,52,53,50,55,84,239,176,143,84,84,54,52,53,50,56,84,239,176,144,84,84,54,52,53,52,49,84,239,176,157,84,84,54,52,53,55,55,84,239,177,129,84,84,54,52,53,56,57,84,239,177,141,84,84,54,52,53,57,49,84,239,177,143,84,84,54,52,53,57,50,84,239,177,144,84,84,54,52,54,48,53,84,239,177,157,84,84,54,52,54,52,49,84,239,178,129,84,84,54,52,54,53,51,84,239,178,141,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20201 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20201_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20201_s.txt", Encoding.UTF8);

    public Test20201() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers2b6cdd6684eb4500abcaa682adc323b7",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,51,51,48,51,49,84,243,188,141,135,84,84,49,48,51,51,48,51,50,84,243,188,141,136,84,84,49,48,51,51,48,51,51,84,243,188,141,137,84,84,49,48,51,51,48,51,52,84,243,188,141,138,84,84,49,48,51,51,48,51,53,84,243,188,141,139,84,84,49,48,51,51,48,51,54,84,243,188,141,140,84,84,49,48,51,51,48,51,55,84,243,188,141,141,84,84,49,48,51,51,48,51,56,84,243,188,141,142,84,84,49,48,51,51,48,51,57,84,243,188,141,143,84,84,49,48,51,51,48,52,48,84,243,188,141,144,84,84,49,48,51,51,48,52,49,84,243,188,141,145,84,84,49,48,51,51,48,52,50,84,243,188,141,146,84,84,49,48,51,51,48,52,51,84,243,188,141,147,84,84,49,48,51,51,48,52,52,84,243,188,141,148,84,84,49,48,51,51,48,52,53,84,243,188,141,149,84,84,49,48,51,51,48,52,54,84,243,188,141,150,84,84,49,48,51,51,48,52,55,84,243,188,141,151,84,84,49,48,51,51,48,52,56,84,243,188,141,152,84,84,49,48,51,51,48,52,57,84,243,188,141,153,84,84,49,48,51,51,48,53,48,84,243,188,141,154,84,84,49,48,51,51,48,53,49,84,243,188,141,155,84,84,49,48,51,51,48,53,50,84,243,188,141,156,84,84,49,48,51,51,48,53,51,84,243,188,141,157,84,84,49,48,51,51,48,53,52,84,243,188,141,158,84,84,49,48,51,51,48,53,53,84,243,188,141,159,84,84,49,48,51,51,48,53,54,84,243,188,141,160,84,84,49,48,51,51,48,53,55,84,243,188,141,161,84,84,49,48,51,51,48,53,56,84,243,188,141,162,84,84,49,48,51,51,48,53,57,84,243,188,141,163,84,84,49,48,51,51,48,54,48,84,243,188,141,164,84,84,49,48,51,51,48,54,49,84,243,188,141,165,84,84,49,48,51,51,48,54,50,84,243,188,141,166,84,84,49,48,51,51,48,54,51,84,243,188,141,167,84,84,49,48,51,51,48,54,52,84,243,188,141,168,84,84,49,48,51,51,48,54,53,84,243,188,141,169,84,84,49,48,51,51,48,54,54,84,243,188,141,170,84,84,49,48,51,51,48,54,55,84,243,188,141,171,84,84,49,48,51,51,48,54,56,84,243,188,141,172,84,84,49,48,51,51,48,54,57,84,243,188,141,173,84,84,49,48,51,51,48,55,48,84,243,188,141,174,84,84,49,48,51,51,48,55,49,84,243,188,141,175,84,84,49,48,51,51,48,55,50,84,243,188,141,176,84,84,49,48,51,51,48,55,51,84,243,188,141,177,84,84,49,48,51,51,48,55,52,84,243,188,141,178,84,84,49,48,51,51,48,55,53,84,243,188,141,179,84,84,49,48,51,51,48,55,54,84,243,188,141,180,84,84,49,48,51,51,48,55,55,84,243,188,141,181,84,84,49,48,51,51,48,55,56,84,243,188,141,182,84,84,49,48,51,51,48,55,57,84,243,188,141,183,84,84,49,48,51,51,48,56,48,84,243,188,141,184,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20808 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20808_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20808_s.txt", Encoding.UTF8);

    public Test20808() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers8240a720eb234783afd6a68d24f64161",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,50,51,49,57,84,244,141,135,175,84,84,49,49,48,50,51,50,48,84,244,141,135,176,84,84,49,49,48,50,51,50,49,84,244,141,135,177,84,84,49,49,48,50,51,50,50,84,244,141,135,178,84,84,49,49,48,50,51,50,51,84,244,141,135,179,84,84,49,49,48,50,51,50,52,84,244,141,135,180,84,84,49,49,48,50,51,50,53,84,244,141,135,181,84,84,49,49,48,50,51,50,54,84,244,141,135,182,84,84,49,49,48,50,51,50,55,84,244,141,135,183,84,84,49,49,48,50,51,50,56,84,244,141,135,184,84,84,49,49,48,50,51,50,57,84,244,141,135,185,84,84,49,49,48,50,51,51,48,84,244,141,135,186,84,84,49,49,48,50,51,51,49,84,244,141,135,187,84,84,49,49,48,50,51,51,50,84,244,141,135,188,84,84,49,49,48,50,51,51,51,84,244,141,135,189,84,84,49,49,48,50,51,51,52,84,244,141,135,190,84,84,49,49,48,50,51,51,53,84,244,141,135,191,84,84,49,49,48,50,51,51,54,84,244,141,136,128,84,84,49,49,48,50,51,51,55,84,244,141,136,129,84,84,49,49,48,50,51,51,56,84,244,141,136,130,84,84,49,49,48,50,51,51,57,84,244,141,136,131,84,84,49,49,48,50,51,52,48,84,244,141,136,132,84,84,49,49,48,50,51,52,49,84,244,141,136,133,84,84,49,49,48,50,51,52,50,84,244,141,136,134,84,84,49,49,48,50,51,52,51,84,244,141,136,135,84,84,49,49,48,50,51,52,52,84,244,141,136,136,84,84,49,49,48,50,51,52,53,84,244,141,136,137,84,84,49,49,48,50,51,52,54,84,244,141,136,138,84,84,49,49,48,50,51,52,55,84,244,141,136,139,84,84,49,49,48,50,51,52,56,84,244,141,136,140,84,84,49,49,48,50,51,52,57,84,244,141,136,141,84,84,49,49,48,50,51,53,48,84,244,141,136,142,84,84,49,49,48,50,51,53,49,84,244,141,136,143,84,84,49,49,48,50,51,53,50,84,244,141,136,144,84,84,49,49,48,50,51,53,51,84,244,141,136,145,84,84,49,49,48,50,51,53,52,84,244,141,136,146,84,84,49,49,48,50,51,53,53,84,244,141,136,147,84,84,49,49,48,50,51,53,54,84,244,141,136,148,84,84,49,49,48,50,51,53,55,84,244,141,136,149,84,84,49,49,48,50,51,53,56,84,244,141,136,150,84,84,49,49,48,50,51,53,57,84,244,141,136,151,84,84,49,49,48,50,51,54,48,84,244,141,136,152,84,84,49,49,48,50,51,54,49,84,244,141,136,153,84,84,49,49,48,50,51,54,50,84,244,141,136,154,84,84,49,49,48,50,51,54,51,84,244,141,136,155,84,84,49,49,48,50,51,54,52,84,244,141,136,156,84,84,49,49,48,50,51,54,53,84,244,141,136,157,84,84,49,49,48,50,51,54,54,84,244,141,136,158,84,84,49,49,48,50,51,54,55,84,244,141,136,159,84,84,49,49,48,50,51,54,56,84,244,141,136,160,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20929 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20929_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20929_s.txt", Encoding.UTF8);

    public Test20929() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers9e891393b2624599aedf317812121dcf",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,53,49,54,57,84,244,141,180,145,84,84,49,49,48,53,49,55,48,84,244,141,180,146,84,84,49,49,48,53,49,55,49,84,244,141,180,147,84,84,49,49,48,53,49,55,50,84,244,141,180,148,84,84,49,49,48,53,49,55,51,84,244,141,180,149,84,84,49,49,48,53,49,55,52,84,244,141,180,150,84,84,49,49,48,53,49,55,53,84,244,141,180,151,84,84,49,49,48,53,49,55,54,84,244,141,180,152,84,84,49,49,48,53,49,55,55,84,244,141,180,153,84,84,49,49,48,53,49,55,56,84,244,141,180,154,84,84,49,49,48,53,49,55,57,84,244,141,180,155,84,84,49,49,48,53,49,56,48,84,244,141,180,156,84,84,49,49,48,53,49,56,49,84,244,141,180,157,84,84,49,49,48,53,49,56,50,84,244,141,180,158,84,84,49,49,48,53,49,56,51,84,244,141,180,159,84,84,49,49,48,53,49,56,52,84,244,141,180,160,84,84,49,49,48,53,49,56,53,84,244,141,180,161,84,84,49,49,48,53,49,56,54,84,244,141,180,162,84,84,49,49,48,53,49,56,55,84,244,141,180,163,84,84,49,49,48,53,49,56,56,84,244,141,180,164,84,84,49,49,48,53,49,56,57,84,244,141,180,165,84,84,49,49,48,53,49,57,48,84,244,141,180,166,84,84,49,49,48,53,49,57,49,84,244,141,180,167,84,84,49,49,48,53,49,57,50,84,244,141,180,168,84,84,49,49,48,53,49,57,51,84,244,141,180,169,84,84,49,49,48,53,49,57,52,84,244,141,180,170,84,84,49,49,48,53,49,57,53,84,244,141,180,171,84,84,49,49,48,53,49,57,54,84,244,141,180,172,84,84,49,49,48,53,49,57,55,84,244,141,180,173,84,84,49,49,48,53,49,57,56,84,244,141,180,174,84,84,49,49,48,53,49,57,57,84,244,141,180,175,84,84,49,49,48,53,50,48,48,84,244,141,180,176,84,84,49,49,48,53,50,48,49,84,244,141,180,177,84,84,49,49,48,53,50,48,50,84,244,141,180,178,84,84,49,49,48,53,50,48,51,84,244,141,180,179,84,84,49,49,48,53,50,48,52,84,244,141,180,180,84,84,49,49,48,53,50,48,53,84,244,141,180,181,84,84,49,49,48,53,50,48,54,84,244,141,180,182,84,84,49,49,48,53,50,48,55,84,244,141,180,183,84,84,49,49,48,53,50,48,56,84,244,141,180,184,84,84,49,49,48,53,50,48,57,84,244,141,180,185,84,84,49,49,48,53,50,49,48,84,244,141,180,186,84,84,49,49,48,53,50,49,49,84,244,141,180,187,84,84,49,49,48,53,50,49,50,84,244,141,180,188,84,84,49,49,48,53,50,49,51,84,244,141,180,189,84,84,49,49,48,53,50,49,52,84,244,141,180,190,84,84,49,49,48,53,50,49,53,84,244,141,180,191,84,84,49,49,48,53,50,49,54,84,244,141,181,128,84,84,49,49,48,53,50,49,55,84,244,141,181,129,84,84,49,49,48,53,50,49,56,84,244,141,181,130,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20368 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20368_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20368_s.txt", Encoding.UTF8);

    public Test20368() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers319eca44915441a6b60a6025f5eab2bd",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,51,54,55,56,84,244,129,143,174,84,84,49,48,53,51,54,55,57,84,244,129,143,175,84,84,49,48,53,51,54,56,48,84,244,129,143,176,84,84,49,48,53,51,54,56,49,84,244,129,143,177,84,84,49,48,53,51,54,56,50,84,244,129,143,178,84,84,49,48,53,51,54,56,51,84,244,129,143,179,84,84,49,48,53,51,54,56,52,84,244,129,143,180,84,84,49,48,53,51,54,56,53,84,244,129,143,181,84,84,49,48,53,51,54,56,54,84,244,129,143,182,84,84,49,48,53,51,54,56,55,84,244,129,143,183,84,84,49,48,53,51,54,56,56,84,244,129,143,184,84,84,49,48,53,51,54,56,57,84,244,129,143,185,84,84,49,48,53,51,54,57,48,84,244,129,143,186,84,84,49,48,53,51,54,57,49,84,244,129,143,187,84,84,49,48,53,51,54,57,50,84,244,129,143,188,84,84,49,48,53,51,54,57,51,84,244,129,143,189,84,84,49,48,53,51,54,57,52,84,244,129,143,190,84,84,49,48,53,51,54,57,53,84,244,129,143,191,84,84,49,48,53,51,54,57,54,84,244,129,144,128,84,84,49,48,53,51,54,57,55,84,244,129,144,129,84,84,49,48,53,51,54,57,56,84,244,129,144,130,84,84,49,48,53,51,54,57,57,84,244,129,144,131,84,84,49,48,53,51,55,48,48,84,244,129,144,132,84,84,49,48,53,51,55,48,49,84,244,129,144,133,84,84,49,48,53,51,55,48,50,84,244,129,144,134,84,84,49,48,53,51,55,48,51,84,244,129,144,135,84,84,49,48,53,51,55,48,52,84,244,129,144,136,84,84,49,48,53,51,55,48,53,84,244,129,144,137,84,84,49,48,53,51,55,48,54,84,244,129,144,138,84,84,49,48,53,51,55,48,55,84,244,129,144,139,84,84,49,48,53,51,55,48,56,84,244,129,144,140,84,84,49,48,53,51,55,48,57,84,244,129,144,141,84,84,49,48,53,51,55,49,48,84,244,129,144,142,84,84,49,48,53,51,55,49,49,84,244,129,144,143,84,84,49,48,53,51,55,49,50,84,244,129,144,144,84,84,49,48,53,51,55,49,51,84,244,129,144,145,84,84,49,48,53,51,55,49,52,84,244,129,144,146,84,84,49,48,53,51,55,49,53,84,244,129,144,147,84,84,49,48,53,51,55,49,54,84,244,129,144,148,84,84,49,48,53,51,55,49,55,84,244,129,144,149,84,84,49,48,53,51,55,49,56,84,244,129,144,150,84,84,49,48,53,51,55,49,57,84,244,129,144,151,84,84,49,48,53,51,55,50,48,84,244,129,144,152,84,84,49,48,53,51,55,50,49,84,244,129,144,153,84,84,49,48,53,51,55,50,50,84,244,129,144,154,84,84,49,48,53,51,55,50,51,84,244,129,144,155,84,84,49,48,53,51,55,50,52,84,244,129,144,156,84,84,49,48,53,51,55,50,53,84,244,129,144,157,84,84,49,48,53,51,55,50,54,84,244,129,144,158,84,84,49,48,53,51,55,50,55,84,244,129,144,159,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20142 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20142_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20142_s.txt", Encoding.UTF8);

    public Test20142() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers4f3362aed9424bd2bfac6751ee820ab9",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,50,51,53,48,49,84,243,185,184,141,84,84,49,48,50,51,53,48,51,84,243,185,184,143,84,84,49,48,50,51,53,48,52,84,243,185,184,144,84,84,49,48,50,51,53,49,55,84,243,185,184,157,84,84,49,48,50,51,53,53,51,84,243,185,185,129,84,84,49,48,50,51,53,54,53,84,243,185,185,141,84,84,49,48,50,51,53,54,55,84,243,185,185,143,84,84,49,48,50,51,53,54,56,84,243,185,185,144,84,84,49,48,50,51,53,56,49,84,243,185,185,157,84,84,49,48,50,51,54,49,55,84,243,185,186,129,84,84,49,48,50,51,54,50,57,84,243,185,186,141,84,84,49,48,50,51,54,51,49,84,243,185,186,143,84,84,49,48,50,51,54,51,50,84,243,185,186,144,84,84,49,48,50,51,54,52,53,84,243,185,186,157,84,84,49,48,50,51,54,56,49,84,243,185,187,129,84,84,49,48,50,51,54,57,51,84,243,185,187,141,84,84,49,48,50,51,54,57,53,84,243,185,187,143,84,84,49,48,50,51,54,57,54,84,243,185,187,144,84,84,49,48,50,51,55,48,57,84,243,185,187,157,84,84,49,48,50,51,55,52,53,84,243,185,188,129,84,84,49,48,50,51,55,53,55,84,243,185,188,141,84,84,49,48,50,51,55,53,57,84,243,185,188,143,84,84,49,48,50,51,55,54,48,84,243,185,188,144,84,84,49,48,50,51,55,55,51,84,243,185,188,157,84,84,49,48,50,51,56,48,57,84,243,185,189,129,84,84,49,48,50,51,56,50,49,84,243,185,189,141,84,84,49,48,50,51,56,50,51,84,243,185,189,143,84,84,49,48,50,51,56,50,52,84,243,185,189,144,84,84,49,48,50,51,56,51,55,84,243,185,189,157,84,84,49,48,50,51,56,55,51,84,243,185,190,129,84,84,49,48,50,51,56,56,53,84,243,185,190,141,84,84,49,48,50,51,56,56,55,84,243,185,190,143,84,84,49,48,50,51,56,56,56,84,243,185,190,144,84,84,49,48,50,51,57,48,49,84,243,185,190,157,84,84,49,48,50,51,57,51,55,84,243,185,191,129,84,84,49,48,50,51,57,52,57,84,243,185,191,141,84,84,49,48,50,51,57,53,49,84,243,185,191,143,84,84,49,48,50,51,57,53,50,84,243,185,191,144,84,84,49,48,50,51,57,54,53,84,243,185,191,157,84,84,49,48,50,52,48,48,49,84,243,186,128,129,84,84,49,48,50,52,48,49,51,84,243,186,128,141,84,84,49,48,50,52,48,49,53,84,243,186,128,143,84,84,49,48,50,52,48,49,54,84,243,186,128,144,84,84,49,48,50,52,48,50,57,84,243,186,128,157,84,84,49,48,50,52,48,54,52,84,243,186,129,128,84,84,49,48,50,52,48,54,53,84,243,186,129,129,84,84,49,48,50,52,48,54,54,84,243,186,129,130,84,84,49,48,50,52,48,54,55,84,243,186,129,131,84,84,49,48,50,52,48,54,56,84,243,186,129,132,84,84,49,48,50,52,48,54,57,84,243,186,129,133,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20463 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20463_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20463_s.txt", Encoding.UTF8);

    public Test20463() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersee5ddc6232b847869028904d3d06a0f3",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,53,57,50,56,84,244,129,178,184,84,84,49,48,53,53,57,50,57,84,244,129,178,185,84,84,49,48,53,53,57,51,48,84,244,129,178,186,84,84,49,48,53,53,57,51,49,84,244,129,178,187,84,84,49,48,53,53,57,51,50,84,244,129,178,188,84,84,49,48,53,53,57,51,51,84,244,129,178,189,84,84,49,48,53,53,57,51,52,84,244,129,178,190,84,84,49,48,53,53,57,51,53,84,244,129,178,191,84,84,49,48,53,53,57,51,54,84,244,129,179,128,84,84,49,48,53,53,57,51,55,84,244,129,179,129,84,84,49,48,53,53,57,51,56,84,244,129,179,130,84,84,49,48,53,53,57,51,57,84,244,129,179,131,84,84,49,48,53,53,57,52,48,84,244,129,179,132,84,84,49,48,53,53,57,52,49,84,244,129,179,133,84,84,49,48,53,53,57,52,50,84,244,129,179,134,84,84,49,48,53,53,57,52,51,84,244,129,179,135,84,84,49,48,53,53,57,52,52,84,244,129,179,136,84,84,49,48,53,53,57,52,53,84,244,129,179,137,84,84,49,48,53,53,57,52,54,84,244,129,179,138,84,84,49,48,53,53,57,52,55,84,244,129,179,139,84,84,49,48,53,53,57,52,56,84,244,129,179,140,84,84,49,48,53,53,57,52,57,84,244,129,179,141,84,84,49,48,53,53,57,53,48,84,244,129,179,142,84,84,49,48,53,53,57,53,49,84,244,129,179,143,84,84,49,48,53,53,57,53,50,84,244,129,179,144,84,84,49,48,53,53,57,53,51,84,244,129,179,145,84,84,49,48,53,53,57,53,52,84,244,129,179,146,84,84,49,48,53,53,57,53,53,84,244,129,179,147,84,84,49,48,53,53,57,53,54,84,244,129,179,148,84,84,49,48,53,53,57,53,55,84,244,129,179,149,84,84,49,48,53,53,57,53,56,84,244,129,179,150,84,84,49,48,53,53,57,53,57,84,244,129,179,151,84,84,49,48,53,53,57,54,48,84,244,129,179,152,84,84,49,48,53,53,57,54,49,84,244,129,179,153,84,84,49,48,53,53,57,54,50,84,244,129,179,154,84,84,49,48,53,53,57,54,51,84,244,129,179,155,84,84,49,48,53,53,57,54,52,84,244,129,179,156,84,84,49,48,53,53,57,54,53,84,244,129,179,157,84,84,49,48,53,53,57,54,54,84,244,129,179,158,84,84,49,48,53,53,57,54,55,84,244,129,179,159,84,84,49,48,53,53,57,54,56,84,244,129,179,160,84,84,49,48,53,53,57,54,57,84,244,129,179,161,84,84,49,48,53,53,57,55,48,84,244,129,179,162,84,84,49,48,53,53,57,55,49,84,244,129,179,163,84,84,49,48,53,53,57,55,50,84,244,129,179,164,84,84,49,48,53,53,57,55,51,84,244,129,179,165,84,84,49,48,53,53,57,55,52,84,244,129,179,166,84,84,49,48,53,53,57,55,53,84,244,129,179,167,84,84,49,48,53,53,57,55,54,84,244,129,179,168,84,84,49,48,53,53,57,55,55,84,244,129,179,169,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19921 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19921_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19921_s.txt", Encoding.UTF8);

    public Test19921() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersf0a96ab3064046f8a2fc77e6e3ebae9e",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,56,56,49,57,57,84,243,177,144,167,84,84,57,56,56,50,48,48,84,243,177,144,168,84,84,57,56,56,50,48,49,84,243,177,144,169,84,84,57,56,56,50,48,50,84,243,177,144,170,84,84,57,56,56,50,48,51,84,243,177,144,171,84,84,57,56,56,50,48,52,84,243,177,144,172,84,84,57,56,56,50,48,53,84,243,177,144,173,84,84,57,56,56,50,48,54,84,243,177,144,174,84,84,57,56,56,50,48,55,84,243,177,144,175,84,84,57,56,56,50,48,56,84,243,177,144,176,84,84,57,56,56,50,48,57,84,243,177,144,177,84,84,57,56,56,50,49,48,84,243,177,144,178,84,84,57,56,56,50,49,49,84,243,177,144,179,84,84,57,56,56,50,49,50,84,243,177,144,180,84,84,57,56,56,50,49,51,84,243,177,144,181,84,84,57,56,56,50,49,52,84,243,177,144,182,84,84,57,56,56,50,49,53,84,243,177,144,183,84,84,57,56,56,50,49,54,84,243,177,144,184,84,84,57,56,56,50,49,55,84,243,177,144,185,84,84,57,56,56,50,49,56,84,243,177,144,186,84,84,57,56,56,50,49,57,84,243,177,144,187,84,84,57,56,56,50,50,48,84,243,177,144,188,84,84,57,56,56,50,50,49,84,243,177,144,189,84,84,57,56,56,50,50,50,84,243,177,144,190,84,84,57,56,56,50,50,51,84,243,177,144,191,84,84,57,56,56,50,50,53,84,243,177,145,129,84,84,57,56,56,50,51,55,84,243,177,145,141,84,84,57,56,56,50,51,57,84,243,177,145,143,84,84,57,56,56,50,52,48,84,243,177,145,144,84,84,57,56,56,50,53,51,84,243,177,145,157,84,84,57,56,56,50,56,57,84,243,177,146,129,84,84,57,56,56,51,48,49,84,243,177,146,141,84,84,57,56,56,51,48,51,84,243,177,146,143,84,84,57,56,56,51,48,52,84,243,177,146,144,84,84,57,56,56,51,49,55,84,243,177,146,157,84,84,57,56,56,51,53,51,84,243,177,147,129,84,84,57,56,56,51,54,53,84,243,177,147,141,84,84,57,56,56,51,54,55,84,243,177,147,143,84,84,57,56,56,51,54,56,84,243,177,147,144,84,84,57,56,56,51,56,49,84,243,177,147,157,84,84,57,56,56,52,49,55,84,243,177,148,129,84,84,57,56,56,52,50,57,84,243,177,148,141,84,84,57,56,56,52,51,49,84,243,177,148,143,84,84,57,56,56,52,51,50,84,243,177,148,144,84,84,57,56,56,52,52,53,84,243,177,148,157,84,84,57,56,56,52,56,49,84,243,177,149,129,84,84,57,56,56,52,57,51,84,243,177,149,141,84,84,57,56,56,52,57,53,84,243,177,149,143,84,84,57,56,56,52,57,54,84,243,177,149,144,84,84,57,56,56,53,48,57,84,243,177,149,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19979 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19979_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19979_s.txt", Encoding.UTF8);

    public Test19979() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersc5d3e7c5509046d2aa3f8bb095571b82",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,57,55,50,49,57,84,243,179,157,163,84,84,57,57,55,50,50,48,84,243,179,157,164,84,84,57,57,55,50,50,49,84,243,179,157,165,84,84,57,57,55,50,50,50,84,243,179,157,166,84,84,57,57,55,50,50,51,84,243,179,157,167,84,84,57,57,55,50,50,52,84,243,179,157,168,84,84,57,57,55,50,50,53,84,243,179,157,169,84,84,57,57,55,50,50,54,84,243,179,157,170,84,84,57,57,55,50,50,55,84,243,179,157,171,84,84,57,57,55,50,50,56,84,243,179,157,172,84,84,57,57,55,50,50,57,84,243,179,157,173,84,84,57,57,55,50,51,48,84,243,179,157,174,84,84,57,57,55,50,51,49,84,243,179,157,175,84,84,57,57,55,50,51,50,84,243,179,157,176,84,84,57,57,55,50,51,51,84,243,179,157,177,84,84,57,57,55,50,51,52,84,243,179,157,178,84,84,57,57,55,50,51,53,84,243,179,157,179,84,84,57,57,55,50,51,54,84,243,179,157,180,84,84,57,57,55,50,51,55,84,243,179,157,181,84,84,57,57,55,50,51,56,84,243,179,157,182,84,84,57,57,55,50,51,57,84,243,179,157,183,84,84,57,57,55,50,52,48,84,243,179,157,184,84,84,57,57,55,50,52,49,84,243,179,157,185,84,84,57,57,55,50,52,50,84,243,179,157,186,84,84,57,57,55,50,52,51,84,243,179,157,187,84,84,57,57,55,50,52,52,84,243,179,157,188,84,84,57,57,55,50,52,53,84,243,179,157,189,84,84,57,57,55,50,52,54,84,243,179,157,190,84,84,57,57,55,50,52,55,84,243,179,157,191,84,84,57,57,55,50,52,57,84,243,179,158,129,84,84,57,57,55,50,54,49,84,243,179,158,141,84,84,57,57,55,50,54,51,84,243,179,158,143,84,84,57,57,55,50,54,52,84,243,179,158,144,84,84,57,57,55,50,55,55,84,243,179,158,157,84,84,57,57,55,51,49,51,84,243,179,159,129,84,84,57,57,55,51,50,53,84,243,179,159,141,84,84,57,57,55,51,50,55,84,243,179,159,143,84,84,57,57,55,51,50,56,84,243,179,159,144,84,84,57,57,55,51,52,49,84,243,179,159,157,84,84,57,57,55,51,55,55,84,243,179,160,129,84,84,57,57,55,51,56,57,84,243,179,160,141,84,84,57,57,55,51,57,49,84,243,179,160,143,84,84,57,57,55,51,57,50,84,243,179,160,144,84,84,57,57,55,52,48,53,84,243,179,160,157,84,84,57,57,55,52,52,49,84,243,179,161,129,84,84,57,57,55,52,53,51,84,243,179,161,141,84,84,57,57,55,52,53,53,84,243,179,161,143,84,84,57,57,55,52,53,54,84,243,179,161,144,84,84,57,57,55,52,54,57,84,243,179,161,157,84,84,57,57,55,53,48,53,84,243,179,162,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20275 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20275_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20275_s.txt", Encoding.UTF8);

    public Test20275() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers712afb35b54344eb8fa90647f752cd92",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,52,52,53,55,53,84,243,191,129,159,84,84,49,48,52,52,53,55,54,84,243,191,129,160,84,84,49,48,52,52,53,55,55,84,243,191,129,161,84,84,49,48,52,52,53,55,56,84,243,191,129,162,84,84,49,48,52,52,53,55,57,84,243,191,129,163,84,84,49,48,52,52,53,56,48,84,243,191,129,164,84,84,49,48,52,52,53,56,49,84,243,191,129,165,84,84,49,48,52,52,53,56,50,84,243,191,129,166,84,84,49,48,52,52,53,56,51,84,243,191,129,167,84,84,49,48,52,52,53,56,52,84,243,191,129,168,84,84,49,48,52,52,53,56,53,84,243,191,129,169,84,84,49,48,52,52,53,56,54,84,243,191,129,170,84,84,49,48,52,52,53,56,55,84,243,191,129,171,84,84,49,48,52,52,53,56,56,84,243,191,129,172,84,84,49,48,52,52,53,56,57,84,243,191,129,173,84,84,49,48,52,52,53,57,48,84,243,191,129,174,84,84,49,48,52,52,53,57,49,84,243,191,129,175,84,84,49,48,52,52,53,57,50,84,243,191,129,176,84,84,49,48,52,52,53,57,51,84,243,191,129,177,84,84,49,48,52,52,53,57,52,84,243,191,129,178,84,84,49,48,52,52,53,57,53,84,243,191,129,179,84,84,49,48,52,52,53,57,54,84,243,191,129,180,84,84,49,48,52,52,53,57,55,84,243,191,129,181,84,84,49,48,52,52,53,57,56,84,243,191,129,182,84,84,49,48,52,52,53,57,57,84,243,191,129,183,84,84,49,48,52,52,54,48,48,84,243,191,129,184,84,84,49,48,52,52,54,48,49,84,243,191,129,185,84,84,49,48,52,52,54,48,50,84,243,191,129,186,84,84,49,48,52,52,54,48,51,84,243,191,129,187,84,84,49,48,52,52,54,48,52,84,243,191,129,188,84,84,49,48,52,52,54,48,53,84,243,191,129,189,84,84,49,48,52,52,54,48,54,84,243,191,129,190,84,84,49,48,52,52,54,48,55,84,243,191,129,191,84,84,49,48,52,52,54,48,57,84,243,191,130,129,84,84,49,48,52,52,54,50,49,84,243,191,130,141,84,84,49,48,52,52,54,50,51,84,243,191,130,143,84,84,49,48,52,52,54,50,52,84,243,191,130,144,84,84,49,48,52,52,54,51,55,84,243,191,130,157,84,84,49,48,52,52,54,55,51,84,243,191,131,129,84,84,49,48,52,52,54,56,53,84,243,191,131,141,84,84,49,48,52,52,54,56,55,84,243,191,131,143,84,84,49,48,52,52,54,56,56,84,243,191,131,144,84,84,49,48,52,52,55,48,49,84,243,191,131,157,84,84,49,48,52,52,55,51,55,84,243,191,132,129,84,84,49,48,52,52,55,52,57,84,243,191,132,141,84,84,49,48,52,52,55,53,49,84,243,191,132,143,84,84,49,48,52,52,55,53,50,84,243,191,132,144,84,84,49,48,52,52,55,54,53,84,243,191,132,157,84,84,49,48,52,52,56,48,49,84,243,191,133,129,84,84,49,48,52,52,56,49,51,84,243,191,133,141,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21126 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21126_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21126_s.txt", Encoding.UTF8);

    public Test21126() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers56d1c908d8f44b69abe6817b1847a0f6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,51,51,48,48,84,244,143,179,148,84,84,49,49,49,51,51,48,49,84,244,143,179,149,84,84,49,49,49,51,51,48,50,84,244,143,179,150,84,84,49,49,49,51,51,48,51,84,244,143,179,151,84,84,49,49,49,51,51,48,52,84,244,143,179,152,84,84,49,49,49,51,51,48,53,84,244,143,179,153,84,84,49,49,49,51,51,48,54,84,244,143,179,154,84,84,49,49,49,51,51,48,55,84,244,143,179,155,84,84,49,49,49,51,51,48,56,84,244,143,179,156,84,84,49,49,49,51,51,48,57,84,244,143,179,157,84,84,49,49,49,51,51,49,48,84,244,143,179,158,84,84,49,49,49,51,51,49,49,84,244,143,179,159,84,84,49,49,49,51,51,49,50,84,244,143,179,160,84,84,49,49,49,51,51,49,51,84,244,143,179,161,84,84,49,49,49,51,51,49,52,84,244,143,179,162,84,84,49,49,49,51,51,49,53,84,244,143,179,163,84,84,49,49,49,51,51,49,54,84,244,143,179,164,84,84,49,49,49,51,51,49,55,84,244,143,179,165,84,84,49,49,49,51,51,49,56,84,244,143,179,166,84,84,49,49,49,51,51,49,57,84,244,143,179,167,84,84,49,49,49,51,51,50,48,84,244,143,179,168,84,84,49,49,49,51,51,50,49,84,244,143,179,169,84,84,49,49,49,51,51,50,50,84,244,143,179,170,84,84,49,49,49,51,51,50,51,84,244,143,179,171,84,84,49,49,49,51,51,50,52,84,244,143,179,172,84,84,49,49,49,51,51,50,53,84,244,143,179,173,84,84,49,49,49,51,51,50,54,84,244,143,179,174,84,84,49,49,49,51,51,50,55,84,244,143,179,175,84,84,49,49,49,51,51,50,56,84,244,143,179,176,84,84,49,49,49,51,51,50,57,84,244,143,179,177,84,84,49,49,49,51,51,51,48,84,244,143,179,178,84,84,49,49,49,51,51,51,49,84,244,143,179,179,84,84,49,49,49,51,51,51,50,84,244,143,179,180,84,84,49,49,49,51,51,51,51,84,244,143,179,181,84,84,49,49,49,51,51,51,52,84,244,143,179,182,84,84,49,49,49,51,51,51,53,84,244,143,179,183,84,84,49,49,49,51,51,51,54,84,244,143,179,184,84,84,49,49,49,51,51,51,55,84,244,143,179,185,84,84,49,49,49,51,51,51,56,84,244,143,179,186,84,84,49,49,49,51,51,51,57,84,244,143,179,187,84,84,49,49,49,51,51,52,48,84,244,143,179,188,84,84,49,49,49,51,51,52,49,84,244,143,179,189,84,84,49,49,49,51,51,52,50,84,244,143,179,190,84,84,49,49,49,51,51,52,51,84,244,143,179,191,84,84,49,49,49,51,51,52,52,84,244,143,180,128,84,84,49,49,49,51,51,52,53,84,244,143,180,129,84,84,49,49,49,51,51,52,54,84,244,143,180,130,84,84,49,49,49,51,51,52,55,84,244,143,180,131,84,84,49,49,49,51,51,52,56,84,244,143,180,132,84,84,49,49,49,51,51,52,57,84,244,143,180,133,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20991 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20991_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20991_s.txt", Encoding.UTF8);

    public Test20991() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersd35ea9f156764511b97173ebc769448f",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,48,49,48,48,84,244,143,129,148,84,84,49,49,49,48,49,48,49,84,244,143,129,149,84,84,49,49,49,48,49,48,50,84,244,143,129,150,84,84,49,49,49,48,49,48,51,84,244,143,129,151,84,84,49,49,49,48,49,48,52,84,244,143,129,152,84,84,49,49,49,48,49,48,53,84,244,143,129,153,84,84,49,49,49,48,49,48,54,84,244,143,129,154,84,84,49,49,49,48,49,48,55,84,244,143,129,155,84,84,49,49,49,48,49,48,56,84,244,143,129,156,84,84,49,49,49,48,49,48,57,84,244,143,129,157,84,84,49,49,49,48,49,49,48,84,244,143,129,158,84,84,49,49,49,48,49,49,49,84,244,143,129,159,84,84,49,49,49,48,49,49,50,84,244,143,129,160,84,84,49,49,49,48,49,49,51,84,244,143,129,161,84,84,49,49,49,48,49,49,52,84,244,143,129,162,84,84,49,49,49,48,49,49,53,84,244,143,129,163,84,84,49,49,49,48,49,49,54,84,244,143,129,164,84,84,49,49,49,48,49,49,55,84,244,143,129,165,84,84,49,49,49,48,49,49,56,84,244,143,129,166,84,84,49,49,49,48,49,49,57,84,244,143,129,167,84,84,49,49,49,48,49,50,48,84,244,143,129,168,84,84,49,49,49,48,49,50,49,84,244,143,129,169,84,84,49,49,49,48,49,50,50,84,244,143,129,170,84,84,49,49,49,48,49,50,51,84,244,143,129,171,84,84,49,49,49,48,49,50,52,84,244,143,129,172,84,84,49,49,49,48,49,50,53,84,244,143,129,173,84,84,49,49,49,48,49,50,54,84,244,143,129,174,84,84,49,49,49,48,49,50,55,84,244,143,129,175,84,84,49,49,49,48,49,50,56,84,244,143,129,176,84,84,49,49,49,48,49,50,57,84,244,143,129,177,84,84,49,49,49,48,49,51,48,84,244,143,129,178,84,84,49,49,49,48,49,51,49,84,244,143,129,179,84,84,49,49,49,48,49,51,50,84,244,143,129,180,84,84,49,49,49,48,49,51,51,84,244,143,129,181,84,84,49,49,49,48,49,51,52,84,244,143,129,182,84,84,49,49,49,48,49,51,53,84,244,143,129,183,84,84,49,49,49,48,49,51,54,84,244,143,129,184,84,84,49,49,49,48,49,51,55,84,244,143,129,185,84,84,49,49,49,48,49,51,56,84,244,143,129,186,84,84,49,49,49,48,49,51,57,84,244,143,129,187,84,84,49,49,49,48,49,52,48,84,244,143,129,188,84,84,49,49,49,48,49,52,49,84,244,143,129,189,84,84,49,49,49,48,49,52,50,84,244,143,129,190,84,84,49,49,49,48,49,52,51,84,244,143,129,191,84,84,49,49,49,48,49,52,52,84,244,143,130,128,84,84,49,49,49,48,49,52,53,84,244,143,130,129,84,84,49,49,49,48,49,52,54,84,244,143,130,130,84,84,49,49,49,48,49,52,55,84,244,143,130,131,84,84,49,49,49,48,49,52,56,84,244,143,130,132,84,84,49,49,49,48,49,52,57,84,244,143,130,133,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20931 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20931_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20931_s.txt", Encoding.UTF8);

    public Test20931() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers9e891393b2624599aedf317812121dcf",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,53,50,49,57,84,244,141,181,131,84,84,49,49,48,53,50,50,48,84,244,141,181,132,84,84,49,49,48,53,50,50,49,84,244,141,181,133,84,84,49,49,48,53,50,50,50,84,244,141,181,134,84,84,49,49,48,53,50,50,51,84,244,141,181,135,84,84,49,49,48,53,50,50,52,84,244,141,181,136,84,84,49,49,48,53,50,50,53,84,244,141,181,137,84,84,49,49,48,53,50,50,54,84,244,141,181,138,84,84,49,49,48,53,50,50,55,84,244,141,181,139,84,84,49,49,48,53,50,50,56,84,244,141,181,140,84,84,49,49,48,53,50,50,57,84,244,141,181,141,84,84,49,49,48,53,50,51,48,84,244,141,181,142,84,84,49,49,48,53,50,51,49,84,244,141,181,143,84,84,49,49,48,53,50,51,50,84,244,141,181,144,84,84,49,49,48,53,50,51,51,84,244,141,181,145,84,84,49,49,48,53,50,51,52,84,244,141,181,146,84,84,49,49,48,53,50,51,53,84,244,141,181,147,84,84,49,49,48,53,50,51,54,84,244,141,181,148,84,84,49,49,48,53,50,51,55,84,244,141,181,149,84,84,49,49,48,53,50,51,56,84,244,141,181,150,84,84,49,49,48,53,50,51,57,84,244,141,181,151,84,84,49,49,48,53,50,52,48,84,244,141,181,152,84,84,49,49,48,53,50,52,49,84,244,141,181,153,84,84,49,49,48,53,50,52,50,84,244,141,181,154,84,84,49,49,48,53,50,52,51,84,244,141,181,155,84,84,49,49,48,53,50,52,52,84,244,141,181,156,84,84,49,49,48,53,50,52,53,84,244,141,181,157,84,84,49,49,48,53,50,52,54,84,244,141,181,158,84,84,49,49,48,53,50,52,55,84,244,141,181,159,84,84,49,49,48,53,50,52,56,84,244,141,181,160,84,84,49,49,48,53,50,52,57,84,244,141,181,161,84,84,49,49,48,53,50,53,48,84,244,141,181,162,84,84,49,49,48,53,50,53,49,84,244,141,181,163,84,84,49,49,48,53,50,53,50,84,244,141,181,164,84,84,49,49,48,53,50,53,51,84,244,141,181,165,84,84,49,49,48,53,50,53,52,84,244,141,181,166,84,84,49,49,48,53,50,53,53,84,244,141,181,167,84,84,49,49,48,53,50,53,54,84,244,141,181,168,84,84,49,49,48,53,50,53,55,84,244,141,181,169,84,84,49,49,48,53,50,53,56,84,244,141,181,170,84,84,49,49,48,53,50,53,57,84,244,141,181,171,84,84,49,49,48,53,50,54,48,84,244,141,181,172,84,84,49,49,48,53,50,54,49,84,244,141,181,173,84,84,49,49,48,53,50,54,50,84,244,141,181,174,84,84,49,49,48,53,50,54,51,84,244,141,181,175,84,84,49,49,48,53,50,54,52,84,244,141,181,176,84,84,49,49,48,53,50,54,53,84,244,141,181,177,84,84,49,49,48,53,50,54,54,84,244,141,181,178,84,84,49,49,48,53,50,54,55,84,244,141,181,179,84,84,49,49,48,53,50,54,56,84,244,141,181,180,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21068 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21068_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21068_s.txt", Encoding.UTF8);

    public Test21068() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers98fd3eef9d4b4edcb3855acb5ae8645d",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,49,57,53,48,84,244,143,158,142,84,84,49,49,49,49,57,53,49,84,244,143,158,143,84,84,49,49,49,49,57,53,50,84,244,143,158,144,84,84,49,49,49,49,57,53,51,84,244,143,158,145,84,84,49,49,49,49,57,53,52,84,244,143,158,146,84,84,49,49,49,49,57,53,53,84,244,143,158,147,84,84,49,49,49,49,57,53,54,84,244,143,158,148,84,84,49,49,49,49,57,53,55,84,244,143,158,149,84,84,49,49,49,49,57,53,56,84,244,143,158,150,84,84,49,49,49,49,57,53,57,84,244,143,158,151,84,84,49,49,49,49,57,54,48,84,244,143,158,152,84,84,49,49,49,49,57,54,49,84,244,143,158,153,84,84,49,49,49,49,57,54,50,84,244,143,158,154,84,84,49,49,49,49,57,54,51,84,244,143,158,155,84,84,49,49,49,49,57,54,52,84,244,143,158,156,84,84,49,49,49,49,57,54,53,84,244,143,158,157,84,84,49,49,49,49,57,54,54,84,244,143,158,158,84,84,49,49,49,49,57,54,55,84,244,143,158,159,84,84,49,49,49,49,57,54,56,84,244,143,158,160,84,84,49,49,49,49,57,54,57,84,244,143,158,161,84,84,49,49,49,49,57,55,48,84,244,143,158,162,84,84,49,49,49,49,57,55,49,84,244,143,158,163,84,84,49,49,49,49,57,55,50,84,244,143,158,164,84,84,49,49,49,49,57,55,51,84,244,143,158,165,84,84,49,49,49,49,57,55,52,84,244,143,158,166,84,84,49,49,49,49,57,55,53,84,244,143,158,167,84,84,49,49,49,49,57,55,54,84,244,143,158,168,84,84,49,49,49,49,57,55,55,84,244,143,158,169,84,84,49,49,49,49,57,55,56,84,244,143,158,170,84,84,49,49,49,49,57,55,57,84,244,143,158,171,84,84,49,49,49,49,57,56,48,84,244,143,158,172,84,84,49,49,49,49,57,56,49,84,244,143,158,173,84,84,49,49,49,49,57,56,50,84,244,143,158,174,84,84,49,49,49,49,57,56,51,84,244,143,158,175,84,84,49,49,49,49,57,56,52,84,244,143,158,176,84,84,49,49,49,49,57,56,53,84,244,143,158,177,84,84,49,49,49,49,57,56,54,84,244,143,158,178,84,84,49,49,49,49,57,56,55,84,244,143,158,179,84,84,49,49,49,49,57,56,56,84,244,143,158,180,84,84,49,49,49,49,57,56,57,84,244,143,158,181,84,84,49,49,49,49,57,57,48,84,244,143,158,182,84,84,49,49,49,49,57,57,49,84,244,143,158,183,84,84,49,49,49,49,57,57,50,84,244,143,158,184,84,84,49,49,49,49,57,57,51,84,244,143,158,185,84,84,49,49,49,49,57,57,52,84,244,143,158,186,84,84,49,49,49,49,57,57,53,84,244,143,158,187,84,84,49,49,49,49,57,57,54,84,244,143,158,188,84,84,49,49,49,49,57,57,55,84,244,143,158,189,84,84,49,49,49,49,57,57,56,84,244,143,158,190,84,84,49,49,49,49,57,57,57,84,244,143,158,191,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20048 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20048_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20048_s.txt", Encoding.UTF8);

    public Test20048() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers612d6939acd44cdbbba30cffbd18a713",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,48,56,54,48,52,84,243,182,143,156,84,84,49,48,48,56,54,48,53,84,243,182,143,157,84,84,49,48,48,56,54,48,54,84,243,182,143,158,84,84,49,48,48,56,54,48,55,84,243,182,143,159,84,84,49,48,48,56,54,48,56,84,243,182,143,160,84,84,49,48,48,56,54,48,57,84,243,182,143,161,84,84,49,48,48,56,54,49,48,84,243,182,143,162,84,84,49,48,48,56,54,49,49,84,243,182,143,163,84,84,49,48,48,56,54,49,50,84,243,182,143,164,84,84,49,48,48,56,54,49,51,84,243,182,143,165,84,84,49,48,48,56,54,49,52,84,243,182,143,166,84,84,49,48,48,56,54,49,53,84,243,182,143,167,84,84,49,48,48,56,54,49,54,84,243,182,143,168,84,84,49,48,48,56,54,49,55,84,243,182,143,169,84,84,49,48,48,56,54,49,56,84,243,182,143,170,84,84,49,48,48,56,54,49,57,84,243,182,143,171,84,84,49,48,48,56,54,50,48,84,243,182,143,172,84,84,49,48,48,56,54,50,49,84,243,182,143,173,84,84,49,48,48,56,54,50,50,84,243,182,143,174,84,84,49,48,48,56,54,50,51,84,243,182,143,175,84,84,49,48,48,56,54,50,52,84,243,182,143,176,84,84,49,48,48,56,54,50,53,84,243,182,143,177,84,84,49,48,48,56,54,50,54,84,243,182,143,178,84,84,49,48,48,56,54,50,55,84,243,182,143,179,84,84,49,48,48,56,54,50,56,84,243,182,143,180,84,84,49,48,48,56,54,50,57,84,243,182,143,181,84,84,49,48,48,56,54,51,48,84,243,182,143,182,84,84,49,48,48,56,54,51,49,84,243,182,143,183,84,84,49,48,48,56,54,51,50,84,243,182,143,184,84,84,49,48,48,56,54,51,51,84,243,182,143,185,84,84,49,48,48,56,54,51,52,84,243,182,143,186,84,84,49,48,48,56,54,51,53,84,243,182,143,187,84,84,49,48,48,56,54,51,54,84,243,182,143,188,84,84,49,48,48,56,54,51,55,84,243,182,143,189,84,84,49,48,48,56,54,51,56,84,243,182,143,190,84,84,49,48,48,56,54,51,57,84,243,182,143,191,84,84,49,48,48,56,54,52,48,84,243,182,144,128,84,84,49,48,48,56,54,52,49,84,243,182,144,129,84,84,49,48,48,56,54,52,50,84,243,182,144,130,84,84,49,48,48,56,54,52,51,84,243,182,144,131,84,84,49,48,48,56,54,52,52,84,243,182,144,132,84,84,49,48,48,56,54,52,53,84,243,182,144,133,84,84,49,48,48,56,54,52,54,84,243,182,144,134,84,84,49,48,48,56,54,52,55,84,243,182,144,135,84,84,49,48,48,56,54,52,56,84,243,182,144,136,84,84,49,48,48,56,54,52,57,84,243,182,144,137,84,84,49,48,48,56,54,53,48,84,243,182,144,138,84,84,49,48,48,56,54,53,49,84,243,182,144,139,84,84,49,48,48,56,54,53,50,84,243,182,144,140,84,84,49,48,48,56,54,53,51,84,243,182,144,141,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20715 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20715_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20715_s.txt", Encoding.UTF8);

    public Test20715() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers0bb7ae45edef4594997d97499d26b519",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,57,48,51,56,52,84,244,138,141,144,84,84,49,48,57,48,51,56,53,84,244,138,141,145,84,84,49,48,57,48,51,56,54,84,244,138,141,146,84,84,49,48,57,48,51,56,55,84,244,138,141,147,84,84,49,48,57,48,51,56,56,84,244,138,141,148,84,84,49,48,57,48,51,56,57,84,244,138,141,149,84,84,49,48,57,48,51,57,48,84,244,138,141,150,84,84,49,48,57,48,51,57,49,84,244,138,141,151,84,84,49,48,57,48,51,57,50,84,244,138,141,152,84,84,49,48,57,48,51,57,51,84,244,138,141,153,84,84,49,48,57,48,51,57,52,84,244,138,141,154,84,84,49,48,57,48,51,57,53,84,244,138,141,155,84,84,49,48,57,48,51,57,54,84,244,138,141,156,84,84,49,48,57,48,51,57,55,84,244,138,141,157,84,84,49,48,57,48,51,57,56,84,244,138,141,158,84,84,49,48,57,48,51,57,57,84,244,138,141,159,84,84,49,48,57,48,52,48,48,84,244,138,141,160,84,84,49,48,57,48,52,48,49,84,244,138,141,161,84,84,49,48,57,48,52,48,50,84,244,138,141,162,84,84,49,48,57,48,52,48,51,84,244,138,141,163,84,84,49,48,57,48,52,48,52,84,244,138,141,164,84,84,49,48,57,48,52,48,53,84,244,138,141,165,84,84,49,48,57,48,52,48,54,84,244,138,141,166,84,84,49,48,57,48,52,48,55,84,244,138,141,167,84,84,49,48,57,48,52,48,56,84,244,138,141,168,84,84,49,48,57,48,52,48,57,84,244,138,141,169,84,84,49,48,57,48,52,49,48,84,244,138,141,170,84,84,49,48,57,48,52,49,49,84,244,138,141,171,84,84,49,48,57,48,52,49,50,84,244,138,141,172,84,84,49,48,57,48,52,49,51,84,244,138,141,173,84,84,49,48,57,48,52,49,52,84,244,138,141,174,84,84,49,48,57,48,52,49,53,84,244,138,141,175,84,84,49,48,57,48,52,49,54,84,244,138,141,176,84,84,49,48,57,48,52,49,55,84,244,138,141,177,84,84,49,48,57,48,52,49,56,84,244,138,141,178,84,84,49,48,57,48,52,49,57,84,244,138,141,179,84,84,49,48,57,48,52,50,48,84,244,138,141,180,84,84,49,48,57,48,52,50,49,84,244,138,141,181,84,84,49,48,57,48,52,50,50,84,244,138,141,182,84,84,49,48,57,48,52,50,51,84,244,138,141,183,84,84,49,48,57,48,52,50,52,84,244,138,141,184,84,84,49,48,57,48,52,50,53,84,244,138,141,185,84,84,49,48,57,48,52,50,54,84,244,138,141,186,84,84,49,48,57,48,52,50,55,84,244,138,141,187,84,84,49,48,57,48,52,50,56,84,244,138,141,188,84,84,49,48,57,48,52,50,57,84,244,138,141,189,84,84,49,48,57,48,52,51,48,84,244,138,141,190,84,84,49,48,57,48,52,51,49,84,244,138,141,191,84,84,49,48,57,48,52,51,51,84,244,138,142,129,84,84,49,48,57,48,52,52,53,84,244,138,142,141,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19854 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19854_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19854_s.txt", Encoding.UTF8);

    public Test19854() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers7032abc4111d4702bce9d36696a0a648",
                        blob: Encoding.UTF8.GetString(new byte[]{84,54,52,54,53,53,84,239,178,143,84,84,54,52,54,53,54,84,239,178,144,84,84,54,52,54,54,57,84,239,178,157,84,84,54,52,55,48,53,84,239,179,129,84,84,54,52,55,49,55,84,239,179,141,84,84,54,52,55,49,57,84,239,179,143,84,84,54,52,55,50,48,84,239,179,144,84,84,54,52,55,51,51,84,239,179,157,84,84,54,52,55,54,57,84,239,180,129,84,84,54,52,55,56,49,84,239,180,141,84,84,54,52,55,56,51,84,239,180,143,84,84,54,52,55,56,52,84,239,180,144,84,84,54,52,55,57,55,84,239,180,157,84,84,54,52,56,51,51,84,239,181,129,84,84,54,52,56,52,53,84,239,181,141,84,84,54,52,56,52,55,84,239,181,143,84,84,54,52,56,52,56,84,239,181,144,84,84,54,52,56,54,49,84,239,181,157,84,84,54,52,56,57,55,84,239,182,129,84,84,54,52,57,48,57,84,239,182,141,84,84,54,52,57,49,49,84,239,182,143,84,84,54,52,57,49,50,84,239,182,144,84,84,54,52,57,50,53,84,239,182,157,84,84,54,52,57,54,49,84,239,183,129,84,84,54,52,57,55,51,84,239,183,141,84,84,54,52,57,55,53,84,239,183,143,84,84,54,52,57,55,54,84,239,183,144,84,84,54,52,57,56,57,84,239,183,157,84,84,54,53,48,50,53,84,239,184,129,84,84,54,53,48,51,55,84,239,184,141,84,84,54,53,48,51,57,84,239,184,143,84,84,54,53,48,52,48,84,239,184,144,84,84,54,53,48,53,51,84,239,184,157,84,84,54,53,48,56,57,84,239,185,129,84,84,54,53,49,48,49,84,239,185,141,84,84,54,53,49,48,51,84,239,185,143,84,84,54,53,49,48,52,84,239,185,144,84,84,54,53,49,49,55,84,239,185,157,84,84,54,53,49,53,51,84,239,186,129,84,84,54,53,49,54,53,84,239,186,141,84,84,54,53,49,54,55,84,239,186,143,84,84,54,53,49,54,56,84,239,186,144,84,84,54,53,49,56,49,84,239,186,157,84,84,54,53,50,49,55,84,239,187,129,84,84,54,53,50,50,57,84,239,187,141,84,84,54,53,50,51,49,84,239,187,143,84,84,54,53,50,51,50,84,239,187,144,84,84,54,53,50,52,53,84,239,187,157,84,84,54,53,50,56,49,84,239,188,129,84,84,54,53,50,57,51,84,239,188,141,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20203 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20203_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20203_s.txt", Encoding.UTF8);

    public Test20203() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers2b6cdd6684eb4500abcaa682adc323b7",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,51,51,48,56,49,84,243,188,141,185,84,84,49,48,51,51,48,56,50,84,243,188,141,186,84,84,49,48,51,51,48,56,51,84,243,188,141,187,84,84,49,48,51,51,48,56,52,84,243,188,141,188,84,84,49,48,51,51,48,56,53,84,243,188,141,189,84,84,49,48,51,51,48,56,54,84,243,188,141,190,84,84,49,48,51,51,48,56,55,84,243,188,141,191,84,84,49,48,51,51,48,56,57,84,243,188,142,129,84,84,49,48,51,51,49,48,49,84,243,188,142,141,84,84,49,48,51,51,49,48,51,84,243,188,142,143,84,84,49,48,51,51,49,48,52,84,243,188,142,144,84,84,49,48,51,51,49,49,55,84,243,188,142,157,84,84,49,48,51,51,49,53,50,84,243,188,143,128,84,84,49,48,51,51,49,53,51,84,243,188,143,129,84,84,49,48,51,51,49,53,52,84,243,188,143,130,84,84,49,48,51,51,49,53,53,84,243,188,143,131,84,84,49,48,51,51,49,53,54,84,243,188,143,132,84,84,49,48,51,51,49,53,55,84,243,188,143,133,84,84,49,48,51,51,49,53,56,84,243,188,143,134,84,84,49,48,51,51,49,53,57,84,243,188,143,135,84,84,49,48,51,51,49,54,48,84,243,188,143,136,84,84,49,48,51,51,49,54,49,84,243,188,143,137,84,84,49,48,51,51,49,54,50,84,243,188,143,138,84,84,49,48,51,51,49,54,51,84,243,188,143,139,84,84,49,48,51,51,49,54,52,84,243,188,143,140,84,84,49,48,51,51,49,54,53,84,243,188,143,141,84,84,49,48,51,51,49,54,54,84,243,188,143,142,84,84,49,48,51,51,49,54,55,84,243,188,143,143,84,84,49,48,51,51,49,54,56,84,243,188,143,144,84,84,49,48,51,51,49,54,57,84,243,188,143,145,84,84,49,48,51,51,49,55,48,84,243,188,143,146,84,84,49,48,51,51,49,55,49,84,243,188,143,147,84,84,49,48,51,51,49,55,50,84,243,188,143,148,84,84,49,48,51,51,49,55,51,84,243,188,143,149,84,84,49,48,51,51,49,55,52,84,243,188,143,150,84,84,49,48,51,51,49,55,53,84,243,188,143,151,84,84,49,48,51,51,49,55,54,84,243,188,143,152,84,84,49,48,51,51,49,55,55,84,243,188,143,153,84,84,49,48,51,51,49,55,56,84,243,188,143,154,84,84,49,48,51,51,49,55,57,84,243,188,143,155,84,84,49,48,51,51,49,56,48,84,243,188,143,156,84,84,49,48,51,51,49,56,49,84,243,188,143,157,84,84,49,48,51,51,49,56,50,84,243,188,143,158,84,84,49,48,51,51,49,56,51,84,243,188,143,159,84,84,49,48,51,51,49,56,52,84,243,188,143,160,84,84,49,48,51,51,49,56,53,84,243,188,143,161,84,84,49,48,51,51,49,56,54,84,243,188,143,162,84,84,49,48,51,51,49,56,55,84,243,188,143,163,84,84,49,48,51,51,49,56,56,84,243,188,143,164,84,84,49,48,51,51,49,56,57,84,243,188,143,165,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20370 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20370_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20370_s.txt", Encoding.UTF8);

    public Test20370() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers319eca44915441a6b60a6025f5eab2bd",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,51,55,50,56,84,244,129,144,160,84,84,49,48,53,51,55,50,57,84,244,129,144,161,84,84,49,48,53,51,55,51,48,84,244,129,144,162,84,84,49,48,53,51,55,51,49,84,244,129,144,163,84,84,49,48,53,51,55,51,50,84,244,129,144,164,84,84,49,48,53,51,55,51,51,84,244,129,144,165,84,84,49,48,53,51,55,51,52,84,244,129,144,166,84,84,49,48,53,51,55,51,53,84,244,129,144,167,84,84,49,48,53,51,55,51,54,84,244,129,144,168,84,84,49,48,53,51,55,51,55,84,244,129,144,169,84,84,49,48,53,51,55,51,56,84,244,129,144,170,84,84,49,48,53,51,55,51,57,84,244,129,144,171,84,84,49,48,53,51,55,52,48,84,244,129,144,172,84,84,49,48,53,51,55,52,49,84,244,129,144,173,84,84,49,48,53,51,55,52,50,84,244,129,144,174,84,84,49,48,53,51,55,52,51,84,244,129,144,175,84,84,49,48,53,51,55,52,52,84,244,129,144,176,84,84,49,48,53,51,55,52,53,84,244,129,144,177,84,84,49,48,53,51,55,52,54,84,244,129,144,178,84,84,49,48,53,51,55,52,55,84,244,129,144,179,84,84,49,48,53,51,55,52,56,84,244,129,144,180,84,84,49,48,53,51,55,52,57,84,244,129,144,181,84,84,49,48,53,51,55,53,48,84,244,129,144,182,84,84,49,48,53,51,55,53,49,84,244,129,144,183,84,84,49,48,53,51,55,53,50,84,244,129,144,184,84,84,49,48,53,51,55,53,51,84,244,129,144,185,84,84,49,48,53,51,55,53,52,84,244,129,144,186,84,84,49,48,53,51,55,53,53,84,244,129,144,187,84,84,49,48,53,51,55,53,54,84,244,129,144,188,84,84,49,48,53,51,55,53,55,84,244,129,144,189,84,84,49,48,53,51,55,53,56,84,244,129,144,190,84,84,49,48,53,51,55,53,57,84,244,129,144,191,84,84,49,48,53,51,55,54,48,84,244,129,145,128,84,84,49,48,53,51,55,54,49,84,244,129,145,129,84,84,49,48,53,51,55,54,50,84,244,129,145,130,84,84,49,48,53,51,55,54,51,84,244,129,145,131,84,84,49,48,53,51,55,54,52,84,244,129,145,132,84,84,49,48,53,51,55,54,53,84,244,129,145,133,84,84,49,48,53,51,55,54,54,84,244,129,145,134,84,84,49,48,53,51,55,54,55,84,244,129,145,135,84,84,49,48,53,51,55,54,56,84,244,129,145,136,84,84,49,48,53,51,55,54,57,84,244,129,145,137,84,84,49,48,53,51,55,55,48,84,244,129,145,138,84,84,49,48,53,51,55,55,49,84,244,129,145,139,84,84,49,48,53,51,55,55,50,84,244,129,145,140,84,84,49,48,53,51,55,55,51,84,244,129,145,141,84,84,49,48,53,51,55,55,52,84,244,129,145,142,84,84,49,48,53,51,55,55,53,84,244,129,145,143,84,84,49,48,53,51,55,55,54,84,244,129,145,144,84,84,49,48,53,51,55,55,55,84,244,129,145,145,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20650 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20650_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20650_s.txt", Encoding.UTF8);

    public Test20650() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers9df780a74f2549dda8f9f337dadb7946",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,55,57,49,53,56,84,244,135,157,182,84,84,49,48,55,57,49,53,57,84,244,135,157,183,84,84,49,48,55,57,49,54,48,84,244,135,157,184,84,84,49,48,55,57,49,54,49,84,244,135,157,185,84,84,49,48,55,57,49,54,50,84,244,135,157,186,84,84,49,48,55,57,49,54,51,84,244,135,157,187,84,84,49,48,55,57,49,54,52,84,244,135,157,188,84,84,49,48,55,57,49,54,53,84,244,135,157,189,84,84,49,48,55,57,49,54,54,84,244,135,157,190,84,84,49,48,55,57,49,54,55,84,244,135,157,191,84,84,49,48,55,57,49,54,57,84,244,135,158,129,84,84,49,48,55,57,49,56,49,84,244,135,158,141,84,84,49,48,55,57,49,56,51,84,244,135,158,143,84,84,49,48,55,57,49,56,52,84,244,135,158,144,84,84,49,48,55,57,49,57,55,84,244,135,158,157,84,84,49,48,55,57,50,51,51,84,244,135,159,129,84,84,49,48,55,57,50,52,53,84,244,135,159,141,84,84,49,48,55,57,50,52,55,84,244,135,159,143,84,84,49,48,55,57,50,52,56,84,244,135,159,144,84,84,49,48,55,57,50,54,49,84,244,135,159,157,84,84,49,48,55,57,50,57,55,84,244,135,160,129,84,84,49,48,55,57,51,48,57,84,244,135,160,141,84,84,49,48,55,57,51,49,49,84,244,135,160,143,84,84,49,48,55,57,51,49,50,84,244,135,160,144,84,84,49,48,55,57,51,50,53,84,244,135,160,157,84,84,49,48,55,57,51,54,49,84,244,135,161,129,84,84,49,48,55,57,51,55,51,84,244,135,161,141,84,84,49,48,55,57,51,55,53,84,244,135,161,143,84,84,49,48,55,57,51,55,54,84,244,135,161,144,84,84,49,48,55,57,51,56,57,84,244,135,161,157,84,84,49,48,55,57,52,50,53,84,244,135,162,129,84,84,49,48,55,57,52,51,55,84,244,135,162,141,84,84,49,48,55,57,52,51,57,84,244,135,162,143,84,84,49,48,55,57,52,52,48,84,244,135,162,144,84,84,49,48,55,57,52,53,51,84,244,135,162,157,84,84,49,48,55,57,52,56,57,84,244,135,163,129,84,84,49,48,55,57,53,48,49,84,244,135,163,141,84,84,49,48,55,57,53,48,51,84,244,135,163,143,84,84,49,48,55,57,53,48,52,84,244,135,163,144,84,84,49,48,55,57,53,49,55,84,244,135,163,157,84,84,49,48,55,57,53,53,51,84,244,135,164,129,84,84,49,48,55,57,53,54,53,84,244,135,164,141,84,84,49,48,55,57,53,54,55,84,244,135,164,143,84,84,49,48,55,57,53,54,56,84,244,135,164,144,84,84,49,48,55,57,53,56,49,84,244,135,164,157,84,84,49,48,55,57,54,49,55,84,244,135,165,129,84,84,49,48,55,57,54,50,57,84,244,135,165,141,84,84,49,48,55,57,54,51,49,84,244,135,165,143,84,84,49,48,55,57,54,51,50,84,244,135,165,144,84,84,49,48,55,57,54,52,53,84,244,135,165,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20810 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20810_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20810_s.txt", Encoding.UTF8);

    public Test20810() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers8240a720eb234783afd6a68d24f64161",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,50,51,54,57,84,244,141,136,161,84,84,49,49,48,50,51,55,48,84,244,141,136,162,84,84,49,49,48,50,51,55,49,84,244,141,136,163,84,84,49,49,48,50,51,55,50,84,244,141,136,164,84,84,49,49,48,50,51,55,51,84,244,141,136,165,84,84,49,49,48,50,51,55,52,84,244,141,136,166,84,84,49,49,48,50,51,55,53,84,244,141,136,167,84,84,49,49,48,50,51,55,54,84,244,141,136,168,84,84,49,49,48,50,51,55,55,84,244,141,136,169,84,84,49,49,48,50,51,55,56,84,244,141,136,170,84,84,49,49,48,50,51,55,57,84,244,141,136,171,84,84,49,49,48,50,51,56,48,84,244,141,136,172,84,84,49,49,48,50,51,56,49,84,244,141,136,173,84,84,49,49,48,50,51,56,50,84,244,141,136,174,84,84,49,49,48,50,51,56,51,84,244,141,136,175,84,84,49,49,48,50,51,56,52,84,244,141,136,176,84,84,49,49,48,50,51,56,53,84,244,141,136,177,84,84,49,49,48,50,51,56,54,84,244,141,136,178,84,84,49,49,48,50,51,56,55,84,244,141,136,179,84,84,49,49,48,50,51,56,56,84,244,141,136,180,84,84,49,49,48,50,51,56,57,84,244,141,136,181,84,84,49,49,48,50,51,57,48,84,244,141,136,182,84,84,49,49,48,50,51,57,49,84,244,141,136,183,84,84,49,49,48,50,51,57,50,84,244,141,136,184,84,84,49,49,48,50,51,57,51,84,244,141,136,185,84,84,49,49,48,50,51,57,52,84,244,141,136,186,84,84,49,49,48,50,51,57,53,84,244,141,136,187,84,84,49,49,48,50,51,57,54,84,244,141,136,188,84,84,49,49,48,50,51,57,55,84,244,141,136,189,84,84,49,49,48,50,51,57,56,84,244,141,136,190,84,84,49,49,48,50,51,57,57,84,244,141,136,191,84,84,49,49,48,50,52,48,48,84,244,141,137,128,84,84,49,49,48,50,52,48,49,84,244,141,137,129,84,84,49,49,48,50,52,48,50,84,244,141,137,130,84,84,49,49,48,50,52,48,51,84,244,141,137,131,84,84,49,49,48,50,52,48,52,84,244,141,137,132,84,84,49,49,48,50,52,48,53,84,244,141,137,133,84,84,49,49,48,50,52,48,54,84,244,141,137,134,84,84,49,49,48,50,52,48,55,84,244,141,137,135,84,84,49,49,48,50,52,48,56,84,244,141,137,136,84,84,49,49,48,50,52,48,57,84,244,141,137,137,84,84,49,49,48,50,52,49,48,84,244,141,137,138,84,84,49,49,48,50,52,49,49,84,244,141,137,139,84,84,49,49,48,50,52,49,50,84,244,141,137,140,84,84,49,49,48,50,52,49,51,84,244,141,137,141,84,84,49,49,48,50,52,49,52,84,244,141,137,142,84,84,49,49,48,50,52,49,53,84,244,141,137,143,84,84,49,49,48,50,52,49,54,84,244,141,137,144,84,84,49,49,48,50,52,49,55,84,244,141,137,145,84,84,49,49,48,50,52,49,56,84,244,141,137,146,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20144 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20144_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20144_s.txt", Encoding.UTF8);

    public Test20144() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers4f3362aed9424bd2bfac6751ee820ab9",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,50,52,48,55,48,84,243,186,129,134,84,84,49,48,50,52,48,55,49,84,243,186,129,135,84,84,49,48,50,52,48,55,50,84,243,186,129,136,84,84,49,48,50,52,48,55,51,84,243,186,129,137,84,84,49,48,50,52,48,55,52,84,243,186,129,138,84,84,49,48,50,52,48,55,53,84,243,186,129,139,84,84,49,48,50,52,48,55,54,84,243,186,129,140,84,84,49,48,50,52,48,55,55,84,243,186,129,141,84,84,49,48,50,52,48,55,56,84,243,186,129,142,84,84,49,48,50,52,48,55,57,84,243,186,129,143,84,84,49,48,50,52,48,56,48,84,243,186,129,144,84,84,49,48,50,52,48,56,49,84,243,186,129,145,84,84,49,48,50,52,48,56,50,84,243,186,129,146,84,84,49,48,50,52,48,56,51,84,243,186,129,147,84,84,49,48,50,52,48,56,52,84,243,186,129,148,84,84,49,48,50,52,48,56,53,84,243,186,129,149,84,84,49,48,50,52,48,56,54,84,243,186,129,150,84,84,49,48,50,52,48,56,55,84,243,186,129,151,84,84,49,48,50,52,48,56,56,84,243,186,129,152,84,84,49,48,50,52,48,56,57,84,243,186,129,153,84,84,49,48,50,52,48,57,48,84,243,186,129,154,84,84,49,48,50,52,48,57,49,84,243,186,129,155,84,84,49,48,50,52,48,57,50,84,243,186,129,156,84,84,49,48,50,52,48,57,51,84,243,186,129,157,84,84,49,48,50,52,48,57,52,84,243,186,129,158,84,84,49,48,50,52,48,57,53,84,243,186,129,159,84,84,49,48,50,52,48,57,54,84,243,186,129,160,84,84,49,48,50,52,48,57,55,84,243,186,129,161,84,84,49,48,50,52,48,57,56,84,243,186,129,162,84,84,49,48,50,52,48,57,57,84,243,186,129,163,84,84,49,48,50,52,49,48,48,84,243,186,129,164,84,84,49,48,50,52,49,48,49,84,243,186,129,165,84,84,49,48,50,52,49,48,50,84,243,186,129,166,84,84,49,48,50,52,49,48,51,84,243,186,129,167,84,84,49,48,50,52,49,48,52,84,243,186,129,168,84,84,49,48,50,52,49,48,53,84,243,186,129,169,84,84,49,48,50,52,49,48,54,84,243,186,129,170,84,84,49,48,50,52,49,48,55,84,243,186,129,171,84,84,49,48,50,52,49,48,56,84,243,186,129,172,84,84,49,48,50,52,49,48,57,84,243,186,129,173,84,84,49,48,50,52,49,49,48,84,243,186,129,174,84,84,49,48,50,52,49,49,49,84,243,186,129,175,84,84,49,48,50,52,49,49,50,84,243,186,129,176,84,84,49,48,50,52,49,49,51,84,243,186,129,177,84,84,49,48,50,52,49,49,52,84,243,186,129,178,84,84,49,48,50,52,49,49,53,84,243,186,129,179,84,84,49,48,50,52,49,49,54,84,243,186,129,180,84,84,49,48,50,52,49,49,55,84,243,186,129,181,84,84,49,48,50,52,49,49,56,84,243,186,129,182,84,84,49,48,50,52,49,49,57,84,243,186,129,183,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19923 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19923_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19923_s.txt", Encoding.UTF8);

    public Test19923() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersf0a96ab3064046f8a2fc77e6e3ebae9e",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,56,56,53,52,53,84,243,177,150,129,84,84,57,56,56,53,53,55,84,243,177,150,141,84,84,57,56,56,53,53,57,84,243,177,150,143,84,84,57,56,56,53,54,48,84,243,177,150,144,84,84,57,56,56,53,55,51,84,243,177,150,157,84,84,57,56,56,54,48,57,84,243,177,151,129,84,84,57,56,56,54,50,49,84,243,177,151,141,84,84,57,56,56,54,50,51,84,243,177,151,143,84,84,57,56,56,54,50,52,84,243,177,151,144,84,84,57,56,56,54,51,55,84,243,177,151,157,84,84,57,56,56,54,55,51,84,243,177,152,129,84,84,57,56,56,54,56,53,84,243,177,152,141,84,84,57,56,56,54,56,55,84,243,177,152,143,84,84,57,56,56,54,56,56,84,243,177,152,144,84,84,57,56,56,55,48,49,84,243,177,152,157,84,84,57,56,56,55,51,55,84,243,177,153,129,84,84,57,56,56,55,52,57,84,243,177,153,141,84,84,57,56,56,55,53,49,84,243,177,153,143,84,84,57,56,56,55,53,50,84,243,177,153,144,84,84,57,56,56,55,54,53,84,243,177,153,157,84,84,57,56,56,56,48,49,84,243,177,154,129,84,84,57,56,56,56,49,51,84,243,177,154,141,84,84,57,56,56,56,49,53,84,243,177,154,143,84,84,57,56,56,56,49,54,84,243,177,154,144,84,84,57,56,56,56,50,57,84,243,177,154,157,84,84,57,56,56,56,54,53,84,243,177,155,129,84,84,57,56,56,56,55,55,84,243,177,155,141,84,84,57,56,56,56,55,57,84,243,177,155,143,84,84,57,56,56,56,56,48,84,243,177,155,144,84,84,57,56,56,56,57,51,84,243,177,155,157,84,84,57,56,56,57,50,57,84,243,177,156,129,84,84,57,56,56,57,52,49,84,243,177,156,141,84,84,57,56,56,57,52,51,84,243,177,156,143,84,84,57,56,56,57,52,52,84,243,177,156,144,84,84,57,56,56,57,53,55,84,243,177,156,157,84,84,57,56,56,57,57,50,84,243,177,157,128,84,84,57,56,56,57,57,51,84,243,177,157,129,84,84,57,56,56,57,57,52,84,243,177,157,130,84,84,57,56,56,57,57,53,84,243,177,157,131,84,84,57,56,56,57,57,54,84,243,177,157,132,84,84,57,56,56,57,57,55,84,243,177,157,133,84,84,57,56,56,57,57,56,84,243,177,157,134,84,84,57,56,56,57,57,57,84,243,177,157,135,84,84,57,56,57,48,48,48,84,243,177,157,136,84,84,57,56,57,48,48,49,84,243,177,157,137,84,84,57,56,57,48,48,50,84,243,177,157,138,84,84,57,56,57,48,48,51,84,243,177,157,139,84,84,57,56,57,48,48,52,84,243,177,157,140,84,84,57,56,57,48,48,53,84,243,177,157,141,84,84,57,56,57,48,48,54,84,243,177,157,142,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20465 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20465_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20465_s.txt", Encoding.UTF8);

    public Test20465() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersee5ddc6232b847869028904d3d06a0f3",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,53,57,55,56,84,244,129,179,170,84,84,49,48,53,53,57,55,57,84,244,129,179,171,84,84,49,48,53,53,57,56,48,84,244,129,179,172,84,84,49,48,53,53,57,56,49,84,244,129,179,173,84,84,49,48,53,53,57,56,50,84,244,129,179,174,84,84,49,48,53,53,57,56,51,84,244,129,179,175,84,84,49,48,53,53,57,56,52,84,244,129,179,176,84,84,49,48,53,53,57,56,53,84,244,129,179,177,84,84,49,48,53,53,57,56,54,84,244,129,179,178,84,84,49,48,53,53,57,56,55,84,244,129,179,179,84,84,49,48,53,53,57,56,56,84,244,129,179,180,84,84,49,48,53,53,57,56,57,84,244,129,179,181,84,84,49,48,53,53,57,57,48,84,244,129,179,182,84,84,49,48,53,53,57,57,49,84,244,129,179,183,84,84,49,48,53,53,57,57,50,84,244,129,179,184,84,84,49,48,53,53,57,57,51,84,244,129,179,185,84,84,49,48,53,53,57,57,52,84,244,129,179,186,84,84,49,48,53,53,57,57,53,84,244,129,179,187,84,84,49,48,53,53,57,57,54,84,244,129,179,188,84,84,49,48,53,53,57,57,55,84,244,129,179,189,84,84,49,48,53,53,57,57,56,84,244,129,179,190,84,84,49,48,53,53,57,57,57,84,244,129,179,191,84,84,49,48,53,54,48,48,48,84,244,129,180,128,84,84,49,48,53,54,48,48,49,84,244,129,180,129,84,84,49,48,53,54,48,48,50,84,244,129,180,130,84,84,49,48,53,54,48,48,51,84,244,129,180,131,84,84,49,48,53,54,48,48,52,84,244,129,180,132,84,84,49,48,53,54,48,48,53,84,244,129,180,133,84,84,49,48,53,54,48,48,54,84,244,129,180,134,84,84,49,48,53,54,48,48,55,84,244,129,180,135,84,84,49,48,53,54,48,48,56,84,244,129,180,136,84,84,49,48,53,54,48,48,57,84,244,129,180,137,84,84,49,48,53,54,48,49,48,84,244,129,180,138,84,84,49,48,53,54,48,49,49,84,244,129,180,139,84,84,49,48,53,54,48,49,50,84,244,129,180,140,84,84,49,48,53,54,48,49,51,84,244,129,180,141,84,84,49,48,53,54,48,49,52,84,244,129,180,142,84,84,49,48,53,54,48,49,53,84,244,129,180,143,84,84,49,48,53,54,48,49,54,84,244,129,180,144,84,84,49,48,53,54,48,49,55,84,244,129,180,145,84,84,49,48,53,54,48,49,56,84,244,129,180,146,84,84,49,48,53,54,48,49,57,84,244,129,180,147,84,84,49,48,53,54,48,50,48,84,244,129,180,148,84,84,49,48,53,54,48,50,49,84,244,129,180,149,84,84,49,48,53,54,48,50,50,84,244,129,180,150,84,84,49,48,53,54,48,50,51,84,244,129,180,151,84,84,49,48,53,54,48,50,52,84,244,129,180,152,84,84,49,48,53,54,48,50,53,84,244,129,180,153,84,84,49,48,53,54,48,50,54,84,244,129,180,154,84,84,49,48,53,54,48,50,55,84,244,129,180,155,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19981 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19981_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19981_s.txt", Encoding.UTF8);

    public Test19981() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersc5d3e7c5509046d2aa3f8bb095571b82",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,57,55,53,49,55,84,243,179,162,141,84,84,57,57,55,53,49,57,84,243,179,162,143,84,84,57,57,55,53,50,48,84,243,179,162,144,84,84,57,57,55,53,51,51,84,243,179,162,157,84,84,57,57,55,53,54,57,84,243,179,163,129,84,84,57,57,55,53,56,49,84,243,179,163,141,84,84,57,57,55,53,56,51,84,243,179,163,143,84,84,57,57,55,53,56,52,84,243,179,163,144,84,84,57,57,55,53,57,55,84,243,179,163,157,84,84,57,57,55,54,51,51,84,243,179,164,129,84,84,57,57,55,54,52,53,84,243,179,164,141,84,84,57,57,55,54,52,55,84,243,179,164,143,84,84,57,57,55,54,52,56,84,243,179,164,144,84,84,57,57,55,54,54,49,84,243,179,164,157,84,84,57,57,55,54,57,55,84,243,179,165,129,84,84,57,57,55,55,48,57,84,243,179,165,141,84,84,57,57,55,55,49,49,84,243,179,165,143,84,84,57,57,55,55,49,50,84,243,179,165,144,84,84,57,57,55,55,50,53,84,243,179,165,157,84,84,57,57,55,55,54,49,84,243,179,166,129,84,84,57,57,55,55,55,51,84,243,179,166,141,84,84,57,57,55,55,55,53,84,243,179,166,143,84,84,57,57,55,55,55,54,84,243,179,166,144,84,84,57,57,55,55,56,57,84,243,179,166,157,84,84,57,57,55,56,50,53,84,243,179,167,129,84,84,57,57,55,56,51,55,84,243,179,167,141,84,84,57,57,55,56,51,57,84,243,179,167,143,84,84,57,57,55,56,52,48,84,243,179,167,144,84,84,57,57,55,56,53,51,84,243,179,167,157,84,84,57,57,55,56,56,57,84,243,179,168,129,84,84,57,57,55,57,48,49,84,243,179,168,141,84,84,57,57,55,57,48,51,84,243,179,168,143,84,84,57,57,55,57,48,52,84,243,179,168,144,84,84,57,57,55,57,49,55,84,243,179,168,157,84,84,57,57,55,57,53,51,84,243,179,169,129,84,84,57,57,55,57,54,53,84,243,179,169,141,84,84,57,57,55,57,54,55,84,243,179,169,143,84,84,57,57,55,57,54,56,84,243,179,169,144,84,84,57,57,55,57,56,49,84,243,179,169,157,84,84,57,57,56,48,49,55,84,243,179,170,129,84,84,57,57,56,48,50,57,84,243,179,170,141,84,84,57,57,56,48,51,49,84,243,179,170,143,84,84,57,57,56,48,51,50,84,243,179,170,144,84,84,57,57,56,48,52,53,84,243,179,170,157,84,84,57,57,56,48,56,49,84,243,179,171,129,84,84,57,57,56,48,57,51,84,243,179,171,141,84,84,57,57,56,48,57,53,84,243,179,171,143,84,84,57,57,56,48,57,54,84,243,179,171,144,84,84,57,57,56,49,48,57,84,243,179,171,157,84,84,57,57,56,49,52,53,84,243,179,172,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21128 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21128_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21128_s.txt", Encoding.UTF8);

    public Test21128() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers56d1c908d8f44b69abe6817b1847a0f6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,51,51,53,48,84,244,143,180,134,84,84,49,49,49,51,51,53,49,84,244,143,180,135,84,84,49,49,49,51,51,53,50,84,244,143,180,136,84,84,49,49,49,51,51,53,51,84,244,143,180,137,84,84,49,49,49,51,51,53,52,84,244,143,180,138,84,84,49,49,49,51,51,53,53,84,244,143,180,139,84,84,49,49,49,51,51,53,54,84,244,143,180,140,84,84,49,49,49,51,51,53,55,84,244,143,180,141,84,84,49,49,49,51,51,53,56,84,244,143,180,142,84,84,49,49,49,51,51,53,57,84,244,143,180,143,84,84,49,49,49,51,51,54,48,84,244,143,180,144,84,84,49,49,49,51,51,54,49,84,244,143,180,145,84,84,49,49,49,51,51,54,50,84,244,143,180,146,84,84,49,49,49,51,51,54,51,84,244,143,180,147,84,84,49,49,49,51,51,54,52,84,244,143,180,148,84,84,49,49,49,51,51,54,53,84,244,143,180,149,84,84,49,49,49,51,51,54,54,84,244,143,180,150,84,84,49,49,49,51,51,54,55,84,244,143,180,151,84,84,49,49,49,51,51,54,56,84,244,143,180,152,84,84,49,49,49,51,51,54,57,84,244,143,180,153,84,84,49,49,49,51,51,55,48,84,244,143,180,154,84,84,49,49,49,51,51,55,49,84,244,143,180,155,84,84,49,49,49,51,51,55,50,84,244,143,180,156,84,84,49,49,49,51,51,55,51,84,244,143,180,157,84,84,49,49,49,51,51,55,52,84,244,143,180,158,84,84,49,49,49,51,51,55,53,84,244,143,180,159,84,84,49,49,49,51,51,55,54,84,244,143,180,160,84,84,49,49,49,51,51,55,55,84,244,143,180,161,84,84,49,49,49,51,51,55,56,84,244,143,180,162,84,84,49,49,49,51,51,55,57,84,244,143,180,163,84,84,49,49,49,51,51,56,48,84,244,143,180,164,84,84,49,49,49,51,51,56,49,84,244,143,180,165,84,84,49,49,49,51,51,56,50,84,244,143,180,166,84,84,49,49,49,51,51,56,51,84,244,143,180,167,84,84,49,49,49,51,51,56,52,84,244,143,180,168,84,84,49,49,49,51,51,56,53,84,244,143,180,169,84,84,49,49,49,51,51,56,54,84,244,143,180,170,84,84,49,49,49,51,51,56,55,84,244,143,180,171,84,84,49,49,49,51,51,56,56,84,244,143,180,172,84,84,49,49,49,51,51,56,57,84,244,143,180,173,84,84,49,49,49,51,51,57,48,84,244,143,180,174,84,84,49,49,49,51,51,57,49,84,244,143,180,175,84,84,49,49,49,51,51,57,50,84,244,143,180,176,84,84,49,49,49,51,51,57,51,84,244,143,180,177,84,84,49,49,49,51,51,57,52,84,244,143,180,178,84,84,49,49,49,51,51,57,53,84,244,143,180,179,84,84,49,49,49,51,51,57,54,84,244,143,180,180,84,84,49,49,49,51,51,57,55,84,244,143,180,181,84,84,49,49,49,51,51,57,56,84,244,143,180,182,84,84,49,49,49,51,51,57,57,84,244,143,180,183,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20876 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20876_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20876_s.txt", Encoding.UTF8);

    public Test20876() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersdd41d3a5bb7f42709f7cec587f1a204a",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,51,57,49,57,84,244,141,160,175,84,84,49,49,48,51,57,50,48,84,244,141,160,176,84,84,49,49,48,51,57,50,49,84,244,141,160,177,84,84,49,49,48,51,57,50,50,84,244,141,160,178,84,84,49,49,48,51,57,50,51,84,244,141,160,179,84,84,49,49,48,51,57,50,52,84,244,141,160,180,84,84,49,49,48,51,57,50,53,84,244,141,160,181,84,84,49,49,48,51,57,50,54,84,244,141,160,182,84,84,49,49,48,51,57,50,55,84,244,141,160,183,84,84,49,49,48,51,57,50,56,84,244,141,160,184,84,84,49,49,48,51,57,50,57,84,244,141,160,185,84,84,49,49,48,51,57,51,48,84,244,141,160,186,84,84,49,49,48,51,57,51,49,84,244,141,160,187,84,84,49,49,48,51,57,51,50,84,244,141,160,188,84,84,49,49,48,51,57,51,51,84,244,141,160,189,84,84,49,49,48,51,57,51,52,84,244,141,160,190,84,84,49,49,48,51,57,51,53,84,244,141,160,191,84,84,49,49,48,51,57,51,54,84,244,141,161,128,84,84,49,49,48,51,57,51,55,84,244,141,161,129,84,84,49,49,48,51,57,51,56,84,244,141,161,130,84,84,49,49,48,51,57,51,57,84,244,141,161,131,84,84,49,49,48,51,57,52,48,84,244,141,161,132,84,84,49,49,48,51,57,52,49,84,244,141,161,133,84,84,49,49,48,51,57,52,50,84,244,141,161,134,84,84,49,49,48,51,57,52,51,84,244,141,161,135,84,84,49,49,48,51,57,52,52,84,244,141,161,136,84,84,49,49,48,51,57,52,53,84,244,141,161,137,84,84,49,49,48,51,57,52,54,84,244,141,161,138,84,84,49,49,48,51,57,52,55,84,244,141,161,139,84,84,49,49,48,51,57,52,56,84,244,141,161,140,84,84,49,49,48,51,57,52,57,84,244,141,161,141,84,84,49,49,48,51,57,53,48,84,244,141,161,142,84,84,49,49,48,51,57,53,49,84,244,141,161,143,84,84,49,49,48,51,57,53,50,84,244,141,161,144,84,84,49,49,48,51,57,53,51,84,244,141,161,145,84,84,49,49,48,51,57,53,52,84,244,141,161,146,84,84,49,49,48,51,57,53,53,84,244,141,161,147,84,84,49,49,48,51,57,53,54,84,244,141,161,148,84,84,49,49,48,51,57,53,55,84,244,141,161,149,84,84,49,49,48,51,57,53,56,84,244,141,161,150,84,84,49,49,48,51,57,53,57,84,244,141,161,151,84,84,49,49,48,51,57,54,48,84,244,141,161,152,84,84,49,49,48,51,57,54,49,84,244,141,161,153,84,84,49,49,48,51,57,54,50,84,244,141,161,154,84,84,49,49,48,51,57,54,51,84,244,141,161,155,84,84,49,49,48,51,57,54,52,84,244,141,161,156,84,84,49,49,48,51,57,54,53,84,244,141,161,157,84,84,49,49,48,51,57,54,54,84,244,141,161,158,84,84,49,49,48,51,57,54,55,84,244,141,161,159,84,84,49,49,48,51,57,54,56,84,244,141,161,160,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20277 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20277_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20277_s.txt", Encoding.UTF8);

    public Test20277() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers712afb35b54344eb8fa90647f752cd92",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,52,52,56,49,53,84,243,191,133,143,84,84,49,48,52,52,56,49,54,84,243,191,133,144,84,84,49,48,52,52,56,50,57,84,243,191,133,157,84,84,49,48,52,52,56,54,53,84,243,191,134,129,84,84,49,48,52,52,56,55,55,84,243,191,134,141,84,84,49,48,52,52,56,55,57,84,243,191,134,143,84,84,49,48,52,52,56,56,48,84,243,191,134,144,84,84,49,48,52,52,56,57,51,84,243,191,134,157,84,84,49,48,52,52,57,50,57,84,243,191,135,129,84,84,49,48,52,52,57,52,49,84,243,191,135,141,84,84,49,48,52,52,57,52,51,84,243,191,135,143,84,84,49,48,52,52,57,52,52,84,243,191,135,144,84,84,49,48,52,52,57,53,55,84,243,191,135,157,84,84,49,48,52,52,57,57,51,84,243,191,136,129,84,84,49,48,52,53,48,48,53,84,243,191,136,141,84,84,49,48,52,53,48,48,55,84,243,191,136,143,84,84,49,48,52,53,48,48,56,84,243,191,136,144,84,84,49,48,52,53,48,50,49,84,243,191,136,157,84,84,49,48,52,53,48,53,55,84,243,191,137,129,84,84,49,48,52,53,48,54,57,84,243,191,137,141,84,84,49,48,52,53,48,55,49,84,243,191,137,143,84,84,49,48,52,53,48,55,50,84,243,191,137,144,84,84,49,48,52,53,48,56,53,84,243,191,137,157,84,84,49,48,52,53,49,50,49,84,243,191,138,129,84,84,49,48,52,53,49,51,51,84,243,191,138,141,84,84,49,48,52,53,49,51,53,84,243,191,138,143,84,84,49,48,52,53,49,51,54,84,243,191,138,144,84,84,49,48,52,53,49,52,57,84,243,191,138,157,84,84,49,48,52,53,49,56,53,84,243,191,139,129,84,84,49,48,52,53,49,57,55,84,243,191,139,141,84,84,49,48,52,53,49,57,57,84,243,191,139,143,84,84,49,48,52,53,50,48,48,84,243,191,139,144,84,84,49,48,52,53,50,49,51,84,243,191,139,157,84,84,49,48,52,53,50,52,57,84,243,191,140,129,84,84,49,48,52,53,50,54,49,84,243,191,140,141,84,84,49,48,52,53,50,54,51,84,243,191,140,143,84,84,49,48,52,53,50,54,52,84,243,191,140,144,84,84,49,48,52,53,50,55,55,84,243,191,140,157,84,84,49,48,52,53,51,49,50,84,243,191,141,128,84,84,49,48,52,53,51,49,51,84,243,191,141,129,84,84,49,48,52,53,51,49,52,84,243,191,141,130,84,84,49,48,52,53,51,49,53,84,243,191,141,131,84,84,49,48,52,53,51,49,54,84,243,191,141,132,84,84,49,48,52,53,51,49,55,84,243,191,141,133,84,84,49,48,52,53,51,49,56,84,243,191,141,134,84,84,49,48,52,53,51,49,57,84,243,191,141,135,84,84,49,48,52,53,51,50,48,84,243,191,141,136,84,84,49,48,52,53,51,50,49,84,243,191,141,137,84,84,49,48,52,53,51,50,50,84,243,191,141,138,84,84,49,48,52,53,51,50,51,84,243,191,141,139,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20993 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20993_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20993_s.txt", Encoding.UTF8);

    public Test20993() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersd35ea9f156764511b97173ebc769448f",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,48,49,53,48,84,244,143,130,134,84,84,49,49,49,48,49,53,49,84,244,143,130,135,84,84,49,49,49,48,49,53,50,84,244,143,130,136,84,84,49,49,49,48,49,53,51,84,244,143,130,137,84,84,49,49,49,48,49,53,52,84,244,143,130,138,84,84,49,49,49,48,49,53,53,84,244,143,130,139,84,84,49,49,49,48,49,53,54,84,244,143,130,140,84,84,49,49,49,48,49,53,55,84,244,143,130,141,84,84,49,49,49,48,49,53,56,84,244,143,130,142,84,84,49,49,49,48,49,53,57,84,244,143,130,143,84,84,49,49,49,48,49,54,48,84,244,143,130,144,84,84,49,49,49,48,49,54,49,84,244,143,130,145,84,84,49,49,49,48,49,54,50,84,244,143,130,146,84,84,49,49,49,48,49,54,51,84,244,143,130,147,84,84,49,49,49,48,49,54,52,84,244,143,130,148,84,84,49,49,49,48,49,54,53,84,244,143,130,149,84,84,49,49,49,48,49,54,54,84,244,143,130,150,84,84,49,49,49,48,49,54,55,84,244,143,130,151,84,84,49,49,49,48,49,54,56,84,244,143,130,152,84,84,49,49,49,48,49,54,57,84,244,143,130,153,84,84,49,49,49,48,49,55,48,84,244,143,130,154,84,84,49,49,49,48,49,55,49,84,244,143,130,155,84,84,49,49,49,48,49,55,50,84,244,143,130,156,84,84,49,49,49,48,49,55,51,84,244,143,130,157,84,84,49,49,49,48,49,55,52,84,244,143,130,158,84,84,49,49,49,48,49,55,53,84,244,143,130,159,84,84,49,49,49,48,49,55,54,84,244,143,130,160,84,84,49,49,49,48,49,55,55,84,244,143,130,161,84,84,49,49,49,48,49,55,56,84,244,143,130,162,84,84,49,49,49,48,49,55,57,84,244,143,130,163,84,84,49,49,49,48,49,56,48,84,244,143,130,164,84,84,49,49,49,48,49,56,49,84,244,143,130,165,84,84,49,49,49,48,49,56,50,84,244,143,130,166,84,84,49,49,49,48,49,56,51,84,244,143,130,167,84,84,49,49,49,48,49,56,52,84,244,143,130,168,84,84,49,49,49,48,49,56,53,84,244,143,130,169,84,84,49,49,49,48,49,56,54,84,244,143,130,170,84,84,49,49,49,48,49,56,55,84,244,143,130,171,84,84,49,49,49,48,49,56,56,84,244,143,130,172,84,84,49,49,49,48,49,56,57,84,244,143,130,173,84,84,49,49,49,48,49,57,48,84,244,143,130,174,84,84,49,49,49,48,49,57,49,84,244,143,130,175,84,84,49,49,49,48,49,57,50,84,244,143,130,176,84,84,49,49,49,48,49,57,51,84,244,143,130,177,84,84,49,49,49,48,49,57,52,84,244,143,130,178,84,84,49,49,49,48,49,57,53,84,244,143,130,179,84,84,49,49,49,48,49,57,54,84,244,143,130,180,84,84,49,49,49,48,49,57,55,84,244,143,130,181,84,84,49,49,49,48,49,57,56,84,244,143,130,182,84,84,49,49,49,48,49,57,57,84,244,143,130,183,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19856 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19856_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19856_s.txt", Encoding.UTF8);

    public Test19856() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers7032abc4111d4702bce9d36696a0a648",
                        blob: Encoding.UTF8.GetString(new byte[]{84,54,53,50,57,53,84,239,188,143,84,84,54,53,50,57,54,84,239,188,144,84,84,54,53,51,48,57,84,239,188,157,84,84,54,53,51,52,53,84,239,189,129,84,84,54,53,51,53,55,84,239,189,141,84,84,54,53,51,53,57,84,239,189,143,84,84,54,53,51,54,48,84,239,189,144,84,84,54,53,51,55,51,84,239,189,157,84,84,54,53,52,48,57,84,239,190,129,84,84,54,53,52,50,49,84,239,190,141,84,84,54,53,52,50,51,84,239,190,143,84,84,54,53,52,50,52,84,239,190,144,84,84,54,53,52,51,55,84,239,190,157,84,84,54,53,52,55,51,84,239,191,129,84,84,54,53,52,56,53,84,239,191,141,84,84,54,53,52,56,55,84,239,191,143,84,84,54,53,52,56,56,84,239,191,144,84,84,54,53,53,48,49,84,239,191,157,84,84,51,50,55,54,55,56,84,241,143,191,190,84,84,51,50,55,54,55,57,84,241,143,191,191,84,84,53,56,57,56,50,50,84,242,143,191,190,84,84,53,56,57,56,50,51,84,242,143,191,191,84,84,56,53,49,57,54,54,84,243,143,191,190,84,84,56,53,49,57,54,55,84,243,143,191,191,84,84,57,49,55,53,48,53,84,243,160,128,129,84,84,57,49,55,53,49,55,84,243,160,128,141,84,84,57,49,55,53,49,57,84,243,160,128,143,84,84,57,49,55,53,50,48,84,243,160,128,144,84,84,57,49,55,53,51,51,84,243,160,128,157,84,84,57,49,55,53,54,56,84,243,160,129,128,84,84,57,49,55,53,54,57,84,243,160,129,129,84,84,57,49,55,53,55,48,84,243,160,129,130,84,84,57,49,55,53,55,49,84,243,160,129,131,84,84,57,49,55,53,55,50,84,243,160,129,132,84,84,57,49,55,53,55,51,84,243,160,129,133,84,84,57,49,55,53,55,52,84,243,160,129,134,84,84,57,49,55,53,55,53,84,243,160,129,135,84,84,57,49,55,53,55,54,84,243,160,129,136,84,84,57,49,55,53,55,55,84,243,160,129,137,84,84,57,49,55,53,55,56,84,243,160,129,138,84,84,57,49,55,53,55,57,84,243,160,129,139,84,84,57,49,55,53,56,48,84,243,160,129,140,84,84,57,49,55,53,56,49,84,243,160,129,141,84,84,57,49,55,53,56,50,84,243,160,129,142,84,84,57,49,55,53,56,51,84,243,160,129,143,84,84,57,49,55,53,56,52,84,243,160,129,144,84,84,57,49,55,53,56,53,84,243,160,129,145,84,84,57,49,55,53,56,54,84,243,160,129,146,84,84,57,49,55,53,56,55,84,243,160,129,147,84,84,57,49,55,53,56,56,84,243,160,129,148,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20146 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20146_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20146_s.txt", Encoding.UTF8);

    public Test20146() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers4f3362aed9424bd2bfac6751ee820ab9",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,50,52,49,50,48,84,243,186,129,184,84,84,49,48,50,52,49,50,49,84,243,186,129,185,84,84,49,48,50,52,49,50,50,84,243,186,129,186,84,84,49,48,50,52,49,50,51,84,243,186,129,187,84,84,49,48,50,52,49,50,52,84,243,186,129,188,84,84,49,48,50,52,49,50,53,84,243,186,129,189,84,84,49,48,50,52,49,50,54,84,243,186,129,190,84,84,49,48,50,52,49,50,55,84,243,186,129,191,84,84,49,48,50,52,49,50,57,84,243,186,130,129,84,84,49,48,50,52,49,52,49,84,243,186,130,141,84,84,49,48,50,52,49,52,51,84,243,186,130,143,84,84,49,48,50,52,49,52,52,84,243,186,130,144,84,84,49,48,50,52,49,53,55,84,243,186,130,157,84,84,49,48,50,52,49,57,51,84,243,186,131,129,84,84,49,48,50,52,50,48,53,84,243,186,131,141,84,84,49,48,50,52,50,48,55,84,243,186,131,143,84,84,49,48,50,52,50,48,56,84,243,186,131,144,84,84,49,48,50,52,50,50,49,84,243,186,131,157,84,84,49,48,50,52,50,53,55,84,243,186,132,129,84,84,49,48,50,52,50,54,57,84,243,186,132,141,84,84,49,48,50,52,50,55,49,84,243,186,132,143,84,84,49,48,50,52,50,55,50,84,243,186,132,144,84,84,49,48,50,52,50,56,53,84,243,186,132,157,84,84,49,48,50,52,51,50,49,84,243,186,133,129,84,84,49,48,50,52,51,51,51,84,243,186,133,141,84,84,49,48,50,52,51,51,53,84,243,186,133,143,84,84,49,48,50,52,51,51,54,84,243,186,133,144,84,84,49,48,50,52,51,52,57,84,243,186,133,157,84,84,49,48,50,52,51,56,53,84,243,186,134,129,84,84,49,48,50,52,51,57,55,84,243,186,134,141,84,84,49,48,50,52,51,57,57,84,243,186,134,143,84,84,49,48,50,52,52,48,48,84,243,186,134,144,84,84,49,48,50,52,52,49,51,84,243,186,134,157,84,84,49,48,50,52,52,52,57,84,243,186,135,129,84,84,49,48,50,52,52,54,49,84,243,186,135,141,84,84,49,48,50,52,52,54,51,84,243,186,135,143,84,84,49,48,50,52,52,54,52,84,243,186,135,144,84,84,49,48,50,52,52,55,55,84,243,186,135,157,84,84,49,48,50,52,53,49,51,84,243,186,136,129,84,84,49,48,50,52,53,50,53,84,243,186,136,141,84,84,49,48,50,52,53,50,55,84,243,186,136,143,84,84,49,48,50,52,53,50,56,84,243,186,136,144,84,84,49,48,50,52,53,52,49,84,243,186,136,157,84,84,49,48,50,52,53,55,55,84,243,186,137,129,84,84,49,48,50,52,53,56,57,84,243,186,137,141,84,84,49,48,50,52,53,57,49,84,243,186,137,143,84,84,49,48,50,52,53,57,50,84,243,186,137,144,84,84,49,48,50,52,54,48,53,84,243,186,137,157,84,84,49,48,50,52,54,52,49,84,243,186,138,129,84,84,49,48,50,52,54,53,51,84,243,186,138,141,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21070 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21070_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21070_s.txt", Encoding.UTF8);

    public Test21070() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers98fd3eef9d4b4edcb3855acb5ae8645d",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,50,48,48,48,84,244,143,159,128,84,84,49,49,49,50,48,48,49,84,244,143,159,129,84,84,49,49,49,50,48,48,50,84,244,143,159,130,84,84,49,49,49,50,48,48,51,84,244,143,159,131,84,84,49,49,49,50,48,48,52,84,244,143,159,132,84,84,49,49,49,50,48,48,53,84,244,143,159,133,84,84,49,49,49,50,48,48,54,84,244,143,159,134,84,84,49,49,49,50,48,48,55,84,244,143,159,135,84,84,49,49,49,50,48,48,56,84,244,143,159,136,84,84,49,49,49,50,48,48,57,84,244,143,159,137,84,84,49,49,49,50,48,49,48,84,244,143,159,138,84,84,49,49,49,50,48,49,49,84,244,143,159,139,84,84,49,49,49,50,48,49,50,84,244,143,159,140,84,84,49,49,49,50,48,49,51,84,244,143,159,141,84,84,49,49,49,50,48,49,52,84,244,143,159,142,84,84,49,49,49,50,48,49,53,84,244,143,159,143,84,84,49,49,49,50,48,49,54,84,244,143,159,144,84,84,49,49,49,50,48,49,55,84,244,143,159,145,84,84,49,49,49,50,48,49,56,84,244,143,159,146,84,84,49,49,49,50,48,49,57,84,244,143,159,147,84,84,49,49,49,50,48,50,48,84,244,143,159,148,84,84,49,49,49,50,48,50,49,84,244,143,159,149,84,84,49,49,49,50,48,50,50,84,244,143,159,150,84,84,49,49,49,50,48,50,51,84,244,143,159,151,84,84,49,49,49,50,48,50,52,84,244,143,159,152,84,84,49,49,49,50,48,50,53,84,244,143,159,153,84,84,49,49,49,50,48,50,54,84,244,143,159,154,84,84,49,49,49,50,48,50,55,84,244,143,159,155,84,84,49,49,49,50,48,50,56,84,244,143,159,156,84,84,49,49,49,50,48,50,57,84,244,143,159,157,84,84,49,49,49,50,48,51,48,84,244,143,159,158,84,84,49,49,49,50,48,51,49,84,244,143,159,159,84,84,49,49,49,50,48,51,50,84,244,143,159,160,84,84,49,49,49,50,48,51,51,84,244,143,159,161,84,84,49,49,49,50,48,51,52,84,244,143,159,162,84,84,49,49,49,50,48,51,53,84,244,143,159,163,84,84,49,49,49,50,48,51,54,84,244,143,159,164,84,84,49,49,49,50,48,51,55,84,244,143,159,165,84,84,49,49,49,50,48,51,56,84,244,143,159,166,84,84,49,49,49,50,48,51,57,84,244,143,159,167,84,84,49,49,49,50,48,52,48,84,244,143,159,168,84,84,49,49,49,50,48,52,49,84,244,143,159,169,84,84,49,49,49,50,48,52,50,84,244,143,159,170,84,84,49,49,49,50,48,52,51,84,244,143,159,171,84,84,49,49,49,50,48,52,52,84,244,143,159,172,84,84,49,49,49,50,48,52,53,84,244,143,159,173,84,84,49,49,49,50,48,52,54,84,244,143,159,174,84,84,49,49,49,50,48,52,55,84,244,143,159,175,84,84,49,49,49,50,48,52,56,84,244,143,159,176,84,84,49,49,49,50,48,52,57,84,244,143,159,177,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20933 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20933_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20933_s.txt", Encoding.UTF8);

    public Test20933() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers9e891393b2624599aedf317812121dcf",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,53,50,54,57,84,244,141,181,181,84,84,49,49,48,53,50,55,48,84,244,141,181,182,84,84,49,49,48,53,50,55,49,84,244,141,181,183,84,84,49,49,48,53,50,55,50,84,244,141,181,184,84,84,49,49,48,53,50,55,51,84,244,141,181,185,84,84,49,49,48,53,50,55,52,84,244,141,181,186,84,84,49,49,48,53,50,55,53,84,244,141,181,187,84,84,49,49,48,53,50,55,54,84,244,141,181,188,84,84,49,49,48,53,50,55,55,84,244,141,181,189,84,84,49,49,48,53,50,55,56,84,244,141,181,190,84,84,49,49,48,53,50,55,57,84,244,141,181,191,84,84,49,49,48,53,50,56,48,84,244,141,182,128,84,84,49,49,48,53,50,56,49,84,244,141,182,129,84,84,49,49,48,53,50,56,50,84,244,141,182,130,84,84,49,49,48,53,50,56,51,84,244,141,182,131,84,84,49,49,48,53,50,56,52,84,244,141,182,132,84,84,49,49,48,53,50,56,53,84,244,141,182,133,84,84,49,49,48,53,50,56,54,84,244,141,182,134,84,84,49,49,48,53,50,56,55,84,244,141,182,135,84,84,49,49,48,53,50,56,56,84,244,141,182,136,84,84,49,49,48,53,50,56,57,84,244,141,182,137,84,84,49,49,48,53,50,57,48,84,244,141,182,138,84,84,49,49,48,53,50,57,49,84,244,141,182,139,84,84,49,49,48,53,50,57,50,84,244,141,182,140,84,84,49,49,48,53,50,57,51,84,244,141,182,141,84,84,49,49,48,53,50,57,52,84,244,141,182,142,84,84,49,49,48,53,50,57,53,84,244,141,182,143,84,84,49,49,48,53,50,57,54,84,244,141,182,144,84,84,49,49,48,53,50,57,55,84,244,141,182,145,84,84,49,49,48,53,50,57,56,84,244,141,182,146,84,84,49,49,48,53,50,57,57,84,244,141,182,147,84,84,49,49,48,53,51,48,48,84,244,141,182,148,84,84,49,49,48,53,51,48,49,84,244,141,182,149,84,84,49,49,48,53,51,48,50,84,244,141,182,150,84,84,49,49,48,53,51,48,51,84,244,141,182,151,84,84,49,49,48,53,51,48,52,84,244,141,182,152,84,84,49,49,48,53,51,48,53,84,244,141,182,153,84,84,49,49,48,53,51,48,54,84,244,141,182,154,84,84,49,49,48,53,51,48,55,84,244,141,182,155,84,84,49,49,48,53,51,48,56,84,244,141,182,156,84,84,49,49,48,53,51,48,57,84,244,141,182,157,84,84,49,49,48,53,51,49,48,84,244,141,182,158,84,84,49,49,48,53,51,49,49,84,244,141,182,159,84,84,49,49,48,53,51,49,50,84,244,141,182,160,84,84,49,49,48,53,51,49,51,84,244,141,182,161,84,84,49,49,48,53,51,49,52,84,244,141,182,162,84,84,49,49,48,53,51,49,53,84,244,141,182,163,84,84,49,49,48,53,51,49,54,84,244,141,182,164,84,84,49,49,48,53,51,49,55,84,244,141,182,165,84,84,49,49,48,53,51,49,56,84,244,141,182,166,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20467 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20467_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20467_s.txt", Encoding.UTF8);

    public Test20467() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersee5ddc6232b847869028904d3d06a0f3",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,54,48,50,56,84,244,129,180,156,84,84,49,48,53,54,48,50,57,84,244,129,180,157,84,84,49,48,53,54,48,51,48,84,244,129,180,158,84,84,49,48,53,54,48,51,49,84,244,129,180,159,84,84,49,48,53,54,48,51,50,84,244,129,180,160,84,84,49,48,53,54,48,51,51,84,244,129,180,161,84,84,49,48,53,54,48,51,52,84,244,129,180,162,84,84,49,48,53,54,48,51,53,84,244,129,180,163,84,84,49,48,53,54,48,51,54,84,244,129,180,164,84,84,49,48,53,54,48,51,55,84,244,129,180,165,84,84,49,48,53,54,48,51,56,84,244,129,180,166,84,84,49,48,53,54,48,51,57,84,244,129,180,167,84,84,49,48,53,54,48,52,48,84,244,129,180,168,84,84,49,48,53,54,48,52,49,84,244,129,180,169,84,84,49,48,53,54,48,52,50,84,244,129,180,170,84,84,49,48,53,54,48,52,51,84,244,129,180,171,84,84,49,48,53,54,48,52,52,84,244,129,180,172,84,84,49,48,53,54,48,52,53,84,244,129,180,173,84,84,49,48,53,54,48,52,54,84,244,129,180,174,84,84,49,48,53,54,48,52,55,84,244,129,180,175,84,84,49,48,53,54,48,52,56,84,244,129,180,176,84,84,49,48,53,54,48,52,57,84,244,129,180,177,84,84,49,48,53,54,48,53,48,84,244,129,180,178,84,84,49,48,53,54,48,53,49,84,244,129,180,179,84,84,49,48,53,54,48,53,50,84,244,129,180,180,84,84,49,48,53,54,48,53,51,84,244,129,180,181,84,84,49,48,53,54,48,53,52,84,244,129,180,182,84,84,49,48,53,54,48,53,53,84,244,129,180,183,84,84,49,48,53,54,48,53,54,84,244,129,180,184,84,84,49,48,53,54,48,53,55,84,244,129,180,185,84,84,49,48,53,54,48,53,56,84,244,129,180,186,84,84,49,48,53,54,48,53,57,84,244,129,180,187,84,84,49,48,53,54,48,54,48,84,244,129,180,188,84,84,49,48,53,54,48,54,49,84,244,129,180,189,84,84,49,48,53,54,48,54,50,84,244,129,180,190,84,84,49,48,53,54,48,54,51,84,244,129,180,191,84,84,49,48,53,54,48,54,52,84,244,129,181,128,84,84,49,48,53,54,48,54,53,84,244,129,181,129,84,84,49,48,53,54,48,54,54,84,244,129,181,130,84,84,49,48,53,54,48,54,55,84,244,129,181,131,84,84,49,48,53,54,48,54,56,84,244,129,181,132,84,84,49,48,53,54,48,54,57,84,244,129,181,133,84,84,49,48,53,54,48,55,48,84,244,129,181,134,84,84,49,48,53,54,48,55,49,84,244,129,181,135,84,84,49,48,53,54,48,55,50,84,244,129,181,136,84,84,49,48,53,54,48,55,51,84,244,129,181,137,84,84,49,48,53,54,48,55,52,84,244,129,181,138,84,84,49,48,53,54,48,55,53,84,244,129,181,139,84,84,49,48,53,54,48,55,54,84,244,129,181,140,84,84,49,48,53,54,48,55,55,84,244,129,181,141,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19925 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19925_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19925_s.txt", Encoding.UTF8);

    public Test19925() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersf0a96ab3064046f8a2fc77e6e3ebae9e",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,56,57,48,48,55,84,243,177,157,143,84,84,57,56,57,48,48,56,84,243,177,157,144,84,84,57,56,57,48,48,57,84,243,177,157,145,84,84,57,56,57,48,49,48,84,243,177,157,146,84,84,57,56,57,48,49,49,84,243,177,157,147,84,84,57,56,57,48,49,50,84,243,177,157,148,84,84,57,56,57,48,49,51,84,243,177,157,149,84,84,57,56,57,48,49,52,84,243,177,157,150,84,84,57,56,57,48,49,53,84,243,177,157,151,84,84,57,56,57,48,49,54,84,243,177,157,152,84,84,57,56,57,48,49,55,84,243,177,157,153,84,84,57,56,57,48,49,56,84,243,177,157,154,84,84,57,56,57,48,49,57,84,243,177,157,155,84,84,57,56,57,48,50,48,84,243,177,157,156,84,84,57,56,57,48,50,49,84,243,177,157,157,84,84,57,56,57,48,50,50,84,243,177,157,158,84,84,57,56,57,48,50,51,84,243,177,157,159,84,84,57,56,57,48,50,52,84,243,177,157,160,84,84,57,56,57,48,50,53,84,243,177,157,161,84,84,57,56,57,48,50,54,84,243,177,157,162,84,84,57,56,57,48,50,55,84,243,177,157,163,84,84,57,56,57,48,50,56,84,243,177,157,164,84,84,57,56,57,48,50,57,84,243,177,157,165,84,84,57,56,57,48,51,48,84,243,177,157,166,84,84,57,56,57,48,51,49,84,243,177,157,167,84,84,57,56,57,48,51,50,84,243,177,157,168,84,84,57,56,57,48,51,51,84,243,177,157,169,84,84,57,56,57,48,51,52,84,243,177,157,170,84,84,57,56,57,48,51,53,84,243,177,157,171,84,84,57,56,57,48,51,54,84,243,177,157,172,84,84,57,56,57,48,51,55,84,243,177,157,173,84,84,57,56,57,48,51,56,84,243,177,157,174,84,84,57,56,57,48,51,57,84,243,177,157,175,84,84,57,56,57,48,52,48,84,243,177,157,176,84,84,57,56,57,48,52,49,84,243,177,157,177,84,84,57,56,57,48,52,50,84,243,177,157,178,84,84,57,56,57,48,52,51,84,243,177,157,179,84,84,57,56,57,48,52,52,84,243,177,157,180,84,84,57,56,57,48,52,53,84,243,177,157,181,84,84,57,56,57,48,52,54,84,243,177,157,182,84,84,57,56,57,48,52,55,84,243,177,157,183,84,84,57,56,57,48,52,56,84,243,177,157,184,84,84,57,56,57,48,52,57,84,243,177,157,185,84,84,57,56,57,48,53,48,84,243,177,157,186,84,84,57,56,57,48,53,49,84,243,177,157,187,84,84,57,56,57,48,53,50,84,243,177,157,188,84,84,57,56,57,48,53,51,84,243,177,157,189,84,84,57,56,57,48,53,52,84,243,177,157,190,84,84,57,56,57,48,53,53,84,243,177,157,191,84,84,57,56,57,48,53,55,84,243,177,158,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20652 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20652_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20652_s.txt", Encoding.UTF8);

    public Test20652() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers9df780a74f2549dda8f9f337dadb7946",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,55,57,54,56,49,84,244,135,166,129,84,84,49,48,55,57,54,57,51,84,244,135,166,141,84,84,49,48,55,57,54,57,53,84,244,135,166,143,84,84,49,48,55,57,54,57,54,84,244,135,166,144,84,84,49,48,55,57,55,48,57,84,244,135,166,157,84,84,49,48,55,57,55,52,53,84,244,135,167,129,84,84,49,48,55,57,55,53,55,84,244,135,167,141,84,84,49,48,55,57,55,53,57,84,244,135,167,143,84,84,49,48,55,57,55,54,48,84,244,135,167,144,84,84,49,48,55,57,55,55,51,84,244,135,167,157,84,84,49,48,55,57,56,48,57,84,244,135,168,129,84,84,49,48,55,57,56,50,49,84,244,135,168,141,84,84,49,48,55,57,56,50,51,84,244,135,168,143,84,84,49,48,55,57,56,50,52,84,244,135,168,144,84,84,49,48,55,57,56,51,55,84,244,135,168,157,84,84,49,48,55,57,56,55,51,84,244,135,169,129,84,84,49,48,55,57,56,56,53,84,244,135,169,141,84,84,49,48,55,57,56,56,55,84,244,135,169,143,84,84,49,48,55,57,56,56,56,84,244,135,169,144,84,84,49,48,55,57,57,48,49,84,244,135,169,157,84,84,49,48,55,57,57,51,55,84,244,135,170,129,84,84,49,48,55,57,57,52,57,84,244,135,170,141,84,84,49,48,55,57,57,53,49,84,244,135,170,143,84,84,49,48,55,57,57,53,50,84,244,135,170,144,84,84,49,48,55,57,57,54,53,84,244,135,170,157,84,84,49,48,56,48,48,48,49,84,244,135,171,129,84,84,49,48,56,48,48,49,51,84,244,135,171,141,84,84,49,48,56,48,48,49,53,84,244,135,171,143,84,84,49,48,56,48,48,49,54,84,244,135,171,144,84,84,49,48,56,48,48,50,57,84,244,135,171,157,84,84,49,48,56,48,48,54,53,84,244,135,172,129,84,84,49,48,56,48,48,55,55,84,244,135,172,141,84,84,49,48,56,48,48,55,57,84,244,135,172,143,84,84,49,48,56,48,48,56,48,84,244,135,172,144,84,84,49,48,56,48,48,57,51,84,244,135,172,157,84,84,49,48,56,48,49,50,57,84,244,135,173,129,84,84,49,48,56,48,49,52,49,84,244,135,173,141,84,84,49,48,56,48,49,52,51,84,244,135,173,143,84,84,49,48,56,48,49,52,52,84,244,135,173,144,84,84,49,48,56,48,49,53,55,84,244,135,173,157,84,84,49,48,56,48,49,57,51,84,244,135,174,129,84,84,49,48,56,48,50,48,53,84,244,135,174,141,84,84,49,48,56,48,50,48,55,84,244,135,174,143,84,84,49,48,56,48,50,48,56,84,244,135,174,144,84,84,49,48,56,48,50,50,49,84,244,135,174,157,84,84,49,48,56,48,50,53,55,84,244,135,175,129,84,84,49,48,56,48,50,54,57,84,244,135,175,141,84,84,49,48,56,48,50,55,49,84,244,135,175,143,84,84,49,48,56,48,50,55,50,84,244,135,175,144,84,84,49,48,56,48,50,56,53,84,244,135,175,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21130 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21130_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21130_s.txt", Encoding.UTF8);

    public Test21130() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers56d1c908d8f44b69abe6817b1847a0f6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,51,52,48,48,84,244,143,180,184,84,84,49,49,49,51,52,48,49,84,244,143,180,185,84,84,49,49,49,51,52,48,50,84,244,143,180,186,84,84,49,49,49,51,52,48,51,84,244,143,180,187,84,84,49,49,49,51,52,48,52,84,244,143,180,188,84,84,49,49,49,51,52,48,53,84,244,143,180,189,84,84,49,49,49,51,52,48,54,84,244,143,180,190,84,84,49,49,49,51,52,48,55,84,244,143,180,191,84,84,49,49,49,51,52,48,56,84,244,143,181,128,84,84,49,49,49,51,52,48,57,84,244,143,181,129,84,84,49,49,49,51,52,49,48,84,244,143,181,130,84,84,49,49,49,51,52,49,49,84,244,143,181,131,84,84,49,49,49,51,52,49,50,84,244,143,181,132,84,84,49,49,49,51,52,49,51,84,244,143,181,133,84,84,49,49,49,51,52,49,52,84,244,143,181,134,84,84,49,49,49,51,52,49,53,84,244,143,181,135,84,84,49,49,49,51,52,49,54,84,244,143,181,136,84,84,49,49,49,51,52,49,55,84,244,143,181,137,84,84,49,49,49,51,52,49,56,84,244,143,181,138,84,84,49,49,49,51,52,49,57,84,244,143,181,139,84,84,49,49,49,51,52,50,48,84,244,143,181,140,84,84,49,49,49,51,52,50,49,84,244,143,181,141,84,84,49,49,49,51,52,50,50,84,244,143,181,142,84,84,49,49,49,51,52,50,51,84,244,143,181,143,84,84,49,49,49,51,52,50,52,84,244,143,181,144,84,84,49,49,49,51,52,50,53,84,244,143,181,145,84,84,49,49,49,51,52,50,54,84,244,143,181,146,84,84,49,49,49,51,52,50,55,84,244,143,181,147,84,84,49,49,49,51,52,50,56,84,244,143,181,148,84,84,49,49,49,51,52,50,57,84,244,143,181,149,84,84,49,49,49,51,52,51,48,84,244,143,181,150,84,84,49,49,49,51,52,51,49,84,244,143,181,151,84,84,49,49,49,51,52,51,50,84,244,143,181,152,84,84,49,49,49,51,52,51,51,84,244,143,181,153,84,84,49,49,49,51,52,51,52,84,244,143,181,154,84,84,49,49,49,51,52,51,53,84,244,143,181,155,84,84,49,49,49,51,52,51,54,84,244,143,181,156,84,84,49,49,49,51,52,51,55,84,244,143,181,157,84,84,49,49,49,51,52,51,56,84,244,143,181,158,84,84,49,49,49,51,52,51,57,84,244,143,181,159,84,84,49,49,49,51,52,52,48,84,244,143,181,160,84,84,49,49,49,51,52,52,49,84,244,143,181,161,84,84,49,49,49,51,52,52,50,84,244,143,181,162,84,84,49,49,49,51,52,52,51,84,244,143,181,163,84,84,49,49,49,51,52,52,52,84,244,143,181,164,84,84,49,49,49,51,52,52,53,84,244,143,181,165,84,84,49,49,49,51,52,52,54,84,244,143,181,166,84,84,49,49,49,51,52,52,55,84,244,143,181,167,84,84,49,49,49,51,52,52,56,84,244,143,181,168,84,84,49,49,49,51,52,52,57,84,244,143,181,169,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20050 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20050_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20050_s.txt", Encoding.UTF8);

    public Test20050() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers612d6939acd44cdbbba30cffbd18a713",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,48,56,54,53,52,84,243,182,144,142,84,84,49,48,48,56,54,53,53,84,243,182,144,143,84,84,49,48,48,56,54,53,54,84,243,182,144,144,84,84,49,48,48,56,54,53,55,84,243,182,144,145,84,84,49,48,48,56,54,53,56,84,243,182,144,146,84,84,49,48,48,56,54,53,57,84,243,182,144,147,84,84,49,48,48,56,54,54,48,84,243,182,144,148,84,84,49,48,48,56,54,54,49,84,243,182,144,149,84,84,49,48,48,56,54,54,50,84,243,182,144,150,84,84,49,48,48,56,54,54,51,84,243,182,144,151,84,84,49,48,48,56,54,54,52,84,243,182,144,152,84,84,49,48,48,56,54,54,53,84,243,182,144,153,84,84,49,48,48,56,54,54,54,84,243,182,144,154,84,84,49,48,48,56,54,54,55,84,243,182,144,155,84,84,49,48,48,56,54,54,56,84,243,182,144,156,84,84,49,48,48,56,54,54,57,84,243,182,144,157,84,84,49,48,48,56,54,55,48,84,243,182,144,158,84,84,49,48,48,56,54,55,49,84,243,182,144,159,84,84,49,48,48,56,54,55,50,84,243,182,144,160,84,84,49,48,48,56,54,55,51,84,243,182,144,161,84,84,49,48,48,56,54,55,52,84,243,182,144,162,84,84,49,48,48,56,54,55,53,84,243,182,144,163,84,84,49,48,48,56,54,55,54,84,243,182,144,164,84,84,49,48,48,56,54,55,55,84,243,182,144,165,84,84,49,48,48,56,54,55,56,84,243,182,144,166,84,84,49,48,48,56,54,55,57,84,243,182,144,167,84,84,49,48,48,56,54,56,48,84,243,182,144,168,84,84,49,48,48,56,54,56,49,84,243,182,144,169,84,84,49,48,48,56,54,56,50,84,243,182,144,170,84,84,49,48,48,56,54,56,51,84,243,182,144,171,84,84,49,48,48,56,54,56,52,84,243,182,144,172,84,84,49,48,48,56,54,56,53,84,243,182,144,173,84,84,49,48,48,56,54,56,54,84,243,182,144,174,84,84,49,48,48,56,54,56,55,84,243,182,144,175,84,84,49,48,48,56,54,56,56,84,243,182,144,176,84,84,49,48,48,56,54,56,57,84,243,182,144,177,84,84,49,48,48,56,54,57,48,84,243,182,144,178,84,84,49,48,48,56,54,57,49,84,243,182,144,179,84,84,49,48,48,56,54,57,50,84,243,182,144,180,84,84,49,48,48,56,54,57,51,84,243,182,144,181,84,84,49,48,48,56,54,57,52,84,243,182,144,182,84,84,49,48,48,56,54,57,53,84,243,182,144,183,84,84,49,48,48,56,54,57,54,84,243,182,144,184,84,84,49,48,48,56,54,57,55,84,243,182,144,185,84,84,49,48,48,56,54,57,56,84,243,182,144,186,84,84,49,48,48,56,54,57,57,84,243,182,144,187,84,84,49,48,48,56,55,48,48,84,243,182,144,188,84,84,49,48,48,56,55,48,49,84,243,182,144,189,84,84,49,48,48,56,55,48,50,84,243,182,144,190,84,84,49,48,48,56,55,48,51,84,243,182,144,191,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20812 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20812_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20812_s.txt", Encoding.UTF8);

    public Test20812() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers8240a720eb234783afd6a68d24f64161",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,50,52,49,57,84,244,141,137,147,84,84,49,49,48,50,52,50,48,84,244,141,137,148,84,84,49,49,48,50,52,50,49,84,244,141,137,149,84,84,49,49,48,50,52,50,50,84,244,141,137,150,84,84,49,49,48,50,52,50,51,84,244,141,137,151,84,84,49,49,48,50,52,50,52,84,244,141,137,152,84,84,49,49,48,50,52,50,53,84,244,141,137,153,84,84,49,49,48,50,52,50,54,84,244,141,137,154,84,84,49,49,48,50,52,50,55,84,244,141,137,155,84,84,49,49,48,50,52,50,56,84,244,141,137,156,84,84,49,49,48,50,52,50,57,84,244,141,137,157,84,84,49,49,48,50,52,51,48,84,244,141,137,158,84,84,49,49,48,50,52,51,49,84,244,141,137,159,84,84,49,49,48,50,52,51,50,84,244,141,137,160,84,84,49,49,48,50,52,51,51,84,244,141,137,161,84,84,49,49,48,50,52,51,52,84,244,141,137,162,84,84,49,49,48,50,52,51,53,84,244,141,137,163,84,84,49,49,48,50,52,51,54,84,244,141,137,164,84,84,49,49,48,50,52,51,55,84,244,141,137,165,84,84,49,49,48,50,52,51,56,84,244,141,137,166,84,84,49,49,48,50,52,51,57,84,244,141,137,167,84,84,49,49,48,50,52,52,48,84,244,141,137,168,84,84,49,49,48,50,52,52,49,84,244,141,137,169,84,84,49,49,48,50,52,52,50,84,244,141,137,170,84,84,49,49,48,50,52,52,51,84,244,141,137,171,84,84,49,49,48,50,52,52,52,84,244,141,137,172,84,84,49,49,48,50,52,52,53,84,244,141,137,173,84,84,49,49,48,50,52,52,54,84,244,141,137,174,84,84,49,49,48,50,52,52,55,84,244,141,137,175,84,84,49,49,48,50,52,52,56,84,244,141,137,176,84,84,49,49,48,50,52,52,57,84,244,141,137,177,84,84,49,49,48,50,52,53,48,84,244,141,137,178,84,84,49,49,48,50,52,53,49,84,244,141,137,179,84,84,49,49,48,50,52,53,50,84,244,141,137,180,84,84,49,49,48,50,52,53,51,84,244,141,137,181,84,84,49,49,48,50,52,53,52,84,244,141,137,182,84,84,49,49,48,50,52,53,53,84,244,141,137,183,84,84,49,49,48,50,52,53,54,84,244,141,137,184,84,84,49,49,48,50,52,53,55,84,244,141,137,185,84,84,49,49,48,50,52,53,56,84,244,141,137,186,84,84,49,49,48,50,52,53,57,84,244,141,137,187,84,84,49,49,48,50,52,54,48,84,244,141,137,188,84,84,49,49,48,50,52,54,49,84,244,141,137,189,84,84,49,49,48,50,52,54,50,84,244,141,137,190,84,84,49,49,48,50,52,54,51,84,244,141,137,191,84,84,49,49,48,50,52,54,52,84,244,141,138,128,84,84,49,49,48,50,52,54,53,84,244,141,138,129,84,84,49,49,48,50,52,54,54,84,244,141,138,130,84,84,49,49,48,50,52,54,55,84,244,141,138,131,84,84,49,49,48,50,52,54,56,84,244,141,138,132,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20995 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20995_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20995_s.txt", Encoding.UTF8);

    public Test20995() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersd35ea9f156764511b97173ebc769448f",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,48,50,48,48,84,244,143,130,184,84,84,49,49,49,48,50,48,49,84,244,143,130,185,84,84,49,49,49,48,50,48,50,84,244,143,130,186,84,84,49,49,49,48,50,48,51,84,244,143,130,187,84,84,49,49,49,48,50,48,52,84,244,143,130,188,84,84,49,49,49,48,50,48,53,84,244,143,130,189,84,84,49,49,49,48,50,48,54,84,244,143,130,190,84,84,49,49,49,48,50,48,55,84,244,143,130,191,84,84,49,49,49,48,50,48,56,84,244,143,131,128,84,84,49,49,49,48,50,48,57,84,244,143,131,129,84,84,49,49,49,48,50,49,48,84,244,143,131,130,84,84,49,49,49,48,50,49,49,84,244,143,131,131,84,84,49,49,49,48,50,49,50,84,244,143,131,132,84,84,49,49,49,48,50,49,51,84,244,143,131,133,84,84,49,49,49,48,50,49,52,84,244,143,131,134,84,84,49,49,49,48,50,49,53,84,244,143,131,135,84,84,49,49,49,48,50,49,54,84,244,143,131,136,84,84,49,49,49,48,50,49,55,84,244,143,131,137,84,84,49,49,49,48,50,49,56,84,244,143,131,138,84,84,49,49,49,48,50,49,57,84,244,143,131,139,84,84,49,49,49,48,50,50,48,84,244,143,131,140,84,84,49,49,49,48,50,50,49,84,244,143,131,141,84,84,49,49,49,48,50,50,50,84,244,143,131,142,84,84,49,49,49,48,50,50,51,84,244,143,131,143,84,84,49,49,49,48,50,50,52,84,244,143,131,144,84,84,49,49,49,48,50,50,53,84,244,143,131,145,84,84,49,49,49,48,50,50,54,84,244,143,131,146,84,84,49,49,49,48,50,50,55,84,244,143,131,147,84,84,49,49,49,48,50,50,56,84,244,143,131,148,84,84,49,49,49,48,50,50,57,84,244,143,131,149,84,84,49,49,49,48,50,51,48,84,244,143,131,150,84,84,49,49,49,48,50,51,49,84,244,143,131,151,84,84,49,49,49,48,50,51,50,84,244,143,131,152,84,84,49,49,49,48,50,51,51,84,244,143,131,153,84,84,49,49,49,48,50,51,52,84,244,143,131,154,84,84,49,49,49,48,50,51,53,84,244,143,131,155,84,84,49,49,49,48,50,51,54,84,244,143,131,156,84,84,49,49,49,48,50,51,55,84,244,143,131,157,84,84,49,49,49,48,50,51,56,84,244,143,131,158,84,84,49,49,49,48,50,51,57,84,244,143,131,159,84,84,49,49,49,48,50,52,48,84,244,143,131,160,84,84,49,49,49,48,50,52,49,84,244,143,131,161,84,84,49,49,49,48,50,52,50,84,244,143,131,162,84,84,49,49,49,48,50,52,51,84,244,143,131,163,84,84,49,49,49,48,50,52,52,84,244,143,131,164,84,84,49,49,49,48,50,52,53,84,244,143,131,165,84,84,49,49,49,48,50,52,54,84,244,143,131,166,84,84,49,49,49,48,50,52,55,84,244,143,131,167,84,84,49,49,49,48,50,52,56,84,244,143,131,168,84,84,49,49,49,48,50,52,57,84,244,143,131,169,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20717 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20717_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20717_s.txt", Encoding.UTF8);

    public Test20717() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers0bb7ae45edef4594997d97499d26b519",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,57,48,52,52,55,84,244,138,142,143,84,84,49,48,57,48,52,52,56,84,244,138,142,144,84,84,49,48,57,48,52,54,49,84,244,138,142,157,84,84,49,48,57,48,52,57,54,84,244,138,143,128,84,84,49,48,57,48,52,57,55,84,244,138,143,129,84,84,49,48,57,48,52,57,56,84,244,138,143,130,84,84,49,48,57,48,52,57,57,84,244,138,143,131,84,84,49,48,57,48,53,48,48,84,244,138,143,132,84,84,49,48,57,48,53,48,49,84,244,138,143,133,84,84,49,48,57,48,53,48,50,84,244,138,143,134,84,84,49,48,57,48,53,48,51,84,244,138,143,135,84,84,49,48,57,48,53,48,52,84,244,138,143,136,84,84,49,48,57,48,53,48,53,84,244,138,143,137,84,84,49,48,57,48,53,48,54,84,244,138,143,138,84,84,49,48,57,48,53,48,55,84,244,138,143,139,84,84,49,48,57,48,53,48,56,84,244,138,143,140,84,84,49,48,57,48,53,48,57,84,244,138,143,141,84,84,49,48,57,48,53,49,48,84,244,138,143,142,84,84,49,48,57,48,53,49,49,84,244,138,143,143,84,84,49,48,57,48,53,49,50,84,244,138,143,144,84,84,49,48,57,48,53,49,51,84,244,138,143,145,84,84,49,48,57,48,53,49,52,84,244,138,143,146,84,84,49,48,57,48,53,49,53,84,244,138,143,147,84,84,49,48,57,48,53,49,54,84,244,138,143,148,84,84,49,48,57,48,53,49,55,84,244,138,143,149,84,84,49,48,57,48,53,49,56,84,244,138,143,150,84,84,49,48,57,48,53,49,57,84,244,138,143,151,84,84,49,48,57,48,53,50,48,84,244,138,143,152,84,84,49,48,57,48,53,50,49,84,244,138,143,153,84,84,49,48,57,48,53,50,50,84,244,138,143,154,84,84,49,48,57,48,53,50,51,84,244,138,143,155,84,84,49,48,57,48,53,50,52,84,244,138,143,156,84,84,49,48,57,48,53,50,53,84,244,138,143,157,84,84,49,48,57,48,53,50,54,84,244,138,143,158,84,84,49,48,57,48,53,50,55,84,244,138,143,159,84,84,49,48,57,48,53,50,56,84,244,138,143,160,84,84,49,48,57,48,53,50,57,84,244,138,143,161,84,84,49,48,57,48,53,51,48,84,244,138,143,162,84,84,49,48,57,48,53,51,49,84,244,138,143,163,84,84,49,48,57,48,53,51,50,84,244,138,143,164,84,84,49,48,57,48,53,51,51,84,244,138,143,165,84,84,49,48,57,48,53,51,52,84,244,138,143,166,84,84,49,48,57,48,53,51,53,84,244,138,143,167,84,84,49,48,57,48,53,51,54,84,244,138,143,168,84,84,49,48,57,48,53,51,55,84,244,138,143,169,84,84,49,48,57,48,53,51,56,84,244,138,143,170,84,84,49,48,57,48,53,51,57,84,244,138,143,171,84,84,49,48,57,48,53,52,48,84,244,138,143,172,84,84,49,48,57,48,53,52,49,84,244,138,143,173,84,84,49,48,57,48,53,52,50,84,244,138,143,174,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20205 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20205_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20205_s.txt", Encoding.UTF8);

    public Test20205() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers2b6cdd6684eb4500abcaa682adc323b7",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,51,51,49,57,48,84,243,188,143,166,84,84,49,48,51,51,49,57,49,84,243,188,143,167,84,84,49,48,51,51,49,57,50,84,243,188,143,168,84,84,49,48,51,51,49,57,51,84,243,188,143,169,84,84,49,48,51,51,49,57,52,84,243,188,143,170,84,84,49,48,51,51,49,57,53,84,243,188,143,171,84,84,49,48,51,51,49,57,54,84,243,188,143,172,84,84,49,48,51,51,49,57,55,84,243,188,143,173,84,84,49,48,51,51,49,57,56,84,243,188,143,174,84,84,49,48,51,51,49,57,57,84,243,188,143,175,84,84,49,48,51,51,50,48,48,84,243,188,143,176,84,84,49,48,51,51,50,48,49,84,243,188,143,177,84,84,49,48,51,51,50,48,50,84,243,188,143,178,84,84,49,48,51,51,50,48,51,84,243,188,143,179,84,84,49,48,51,51,50,48,52,84,243,188,143,180,84,84,49,48,51,51,50,48,53,84,243,188,143,181,84,84,49,48,51,51,50,48,54,84,243,188,143,182,84,84,49,48,51,51,50,48,55,84,243,188,143,183,84,84,49,48,51,51,50,48,56,84,243,188,143,184,84,84,49,48,51,51,50,48,57,84,243,188,143,185,84,84,49,48,51,51,50,49,48,84,243,188,143,186,84,84,49,48,51,51,50,49,49,84,243,188,143,187,84,84,49,48,51,51,50,49,50,84,243,188,143,188,84,84,49,48,51,51,50,49,51,84,243,188,143,189,84,84,49,48,51,51,50,49,52,84,243,188,143,190,84,84,49,48,51,51,50,49,53,84,243,188,143,191,84,84,49,48,51,51,50,49,54,84,243,188,144,128,84,84,49,48,51,51,50,49,55,84,243,188,144,129,84,84,49,48,51,51,50,49,56,84,243,188,144,130,84,84,49,48,51,51,50,49,57,84,243,188,144,131,84,84,49,48,51,51,50,50,48,84,243,188,144,132,84,84,49,48,51,51,50,50,49,84,243,188,144,133,84,84,49,48,51,51,50,50,50,84,243,188,144,134,84,84,49,48,51,51,50,50,51,84,243,188,144,135,84,84,49,48,51,51,50,50,52,84,243,188,144,136,84,84,49,48,51,51,50,50,53,84,243,188,144,137,84,84,49,48,51,51,50,50,54,84,243,188,144,138,84,84,49,48,51,51,50,50,55,84,243,188,144,139,84,84,49,48,51,51,50,50,56,84,243,188,144,140,84,84,49,48,51,51,50,50,57,84,243,188,144,141,84,84,49,48,51,51,50,51,48,84,243,188,144,142,84,84,49,48,51,51,50,51,49,84,243,188,144,143,84,84,49,48,51,51,50,51,50,84,243,188,144,144,84,84,49,48,51,51,50,51,51,84,243,188,144,145,84,84,49,48,51,51,50,51,52,84,243,188,144,146,84,84,49,48,51,51,50,51,53,84,243,188,144,147,84,84,49,48,51,51,50,51,54,84,243,188,144,148,84,84,49,48,51,51,50,51,55,84,243,188,144,149,84,84,49,48,51,51,50,51,56,84,243,188,144,150,84,84,49,48,51,51,50,51,57,84,243,188,144,151,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19983 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19983_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19983_s.txt", Encoding.UTF8);

    public Test19983() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersc5d3e7c5509046d2aa3f8bb095571b82",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,57,56,49,53,55,84,243,179,172,141,84,84,57,57,56,49,53,57,84,243,179,172,143,84,84,57,57,56,49,54,48,84,243,179,172,144,84,84,57,57,56,49,55,51,84,243,179,172,157,84,84,57,57,56,50,48,57,84,243,179,173,129,84,84,57,57,56,50,50,49,84,243,179,173,141,84,84,57,57,56,50,50,51,84,243,179,173,143,84,84,57,57,56,50,50,52,84,243,179,173,144,84,84,57,57,56,50,51,55,84,243,179,173,157,84,84,57,57,56,50,55,51,84,243,179,174,129,84,84,57,57,56,50,56,53,84,243,179,174,141,84,84,57,57,56,50,56,55,84,243,179,174,143,84,84,57,57,56,50,56,56,84,243,179,174,144,84,84,57,57,56,51,48,49,84,243,179,174,157,84,84,57,57,56,51,51,55,84,243,179,175,129,84,84,57,57,56,51,52,57,84,243,179,175,141,84,84,57,57,56,51,53,49,84,243,179,175,143,84,84,57,57,56,51,53,50,84,243,179,175,144,84,84,57,57,56,51,54,53,84,243,179,175,157,84,84,57,57,56,52,48,49,84,243,179,176,129,84,84,57,57,56,52,49,51,84,243,179,176,141,84,84,57,57,56,52,49,53,84,243,179,176,143,84,84,57,57,56,52,49,54,84,243,179,176,144,84,84,57,57,56,52,50,57,84,243,179,176,157,84,84,57,57,56,52,54,53,84,243,179,177,129,84,84,57,57,56,52,55,55,84,243,179,177,141,84,84,57,57,56,52,55,57,84,243,179,177,143,84,84,57,57,56,52,56,48,84,243,179,177,144,84,84,57,57,56,52,57,51,84,243,179,177,157,84,84,57,57,56,53,50,57,84,243,179,178,129,84,84,57,57,56,53,52,49,84,243,179,178,141,84,84,57,57,56,53,52,51,84,243,179,178,143,84,84,57,57,56,53,52,52,84,243,179,178,144,84,84,57,57,56,53,53,55,84,243,179,178,157,84,84,57,57,56,53,57,51,84,243,179,179,129,84,84,57,57,56,54,48,53,84,243,179,179,141,84,84,57,57,56,54,48,55,84,243,179,179,143,84,84,57,57,56,54,48,56,84,243,179,179,144,84,84,57,57,56,54,50,49,84,243,179,179,157,84,84,57,57,56,54,53,55,84,243,179,180,129,84,84,57,57,56,54,54,57,84,243,179,180,141,84,84,57,57,56,54,55,49,84,243,179,180,143,84,84,57,57,56,54,55,50,84,243,179,180,144,84,84,57,57,56,54,56,53,84,243,179,180,157,84,84,57,57,56,55,50,49,84,243,179,181,129,84,84,57,57,56,55,51,51,84,243,179,181,141,84,84,57,57,56,55,51,53,84,243,179,181,143,84,84,57,57,56,55,51,54,84,243,179,181,144,84,84,57,57,56,55,52,57,84,243,179,181,157,84,84,57,57,56,55,56,53,84,243,179,182,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19858 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19858_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19858_s.txt", Encoding.UTF8);

    public Test19858() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers7032abc4111d4702bce9d36696a0a648",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,49,55,53,56,57,84,243,160,129,149,84,84,57,49,55,53,57,48,84,243,160,129,150,84,84,57,49,55,53,57,49,84,243,160,129,151,84,84,57,49,55,53,57,50,84,243,160,129,152,84,84,57,49,55,53,57,51,84,243,160,129,153,84,84,57,49,55,53,57,52,84,243,160,129,154,84,84,57,49,55,53,57,53,84,243,160,129,155,84,84,57,49,55,53,57,54,84,243,160,129,156,84,84,57,49,55,53,57,55,84,243,160,129,157,84,84,57,49,55,53,57,56,84,243,160,129,158,84,84,57,49,55,53,57,57,84,243,160,129,159,84,84,57,49,55,54,48,48,84,243,160,129,160,84,84,57,49,55,54,48,49,84,243,160,129,161,84,84,57,49,55,54,48,50,84,243,160,129,162,84,84,57,49,55,54,48,51,84,243,160,129,163,84,84,57,49,55,54,48,52,84,243,160,129,164,84,84,57,49,55,54,48,53,84,243,160,129,165,84,84,57,49,55,54,48,54,84,243,160,129,166,84,84,57,49,55,54,48,55,84,243,160,129,167,84,84,57,49,55,54,48,56,84,243,160,129,168,84,84,57,49,55,54,48,57,84,243,160,129,169,84,84,57,49,55,54,49,48,84,243,160,129,170,84,84,57,49,55,54,49,49,84,243,160,129,171,84,84,57,49,55,54,49,50,84,243,160,129,172,84,84,57,49,55,54,49,51,84,243,160,129,173,84,84,57,49,55,54,49,52,84,243,160,129,174,84,84,57,49,55,54,49,53,84,243,160,129,175,84,84,57,49,55,54,49,54,84,243,160,129,176,84,84,57,49,55,54,49,55,84,243,160,129,177,84,84,57,49,55,54,49,56,84,243,160,129,178,84,84,57,49,55,54,49,57,84,243,160,129,179,84,84,57,49,55,54,50,48,84,243,160,129,180,84,84,57,49,55,54,50,49,84,243,160,129,181,84,84,57,49,55,54,50,50,84,243,160,129,182,84,84,57,49,55,54,50,51,84,243,160,129,183,84,84,57,49,55,54,50,52,84,243,160,129,184,84,84,57,49,55,54,50,53,84,243,160,129,185,84,84,57,49,55,54,50,54,84,243,160,129,186,84,84,57,49,55,54,50,55,84,243,160,129,187,84,84,57,49,55,54,50,56,84,243,160,129,188,84,84,57,49,55,54,50,57,84,243,160,129,189,84,84,57,49,55,54,51,48,84,243,160,129,190,84,84,57,49,55,54,51,49,84,243,160,129,191,84,84,57,49,55,54,51,51,84,243,160,130,129,84,84,57,49,55,54,52,53,84,243,160,130,141,84,84,57,49,55,54,52,55,84,243,160,130,143,84,84,57,49,55,54,52,56,84,243,160,130,144,84,84,57,49,55,54,54,49,84,243,160,130,157,84,84,57,49,55,54,57,55,84,243,160,131,129,84,84,57,49,55,55,48,57,84,243,160,131,141,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20372 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20372_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20372_s.txt", Encoding.UTF8);

    public Test20372() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers319eca44915441a6b60a6025f5eab2bd",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,51,55,55,56,84,244,129,145,146,84,84,49,48,53,51,55,55,57,84,244,129,145,147,84,84,49,48,53,51,55,56,48,84,244,129,145,148,84,84,49,48,53,51,55,56,49,84,244,129,145,149,84,84,49,48,53,51,55,56,50,84,244,129,145,150,84,84,49,48,53,51,55,56,51,84,244,129,145,151,84,84,49,48,53,51,55,56,52,84,244,129,145,152,84,84,49,48,53,51,55,56,53,84,244,129,145,153,84,84,49,48,53,51,55,56,54,84,244,129,145,154,84,84,49,48,53,51,55,56,55,84,244,129,145,155,84,84,49,48,53,51,55,56,56,84,244,129,145,156,84,84,49,48,53,51,55,56,57,84,244,129,145,157,84,84,49,48,53,51,55,57,48,84,244,129,145,158,84,84,49,48,53,51,55,57,49,84,244,129,145,159,84,84,49,48,53,51,55,57,50,84,244,129,145,160,84,84,49,48,53,51,55,57,51,84,244,129,145,161,84,84,49,48,53,51,55,57,52,84,244,129,145,162,84,84,49,48,53,51,55,57,53,84,244,129,145,163,84,84,49,48,53,51,55,57,54,84,244,129,145,164,84,84,49,48,53,51,55,57,55,84,244,129,145,165,84,84,49,48,53,51,55,57,56,84,244,129,145,166,84,84,49,48,53,51,55,57,57,84,244,129,145,167,84,84,49,48,53,51,56,48,48,84,244,129,145,168,84,84,49,48,53,51,56,48,49,84,244,129,145,169,84,84,49,48,53,51,56,48,50,84,244,129,145,170,84,84,49,48,53,51,56,48,51,84,244,129,145,171,84,84,49,48,53,51,56,48,52,84,244,129,145,172,84,84,49,48,53,51,56,48,53,84,244,129,145,173,84,84,49,48,53,51,56,48,54,84,244,129,145,174,84,84,49,48,53,51,56,48,55,84,244,129,145,175,84,84,49,48,53,51,56,48,56,84,244,129,145,176,84,84,49,48,53,51,56,48,57,84,244,129,145,177,84,84,49,48,53,51,56,49,48,84,244,129,145,178,84,84,49,48,53,51,56,49,49,84,244,129,145,179,84,84,49,48,53,51,56,49,50,84,244,129,145,180,84,84,49,48,53,51,56,49,51,84,244,129,145,181,84,84,49,48,53,51,56,49,52,84,244,129,145,182,84,84,49,48,53,51,56,49,53,84,244,129,145,183,84,84,49,48,53,51,56,49,54,84,244,129,145,184,84,84,49,48,53,51,56,49,55,84,244,129,145,185,84,84,49,48,53,51,56,49,56,84,244,129,145,186,84,84,49,48,53,51,56,49,57,84,244,129,145,187,84,84,49,48,53,51,56,50,48,84,244,129,145,188,84,84,49,48,53,51,56,50,49,84,244,129,145,189,84,84,49,48,53,51,56,50,50,84,244,129,145,190,84,84,49,48,53,51,56,50,51,84,244,129,145,191,84,84,49,48,53,51,56,50,52,84,244,129,146,128,84,84,49,48,53,51,56,50,53,84,244,129,146,129,84,84,49,48,53,51,56,50,54,84,244,129,146,130,84,84,49,48,53,51,56,50,55,84,244,129,146,131,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20878 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20878_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20878_s.txt", Encoding.UTF8);

    public Test20878() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersdd41d3a5bb7f42709f7cec587f1a204a",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,51,57,54,57,84,244,141,161,161,84,84,49,49,48,51,57,55,48,84,244,141,161,162,84,84,49,49,48,51,57,55,49,84,244,141,161,163,84,84,49,49,48,51,57,55,50,84,244,141,161,164,84,84,49,49,48,51,57,55,51,84,244,141,161,165,84,84,49,49,48,51,57,55,52,84,244,141,161,166,84,84,49,49,48,51,57,55,53,84,244,141,161,167,84,84,49,49,48,51,57,55,54,84,244,141,161,168,84,84,49,49,48,51,57,55,55,84,244,141,161,169,84,84,49,49,48,51,57,55,56,84,244,141,161,170,84,84,49,49,48,51,57,55,57,84,244,141,161,171,84,84,49,49,48,51,57,56,48,84,244,141,161,172,84,84,49,49,48,51,57,56,49,84,244,141,161,173,84,84,49,49,48,51,57,56,50,84,244,141,161,174,84,84,49,49,48,51,57,56,51,84,244,141,161,175,84,84,49,49,48,51,57,56,52,84,244,141,161,176,84,84,49,49,48,51,57,56,53,84,244,141,161,177,84,84,49,49,48,51,57,56,54,84,244,141,161,178,84,84,49,49,48,51,57,56,55,84,244,141,161,179,84,84,49,49,48,51,57,56,56,84,244,141,161,180,84,84,49,49,48,51,57,56,57,84,244,141,161,181,84,84,49,49,48,51,57,57,48,84,244,141,161,182,84,84,49,49,48,51,57,57,49,84,244,141,161,183,84,84,49,49,48,51,57,57,50,84,244,141,161,184,84,84,49,49,48,51,57,57,51,84,244,141,161,185,84,84,49,49,48,51,57,57,52,84,244,141,161,186,84,84,49,49,48,51,57,57,53,84,244,141,161,187,84,84,49,49,48,51,57,57,54,84,244,141,161,188,84,84,49,49,48,51,57,57,55,84,244,141,161,189,84,84,49,49,48,51,57,57,56,84,244,141,161,190,84,84,49,49,48,51,57,57,57,84,244,141,161,191,84,84,49,49,48,52,48,48,48,84,244,141,162,128,84,84,49,49,48,52,48,48,49,84,244,141,162,129,84,84,49,49,48,52,48,48,50,84,244,141,162,130,84,84,49,49,48,52,48,48,51,84,244,141,162,131,84,84,49,49,48,52,48,48,52,84,244,141,162,132,84,84,49,49,48,52,48,48,53,84,244,141,162,133,84,84,49,49,48,52,48,48,54,84,244,141,162,134,84,84,49,49,48,52,48,48,55,84,244,141,162,135,84,84,49,49,48,52,48,48,56,84,244,141,162,136,84,84,49,49,48,52,48,48,57,84,244,141,162,137,84,84,49,49,48,52,48,49,48,84,244,141,162,138,84,84,49,49,48,52,48,49,49,84,244,141,162,139,84,84,49,49,48,52,48,49,50,84,244,141,162,140,84,84,49,49,48,52,48,49,51,84,244,141,162,141,84,84,49,49,48,52,48,49,52,84,244,141,162,142,84,84,49,49,48,52,48,49,53,84,244,141,162,143,84,84,49,49,48,52,48,49,54,84,244,141,162,144,84,84,49,49,48,52,48,49,55,84,244,141,162,145,84,84,49,49,48,52,48,49,56,84,244,141,162,146,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20997 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20997_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20997_s.txt", Encoding.UTF8);

    public Test20997() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersd35ea9f156764511b97173ebc769448f",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,48,50,53,48,84,244,143,131,170,84,84,49,49,49,48,50,53,49,84,244,143,131,171,84,84,49,49,49,48,50,53,50,84,244,143,131,172,84,84,49,49,49,48,50,53,51,84,244,143,131,173,84,84,49,49,49,48,50,53,52,84,244,143,131,174,84,84,49,49,49,48,50,53,53,84,244,143,131,175,84,84,49,49,49,48,50,53,54,84,244,143,131,176,84,84,49,49,49,48,50,53,55,84,244,143,131,177,84,84,49,49,49,48,50,53,56,84,244,143,131,178,84,84,49,49,49,48,50,53,57,84,244,143,131,179,84,84,49,49,49,48,50,54,48,84,244,143,131,180,84,84,49,49,49,48,50,54,49,84,244,143,131,181,84,84,49,49,49,48,50,54,50,84,244,143,131,182,84,84,49,49,49,48,50,54,51,84,244,143,131,183,84,84,49,49,49,48,50,54,52,84,244,143,131,184,84,84,49,49,49,48,50,54,53,84,244,143,131,185,84,84,49,49,49,48,50,54,54,84,244,143,131,186,84,84,49,49,49,48,50,54,55,84,244,143,131,187,84,84,49,49,49,48,50,54,56,84,244,143,131,188,84,84,49,49,49,48,50,54,57,84,244,143,131,189,84,84,49,49,49,48,50,55,48,84,244,143,131,190,84,84,49,49,49,48,50,55,49,84,244,143,131,191,84,84,49,49,49,48,50,55,50,84,244,143,132,128,84,84,49,49,49,48,50,55,51,84,244,143,132,129,84,84,49,49,49,48,50,55,52,84,244,143,132,130,84,84,49,49,49,48,50,55,53,84,244,143,132,131,84,84,49,49,49,48,50,55,54,84,244,143,132,132,84,84,49,49,49,48,50,55,55,84,244,143,132,133,84,84,49,49,49,48,50,55,56,84,244,143,132,134,84,84,49,49,49,48,50,55,57,84,244,143,132,135,84,84,49,49,49,48,50,56,48,84,244,143,132,136,84,84,49,49,49,48,50,56,49,84,244,143,132,137,84,84,49,49,49,48,50,56,50,84,244,143,132,138,84,84,49,49,49,48,50,56,51,84,244,143,132,139,84,84,49,49,49,48,50,56,52,84,244,143,132,140,84,84,49,49,49,48,50,56,53,84,244,143,132,141,84,84,49,49,49,48,50,56,54,84,244,143,132,142,84,84,49,49,49,48,50,56,55,84,244,143,132,143,84,84,49,49,49,48,50,56,56,84,244,143,132,144,84,84,49,49,49,48,50,56,57,84,244,143,132,145,84,84,49,49,49,48,50,57,48,84,244,143,132,146,84,84,49,49,49,48,50,57,49,84,244,143,132,147,84,84,49,49,49,48,50,57,50,84,244,143,132,148,84,84,49,49,49,48,50,57,51,84,244,143,132,149,84,84,49,49,49,48,50,57,52,84,244,143,132,150,84,84,49,49,49,48,50,57,53,84,244,143,132,151,84,84,49,49,49,48,50,57,54,84,244,143,132,152,84,84,49,49,49,48,50,57,55,84,244,143,132,153,84,84,49,49,49,48,50,57,56,84,244,143,132,154,84,84,49,49,49,48,50,57,57,84,244,143,132,155,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20052 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20052_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20052_s.txt", Encoding.UTF8);

    public Test20052() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers612d6939acd44cdbbba30cffbd18a713",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,48,56,55,48,53,84,243,182,145,129,84,84,49,48,48,56,55,49,55,84,243,182,145,141,84,84,49,48,48,56,55,49,57,84,243,182,145,143,84,84,49,48,48,56,55,50,48,84,243,182,145,144,84,84,49,48,48,56,55,51,51,84,243,182,145,157,84,84,49,48,48,56,55,54,57,84,243,182,146,129,84,84,49,48,48,56,55,56,49,84,243,182,146,141,84,84,49,48,48,56,55,56,51,84,243,182,146,143,84,84,49,48,48,56,55,56,52,84,243,182,146,144,84,84,49,48,48,56,55,57,55,84,243,182,146,157,84,84,49,48,48,56,56,51,51,84,243,182,147,129,84,84,49,48,48,56,56,52,53,84,243,182,147,141,84,84,49,48,48,56,56,52,55,84,243,182,147,143,84,84,49,48,48,56,56,52,56,84,243,182,147,144,84,84,49,48,48,56,56,54,49,84,243,182,147,157,84,84,49,48,48,56,56,57,55,84,243,182,148,129,84,84,49,48,48,56,57,48,57,84,243,182,148,141,84,84,49,48,48,56,57,49,49,84,243,182,148,143,84,84,49,48,48,56,57,49,50,84,243,182,148,144,84,84,49,48,48,56,57,50,53,84,243,182,148,157,84,84,49,48,48,56,57,54,49,84,243,182,149,129,84,84,49,48,48,56,57,55,51,84,243,182,149,141,84,84,49,48,48,56,57,55,53,84,243,182,149,143,84,84,49,48,48,56,57,55,54,84,243,182,149,144,84,84,49,48,48,56,57,56,57,84,243,182,149,157,84,84,49,48,48,57,48,50,53,84,243,182,150,129,84,84,49,48,48,57,48,51,55,84,243,182,150,141,84,84,49,48,48,57,48,51,57,84,243,182,150,143,84,84,49,48,48,57,48,52,48,84,243,182,150,144,84,84,49,48,48,57,48,53,51,84,243,182,150,157,84,84,49,48,48,57,48,56,57,84,243,182,151,129,84,84,49,48,48,57,49,48,49,84,243,182,151,141,84,84,49,48,48,57,49,48,51,84,243,182,151,143,84,84,49,48,48,57,49,48,52,84,243,182,151,144,84,84,49,48,48,57,49,49,55,84,243,182,151,157,84,84,49,48,48,57,49,53,51,84,243,182,152,129,84,84,49,48,48,57,49,54,53,84,243,182,152,141,84,84,49,48,48,57,49,54,55,84,243,182,152,143,84,84,49,48,48,57,49,54,56,84,243,182,152,144,84,84,49,48,48,57,49,56,49,84,243,182,152,157,84,84,49,48,48,57,50,49,55,84,243,182,153,129,84,84,49,48,48,57,50,50,57,84,243,182,153,141,84,84,49,48,48,57,50,51,49,84,243,182,153,143,84,84,49,48,48,57,50,51,50,84,243,182,153,144,84,84,49,48,48,57,50,52,53,84,243,182,153,157,84,84,49,48,48,57,50,56,49,84,243,182,154,129,84,84,49,48,48,57,50,57,51,84,243,182,154,141,84,84,49,48,48,57,50,57,53,84,243,182,154,143,84,84,49,48,48,57,50,57,54,84,243,182,154,144,84,84,49,48,48,57,51,48,57,84,243,182,154,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20719 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20719_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20719_s.txt", Encoding.UTF8);

    public Test20719() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers0bb7ae45edef4594997d97499d26b519",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,57,48,53,52,51,84,244,138,143,175,84,84,49,48,57,48,53,52,52,84,244,138,143,176,84,84,49,48,57,48,53,52,53,84,244,138,143,177,84,84,49,48,57,48,53,52,54,84,244,138,143,178,84,84,49,48,57,48,53,52,55,84,244,138,143,179,84,84,49,48,57,48,53,52,56,84,244,138,143,180,84,84,49,48,57,48,53,52,57,84,244,138,143,181,84,84,49,48,57,48,53,53,48,84,244,138,143,182,84,84,49,48,57,48,53,53,49,84,244,138,143,183,84,84,49,48,57,48,53,53,50,84,244,138,143,184,84,84,49,48,57,48,53,53,51,84,244,138,143,185,84,84,49,48,57,48,53,53,52,84,244,138,143,186,84,84,49,48,57,48,53,53,53,84,244,138,143,187,84,84,49,48,57,48,53,53,54,84,244,138,143,188,84,84,49,48,57,48,53,53,55,84,244,138,143,189,84,84,49,48,57,48,53,53,56,84,244,138,143,190,84,84,49,48,57,48,53,53,57,84,244,138,143,191,84,84,49,48,57,48,53,54,48,84,244,138,144,128,84,84,49,48,57,48,53,54,49,84,244,138,144,129,84,84,49,48,57,48,53,54,50,84,244,138,144,130,84,84,49,48,57,48,53,54,51,84,244,138,144,131,84,84,49,48,57,48,53,54,52,84,244,138,144,132,84,84,49,48,57,48,53,54,53,84,244,138,144,133,84,84,49,48,57,48,53,54,54,84,244,138,144,134,84,84,49,48,57,48,53,54,55,84,244,138,144,135,84,84,49,48,57,48,53,54,56,84,244,138,144,136,84,84,49,48,57,48,53,54,57,84,244,138,144,137,84,84,49,48,57,48,53,55,48,84,244,138,144,138,84,84,49,48,57,48,53,55,49,84,244,138,144,139,84,84,49,48,57,48,53,55,50,84,244,138,144,140,84,84,49,48,57,48,53,55,51,84,244,138,144,141,84,84,49,48,57,48,53,55,52,84,244,138,144,142,84,84,49,48,57,48,53,55,53,84,244,138,144,143,84,84,49,48,57,48,53,55,54,84,244,138,144,144,84,84,49,48,57,48,53,55,55,84,244,138,144,145,84,84,49,48,57,48,53,55,56,84,244,138,144,146,84,84,49,48,57,48,53,55,57,84,244,138,144,147,84,84,49,48,57,48,53,56,48,84,244,138,144,148,84,84,49,48,57,48,53,56,49,84,244,138,144,149,84,84,49,48,57,48,53,56,50,84,244,138,144,150,84,84,49,48,57,48,53,56,51,84,244,138,144,151,84,84,49,48,57,48,53,56,52,84,244,138,144,152,84,84,49,48,57,48,53,56,53,84,244,138,144,153,84,84,49,48,57,48,53,56,54,84,244,138,144,154,84,84,49,48,57,48,53,56,55,84,244,138,144,155,84,84,49,48,57,48,53,56,56,84,244,138,144,156,84,84,49,48,57,48,53,56,57,84,244,138,144,157,84,84,49,48,57,48,53,57,48,84,244,138,144,158,84,84,49,48,57,48,53,57,49,84,244,138,144,159,84,84,49,48,57,48,53,57,50,84,244,138,144,160,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20655 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20655_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20655_s.txt", Encoding.UTF8);

    public Test20655() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers9df780a74f2549dda8f9f337dadb7946",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,56,48,51,50,49,84,244,135,176,129,84,84,49,48,56,48,51,51,51,84,244,135,176,141,84,84,49,48,56,48,51,51,53,84,244,135,176,143,84,84,49,48,56,48,51,51,54,84,244,135,176,144,84,84,49,48,56,48,51,52,57,84,244,135,176,157,84,84,49,48,56,48,51,56,53,84,244,135,177,129,84,84,49,48,56,48,51,57,55,84,244,135,177,141,84,84,49,48,56,48,51,57,57,84,244,135,177,143,84,84,49,48,56,48,52,48,48,84,244,135,177,144,84,84,49,48,56,48,52,49,51,84,244,135,177,157,84,84,49,48,56,48,52,52,57,84,244,135,178,129,84,84,49,48,56,48,52,54,49,84,244,135,178,141,84,84,49,48,56,48,52,54,51,84,244,135,178,143,84,84,49,48,56,48,52,54,52,84,244,135,178,144,84,84,49,48,56,48,52,55,55,84,244,135,178,157,84,84,49,48,56,48,53,49,51,84,244,135,179,129,84,84,49,48,56,48,53,50,53,84,244,135,179,141,84,84,49,48,56,48,53,50,55,84,244,135,179,143,84,84,49,48,56,48,53,50,56,84,244,135,179,144,84,84,49,48,56,48,53,52,49,84,244,135,179,157,84,84,49,48,56,48,53,55,55,84,244,135,180,129,84,84,49,48,56,48,53,56,57,84,244,135,180,141,84,84,49,48,56,48,53,57,49,84,244,135,180,143,84,84,49,48,56,48,53,57,50,84,244,135,180,144,84,84,49,48,56,48,54,48,53,84,244,135,180,157,84,84,49,48,56,48,54,52,49,84,244,135,181,129,84,84,49,48,56,48,54,53,51,84,244,135,181,141,84,84,49,48,56,48,54,53,53,84,244,135,181,143,84,84,49,48,56,48,54,53,54,84,244,135,181,144,84,84,49,48,56,48,54,54,57,84,244,135,181,157,84,84,49,48,56,48,55,48,53,84,244,135,182,129,84,84,49,48,56,48,55,49,55,84,244,135,182,141,84,84,49,48,56,48,55,49,57,84,244,135,182,143,84,84,49,48,56,48,55,50,48,84,244,135,182,144,84,84,49,48,56,48,55,51,51,84,244,135,182,157,84,84,49,48,56,48,55,54,57,84,244,135,183,129,84,84,49,48,56,48,55,56,49,84,244,135,183,141,84,84,49,48,56,48,55,56,51,84,244,135,183,143,84,84,49,48,56,48,55,56,52,84,244,135,183,144,84,84,49,48,56,48,55,57,55,84,244,135,183,157,84,84,49,48,56,48,56,51,51,84,244,135,184,129,84,84,49,48,56,48,56,52,53,84,244,135,184,141,84,84,49,48,56,48,56,52,55,84,244,135,184,143,84,84,49,48,56,48,56,52,56,84,244,135,184,144,84,84,49,48,56,48,56,54,49,84,244,135,184,157,84,84,49,48,56,48,56,57,55,84,244,135,185,129,84,84,49,48,56,48,57,48,57,84,244,135,185,141,84,84,49,48,56,48,57,49,49,84,244,135,185,143,84,84,49,48,56,48,57,49,50,84,244,135,185,144,84,84,49,48,56,48,57,50,53,84,244,135,185,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20880 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20880_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20880_s.txt", Encoding.UTF8);

    public Test20880() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersdd41d3a5bb7f42709f7cec587f1a204a",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,52,48,49,57,84,244,141,162,147,84,84,49,49,48,52,48,50,48,84,244,141,162,148,84,84,49,49,48,52,48,50,49,84,244,141,162,149,84,84,49,49,48,52,48,50,50,84,244,141,162,150,84,84,49,49,48,52,48,50,51,84,244,141,162,151,84,84,49,49,48,52,48,50,52,84,244,141,162,152,84,84,49,49,48,52,48,50,53,84,244,141,162,153,84,84,49,49,48,52,48,50,54,84,244,141,162,154,84,84,49,49,48,52,48,50,55,84,244,141,162,155,84,84,49,49,48,52,48,50,56,84,244,141,162,156,84,84,49,49,48,52,48,50,57,84,244,141,162,157,84,84,49,49,48,52,48,51,48,84,244,141,162,158,84,84,49,49,48,52,48,51,49,84,244,141,162,159,84,84,49,49,48,52,48,51,50,84,244,141,162,160,84,84,49,49,48,52,48,51,51,84,244,141,162,161,84,84,49,49,48,52,48,51,52,84,244,141,162,162,84,84,49,49,48,52,48,51,53,84,244,141,162,163,84,84,49,49,48,52,48,51,54,84,244,141,162,164,84,84,49,49,48,52,48,51,55,84,244,141,162,165,84,84,49,49,48,52,48,51,56,84,244,141,162,166,84,84,49,49,48,52,48,51,57,84,244,141,162,167,84,84,49,49,48,52,48,52,48,84,244,141,162,168,84,84,49,49,48,52,48,52,49,84,244,141,162,169,84,84,49,49,48,52,48,52,50,84,244,141,162,170,84,84,49,49,48,52,48,52,51,84,244,141,162,171,84,84,49,49,48,52,48,52,52,84,244,141,162,172,84,84,49,49,48,52,48,52,53,84,244,141,162,173,84,84,49,49,48,52,48,52,54,84,244,141,162,174,84,84,49,49,48,52,48,52,55,84,244,141,162,175,84,84,49,49,48,52,48,52,56,84,244,141,162,176,84,84,49,49,48,52,48,52,57,84,244,141,162,177,84,84,49,49,48,52,48,53,48,84,244,141,162,178,84,84,49,49,48,52,48,53,49,84,244,141,162,179,84,84,49,49,48,52,48,53,50,84,244,141,162,180,84,84,49,49,48,52,48,53,51,84,244,141,162,181,84,84,49,49,48,52,48,53,52,84,244,141,162,182,84,84,49,49,48,52,48,53,53,84,244,141,162,183,84,84,49,49,48,52,48,53,54,84,244,141,162,184,84,84,49,49,48,52,48,53,55,84,244,141,162,185,84,84,49,49,48,52,48,53,56,84,244,141,162,186,84,84,49,49,48,52,48,53,57,84,244,141,162,187,84,84,49,49,48,52,48,54,48,84,244,141,162,188,84,84,49,49,48,52,48,54,49,84,244,141,162,189,84,84,49,49,48,52,48,54,50,84,244,141,162,190,84,84,49,49,48,52,48,54,51,84,244,141,162,191,84,84,49,49,48,52,48,54,52,84,244,141,163,128,84,84,49,49,48,52,48,54,53,84,244,141,163,129,84,84,49,49,48,52,48,54,54,84,244,141,163,130,84,84,49,49,48,52,48,54,55,84,244,141,163,131,84,84,49,49,48,52,48,54,56,84,244,141,163,132,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20280 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20280_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20280_s.txt", Encoding.UTF8);

    public Test20280() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers712afb35b54344eb8fa90647f752cd92",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,52,53,51,50,52,84,243,191,141,140,84,84,49,48,52,53,51,50,53,84,243,191,141,141,84,84,49,48,52,53,51,50,54,84,243,191,141,142,84,84,49,48,52,53,51,50,55,84,243,191,141,143,84,84,49,48,52,53,51,50,56,84,243,191,141,144,84,84,49,48,52,53,51,50,57,84,243,191,141,145,84,84,49,48,52,53,51,51,48,84,243,191,141,146,84,84,49,48,52,53,51,51,49,84,243,191,141,147,84,84,49,48,52,53,51,51,50,84,243,191,141,148,84,84,49,48,52,53,51,51,51,84,243,191,141,149,84,84,49,48,52,53,51,51,52,84,243,191,141,150,84,84,49,48,52,53,51,51,53,84,243,191,141,151,84,84,49,48,52,53,51,51,54,84,243,191,141,152,84,84,49,48,52,53,51,51,55,84,243,191,141,153,84,84,49,48,52,53,51,51,56,84,243,191,141,154,84,84,49,48,52,53,51,51,57,84,243,191,141,155,84,84,49,48,52,53,51,52,48,84,243,191,141,156,84,84,49,48,52,53,51,52,49,84,243,191,141,157,84,84,49,48,52,53,51,52,50,84,243,191,141,158,84,84,49,48,52,53,51,52,51,84,243,191,141,159,84,84,49,48,52,53,51,52,52,84,243,191,141,160,84,84,49,48,52,53,51,52,53,84,243,191,141,161,84,84,49,48,52,53,51,52,54,84,243,191,141,162,84,84,49,48,52,53,51,52,55,84,243,191,141,163,84,84,49,48,52,53,51,52,56,84,243,191,141,164,84,84,49,48,52,53,51,52,57,84,243,191,141,165,84,84,49,48,52,53,51,53,48,84,243,191,141,166,84,84,49,48,52,53,51,53,49,84,243,191,141,167,84,84,49,48,52,53,51,53,50,84,243,191,141,168,84,84,49,48,52,53,51,53,51,84,243,191,141,169,84,84,49,48,52,53,51,53,52,84,243,191,141,170,84,84,49,48,52,53,51,53,53,84,243,191,141,171,84,84,49,48,52,53,51,53,54,84,243,191,141,172,84,84,49,48,52,53,51,53,55,84,243,191,141,173,84,84,49,48,52,53,51,53,56,84,243,191,141,174,84,84,49,48,52,53,51,53,57,84,243,191,141,175,84,84,49,48,52,53,51,54,48,84,243,191,141,176,84,84,49,48,52,53,51,54,49,84,243,191,141,177,84,84,49,48,52,53,51,54,50,84,243,191,141,178,84,84,49,48,52,53,51,54,51,84,243,191,141,179,84,84,49,48,52,53,51,54,52,84,243,191,141,180,84,84,49,48,52,53,51,54,53,84,243,191,141,181,84,84,49,48,52,53,51,54,54,84,243,191,141,182,84,84,49,48,52,53,51,54,55,84,243,191,141,183,84,84,49,48,52,53,51,54,56,84,243,191,141,184,84,84,49,48,52,53,51,54,57,84,243,191,141,185,84,84,49,48,52,53,51,55,48,84,243,191,141,186,84,84,49,48,52,53,51,55,49,84,243,191,141,187,84,84,49,48,52,53,51,55,50,84,243,191,141,188,84,84,49,48,52,53,51,55,51,84,243,191,141,189,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20148 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20148_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20148_s.txt", Encoding.UTF8);

    public Test20148() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers4f3362aed9424bd2bfac6751ee820ab9",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,50,52,54,53,53,84,243,186,138,143,84,84,49,48,50,52,54,53,54,84,243,186,138,144,84,84,49,48,50,52,54,54,57,84,243,186,138,157,84,84,49,48,50,52,55,48,53,84,243,186,139,129,84,84,49,48,50,52,55,49,55,84,243,186,139,141,84,84,49,48,50,52,55,49,57,84,243,186,139,143,84,84,49,48,50,52,55,50,48,84,243,186,139,144,84,84,49,48,50,52,55,51,51,84,243,186,139,157,84,84,49,48,50,52,55,54,57,84,243,186,140,129,84,84,49,48,50,52,55,56,49,84,243,186,140,141,84,84,49,48,50,52,55,56,51,84,243,186,140,143,84,84,49,48,50,52,55,56,52,84,243,186,140,144,84,84,49,48,50,52,55,57,55,84,243,186,140,157,84,84,49,48,50,52,56,51,50,84,243,186,141,128,84,84,49,48,50,52,56,51,51,84,243,186,141,129,84,84,49,48,50,52,56,51,52,84,243,186,141,130,84,84,49,48,50,52,56,51,53,84,243,186,141,131,84,84,49,48,50,52,56,51,54,84,243,186,141,132,84,84,49,48,50,52,56,51,55,84,243,186,141,133,84,84,49,48,50,52,56,51,56,84,243,186,141,134,84,84,49,48,50,52,56,51,57,84,243,186,141,135,84,84,49,48,50,52,56,52,48,84,243,186,141,136,84,84,49,48,50,52,56,52,49,84,243,186,141,137,84,84,49,48,50,52,56,52,50,84,243,186,141,138,84,84,49,48,50,52,56,52,51,84,243,186,141,139,84,84,49,48,50,52,56,52,52,84,243,186,141,140,84,84,49,48,50,52,56,52,53,84,243,186,141,141,84,84,49,48,50,52,56,52,54,84,243,186,141,142,84,84,49,48,50,52,56,52,55,84,243,186,141,143,84,84,49,48,50,52,56,52,56,84,243,186,141,144,84,84,49,48,50,52,56,52,57,84,243,186,141,145,84,84,49,48,50,52,56,53,48,84,243,186,141,146,84,84,49,48,50,52,56,53,49,84,243,186,141,147,84,84,49,48,50,52,56,53,50,84,243,186,141,148,84,84,49,48,50,52,56,53,51,84,243,186,141,149,84,84,49,48,50,52,56,53,52,84,243,186,141,150,84,84,49,48,50,52,56,53,53,84,243,186,141,151,84,84,49,48,50,52,56,53,54,84,243,186,141,152,84,84,49,48,50,52,56,53,55,84,243,186,141,153,84,84,49,48,50,52,56,53,56,84,243,186,141,154,84,84,49,48,50,52,56,53,57,84,243,186,141,155,84,84,49,48,50,52,56,54,48,84,243,186,141,156,84,84,49,48,50,52,56,54,49,84,243,186,141,157,84,84,49,48,50,52,56,54,50,84,243,186,141,158,84,84,49,48,50,52,56,54,51,84,243,186,141,159,84,84,49,48,50,52,56,54,52,84,243,186,141,160,84,84,49,48,50,52,56,54,53,84,243,186,141,161,84,84,49,48,50,52,56,54,54,84,243,186,141,162,84,84,49,48,50,52,56,54,55,84,243,186,141,163,84,84,49,48,50,52,56,54,56,84,243,186,141,164,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20469 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20469_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20469_s.txt", Encoding.UTF8);

    public Test20469() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersee5ddc6232b847869028904d3d06a0f3",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,54,48,55,56,84,244,129,181,142,84,84,49,48,53,54,48,55,57,84,244,129,181,143,84,84,49,48,53,54,48,56,48,84,244,129,181,144,84,84,49,48,53,54,48,56,49,84,244,129,181,145,84,84,49,48,53,54,48,56,50,84,244,129,181,146,84,84,49,48,53,54,48,56,51,84,244,129,181,147,84,84,49,48,53,54,48,56,52,84,244,129,181,148,84,84,49,48,53,54,48,56,53,84,244,129,181,149,84,84,49,48,53,54,48,56,54,84,244,129,181,150,84,84,49,48,53,54,48,56,55,84,244,129,181,151,84,84,49,48,53,54,48,56,56,84,244,129,181,152,84,84,49,48,53,54,48,56,57,84,244,129,181,153,84,84,49,48,53,54,48,57,48,84,244,129,181,154,84,84,49,48,53,54,48,57,49,84,244,129,181,155,84,84,49,48,53,54,48,57,50,84,244,129,181,156,84,84,49,48,53,54,48,57,51,84,244,129,181,157,84,84,49,48,53,54,48,57,52,84,244,129,181,158,84,84,49,48,53,54,48,57,53,84,244,129,181,159,84,84,49,48,53,54,48,57,54,84,244,129,181,160,84,84,49,48,53,54,48,57,55,84,244,129,181,161,84,84,49,48,53,54,48,57,56,84,244,129,181,162,84,84,49,48,53,54,48,57,57,84,244,129,181,163,84,84,49,48,53,54,49,48,48,84,244,129,181,164,84,84,49,48,53,54,49,48,49,84,244,129,181,165,84,84,49,48,53,54,49,48,50,84,244,129,181,166,84,84,49,48,53,54,49,48,51,84,244,129,181,167,84,84,49,48,53,54,49,48,52,84,244,129,181,168,84,84,49,48,53,54,49,48,53,84,244,129,181,169,84,84,49,48,53,54,49,48,54,84,244,129,181,170,84,84,49,48,53,54,49,48,55,84,244,129,181,171,84,84,49,48,53,54,49,48,56,84,244,129,181,172,84,84,49,48,53,54,49,48,57,84,244,129,181,173,84,84,49,48,53,54,49,49,48,84,244,129,181,174,84,84,49,48,53,54,49,49,49,84,244,129,181,175,84,84,49,48,53,54,49,49,50,84,244,129,181,176,84,84,49,48,53,54,49,49,51,84,244,129,181,177,84,84,49,48,53,54,49,49,52,84,244,129,181,178,84,84,49,48,53,54,49,49,53,84,244,129,181,179,84,84,49,48,53,54,49,49,54,84,244,129,181,180,84,84,49,48,53,54,49,49,55,84,244,129,181,181,84,84,49,48,53,54,49,49,56,84,244,129,181,182,84,84,49,48,53,54,49,49,57,84,244,129,181,183,84,84,49,48,53,54,49,50,48,84,244,129,181,184,84,84,49,48,53,54,49,50,49,84,244,129,181,185,84,84,49,48,53,54,49,50,50,84,244,129,181,186,84,84,49,48,53,54,49,50,51,84,244,129,181,187,84,84,49,48,53,54,49,50,52,84,244,129,181,188,84,84,49,48,53,54,49,50,53,84,244,129,181,189,84,84,49,48,53,54,49,50,54,84,244,129,181,190,84,84,49,48,53,54,49,50,55,84,244,129,181,191,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19985 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19985_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19985_s.txt", Encoding.UTF8);

    public Test19985() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersc5d3e7c5509046d2aa3f8bb095571b82",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,57,56,55,57,55,84,243,179,182,141,84,84,57,57,56,55,57,57,84,243,179,182,143,84,84,57,57,56,56,48,48,84,243,179,182,144,84,84,57,57,56,56,49,51,84,243,179,182,157,84,84,57,57,56,56,52,57,84,243,179,183,129,84,84,57,57,56,56,54,49,84,243,179,183,141,84,84,57,57,56,56,54,51,84,243,179,183,143,84,84,57,57,56,56,54,52,84,243,179,183,144,84,84,57,57,56,56,55,55,84,243,179,183,157,84,84,57,57,56,57,49,51,84,243,179,184,129,84,84,57,57,56,57,50,53,84,243,179,184,141,84,84,57,57,56,57,50,55,84,243,179,184,143,84,84,57,57,56,57,50,56,84,243,179,184,144,84,84,57,57,56,57,52,49,84,243,179,184,157,84,84,57,57,56,57,55,55,84,243,179,185,129,84,84,57,57,56,57,56,57,84,243,179,185,141,84,84,57,57,56,57,57,49,84,243,179,185,143,84,84,57,57,56,57,57,50,84,243,179,185,144,84,84,57,57,57,48,48,53,84,243,179,185,157,84,84,57,57,57,48,52,49,84,243,179,186,129,84,84,57,57,57,48,53,51,84,243,179,186,141,84,84,57,57,57,48,53,53,84,243,179,186,143,84,84,57,57,57,48,53,54,84,243,179,186,144,84,84,57,57,57,48,54,57,84,243,179,186,157,84,84,57,57,57,49,48,53,84,243,179,187,129,84,84,57,57,57,49,49,55,84,243,179,187,141,84,84,57,57,57,49,49,57,84,243,179,187,143,84,84,57,57,57,49,50,48,84,243,179,187,144,84,84,57,57,57,49,51,51,84,243,179,187,157,84,84,57,57,57,49,54,57,84,243,179,188,129,84,84,57,57,57,49,56,49,84,243,179,188,141,84,84,57,57,57,49,56,51,84,243,179,188,143,84,84,57,57,57,49,56,52,84,243,179,188,144,84,84,57,57,57,49,57,55,84,243,179,188,157,84,84,57,57,57,50,51,51,84,243,179,189,129,84,84,57,57,57,50,52,53,84,243,179,189,141,84,84,57,57,57,50,52,55,84,243,179,189,143,84,84,57,57,57,50,52,56,84,243,179,189,144,84,84,57,57,57,50,54,49,84,243,179,189,157,84,84,57,57,57,50,57,55,84,243,179,190,129,84,84,57,57,57,51,48,57,84,243,179,190,141,84,84,57,57,57,51,49,49,84,243,179,190,143,84,84,57,57,57,51,49,50,84,243,179,190,144,84,84,57,57,57,51,50,53,84,243,179,190,157,84,84,57,57,57,51,54,49,84,243,179,191,129,84,84,57,57,57,51,55,51,84,243,179,191,141,84,84,57,57,57,51,55,53,84,243,179,191,143,84,84,57,57,57,51,55,54,84,243,179,191,144,84,84,57,57,57,51,56,57,84,243,179,191,157,84,84,57,57,57,52,50,53,84,243,180,128,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20207 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20207_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20207_s.txt", Encoding.UTF8);

    public Test20207() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers2b6cdd6684eb4500abcaa682adc323b7",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,51,51,50,52,48,84,243,188,144,152,84,84,49,48,51,51,50,52,49,84,243,188,144,153,84,84,49,48,51,51,50,52,50,84,243,188,144,154,84,84,49,48,51,51,50,52,51,84,243,188,144,155,84,84,49,48,51,51,50,52,52,84,243,188,144,156,84,84,49,48,51,51,50,52,53,84,243,188,144,157,84,84,49,48,51,51,50,52,54,84,243,188,144,158,84,84,49,48,51,51,50,52,55,84,243,188,144,159,84,84,49,48,51,51,50,52,56,84,243,188,144,160,84,84,49,48,51,51,50,52,57,84,243,188,144,161,84,84,49,48,51,51,50,53,48,84,243,188,144,162,84,84,49,48,51,51,50,53,49,84,243,188,144,163,84,84,49,48,51,51,50,53,50,84,243,188,144,164,84,84,49,48,51,51,50,53,51,84,243,188,144,165,84,84,49,48,51,51,50,53,52,84,243,188,144,166,84,84,49,48,51,51,50,53,53,84,243,188,144,167,84,84,49,48,51,51,50,53,54,84,243,188,144,168,84,84,49,48,51,51,50,53,55,84,243,188,144,169,84,84,49,48,51,51,50,53,56,84,243,188,144,170,84,84,49,48,51,51,50,53,57,84,243,188,144,171,84,84,49,48,51,51,50,54,48,84,243,188,144,172,84,84,49,48,51,51,50,54,49,84,243,188,144,173,84,84,49,48,51,51,50,54,50,84,243,188,144,174,84,84,49,48,51,51,50,54,51,84,243,188,144,175,84,84,49,48,51,51,50,54,52,84,243,188,144,176,84,84,49,48,51,51,50,54,53,84,243,188,144,177,84,84,49,48,51,51,50,54,54,84,243,188,144,178,84,84,49,48,51,51,50,54,55,84,243,188,144,179,84,84,49,48,51,51,50,54,56,84,243,188,144,180,84,84,49,48,51,51,50,54,57,84,243,188,144,181,84,84,49,48,51,51,50,55,48,84,243,188,144,182,84,84,49,48,51,51,50,55,49,84,243,188,144,183,84,84,49,48,51,51,50,55,50,84,243,188,144,184,84,84,49,48,51,51,50,55,51,84,243,188,144,185,84,84,49,48,51,51,50,55,52,84,243,188,144,186,84,84,49,48,51,51,50,55,53,84,243,188,144,187,84,84,49,48,51,51,50,55,54,84,243,188,144,188,84,84,49,48,51,51,50,55,55,84,243,188,144,189,84,84,49,48,51,51,50,55,56,84,243,188,144,190,84,84,49,48,51,51,50,55,57,84,243,188,144,191,84,84,49,48,51,51,50,56,49,84,243,188,145,129,84,84,49,48,51,51,50,57,51,84,243,188,145,141,84,84,49,48,51,51,50,57,53,84,243,188,145,143,84,84,49,48,51,51,50,57,54,84,243,188,145,144,84,84,49,48,51,51,51,48,57,84,243,188,145,157,84,84,49,48,51,51,51,52,53,84,243,188,146,129,84,84,49,48,51,51,51,53,55,84,243,188,146,141,84,84,49,48,51,51,51,53,57,84,243,188,146,143,84,84,49,48,51,51,51,54,48,84,243,188,146,144,84,84,49,48,51,51,51,55,51,84,243,188,146,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20814 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20814_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20814_s.txt", Encoding.UTF8);

    public Test20814() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers8240a720eb234783afd6a68d24f64161",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,50,52,54,57,84,244,141,138,133,84,84,49,49,48,50,52,55,48,84,244,141,138,134,84,84,49,49,48,50,52,55,49,84,244,141,138,135,84,84,49,49,48,50,52,55,50,84,244,141,138,136,84,84,49,49,48,50,52,55,51,84,244,141,138,137,84,84,49,49,48,50,52,55,52,84,244,141,138,138,84,84,49,49,48,50,52,55,53,84,244,141,138,139,84,84,49,49,48,50,52,55,54,84,244,141,138,140,84,84,49,49,48,50,52,55,55,84,244,141,138,141,84,84,49,49,48,50,52,55,56,84,244,141,138,142,84,84,49,49,48,50,52,55,57,84,244,141,138,143,84,84,49,49,48,50,52,56,48,84,244,141,138,144,84,84,49,49,48,50,52,56,49,84,244,141,138,145,84,84,49,49,48,50,52,56,50,84,244,141,138,146,84,84,49,49,48,50,52,56,51,84,244,141,138,147,84,84,49,49,48,50,52,56,52,84,244,141,138,148,84,84,49,49,48,50,52,56,53,84,244,141,138,149,84,84,49,49,48,50,52,56,54,84,244,141,138,150,84,84,49,49,48,50,52,56,55,84,244,141,138,151,84,84,49,49,48,50,52,56,56,84,244,141,138,152,84,84,49,49,48,50,52,56,57,84,244,141,138,153,84,84,49,49,48,50,52,57,48,84,244,141,138,154,84,84,49,49,48,50,52,57,49,84,244,141,138,155,84,84,49,49,48,50,52,57,50,84,244,141,138,156,84,84,49,49,48,50,52,57,51,84,244,141,138,157,84,84,49,49,48,50,52,57,52,84,244,141,138,158,84,84,49,49,48,50,52,57,53,84,244,141,138,159,84,84,49,49,48,50,52,57,54,84,244,141,138,160,84,84,49,49,48,50,52,57,55,84,244,141,138,161,84,84,49,49,48,50,52,57,56,84,244,141,138,162,84,84,49,49,48,50,52,57,57,84,244,141,138,163,84,84,49,49,48,50,53,48,48,84,244,141,138,164,84,84,49,49,48,50,53,48,49,84,244,141,138,165,84,84,49,49,48,50,53,48,50,84,244,141,138,166,84,84,49,49,48,50,53,48,51,84,244,141,138,167,84,84,49,49,48,50,53,48,52,84,244,141,138,168,84,84,49,49,48,50,53,48,53,84,244,141,138,169,84,84,49,49,48,50,53,48,54,84,244,141,138,170,84,84,49,49,48,50,53,48,55,84,244,141,138,171,84,84,49,49,48,50,53,48,56,84,244,141,138,172,84,84,49,49,48,50,53,48,57,84,244,141,138,173,84,84,49,49,48,50,53,49,48,84,244,141,138,174,84,84,49,49,48,50,53,49,49,84,244,141,138,175,84,84,49,49,48,50,53,49,50,84,244,141,138,176,84,84,49,49,48,50,53,49,51,84,244,141,138,177,84,84,49,49,48,50,53,49,52,84,244,141,138,178,84,84,49,49,48,50,53,49,53,84,244,141,138,179,84,84,49,49,48,50,53,49,54,84,244,141,138,180,84,84,49,49,48,50,53,49,55,84,244,141,138,181,84,84,49,49,48,50,53,49,56,84,244,141,138,182,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21132 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21132_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21132_s.txt", Encoding.UTF8);

    public Test21132() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers56d1c908d8f44b69abe6817b1847a0f6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,51,52,53,48,84,244,143,181,170,84,84,49,49,49,51,52,53,49,84,244,143,181,171,84,84,49,49,49,51,52,53,50,84,244,143,181,172,84,84,49,49,49,51,52,53,51,84,244,143,181,173,84,84,49,49,49,51,52,53,52,84,244,143,181,174,84,84,49,49,49,51,52,53,53,84,244,143,181,175,84,84,49,49,49,51,52,53,54,84,244,143,181,176,84,84,49,49,49,51,52,53,55,84,244,143,181,177,84,84,49,49,49,51,52,53,56,84,244,143,181,178,84,84,49,49,49,51,52,53,57,84,244,143,181,179,84,84,49,49,49,51,52,54,48,84,244,143,181,180,84,84,49,49,49,51,52,54,49,84,244,143,181,181,84,84,49,49,49,51,52,54,50,84,244,143,181,182,84,84,49,49,49,51,52,54,51,84,244,143,181,183,84,84,49,49,49,51,52,54,52,84,244,143,181,184,84,84,49,49,49,51,52,54,53,84,244,143,181,185,84,84,49,49,49,51,52,54,54,84,244,143,181,186,84,84,49,49,49,51,52,54,55,84,244,143,181,187,84,84,49,49,49,51,52,54,56,84,244,143,181,188,84,84,49,49,49,51,52,54,57,84,244,143,181,189,84,84,49,49,49,51,52,55,48,84,244,143,181,190,84,84,49,49,49,51,52,55,49,84,244,143,181,191,84,84,49,49,49,51,52,55,50,84,244,143,182,128,84,84,49,49,49,51,52,55,51,84,244,143,182,129,84,84,49,49,49,51,52,55,52,84,244,143,182,130,84,84,49,49,49,51,52,55,53,84,244,143,182,131,84,84,49,49,49,51,52,55,54,84,244,143,182,132,84,84,49,49,49,51,52,55,55,84,244,143,182,133,84,84,49,49,49,51,52,55,56,84,244,143,182,134,84,84,49,49,49,51,52,55,57,84,244,143,182,135,84,84,49,49,49,51,52,56,48,84,244,143,182,136,84,84,49,49,49,51,52,56,49,84,244,143,182,137,84,84,49,49,49,51,52,56,50,84,244,143,182,138,84,84,49,49,49,51,52,56,51,84,244,143,182,139,84,84,49,49,49,51,52,56,52,84,244,143,182,140,84,84,49,49,49,51,52,56,53,84,244,143,182,141,84,84,49,49,49,51,52,56,54,84,244,143,182,142,84,84,49,49,49,51,52,56,55,84,244,143,182,143,84,84,49,49,49,51,52,56,56,84,244,143,182,144,84,84,49,49,49,51,52,56,57,84,244,143,182,145,84,84,49,49,49,51,52,57,48,84,244,143,182,146,84,84,49,49,49,51,52,57,49,84,244,143,182,147,84,84,49,49,49,51,52,57,50,84,244,143,182,148,84,84,49,49,49,51,52,57,51,84,244,143,182,149,84,84,49,49,49,51,52,57,52,84,244,143,182,150,84,84,49,49,49,51,52,57,53,84,244,143,182,151,84,84,49,49,49,51,52,57,54,84,244,143,182,152,84,84,49,49,49,51,52,57,55,84,244,143,182,153,84,84,49,49,49,51,52,57,56,84,244,143,182,154,84,84,49,49,49,51,52,57,57,84,244,143,182,155,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20935 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20935_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20935_s.txt", Encoding.UTF8);

    public Test20935() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers9e891393b2624599aedf317812121dcf",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,53,51,49,57,84,244,141,182,167,84,84,49,49,48,53,51,50,48,84,244,141,182,168,84,84,49,49,48,53,51,50,49,84,244,141,182,169,84,84,49,49,48,53,51,50,50,84,244,141,182,170,84,84,49,49,48,53,51,50,51,84,244,141,182,171,84,84,49,49,48,53,51,50,52,84,244,141,182,172,84,84,49,49,48,53,51,50,53,84,244,141,182,173,84,84,49,49,48,53,51,50,54,84,244,141,182,174,84,84,49,49,48,53,51,50,55,84,244,141,182,175,84,84,49,49,48,53,51,50,56,84,244,141,182,176,84,84,49,49,48,53,51,50,57,84,244,141,182,177,84,84,49,49,48,53,51,51,48,84,244,141,182,178,84,84,49,49,48,53,51,51,49,84,244,141,182,179,84,84,49,49,48,53,51,51,50,84,244,141,182,180,84,84,49,49,48,53,51,51,51,84,244,141,182,181,84,84,49,49,48,53,51,51,52,84,244,141,182,182,84,84,49,49,48,53,51,51,53,84,244,141,182,183,84,84,49,49,48,53,51,51,54,84,244,141,182,184,84,84,49,49,48,53,51,51,55,84,244,141,182,185,84,84,49,49,48,53,51,51,56,84,244,141,182,186,84,84,49,49,48,53,51,51,57,84,244,141,182,187,84,84,49,49,48,53,51,52,48,84,244,141,182,188,84,84,49,49,48,53,51,52,49,84,244,141,182,189,84,84,49,49,48,53,51,52,50,84,244,141,182,190,84,84,49,49,48,53,51,52,51,84,244,141,182,191,84,84,49,49,48,53,51,52,52,84,244,141,183,128,84,84,49,49,48,53,51,52,53,84,244,141,183,129,84,84,49,49,48,53,51,52,54,84,244,141,183,130,84,84,49,49,48,53,51,52,55,84,244,141,183,131,84,84,49,49,48,53,51,52,56,84,244,141,183,132,84,84,49,49,48,53,51,52,57,84,244,141,183,133,84,84,49,49,48,53,51,53,48,84,244,141,183,134,84,84,49,49,48,53,51,53,49,84,244,141,183,135,84,84,49,49,48,53,51,53,50,84,244,141,183,136,84,84,49,49,48,53,51,53,51,84,244,141,183,137,84,84,49,49,48,53,51,53,52,84,244,141,183,138,84,84,49,49,48,53,51,53,53,84,244,141,183,139,84,84,49,49,48,53,51,53,54,84,244,141,183,140,84,84,49,49,48,53,51,53,55,84,244,141,183,141,84,84,49,49,48,53,51,53,56,84,244,141,183,142,84,84,49,49,48,53,51,53,57,84,244,141,183,143,84,84,49,49,48,53,51,54,48,84,244,141,183,144,84,84,49,49,48,53,51,54,49,84,244,141,183,145,84,84,49,49,48,53,51,54,50,84,244,141,183,146,84,84,49,49,48,53,51,54,51,84,244,141,183,147,84,84,49,49,48,53,51,54,52,84,244,141,183,148,84,84,49,49,48,53,51,54,53,84,244,141,183,149,84,84,49,49,48,53,51,54,54,84,244,141,183,150,84,84,49,49,48,53,51,54,55,84,244,141,183,151,84,84,49,49,48,53,51,54,56,84,244,141,183,152,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20374 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20374_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20374_s.txt", Encoding.UTF8);

    public Test20374() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers319eca44915441a6b60a6025f5eab2bd",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,51,56,50,56,84,244,129,146,132,84,84,49,48,53,51,56,50,57,84,244,129,146,133,84,84,49,48,53,51,56,51,48,84,244,129,146,134,84,84,49,48,53,51,56,51,49,84,244,129,146,135,84,84,49,48,53,51,56,51,50,84,244,129,146,136,84,84,49,48,53,51,56,51,51,84,244,129,146,137,84,84,49,48,53,51,56,51,52,84,244,129,146,138,84,84,49,48,53,51,56,51,53,84,244,129,146,139,84,84,49,48,53,51,56,51,54,84,244,129,146,140,84,84,49,48,53,51,56,51,55,84,244,129,146,141,84,84,49,48,53,51,56,51,56,84,244,129,146,142,84,84,49,48,53,51,56,51,57,84,244,129,146,143,84,84,49,48,53,51,56,52,48,84,244,129,146,144,84,84,49,48,53,51,56,52,49,84,244,129,146,145,84,84,49,48,53,51,56,52,50,84,244,129,146,146,84,84,49,48,53,51,56,52,51,84,244,129,146,147,84,84,49,48,53,51,56,52,52,84,244,129,146,148,84,84,49,48,53,51,56,52,53,84,244,129,146,149,84,84,49,48,53,51,56,52,54,84,244,129,146,150,84,84,49,48,53,51,56,52,55,84,244,129,146,151,84,84,49,48,53,51,56,52,56,84,244,129,146,152,84,84,49,48,53,51,56,52,57,84,244,129,146,153,84,84,49,48,53,51,56,53,48,84,244,129,146,154,84,84,49,48,53,51,56,53,49,84,244,129,146,155,84,84,49,48,53,51,56,53,50,84,244,129,146,156,84,84,49,48,53,51,56,53,51,84,244,129,146,157,84,84,49,48,53,51,56,53,52,84,244,129,146,158,84,84,49,48,53,51,56,53,53,84,244,129,146,159,84,84,49,48,53,51,56,53,54,84,244,129,146,160,84,84,49,48,53,51,56,53,55,84,244,129,146,161,84,84,49,48,53,51,56,53,56,84,244,129,146,162,84,84,49,48,53,51,56,53,57,84,244,129,146,163,84,84,49,48,53,51,56,54,48,84,244,129,146,164,84,84,49,48,53,51,56,54,49,84,244,129,146,165,84,84,49,48,53,51,56,54,50,84,244,129,146,166,84,84,49,48,53,51,56,54,51,84,244,129,146,167,84,84,49,48,53,51,56,54,52,84,244,129,146,168,84,84,49,48,53,51,56,54,53,84,244,129,146,169,84,84,49,48,53,51,56,54,54,84,244,129,146,170,84,84,49,48,53,51,56,54,55,84,244,129,146,171,84,84,49,48,53,51,56,54,56,84,244,129,146,172,84,84,49,48,53,51,56,54,57,84,244,129,146,173,84,84,49,48,53,51,56,55,48,84,244,129,146,174,84,84,49,48,53,51,56,55,49,84,244,129,146,175,84,84,49,48,53,51,56,55,50,84,244,129,146,176,84,84,49,48,53,51,56,55,51,84,244,129,146,177,84,84,49,48,53,51,56,55,52,84,244,129,146,178,84,84,49,48,53,51,56,55,53,84,244,129,146,179,84,84,49,48,53,51,56,55,54,84,244,129,146,180,84,84,49,48,53,51,56,55,55,84,244,129,146,181,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19929 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19929_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19929_s.txt", Encoding.UTF8);

    public Test19929() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersbf5ecfbea5a24d8a8188936c9be6fa20",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,56,57,48,54,57,84,243,177,158,141,84,84,57,56,57,48,55,49,84,243,177,158,143,84,84,57,56,57,48,55,50,84,243,177,158,144,84,84,57,56,57,48,56,53,84,243,177,158,157,84,84,57,56,57,49,50,49,84,243,177,159,129,84,84,57,56,57,49,51,51,84,243,177,159,141,84,84,57,56,57,49,51,53,84,243,177,159,143,84,84,57,56,57,49,51,54,84,243,177,159,144,84,84,57,56,57,49,52,57,84,243,177,159,157,84,84,57,56,57,49,56,53,84,243,177,160,129,84,84,57,56,57,49,57,55,84,243,177,160,141,84,84,57,56,57,49,57,57,84,243,177,160,143,84,84,57,56,57,50,48,48,84,243,177,160,144,84,84,57,56,57,50,49,51,84,243,177,160,157,84,84,57,56,57,50,52,57,84,243,177,161,129,84,84,57,56,57,50,54,49,84,243,177,161,141,84,84,57,56,57,50,54,51,84,243,177,161,143,84,84,57,56,57,50,54,52,84,243,177,161,144,84,84,57,56,57,50,55,55,84,243,177,161,157,84,84,57,56,57,51,49,51,84,243,177,162,129,84,84,57,56,57,51,50,53,84,243,177,162,141,84,84,57,56,57,51,50,55,84,243,177,162,143,84,84,57,56,57,51,50,56,84,243,177,162,144,84,84,57,56,57,51,52,49,84,243,177,162,157,84,84,57,56,57,51,55,55,84,243,177,163,129,84,84,57,56,57,51,56,57,84,243,177,163,141,84,84,57,56,57,51,57,49,84,243,177,163,143,84,84,57,56,57,51,57,50,84,243,177,163,144,84,84,57,56,57,52,48,53,84,243,177,163,157,84,84,57,56,57,52,52,49,84,243,177,164,129,84,84,57,56,57,52,53,51,84,243,177,164,141,84,84,57,56,57,52,53,53,84,243,177,164,143,84,84,57,56,57,52,53,54,84,243,177,164,144,84,84,57,56,57,52,54,57,84,243,177,164,157,84,84,57,56,57,53,48,53,84,243,177,165,129,84,84,57,56,57,53,49,55,84,243,177,165,141,84,84,57,56,57,53,49,57,84,243,177,165,143,84,84,57,56,57,53,50,48,84,243,177,165,144,84,84,57,56,57,53,51,51,84,243,177,165,157,84,84,57,56,57,53,54,57,84,243,177,166,129,84,84,57,56,57,53,56,49,84,243,177,166,141,84,84,57,56,57,53,56,51,84,243,177,166,143,84,84,57,56,57,53,56,52,84,243,177,166,144,84,84,57,56,57,53,57,55,84,243,177,166,157,84,84,57,56,57,54,51,51,84,243,177,167,129,84,84,57,56,57,54,52,53,84,243,177,167,141,84,84,57,56,57,54,52,55,84,243,177,167,143,84,84,57,56,57,54,52,56,84,243,177,167,144,84,84,57,56,57,54,54,49,84,243,177,167,157,84,84,57,56,57,54,57,55,84,243,177,168,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20209 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20209_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20209_s.txt", Encoding.UTF8);

    public Test20209() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers2b6cdd6684eb4500abcaa682adc323b7",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,51,51,52,48,57,84,243,188,147,129,84,84,49,48,51,51,52,50,49,84,243,188,147,141,84,84,49,48,51,51,52,50,51,84,243,188,147,143,84,84,49,48,51,51,52,50,52,84,243,188,147,144,84,84,49,48,51,51,52,51,55,84,243,188,147,157,84,84,49,48,51,51,52,55,51,84,243,188,148,129,84,84,49,48,51,51,52,56,53,84,243,188,148,141,84,84,49,48,51,51,52,56,55,84,243,188,148,143,84,84,49,48,51,51,52,56,56,84,243,188,148,144,84,84,49,48,51,51,53,48,49,84,243,188,148,157,84,84,49,48,51,51,53,51,55,84,243,188,149,129,84,84,49,48,51,51,53,52,57,84,243,188,149,141,84,84,49,48,51,51,53,53,49,84,243,188,149,143,84,84,49,48,51,51,53,53,50,84,243,188,149,144,84,84,49,48,51,51,53,54,53,84,243,188,149,157,84,84,49,48,51,51,54,48,49,84,243,188,150,129,84,84,49,48,51,51,54,49,51,84,243,188,150,141,84,84,49,48,51,51,54,49,53,84,243,188,150,143,84,84,49,48,51,51,54,49,54,84,243,188,150,144,84,84,49,48,51,51,54,50,57,84,243,188,150,157,84,84,49,48,51,51,54,54,53,84,243,188,151,129,84,84,49,48,51,51,54,55,55,84,243,188,151,141,84,84,49,48,51,51,54,55,57,84,243,188,151,143,84,84,49,48,51,51,54,56,48,84,243,188,151,144,84,84,49,48,51,51,54,57,51,84,243,188,151,157,84,84,49,48,51,51,55,50,57,84,243,188,152,129,84,84,49,48,51,51,55,52,49,84,243,188,152,141,84,84,49,48,51,51,55,52,51,84,243,188,152,143,84,84,49,48,51,51,55,52,52,84,243,188,152,144,84,84,49,48,51,51,55,53,55,84,243,188,152,157,84,84,49,48,51,51,55,57,51,84,243,188,153,129,84,84,49,48,51,51,56,48,53,84,243,188,153,141,84,84,49,48,51,51,56,48,55,84,243,188,153,143,84,84,49,48,51,51,56,48,56,84,243,188,153,144,84,84,49,48,51,51,56,50,49,84,243,188,153,157,84,84,49,48,51,51,56,53,55,84,243,188,154,129,84,84,49,48,51,51,56,54,57,84,243,188,154,141,84,84,49,48,51,51,56,55,49,84,243,188,154,143,84,84,49,48,51,51,56,55,50,84,243,188,154,144,84,84,49,48,51,51,56,56,53,84,243,188,154,157,84,84,49,48,51,51,57,50,49,84,243,188,155,129,84,84,49,48,51,51,57,51,51,84,243,188,155,141,84,84,49,48,51,51,57,51,53,84,243,188,155,143,84,84,49,48,51,51,57,51,54,84,243,188,155,144,84,84,49,48,51,51,57,52,57,84,243,188,155,157,84,84,49,48,51,51,57,56,53,84,243,188,156,129,84,84,49,48,51,51,57,57,55,84,243,188,156,141,84,84,49,48,51,51,57,57,57,84,243,188,156,143,84,84,49,48,51,52,48,48,48,84,243,188,156,144,84,84,49,48,51,52,48,49,51,84,243,188,156,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20150 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20150_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20150_s.txt", Encoding.UTF8);

    public Test20150() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers4f3362aed9424bd2bfac6751ee820ab9",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,50,52,56,54,57,84,243,186,141,165,84,84,49,48,50,52,56,55,48,84,243,186,141,166,84,84,49,48,50,52,56,55,49,84,243,186,141,167,84,84,49,48,50,52,56,55,50,84,243,186,141,168,84,84,49,48,50,52,56,55,51,84,243,186,141,169,84,84,49,48,50,52,56,55,52,84,243,186,141,170,84,84,49,48,50,52,56,55,53,84,243,186,141,171,84,84,49,48,50,52,56,55,54,84,243,186,141,172,84,84,49,48,50,52,56,55,55,84,243,186,141,173,84,84,49,48,50,52,56,55,56,84,243,186,141,174,84,84,49,48,50,52,56,55,57,84,243,186,141,175,84,84,49,48,50,52,56,56,48,84,243,186,141,176,84,84,49,48,50,52,56,56,49,84,243,186,141,177,84,84,49,48,50,52,56,56,50,84,243,186,141,178,84,84,49,48,50,52,56,56,51,84,243,186,141,179,84,84,49,48,50,52,56,56,52,84,243,186,141,180,84,84,49,48,50,52,56,56,53,84,243,186,141,181,84,84,49,48,50,52,56,56,54,84,243,186,141,182,84,84,49,48,50,52,56,56,55,84,243,186,141,183,84,84,49,48,50,52,56,56,56,84,243,186,141,184,84,84,49,48,50,52,56,56,57,84,243,186,141,185,84,84,49,48,50,52,56,57,48,84,243,186,141,186,84,84,49,48,50,52,56,57,49,84,243,186,141,187,84,84,49,48,50,52,56,57,50,84,243,186,141,188,84,84,49,48,50,52,56,57,51,84,243,186,141,189,84,84,49,48,50,52,56,57,52,84,243,186,141,190,84,84,49,48,50,52,56,57,53,84,243,186,141,191,84,84,49,48,50,52,56,57,55,84,243,186,142,129,84,84,49,48,50,52,57,48,57,84,243,186,142,141,84,84,49,48,50,52,57,49,49,84,243,186,142,143,84,84,49,48,50,52,57,49,50,84,243,186,142,144,84,84,49,48,50,52,57,50,53,84,243,186,142,157,84,84,49,48,50,52,57,54,48,84,243,186,143,128,84,84,49,48,50,52,57,54,49,84,243,186,143,129,84,84,49,48,50,52,57,54,50,84,243,186,143,130,84,84,49,48,50,52,57,54,51,84,243,186,143,131,84,84,49,48,50,52,57,54,52,84,243,186,143,132,84,84,49,48,50,52,57,54,53,84,243,186,143,133,84,84,49,48,50,52,57,54,54,84,243,186,143,134,84,84,49,48,50,52,57,54,55,84,243,186,143,135,84,84,49,48,50,52,57,54,56,84,243,186,143,136,84,84,49,48,50,52,57,54,57,84,243,186,143,137,84,84,49,48,50,52,57,55,48,84,243,186,143,138,84,84,49,48,50,52,57,55,49,84,243,186,143,139,84,84,49,48,50,52,57,55,50,84,243,186,143,140,84,84,49,48,50,52,57,55,51,84,243,186,143,141,84,84,49,48,50,52,57,55,52,84,243,186,143,142,84,84,49,48,50,52,57,55,53,84,243,186,143,143,84,84,49,48,50,52,57,55,54,84,243,186,143,144,84,84,49,48,50,52,57,55,55,84,243,186,143,145,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19860 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19860_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19860_s.txt", Encoding.UTF8);

    public Test19860() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers7032abc4111d4702bce9d36696a0a648",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,49,55,55,49,49,84,243,160,131,143,84,84,57,49,55,55,49,50,84,243,160,131,144,84,84,57,49,55,55,50,53,84,243,160,131,157,84,84,57,49,55,55,54,49,84,243,160,132,129,84,84,57,49,55,55,55,51,84,243,160,132,141,84,84,57,49,55,55,55,53,84,243,160,132,143,84,84,57,49,55,55,55,54,84,243,160,132,144,84,84,57,49,55,55,56,57,84,243,160,132,157,84,84,57,49,55,56,50,53,84,243,160,133,129,84,84,57,49,55,56,51,55,84,243,160,133,141,84,84,57,49,55,56,51,57,84,243,160,133,143,84,84,57,49,55,56,52,48,84,243,160,133,144,84,84,57,49,55,56,53,51,84,243,160,133,157,84,84,57,49,55,56,56,57,84,243,160,134,129,84,84,57,49,55,57,48,49,84,243,160,134,141,84,84,57,49,55,57,48,51,84,243,160,134,143,84,84,57,49,55,57,48,52,84,243,160,134,144,84,84,57,49,55,57,49,55,84,243,160,134,157,84,84,57,49,55,57,53,51,84,243,160,135,129,84,84,57,49,55,57,54,53,84,243,160,135,141,84,84,57,49,55,57,54,55,84,243,160,135,143,84,84,57,49,55,57,54,56,84,243,160,135,144,84,84,57,49,55,57,56,49,84,243,160,135,157,84,84,57,49,56,48,49,55,84,243,160,136,129,84,84,57,49,56,48,50,57,84,243,160,136,141,84,84,57,49,56,48,51,49,84,243,160,136,143,84,84,57,49,56,48,51,50,84,243,160,136,144,84,84,57,49,56,48,52,53,84,243,160,136,157,84,84,57,49,56,48,56,49,84,243,160,137,129,84,84,57,49,56,48,57,51,84,243,160,137,141,84,84,57,49,56,48,57,53,84,243,160,137,143,84,84,57,49,56,48,57,54,84,243,160,137,144,84,84,57,49,56,49,48,57,84,243,160,137,157,84,84,57,49,56,49,52,53,84,243,160,138,129,84,84,57,49,56,49,53,55,84,243,160,138,141,84,84,57,49,56,49,53,57,84,243,160,138,143,84,84,57,49,56,49,54,48,84,243,160,138,144,84,84,57,49,56,49,55,51,84,243,160,138,157,84,84,57,49,56,50,48,57,84,243,160,139,129,84,84,57,49,56,50,50,49,84,243,160,139,141,84,84,57,49,56,50,50,51,84,243,160,139,143,84,84,57,49,56,50,50,52,84,243,160,139,144,84,84,57,49,56,50,51,55,84,243,160,139,157,84,84,57,49,56,50,55,51,84,243,160,140,129,84,84,57,49,56,50,56,53,84,243,160,140,141,84,84,57,49,56,50,56,55,84,243,160,140,143,84,84,57,49,56,50,56,56,84,243,160,140,144,84,84,57,49,56,51,48,49,84,243,160,140,157,84,84,57,49,56,51,51,54,84,243,160,141,128,84,84,57,49,56,51,51,55,84,243,160,141,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20882 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20882_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20882_s.txt", Encoding.UTF8);

    public Test20882() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersdd41d3a5bb7f42709f7cec587f1a204a",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,52,48,54,57,84,244,141,163,133,84,84,49,49,48,52,48,55,48,84,244,141,163,134,84,84,49,49,48,52,48,55,49,84,244,141,163,135,84,84,49,49,48,52,48,55,50,84,244,141,163,136,84,84,49,49,48,52,48,55,51,84,244,141,163,137,84,84,49,49,48,52,48,55,52,84,244,141,163,138,84,84,49,49,48,52,48,55,53,84,244,141,163,139,84,84,49,49,48,52,48,55,54,84,244,141,163,140,84,84,49,49,48,52,48,55,55,84,244,141,163,141,84,84,49,49,48,52,48,55,56,84,244,141,163,142,84,84,49,49,48,52,48,55,57,84,244,141,163,143,84,84,49,49,48,52,48,56,48,84,244,141,163,144,84,84,49,49,48,52,48,56,49,84,244,141,163,145,84,84,49,49,48,52,48,56,50,84,244,141,163,146,84,84,49,49,48,52,48,56,51,84,244,141,163,147,84,84,49,49,48,52,48,56,52,84,244,141,163,148,84,84,49,49,48,52,48,56,53,84,244,141,163,149,84,84,49,49,48,52,48,56,54,84,244,141,163,150,84,84,49,49,48,52,48,56,55,84,244,141,163,151,84,84,49,49,48,52,48,56,56,84,244,141,163,152,84,84,49,49,48,52,48,56,57,84,244,141,163,153,84,84,49,49,48,52,48,57,48,84,244,141,163,154,84,84,49,49,48,52,48,57,49,84,244,141,163,155,84,84,49,49,48,52,48,57,50,84,244,141,163,156,84,84,49,49,48,52,48,57,51,84,244,141,163,157,84,84,49,49,48,52,48,57,52,84,244,141,163,158,84,84,49,49,48,52,48,57,53,84,244,141,163,159,84,84,49,49,48,52,48,57,54,84,244,141,163,160,84,84,49,49,48,52,48,57,55,84,244,141,163,161,84,84,49,49,48,52,48,57,56,84,244,141,163,162,84,84,49,49,48,52,48,57,57,84,244,141,163,163,84,84,49,49,48,52,49,48,48,84,244,141,163,164,84,84,49,49,48,52,49,48,49,84,244,141,163,165,84,84,49,49,48,52,49,48,50,84,244,141,163,166,84,84,49,49,48,52,49,48,51,84,244,141,163,167,84,84,49,49,48,52,49,48,52,84,244,141,163,168,84,84,49,49,48,52,49,48,53,84,244,141,163,169,84,84,49,49,48,52,49,48,54,84,244,141,163,170,84,84,49,49,48,52,49,48,55,84,244,141,163,171,84,84,49,49,48,52,49,48,56,84,244,141,163,172,84,84,49,49,48,52,49,48,57,84,244,141,163,173,84,84,49,49,48,52,49,49,48,84,244,141,163,174,84,84,49,49,48,52,49,49,49,84,244,141,163,175,84,84,49,49,48,52,49,49,50,84,244,141,163,176,84,84,49,49,48,52,49,49,51,84,244,141,163,177,84,84,49,49,48,52,49,49,52,84,244,141,163,178,84,84,49,49,48,52,49,49,53,84,244,141,163,179,84,84,49,49,48,52,49,49,54,84,244,141,163,180,84,84,49,49,48,52,49,49,55,84,244,141,163,181,84,84,49,49,48,52,49,49,56,84,244,141,163,182,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20282 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20282_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20282_s.txt", Encoding.UTF8);

    public Test20282() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers712afb35b54344eb8fa90647f752cd92",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,52,53,51,55,52,84,243,191,141,190,84,84,49,48,52,53,51,55,53,84,243,191,141,191,84,84,49,48,52,53,51,55,55,84,243,191,142,129,84,84,49,48,52,53,51,56,57,84,243,191,142,141,84,84,49,48,52,53,51,57,49,84,243,191,142,143,84,84,49,48,52,53,51,57,50,84,243,191,142,144,84,84,49,48,52,53,52,48,53,84,243,191,142,157,84,84,49,48,52,53,52,52,48,84,243,191,143,128,84,84,49,48,52,53,52,52,49,84,243,191,143,129,84,84,49,48,52,53,52,52,50,84,243,191,143,130,84,84,49,48,52,53,52,52,51,84,243,191,143,131,84,84,49,48,52,53,52,52,52,84,243,191,143,132,84,84,49,48,52,53,52,52,53,84,243,191,143,133,84,84,49,48,52,53,52,52,54,84,243,191,143,134,84,84,49,48,52,53,52,52,55,84,243,191,143,135,84,84,49,48,52,53,52,52,56,84,243,191,143,136,84,84,49,48,52,53,52,52,57,84,243,191,143,137,84,84,49,48,52,53,52,53,48,84,243,191,143,138,84,84,49,48,52,53,52,53,49,84,243,191,143,139,84,84,49,48,52,53,52,53,50,84,243,191,143,140,84,84,49,48,52,53,52,53,51,84,243,191,143,141,84,84,49,48,52,53,52,53,52,84,243,191,143,142,84,84,49,48,52,53,52,53,53,84,243,191,143,143,84,84,49,48,52,53,52,53,54,84,243,191,143,144,84,84,49,48,52,53,52,53,55,84,243,191,143,145,84,84,49,48,52,53,52,53,56,84,243,191,143,146,84,84,49,48,52,53,52,53,57,84,243,191,143,147,84,84,49,48,52,53,52,54,48,84,243,191,143,148,84,84,49,48,52,53,52,54,49,84,243,191,143,149,84,84,49,48,52,53,52,54,50,84,243,191,143,150,84,84,49,48,52,53,52,54,51,84,243,191,143,151,84,84,49,48,52,53,52,54,52,84,243,191,143,152,84,84,49,48,52,53,52,54,53,84,243,191,143,153,84,84,49,48,52,53,52,54,54,84,243,191,143,154,84,84,49,48,52,53,52,54,55,84,243,191,143,155,84,84,49,48,52,53,52,54,56,84,243,191,143,156,84,84,49,48,52,53,52,54,57,84,243,191,143,157,84,84,49,48,52,53,52,55,48,84,243,191,143,158,84,84,49,48,52,53,52,55,49,84,243,191,143,159,84,84,49,48,52,53,52,55,50,84,243,191,143,160,84,84,49,48,52,53,52,55,51,84,243,191,143,161,84,84,49,48,52,53,52,55,52,84,243,191,143,162,84,84,49,48,52,53,52,55,53,84,243,191,143,163,84,84,49,48,52,53,52,55,54,84,243,191,143,164,84,84,49,48,52,53,52,55,55,84,243,191,143,165,84,84,49,48,52,53,52,55,56,84,243,191,143,166,84,84,49,48,52,53,52,55,57,84,243,191,143,167,84,84,49,48,52,53,52,56,48,84,243,191,143,168,84,84,49,48,52,53,52,56,49,84,243,191,143,169,84,84,49,48,52,53,52,56,50,84,243,191,143,170,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19987 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19987_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19987_s.txt", Encoding.UTF8);

    public Test19987() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersc5d3e7c5509046d2aa3f8bb095571b82",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,57,57,52,51,55,84,243,180,128,141,84,84,57,57,57,52,51,57,84,243,180,128,143,84,84,57,57,57,52,52,48,84,243,180,128,144,84,84,57,57,57,52,53,51,84,243,180,128,157,84,84,57,57,57,52,56,56,84,243,180,129,128,84,84,57,57,57,52,56,57,84,243,180,129,129,84,84,57,57,57,52,57,48,84,243,180,129,130,84,84,57,57,57,52,57,49,84,243,180,129,131,84,84,57,57,57,52,57,50,84,243,180,129,132,84,84,57,57,57,52,57,51,84,243,180,129,133,84,84,57,57,57,52,57,52,84,243,180,129,134,84,84,57,57,57,52,57,53,84,243,180,129,135,84,84,57,57,57,52,57,54,84,243,180,129,136,84,84,57,57,57,52,57,55,84,243,180,129,137,84,84,57,57,57,52,57,56,84,243,180,129,138,84,84,57,57,57,52,57,57,84,243,180,129,139,84,84,57,57,57,53,48,48,84,243,180,129,140,84,84,57,57,57,53,48,49,84,243,180,129,141,84,84,57,57,57,53,48,50,84,243,180,129,142,84,84,57,57,57,53,48,51,84,243,180,129,143,84,84,57,57,57,53,48,52,84,243,180,129,144,84,84,57,57,57,53,48,53,84,243,180,129,145,84,84,57,57,57,53,48,54,84,243,180,129,146,84,84,57,57,57,53,48,55,84,243,180,129,147,84,84,57,57,57,53,48,56,84,243,180,129,148,84,84,57,57,57,53,48,57,84,243,180,129,149,84,84,57,57,57,53,49,48,84,243,180,129,150,84,84,57,57,57,53,49,49,84,243,180,129,151,84,84,57,57,57,53,49,50,84,243,180,129,152,84,84,57,57,57,53,49,51,84,243,180,129,153,84,84,57,57,57,53,49,52,84,243,180,129,154,84,84,57,57,57,53,49,53,84,243,180,129,155,84,84,57,57,57,53,49,54,84,243,180,129,156,84,84,57,57,57,53,49,55,84,243,180,129,157,84,84,57,57,57,53,49,56,84,243,180,129,158,84,84,57,57,57,53,49,57,84,243,180,129,159,84,84,57,57,57,53,50,48,84,243,180,129,160,84,84,57,57,57,53,50,49,84,243,180,129,161,84,84,57,57,57,53,50,50,84,243,180,129,162,84,84,57,57,57,53,50,51,84,243,180,129,163,84,84,57,57,57,53,50,52,84,243,180,129,164,84,84,57,57,57,53,50,53,84,243,180,129,165,84,84,57,57,57,53,50,54,84,243,180,129,166,84,84,57,57,57,53,50,55,84,243,180,129,167,84,84,57,57,57,53,50,56,84,243,180,129,168,84,84,57,57,57,53,50,57,84,243,180,129,169,84,84,57,57,57,53,51,48,84,243,180,129,170,84,84,57,57,57,53,51,49,84,243,180,129,171,84,84,57,57,57,53,51,50,84,243,180,129,172,84,84,57,57,57,53,51,51,84,243,180,129,173,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21074 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21074_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21074_s.txt", Encoding.UTF8);

    public Test21074() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers79aa3dd90e344ebe9466f3cb0c56378a",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,50,48,53,48,84,244,143,159,178,84,84,49,49,49,50,48,53,49,84,244,143,159,179,84,84,49,49,49,50,48,53,50,84,244,143,159,180,84,84,49,49,49,50,48,53,51,84,244,143,159,181,84,84,49,49,49,50,48,53,52,84,244,143,159,182,84,84,49,49,49,50,48,53,53,84,244,143,159,183,84,84,49,49,49,50,48,53,54,84,244,143,159,184,84,84,49,49,49,50,48,53,55,84,244,143,159,185,84,84,49,49,49,50,48,53,56,84,244,143,159,186,84,84,49,49,49,50,48,53,57,84,244,143,159,187,84,84,49,49,49,50,48,54,48,84,244,143,159,188,84,84,49,49,49,50,48,54,49,84,244,143,159,189,84,84,49,49,49,50,48,54,50,84,244,143,159,190,84,84,49,49,49,50,48,54,51,84,244,143,159,191,84,84,49,49,49,50,48,54,52,84,244,143,160,128,84,84,49,49,49,50,48,54,53,84,244,143,160,129,84,84,49,49,49,50,48,54,54,84,244,143,160,130,84,84,49,49,49,50,48,54,55,84,244,143,160,131,84,84,49,49,49,50,48,54,56,84,244,143,160,132,84,84,49,49,49,50,48,54,57,84,244,143,160,133,84,84,49,49,49,50,48,55,48,84,244,143,160,134,84,84,49,49,49,50,48,55,49,84,244,143,160,135,84,84,49,49,49,50,48,55,50,84,244,143,160,136,84,84,49,49,49,50,48,55,51,84,244,143,160,137,84,84,49,49,49,50,48,55,52,84,244,143,160,138,84,84,49,49,49,50,48,55,53,84,244,143,160,139,84,84,49,49,49,50,48,55,54,84,244,143,160,140,84,84,49,49,49,50,48,55,55,84,244,143,160,141,84,84,49,49,49,50,48,55,56,84,244,143,160,142,84,84,49,49,49,50,48,55,57,84,244,143,160,143,84,84,49,49,49,50,48,56,48,84,244,143,160,144,84,84,49,49,49,50,48,56,49,84,244,143,160,145,84,84,49,49,49,50,48,56,50,84,244,143,160,146,84,84,49,49,49,50,48,56,51,84,244,143,160,147,84,84,49,49,49,50,48,56,52,84,244,143,160,148,84,84,49,49,49,50,48,56,53,84,244,143,160,149,84,84,49,49,49,50,48,56,54,84,244,143,160,150,84,84,49,49,49,50,48,56,55,84,244,143,160,151,84,84,49,49,49,50,48,56,56,84,244,143,160,152,84,84,49,49,49,50,48,56,57,84,244,143,160,153,84,84,49,49,49,50,48,57,48,84,244,143,160,154,84,84,49,49,49,50,48,57,49,84,244,143,160,155,84,84,49,49,49,50,48,57,50,84,244,143,160,156,84,84,49,49,49,50,48,57,51,84,244,143,160,157,84,84,49,49,49,50,48,57,52,84,244,143,160,158,84,84,49,49,49,50,48,57,53,84,244,143,160,159,84,84,49,49,49,50,48,57,54,84,244,143,160,160,84,84,49,49,49,50,48,57,55,84,244,143,160,161,84,84,49,49,49,50,48,57,56,84,244,143,160,162,84,84,49,49,49,50,48,57,57,84,244,143,160,163,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20471 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20471_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20471_s.txt", Encoding.UTF8);

    public Test20471() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersee5ddc6232b847869028904d3d06a0f3",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,54,49,50,56,84,244,129,182,128,84,84,49,48,53,54,49,50,57,84,244,129,182,129,84,84,49,48,53,54,49,51,48,84,244,129,182,130,84,84,49,48,53,54,49,51,49,84,244,129,182,131,84,84,49,48,53,54,49,51,50,84,244,129,182,132,84,84,49,48,53,54,49,51,51,84,244,129,182,133,84,84,49,48,53,54,49,51,52,84,244,129,182,134,84,84,49,48,53,54,49,51,53,84,244,129,182,135,84,84,49,48,53,54,49,51,54,84,244,129,182,136,84,84,49,48,53,54,49,51,55,84,244,129,182,137,84,84,49,48,53,54,49,51,56,84,244,129,182,138,84,84,49,48,53,54,49,51,57,84,244,129,182,139,84,84,49,48,53,54,49,52,48,84,244,129,182,140,84,84,49,48,53,54,49,52,49,84,244,129,182,141,84,84,49,48,53,54,49,52,50,84,244,129,182,142,84,84,49,48,53,54,49,52,51,84,244,129,182,143,84,84,49,48,53,54,49,52,52,84,244,129,182,144,84,84,49,48,53,54,49,52,53,84,244,129,182,145,84,84,49,48,53,54,49,52,54,84,244,129,182,146,84,84,49,48,53,54,49,52,55,84,244,129,182,147,84,84,49,48,53,54,49,52,56,84,244,129,182,148,84,84,49,48,53,54,49,52,57,84,244,129,182,149,84,84,49,48,53,54,49,53,48,84,244,129,182,150,84,84,49,48,53,54,49,53,49,84,244,129,182,151,84,84,49,48,53,54,49,53,50,84,244,129,182,152,84,84,49,48,53,54,49,53,51,84,244,129,182,153,84,84,49,48,53,54,49,53,52,84,244,129,182,154,84,84,49,48,53,54,49,53,53,84,244,129,182,155,84,84,49,48,53,54,49,53,54,84,244,129,182,156,84,84,49,48,53,54,49,53,55,84,244,129,182,157,84,84,49,48,53,54,49,53,56,84,244,129,182,158,84,84,49,48,53,54,49,53,57,84,244,129,182,159,84,84,49,48,53,54,49,54,48,84,244,129,182,160,84,84,49,48,53,54,49,54,49,84,244,129,182,161,84,84,49,48,53,54,49,54,50,84,244,129,182,162,84,84,49,48,53,54,49,54,51,84,244,129,182,163,84,84,49,48,53,54,49,54,52,84,244,129,182,164,84,84,49,48,53,54,49,54,53,84,244,129,182,165,84,84,49,48,53,54,49,54,54,84,244,129,182,166,84,84,49,48,53,54,49,54,55,84,244,129,182,167,84,84,49,48,53,54,49,54,56,84,244,129,182,168,84,84,49,48,53,54,49,54,57,84,244,129,182,169,84,84,49,48,53,54,49,55,48,84,244,129,182,170,84,84,49,48,53,54,49,55,49,84,244,129,182,171,84,84,49,48,53,54,49,55,50,84,244,129,182,172,84,84,49,48,53,54,49,55,51,84,244,129,182,173,84,84,49,48,53,54,49,55,52,84,244,129,182,174,84,84,49,48,53,54,49,55,53,84,244,129,182,175,84,84,49,48,53,54,49,55,54,84,244,129,182,176,84,84,49,48,53,54,49,55,55,84,244,129,182,177,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20721 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20721_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20721_s.txt", Encoding.UTF8);

    public Test20721() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers0bb7ae45edef4594997d97499d26b519",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,57,48,53,57,51,84,244,138,144,161,84,84,49,48,57,48,53,57,52,84,244,138,144,162,84,84,49,48,57,48,53,57,53,84,244,138,144,163,84,84,49,48,57,48,53,57,54,84,244,138,144,164,84,84,49,48,57,48,53,57,55,84,244,138,144,165,84,84,49,48,57,48,53,57,56,84,244,138,144,166,84,84,49,48,57,48,53,57,57,84,244,138,144,167,84,84,49,48,57,48,54,48,48,84,244,138,144,168,84,84,49,48,57,48,54,48,49,84,244,138,144,169,84,84,49,48,57,48,54,48,50,84,244,138,144,170,84,84,49,48,57,48,54,48,51,84,244,138,144,171,84,84,49,48,57,48,54,48,52,84,244,138,144,172,84,84,49,48,57,48,54,48,53,84,244,138,144,173,84,84,49,48,57,48,54,48,54,84,244,138,144,174,84,84,49,48,57,48,54,48,55,84,244,138,144,175,84,84,49,48,57,48,54,48,56,84,244,138,144,176,84,84,49,48,57,48,54,48,57,84,244,138,144,177,84,84,49,48,57,48,54,49,48,84,244,138,144,178,84,84,49,48,57,48,54,49,49,84,244,138,144,179,84,84,49,48,57,48,54,49,50,84,244,138,144,180,84,84,49,48,57,48,54,49,51,84,244,138,144,181,84,84,49,48,57,48,54,49,52,84,244,138,144,182,84,84,49,48,57,48,54,49,53,84,244,138,144,183,84,84,49,48,57,48,54,49,54,84,244,138,144,184,84,84,49,48,57,48,54,49,55,84,244,138,144,185,84,84,49,48,57,48,54,49,56,84,244,138,144,186,84,84,49,48,57,48,54,49,57,84,244,138,144,187,84,84,49,48,57,48,54,50,48,84,244,138,144,188,84,84,49,48,57,48,54,50,49,84,244,138,144,189,84,84,49,48,57,48,54,50,50,84,244,138,144,190,84,84,49,48,57,48,54,50,51,84,244,138,144,191,84,84,49,48,57,48,54,50,53,84,244,138,145,129,84,84,49,48,57,48,54,51,55,84,244,138,145,141,84,84,49,48,57,48,54,51,57,84,244,138,145,143,84,84,49,48,57,48,54,52,48,84,244,138,145,144,84,84,49,48,57,48,54,53,51,84,244,138,145,157,84,84,49,48,57,48,54,56,57,84,244,138,146,129,84,84,49,48,57,48,55,48,49,84,244,138,146,141,84,84,49,48,57,48,55,48,51,84,244,138,146,143,84,84,49,48,57,48,55,48,52,84,244,138,146,144,84,84,49,48,57,48,55,49,55,84,244,138,146,157,84,84,49,48,57,48,55,53,51,84,244,138,147,129,84,84,49,48,57,48,55,54,53,84,244,138,147,141,84,84,49,48,57,48,55,54,55,84,244,138,147,143,84,84,49,48,57,48,55,54,56,84,244,138,147,144,84,84,49,48,57,48,55,56,49,84,244,138,147,157,84,84,49,48,57,48,56,49,55,84,244,138,148,129,84,84,49,48,57,48,56,50,57,84,244,138,148,141,84,84,49,48,57,48,56,51,49,84,244,138,148,143,84,84,49,48,57,48,56,51,50,84,244,138,148,144,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19989 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19989_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19989_s.txt", Encoding.UTF8);

    public Test19989() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersc5d3e7c5509046d2aa3f8bb095571b82",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,57,57,53,51,52,84,243,180,129,174,84,84,57,57,57,53,51,53,84,243,180,129,175,84,84,57,57,57,53,51,54,84,243,180,129,176,84,84,57,57,57,53,51,55,84,243,180,129,177,84,84,57,57,57,53,51,56,84,243,180,129,178,84,84,57,57,57,53,51,57,84,243,180,129,179,84,84,57,57,57,53,52,48,84,243,180,129,180,84,84,57,57,57,53,52,49,84,243,180,129,181,84,84,57,57,57,53,52,50,84,243,180,129,182,84,84,57,57,57,53,52,51,84,243,180,129,183,84,84,57,57,57,53,52,52,84,243,180,129,184,84,84,57,57,57,53,52,53,84,243,180,129,185,84,84,57,57,57,53,52,54,84,243,180,129,186,84,84,57,57,57,53,52,55,84,243,180,129,187,84,84,57,57,57,53,52,56,84,243,180,129,188,84,84,57,57,57,53,52,57,84,243,180,129,189,84,84,57,57,57,53,53,48,84,243,180,129,190,84,84,57,57,57,53,53,49,84,243,180,129,191,84,84,57,57,57,53,53,51,84,243,180,130,129,84,84,57,57,57,53,54,53,84,243,180,130,141,84,84,57,57,57,53,54,55,84,243,180,130,143,84,84,57,57,57,53,54,56,84,243,180,130,144,84,84,57,57,57,53,56,49,84,243,180,130,157,84,84,57,57,57,54,49,55,84,243,180,131,129,84,84,57,57,57,54,50,57,84,243,180,131,141,84,84,57,57,57,54,51,49,84,243,180,131,143,84,84,57,57,57,54,51,50,84,243,180,131,144,84,84,57,57,57,54,52,53,84,243,180,131,157,84,84,57,57,57,54,56,49,84,243,180,132,129,84,84,57,57,57,54,57,51,84,243,180,132,141,84,84,57,57,57,54,57,53,84,243,180,132,143,84,84,57,57,57,54,57,54,84,243,180,132,144,84,84,57,57,57,55,48,57,84,243,180,132,157,84,84,57,57,57,55,52,53,84,243,180,133,129,84,84,57,57,57,55,53,55,84,243,180,133,141,84,84,57,57,57,55,53,57,84,243,180,133,143,84,84,57,57,57,55,54,48,84,243,180,133,144,84,84,57,57,57,55,55,51,84,243,180,133,157,84,84,57,57,57,56,48,57,84,243,180,134,129,84,84,57,57,57,56,50,49,84,243,180,134,141,84,84,57,57,57,56,50,51,84,243,180,134,143,84,84,57,57,57,56,50,52,84,243,180,134,144,84,84,57,57,57,56,51,55,84,243,180,134,157,84,84,57,57,57,56,55,51,84,243,180,135,129,84,84,57,57,57,56,56,53,84,243,180,135,141,84,84,57,57,57,56,56,55,84,243,180,135,143,84,84,57,57,57,56,56,56,84,243,180,135,144,84,84,57,57,57,57,48,49,84,243,180,135,157,84,84,57,57,57,57,51,55,84,243,180,136,129,84,84,57,57,57,57,52,57,84,243,180,136,141,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20816 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20816_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20816_s.txt", Encoding.UTF8);

    public Test20816() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers8240a720eb234783afd6a68d24f64161",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,50,53,49,57,84,244,141,138,183,84,84,49,49,48,50,53,50,48,84,244,141,138,184,84,84,49,49,48,50,53,50,49,84,244,141,138,185,84,84,49,49,48,50,53,50,50,84,244,141,138,186,84,84,49,49,48,50,53,50,51,84,244,141,138,187,84,84,49,49,48,50,53,50,52,84,244,141,138,188,84,84,49,49,48,50,53,50,53,84,244,141,138,189,84,84,49,49,48,50,53,50,54,84,244,141,138,190,84,84,49,49,48,50,53,50,55,84,244,141,138,191,84,84,49,49,48,50,53,50,56,84,244,141,139,128,84,84,49,49,48,50,53,50,57,84,244,141,139,129,84,84,49,49,48,50,53,51,48,84,244,141,139,130,84,84,49,49,48,50,53,51,49,84,244,141,139,131,84,84,49,49,48,50,53,51,50,84,244,141,139,132,84,84,49,49,48,50,53,51,51,84,244,141,139,133,84,84,49,49,48,50,53,51,52,84,244,141,139,134,84,84,49,49,48,50,53,51,53,84,244,141,139,135,84,84,49,49,48,50,53,51,54,84,244,141,139,136,84,84,49,49,48,50,53,51,55,84,244,141,139,137,84,84,49,49,48,50,53,51,56,84,244,141,139,138,84,84,49,49,48,50,53,51,57,84,244,141,139,139,84,84,49,49,48,50,53,52,48,84,244,141,139,140,84,84,49,49,48,50,53,52,49,84,244,141,139,141,84,84,49,49,48,50,53,52,50,84,244,141,139,142,84,84,49,49,48,50,53,52,51,84,244,141,139,143,84,84,49,49,48,50,53,52,52,84,244,141,139,144,84,84,49,49,48,50,53,52,53,84,244,141,139,145,84,84,49,49,48,50,53,52,54,84,244,141,139,146,84,84,49,49,48,50,53,52,55,84,244,141,139,147,84,84,49,49,48,50,53,52,56,84,244,141,139,148,84,84,49,49,48,50,53,52,57,84,244,141,139,149,84,84,49,49,48,50,53,53,48,84,244,141,139,150,84,84,49,49,48,50,53,53,49,84,244,141,139,151,84,84,49,49,48,50,53,53,50,84,244,141,139,152,84,84,49,49,48,50,53,53,51,84,244,141,139,153,84,84,49,49,48,50,53,53,52,84,244,141,139,154,84,84,49,49,48,50,53,53,53,84,244,141,139,155,84,84,49,49,48,50,53,53,54,84,244,141,139,156,84,84,49,49,48,50,53,53,55,84,244,141,139,157,84,84,49,49,48,50,53,53,56,84,244,141,139,158,84,84,49,49,48,50,53,53,57,84,244,141,139,159,84,84,49,49,48,50,53,54,48,84,244,141,139,160,84,84,49,49,48,50,53,54,49,84,244,141,139,161,84,84,49,49,48,50,53,54,50,84,244,141,139,162,84,84,49,49,48,50,53,54,51,84,244,141,139,163,84,84,49,49,48,50,53,54,52,84,244,141,139,164,84,84,49,49,48,50,53,54,53,84,244,141,139,165,84,84,49,49,48,50,53,54,54,84,244,141,139,166,84,84,49,49,48,50,53,54,55,84,244,141,139,167,84,84,49,49,48,50,53,54,56,84,244,141,139,168,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20056 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20056_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20056_s.txt", Encoding.UTF8);

    public Test20056() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersb3c703c6e551430d9c914c24c3792dd5",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,48,57,51,52,53,84,243,182,155,129,84,84,49,48,48,57,51,53,55,84,243,182,155,141,84,84,49,48,48,57,51,53,57,84,243,182,155,143,84,84,49,48,48,57,51,54,48,84,243,182,155,144,84,84,49,48,48,57,51,55,51,84,243,182,155,157,84,84,49,48,48,57,52,48,57,84,243,182,156,129,84,84,49,48,48,57,52,50,49,84,243,182,156,141,84,84,49,48,48,57,52,50,51,84,243,182,156,143,84,84,49,48,48,57,52,50,52,84,243,182,156,144,84,84,49,48,48,57,52,51,55,84,243,182,156,157,84,84,49,48,48,57,52,55,50,84,243,182,157,128,84,84,49,48,48,57,52,55,51,84,243,182,157,129,84,84,49,48,48,57,52,55,52,84,243,182,157,130,84,84,49,48,48,57,52,55,53,84,243,182,157,131,84,84,49,48,48,57,52,55,54,84,243,182,157,132,84,84,49,48,48,57,52,55,55,84,243,182,157,133,84,84,49,48,48,57,52,55,56,84,243,182,157,134,84,84,49,48,48,57,52,55,57,84,243,182,157,135,84,84,49,48,48,57,52,56,48,84,243,182,157,136,84,84,49,48,48,57,52,56,49,84,243,182,157,137,84,84,49,48,48,57,52,56,50,84,243,182,157,138,84,84,49,48,48,57,52,56,51,84,243,182,157,139,84,84,49,48,48,57,52,56,52,84,243,182,157,140,84,84,49,48,48,57,52,56,53,84,243,182,157,141,84,84,49,48,48,57,52,56,54,84,243,182,157,142,84,84,49,48,48,57,52,56,55,84,243,182,157,143,84,84,49,48,48,57,52,56,56,84,243,182,157,144,84,84,49,48,48,57,52,56,57,84,243,182,157,145,84,84,49,48,48,57,52,57,48,84,243,182,157,146,84,84,49,48,48,57,52,57,49,84,243,182,157,147,84,84,49,48,48,57,52,57,50,84,243,182,157,148,84,84,49,48,48,57,52,57,51,84,243,182,157,149,84,84,49,48,48,57,52,57,52,84,243,182,157,150,84,84,49,48,48,57,52,57,53,84,243,182,157,151,84,84,49,48,48,57,52,57,54,84,243,182,157,152,84,84,49,48,48,57,52,57,55,84,243,182,157,153,84,84,49,48,48,57,52,57,56,84,243,182,157,154,84,84,49,48,48,57,52,57,57,84,243,182,157,155,84,84,49,48,48,57,53,48,48,84,243,182,157,156,84,84,49,48,48,57,53,48,49,84,243,182,157,157,84,84,49,48,48,57,53,48,50,84,243,182,157,158,84,84,49,48,48,57,53,48,51,84,243,182,157,159,84,84,49,48,48,57,53,48,52,84,243,182,157,160,84,84,49,48,48,57,53,48,53,84,243,182,157,161,84,84,49,48,48,57,53,48,54,84,243,182,157,162,84,84,49,48,48,57,53,48,55,84,243,182,157,163,84,84,49,48,48,57,53,48,56,84,243,182,157,164,84,84,49,48,48,57,53,48,57,84,243,182,157,165,84,84,49,48,48,57,53,49,48,84,243,182,157,166,84,84,49,48,48,57,53,49,49,84,243,182,157,167,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20211 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20211_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20211_s.txt", Encoding.UTF8);

    public Test20211() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers2b6cdd6684eb4500abcaa682adc323b7",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,51,52,48,52,56,84,243,188,157,128,84,84,49,48,51,52,48,52,57,84,243,188,157,129,84,84,49,48,51,52,48,53,48,84,243,188,157,130,84,84,49,48,51,52,48,53,49,84,243,188,157,131,84,84,49,48,51,52,48,53,50,84,243,188,157,132,84,84,49,48,51,52,48,53,51,84,243,188,157,133,84,84,49,48,51,52,48,53,52,84,243,188,157,134,84,84,49,48,51,52,48,53,53,84,243,188,157,135,84,84,49,48,51,52,48,53,54,84,243,188,157,136,84,84,49,48,51,52,48,53,55,84,243,188,157,137,84,84,49,48,51,52,48,53,56,84,243,188,157,138,84,84,49,48,51,52,48,53,57,84,243,188,157,139,84,84,49,48,51,52,48,54,48,84,243,188,157,140,84,84,49,48,51,52,48,54,49,84,243,188,157,141,84,84,49,48,51,52,48,54,50,84,243,188,157,142,84,84,49,48,51,52,48,54,51,84,243,188,157,143,84,84,49,48,51,52,48,54,52,84,243,188,157,144,84,84,49,48,51,52,48,54,53,84,243,188,157,145,84,84,49,48,51,52,48,54,54,84,243,188,157,146,84,84,49,48,51,52,48,54,55,84,243,188,157,147,84,84,49,48,51,52,48,54,56,84,243,188,157,148,84,84,49,48,51,52,48,54,57,84,243,188,157,149,84,84,49,48,51,52,48,55,48,84,243,188,157,150,84,84,49,48,51,52,48,55,49,84,243,188,157,151,84,84,49,48,51,52,48,55,50,84,243,188,157,152,84,84,49,48,51,52,48,55,51,84,243,188,157,153,84,84,49,48,51,52,48,55,52,84,243,188,157,154,84,84,49,48,51,52,48,55,53,84,243,188,157,155,84,84,49,48,51,52,48,55,54,84,243,188,157,156,84,84,49,48,51,52,48,55,55,84,243,188,157,157,84,84,49,48,51,52,48,55,56,84,243,188,157,158,84,84,49,48,51,52,48,55,57,84,243,188,157,159,84,84,49,48,51,52,48,56,48,84,243,188,157,160,84,84,49,48,51,52,48,56,49,84,243,188,157,161,84,84,49,48,51,52,48,56,50,84,243,188,157,162,84,84,49,48,51,52,48,56,51,84,243,188,157,163,84,84,49,48,51,52,48,56,52,84,243,188,157,164,84,84,49,48,51,52,48,56,53,84,243,188,157,165,84,84,49,48,51,52,48,56,54,84,243,188,157,166,84,84,49,48,51,52,48,56,55,84,243,188,157,167,84,84,49,48,51,52,48,56,56,84,243,188,157,168,84,84,49,48,51,52,48,56,57,84,243,188,157,169,84,84,49,48,51,52,48,57,48,84,243,188,157,170,84,84,49,48,51,52,48,57,49,84,243,188,157,171,84,84,49,48,51,52,48,57,50,84,243,188,157,172,84,84,49,48,51,52,48,57,51,84,243,188,157,173,84,84,49,48,51,52,48,57,52,84,243,188,157,174,84,84,49,48,51,52,48,57,53,84,243,188,157,175,84,84,49,48,51,52,48,57,54,84,243,188,157,176,84,84,49,48,51,52,48,57,55,84,243,188,157,177,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20999 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20999_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20999_s.txt", Encoding.UTF8);

    public Test20999() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersd35ea9f156764511b97173ebc769448f",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,48,51,48,48,84,244,143,132,156,84,84,49,49,49,48,51,48,49,84,244,143,132,157,84,84,49,49,49,48,51,48,50,84,244,143,132,158,84,84,49,49,49,48,51,48,51,84,244,143,132,159,84,84,49,49,49,48,51,48,52,84,244,143,132,160,84,84,49,49,49,48,51,48,53,84,244,143,132,161,84,84,49,49,49,48,51,48,54,84,244,143,132,162,84,84,49,49,49,48,51,48,55,84,244,143,132,163,84,84,49,49,49,48,51,48,56,84,244,143,132,164,84,84,49,49,49,48,51,48,57,84,244,143,132,165,84,84,49,49,49,48,51,49,48,84,244,143,132,166,84,84,49,49,49,48,51,49,49,84,244,143,132,167,84,84,49,49,49,48,51,49,50,84,244,143,132,168,84,84,49,49,49,48,51,49,51,84,244,143,132,169,84,84,49,49,49,48,51,49,52,84,244,143,132,170,84,84,49,49,49,48,51,49,53,84,244,143,132,171,84,84,49,49,49,48,51,49,54,84,244,143,132,172,84,84,49,49,49,48,51,49,55,84,244,143,132,173,84,84,49,49,49,48,51,49,56,84,244,143,132,174,84,84,49,49,49,48,51,49,57,84,244,143,132,175,84,84,49,49,49,48,51,50,48,84,244,143,132,176,84,84,49,49,49,48,51,50,49,84,244,143,132,177,84,84,49,49,49,48,51,50,50,84,244,143,132,178,84,84,49,49,49,48,51,50,51,84,244,143,132,179,84,84,49,49,49,48,51,50,52,84,244,143,132,180,84,84,49,49,49,48,51,50,53,84,244,143,132,181,84,84,49,49,49,48,51,50,54,84,244,143,132,182,84,84,49,49,49,48,51,50,55,84,244,143,132,183,84,84,49,49,49,48,51,50,56,84,244,143,132,184,84,84,49,49,49,48,51,50,57,84,244,143,132,185,84,84,49,49,49,48,51,51,48,84,244,143,132,186,84,84,49,49,49,48,51,51,49,84,244,143,132,187,84,84,49,49,49,48,51,51,50,84,244,143,132,188,84,84,49,49,49,48,51,51,51,84,244,143,132,189,84,84,49,49,49,48,51,51,52,84,244,143,132,190,84,84,49,49,49,48,51,51,53,84,244,143,132,191,84,84,49,49,49,48,51,51,54,84,244,143,133,128,84,84,49,49,49,48,51,51,55,84,244,143,133,129,84,84,49,49,49,48,51,51,56,84,244,143,133,130,84,84,49,49,49,48,51,51,57,84,244,143,133,131,84,84,49,49,49,48,51,52,48,84,244,143,133,132,84,84,49,49,49,48,51,52,49,84,244,143,133,133,84,84,49,49,49,48,51,52,50,84,244,143,133,134,84,84,49,49,49,48,51,52,51,84,244,143,133,135,84,84,49,49,49,48,51,52,52,84,244,143,133,136,84,84,49,49,49,48,51,52,53,84,244,143,133,137,84,84,49,49,49,48,51,52,54,84,244,143,133,138,84,84,49,49,49,48,51,52,55,84,244,143,133,139,84,84,49,49,49,48,51,52,56,84,244,143,133,140,84,84,49,49,49,48,51,52,57,84,244,143,133,141,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21134 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21134_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21134_s.txt", Encoding.UTF8);

    public Test21134() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers56d1c908d8f44b69abe6817b1847a0f6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,51,53,48,48,84,244,143,182,156,84,84,49,49,49,51,53,48,49,84,244,143,182,157,84,84,49,49,49,51,53,48,50,84,244,143,182,158,84,84,49,49,49,51,53,48,51,84,244,143,182,159,84,84,49,49,49,51,53,48,52,84,244,143,182,160,84,84,49,49,49,51,53,48,53,84,244,143,182,161,84,84,49,49,49,51,53,48,54,84,244,143,182,162,84,84,49,49,49,51,53,48,55,84,244,143,182,163,84,84,49,49,49,51,53,48,56,84,244,143,182,164,84,84,49,49,49,51,53,48,57,84,244,143,182,165,84,84,49,49,49,51,53,49,48,84,244,143,182,166,84,84,49,49,49,51,53,49,49,84,244,143,182,167,84,84,49,49,49,51,53,49,50,84,244,143,182,168,84,84,49,49,49,51,53,49,51,84,244,143,182,169,84,84,49,49,49,51,53,49,52,84,244,143,182,170,84,84,49,49,49,51,53,49,53,84,244,143,182,171,84,84,49,49,49,51,53,49,54,84,244,143,182,172,84,84,49,49,49,51,53,49,55,84,244,143,182,173,84,84,49,49,49,51,53,49,56,84,244,143,182,174,84,84,49,49,49,51,53,49,57,84,244,143,182,175,84,84,49,49,49,51,53,50,48,84,244,143,182,176,84,84,49,49,49,51,53,50,49,84,244,143,182,177,84,84,49,49,49,51,53,50,50,84,244,143,182,178,84,84,49,49,49,51,53,50,51,84,244,143,182,179,84,84,49,49,49,51,53,50,52,84,244,143,182,180,84,84,49,49,49,51,53,50,53,84,244,143,182,181,84,84,49,49,49,51,53,50,54,84,244,143,182,182,84,84,49,49,49,51,53,50,55,84,244,143,182,183,84,84,49,49,49,51,53,50,56,84,244,143,182,184,84,84,49,49,49,51,53,50,57,84,244,143,182,185,84,84,49,49,49,51,53,51,48,84,244,143,182,186,84,84,49,49,49,51,53,51,49,84,244,143,182,187,84,84,49,49,49,51,53,51,50,84,244,143,182,188,84,84,49,49,49,51,53,51,51,84,244,143,182,189,84,84,49,49,49,51,53,51,52,84,244,143,182,190,84,84,49,49,49,51,53,51,53,84,244,143,182,191,84,84,49,49,49,51,53,51,54,84,244,143,183,128,84,84,49,49,49,51,53,51,55,84,244,143,183,129,84,84,49,49,49,51,53,51,56,84,244,143,183,130,84,84,49,49,49,51,53,51,57,84,244,143,183,131,84,84,49,49,49,51,53,52,48,84,244,143,183,132,84,84,49,49,49,51,53,52,49,84,244,143,183,133,84,84,49,49,49,51,53,52,50,84,244,143,183,134,84,84,49,49,49,51,53,52,51,84,244,143,183,135,84,84,49,49,49,51,53,52,52,84,244,143,183,136,84,84,49,49,49,51,53,52,53,84,244,143,183,137,84,84,49,49,49,51,53,52,54,84,244,143,183,138,84,84,49,49,49,51,53,52,55,84,244,143,183,139,84,84,49,49,49,51,53,52,56,84,244,143,183,140,84,84,49,49,49,51,53,52,57,84,244,143,183,141,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20376 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20376_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20376_s.txt", Encoding.UTF8);

    public Test20376() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers319eca44915441a6b60a6025f5eab2bd",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,51,56,55,56,84,244,129,146,182,84,84,49,48,53,51,56,55,57,84,244,129,146,183,84,84,49,48,53,51,56,56,48,84,244,129,146,184,84,84,49,48,53,51,56,56,49,84,244,129,146,185,84,84,49,48,53,51,56,56,50,84,244,129,146,186,84,84,49,48,53,51,56,56,51,84,244,129,146,187,84,84,49,48,53,51,56,56,52,84,244,129,146,188,84,84,49,48,53,51,56,56,53,84,244,129,146,189,84,84,49,48,53,51,56,56,54,84,244,129,146,190,84,84,49,48,53,51,56,56,55,84,244,129,146,191,84,84,49,48,53,51,56,56,56,84,244,129,147,128,84,84,49,48,53,51,56,56,57,84,244,129,147,129,84,84,49,48,53,51,56,57,48,84,244,129,147,130,84,84,49,48,53,51,56,57,49,84,244,129,147,131,84,84,49,48,53,51,56,57,50,84,244,129,147,132,84,84,49,48,53,51,56,57,51,84,244,129,147,133,84,84,49,48,53,51,56,57,52,84,244,129,147,134,84,84,49,48,53,51,56,57,53,84,244,129,147,135,84,84,49,48,53,51,56,57,54,84,244,129,147,136,84,84,49,48,53,51,56,57,55,84,244,129,147,137,84,84,49,48,53,51,56,57,56,84,244,129,147,138,84,84,49,48,53,51,56,57,57,84,244,129,147,139,84,84,49,48,53,51,57,48,48,84,244,129,147,140,84,84,49,48,53,51,57,48,49,84,244,129,147,141,84,84,49,48,53,51,57,48,50,84,244,129,147,142,84,84,49,48,53,51,57,48,51,84,244,129,147,143,84,84,49,48,53,51,57,48,52,84,244,129,147,144,84,84,49,48,53,51,57,48,53,84,244,129,147,145,84,84,49,48,53,51,57,48,54,84,244,129,147,146,84,84,49,48,53,51,57,48,55,84,244,129,147,147,84,84,49,48,53,51,57,48,56,84,244,129,147,148,84,84,49,48,53,51,57,48,57,84,244,129,147,149,84,84,49,48,53,51,57,49,48,84,244,129,147,150,84,84,49,48,53,51,57,49,49,84,244,129,147,151,84,84,49,48,53,51,57,49,50,84,244,129,147,152,84,84,49,48,53,51,57,49,51,84,244,129,147,153,84,84,49,48,53,51,57,49,52,84,244,129,147,154,84,84,49,48,53,51,57,49,53,84,244,129,147,155,84,84,49,48,53,51,57,49,54,84,244,129,147,156,84,84,49,48,53,51,57,49,55,84,244,129,147,157,84,84,49,48,53,51,57,49,56,84,244,129,147,158,84,84,49,48,53,51,57,49,57,84,244,129,147,159,84,84,49,48,53,51,57,50,48,84,244,129,147,160,84,84,49,48,53,51,57,50,49,84,244,129,147,161,84,84,49,48,53,51,57,50,50,84,244,129,147,162,84,84,49,48,53,51,57,50,51,84,244,129,147,163,84,84,49,48,53,51,57,50,52,84,244,129,147,164,84,84,49,48,53,51,57,50,53,84,244,129,147,165,84,84,49,48,53,51,57,50,54,84,244,129,147,166,84,84,49,48,53,51,57,50,55,84,244,129,147,167,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20657 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20657_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20657_s.txt", Encoding.UTF8);

    public Test20657() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers9df780a74f2549dda8f9f337dadb7946",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,56,48,57,54,49,84,244,135,186,129,84,84,49,48,56,48,57,55,51,84,244,135,186,141,84,84,49,48,56,48,57,55,53,84,244,135,186,143,84,84,49,48,56,48,57,55,54,84,244,135,186,144,84,84,49,48,56,48,57,56,57,84,244,135,186,157,84,84,49,48,56,49,48,50,53,84,244,135,187,129,84,84,49,48,56,49,48,51,55,84,244,135,187,141,84,84,49,48,56,49,48,51,57,84,244,135,187,143,84,84,49,48,56,49,48,52,48,84,244,135,187,144,84,84,49,48,56,49,48,53,51,84,244,135,187,157,84,84,49,48,56,49,48,56,57,84,244,135,188,129,84,84,49,48,56,49,49,48,49,84,244,135,188,141,84,84,49,48,56,49,49,48,51,84,244,135,188,143,84,84,49,48,56,49,49,48,52,84,244,135,188,144,84,84,49,48,56,49,49,49,55,84,244,135,188,157,84,84,49,48,56,49,49,53,51,84,244,135,189,129,84,84,49,48,56,49,49,54,53,84,244,135,189,141,84,84,49,48,56,49,49,54,55,84,244,135,189,143,84,84,49,48,56,49,49,54,56,84,244,135,189,144,84,84,49,48,56,49,49,56,49,84,244,135,189,157,84,84,49,48,56,49,50,49,55,84,244,135,190,129,84,84,49,48,56,49,50,50,57,84,244,135,190,141,84,84,49,48,56,49,50,51,49,84,244,135,190,143,84,84,49,48,56,49,50,51,50,84,244,135,190,144,84,84,49,48,56,49,50,52,53,84,244,135,190,157,84,84,49,48,56,49,50,56,49,84,244,135,191,129,84,84,49,48,56,49,50,57,51,84,244,135,191,141,84,84,49,48,56,49,50,57,53,84,244,135,191,143,84,84,49,48,56,49,50,57,54,84,244,135,191,144,84,84,49,48,56,49,51,48,57,84,244,135,191,157,84,84,49,48,56,49,51,52,53,84,244,136,128,129,84,84,49,48,56,49,51,53,55,84,244,136,128,141,84,84,49,48,56,49,51,53,57,84,244,136,128,143,84,84,49,48,56,49,51,54,48,84,244,136,128,144,84,84,49,48,56,49,51,55,51,84,244,136,128,157,84,84,49,48,56,49,52,48,56,84,244,136,129,128,84,84,49,48,56,49,52,48,57,84,244,136,129,129,84,84,49,48,56,49,52,49,48,84,244,136,129,130,84,84,49,48,56,49,52,49,49,84,244,136,129,131,84,84,49,48,56,49,52,49,50,84,244,136,129,132,84,84,49,48,56,49,52,49,51,84,244,136,129,133,84,84,49,48,56,49,52,49,52,84,244,136,129,134,84,84,49,48,56,49,52,49,53,84,244,136,129,135,84,84,49,48,56,49,52,49,54,84,244,136,129,136,84,84,49,48,56,49,52,49,55,84,244,136,129,137,84,84,49,48,56,49,52,49,56,84,244,136,129,138,84,84,49,48,56,49,52,49,57,84,244,136,129,139,84,84,49,48,56,49,52,50,48,84,244,136,129,140,84,84,49,48,56,49,52,50,49,84,244,136,129,141,84,84,49,48,56,49,52,50,50,84,244,136,129,142,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20723 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20723_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20723_s.txt", Encoding.UTF8);

    public Test20723() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers0bb7ae45edef4594997d97499d26b519",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,57,48,56,52,53,84,244,138,148,157,84,84,49,48,57,48,56,56,49,84,244,138,149,129,84,84,49,48,57,48,56,57,51,84,244,138,149,141,84,84,49,48,57,48,56,57,53,84,244,138,149,143,84,84,49,48,57,48,56,57,54,84,244,138,149,144,84,84,49,48,57,48,57,48,57,84,244,138,149,157,84,84,49,48,57,48,57,52,53,84,244,138,150,129,84,84,49,48,57,48,57,53,55,84,244,138,150,141,84,84,49,48,57,48,57,53,57,84,244,138,150,143,84,84,49,48,57,48,57,54,48,84,244,138,150,144,84,84,49,48,57,48,57,55,51,84,244,138,150,157,84,84,49,48,57,49,48,48,57,84,244,138,151,129,84,84,49,48,57,49,48,50,49,84,244,138,151,141,84,84,49,48,57,49,48,50,51,84,244,138,151,143,84,84,49,48,57,49,48,50,52,84,244,138,151,144,84,84,49,48,57,49,48,51,55,84,244,138,151,157,84,84,49,48,57,49,48,55,51,84,244,138,152,129,84,84,49,48,57,49,48,56,53,84,244,138,152,141,84,84,49,48,57,49,48,56,55,84,244,138,152,143,84,84,49,48,57,49,48,56,56,84,244,138,152,144,84,84,49,48,57,49,49,48,49,84,244,138,152,157,84,84,49,48,57,49,49,51,55,84,244,138,153,129,84,84,49,48,57,49,49,52,57,84,244,138,153,141,84,84,49,48,57,49,49,53,49,84,244,138,153,143,84,84,49,48,57,49,49,53,50,84,244,138,153,144,84,84,49,48,57,49,49,54,53,84,244,138,153,157,84,84,49,48,57,49,50,48,49,84,244,138,154,129,84,84,49,48,57,49,50,49,51,84,244,138,154,141,84,84,49,48,57,49,50,49,53,84,244,138,154,143,84,84,49,48,57,49,50,49,54,84,244,138,154,144,84,84,49,48,57,49,50,50,57,84,244,138,154,157,84,84,49,48,57,49,50,54,53,84,244,138,155,129,84,84,49,48,57,49,50,55,55,84,244,138,155,141,84,84,49,48,57,49,50,55,57,84,244,138,155,143,84,84,49,48,57,49,50,56,48,84,244,138,155,144,84,84,49,48,57,49,50,57,51,84,244,138,155,157,84,84,49,48,57,49,51,50,57,84,244,138,156,129,84,84,49,48,57,49,51,52,49,84,244,138,156,141,84,84,49,48,57,49,51,52,51,84,244,138,156,143,84,84,49,48,57,49,51,52,52,84,244,138,156,144,84,84,49,48,57,49,51,53,55,84,244,138,156,157,84,84,49,48,57,49,51,57,50,84,244,138,157,128,84,84,49,48,57,49,51,57,51,84,244,138,157,129,84,84,49,48,57,49,51,57,52,84,244,138,157,130,84,84,49,48,57,49,51,57,53,84,244,138,157,131,84,84,49,48,57,49,51,57,54,84,244,138,157,132,84,84,49,48,57,49,51,57,55,84,244,138,157,133,84,84,49,48,57,49,51,57,56,84,244,138,157,134,84,84,49,48,57,49,51,57,57,84,244,138,157,135,84,84,49,48,57,49,52,48,48,84,244,138,157,136,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20152 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20152_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20152_s.txt", Encoding.UTF8);

    public Test20152() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers4f3362aed9424bd2bfac6751ee820ab9",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,50,52,57,55,56,84,243,186,143,146,84,84,49,48,50,52,57,55,57,84,243,186,143,147,84,84,49,48,50,52,57,56,48,84,243,186,143,148,84,84,49,48,50,52,57,56,49,84,243,186,143,149,84,84,49,48,50,52,57,56,50,84,243,186,143,150,84,84,49,48,50,52,57,56,51,84,243,186,143,151,84,84,49,48,50,52,57,56,52,84,243,186,143,152,84,84,49,48,50,52,57,56,53,84,243,186,143,153,84,84,49,48,50,52,57,56,54,84,243,186,143,154,84,84,49,48,50,52,57,56,55,84,243,186,143,155,84,84,49,48,50,52,57,56,56,84,243,186,143,156,84,84,49,48,50,52,57,56,57,84,243,186,143,157,84,84,49,48,50,52,57,57,48,84,243,186,143,158,84,84,49,48,50,52,57,57,49,84,243,186,143,159,84,84,49,48,50,52,57,57,50,84,243,186,143,160,84,84,49,48,50,52,57,57,51,84,243,186,143,161,84,84,49,48,50,52,57,57,52,84,243,186,143,162,84,84,49,48,50,52,57,57,53,84,243,186,143,163,84,84,49,48,50,52,57,57,54,84,243,186,143,164,84,84,49,48,50,52,57,57,55,84,243,186,143,165,84,84,49,48,50,52,57,57,56,84,243,186,143,166,84,84,49,48,50,52,57,57,57,84,243,186,143,167,84,84,49,48,50,53,48,48,48,84,243,186,143,168,84,84,49,48,50,53,48,48,49,84,243,186,143,169,84,84,49,48,50,53,48,48,50,84,243,186,143,170,84,84,49,48,50,53,48,48,51,84,243,186,143,171,84,84,49,48,50,53,48,48,52,84,243,186,143,172,84,84,49,48,50,53,48,48,53,84,243,186,143,173,84,84,49,48,50,53,48,48,54,84,243,186,143,174,84,84,49,48,50,53,48,48,55,84,243,186,143,175,84,84,49,48,50,53,48,48,56,84,243,186,143,176,84,84,49,48,50,53,48,48,57,84,243,186,143,177,84,84,49,48,50,53,48,49,48,84,243,186,143,178,84,84,49,48,50,53,48,49,49,84,243,186,143,179,84,84,49,48,50,53,48,49,50,84,243,186,143,180,84,84,49,48,50,53,48,49,51,84,243,186,143,181,84,84,49,48,50,53,48,49,52,84,243,186,143,182,84,84,49,48,50,53,48,49,53,84,243,186,143,183,84,84,49,48,50,53,48,49,54,84,243,186,143,184,84,84,49,48,50,53,48,49,55,84,243,186,143,185,84,84,49,48,50,53,48,49,56,84,243,186,143,186,84,84,49,48,50,53,48,49,57,84,243,186,143,187,84,84,49,48,50,53,48,50,48,84,243,186,143,188,84,84,49,48,50,53,48,50,49,84,243,186,143,189,84,84,49,48,50,53,48,50,50,84,243,186,143,190,84,84,49,48,50,53,48,50,51,84,243,186,143,191,84,84,49,48,50,53,48,50,52,84,243,186,144,128,84,84,49,48,50,53,48,50,53,84,243,186,144,129,84,84,49,48,50,53,48,50,54,84,243,186,144,130,84,84,49,48,50,53,48,50,55,84,243,186,144,131,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20937 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20937_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20937_s.txt", Encoding.UTF8);

    public Test20937() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers9e891393b2624599aedf317812121dcf",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,53,51,54,57,84,244,141,183,153,84,84,49,49,48,53,51,55,48,84,244,141,183,154,84,84,49,49,48,53,51,55,49,84,244,141,183,155,84,84,49,49,48,53,51,55,50,84,244,141,183,156,84,84,49,49,48,53,51,55,51,84,244,141,183,157,84,84,49,49,48,53,51,55,52,84,244,141,183,158,84,84,49,49,48,53,51,55,53,84,244,141,183,159,84,84,49,49,48,53,51,55,54,84,244,141,183,160,84,84,49,49,48,53,51,55,55,84,244,141,183,161,84,84,49,49,48,53,51,55,56,84,244,141,183,162,84,84,49,49,48,53,51,55,57,84,244,141,183,163,84,84,49,49,48,53,51,56,48,84,244,141,183,164,84,84,49,49,48,53,51,56,49,84,244,141,183,165,84,84,49,49,48,53,51,56,50,84,244,141,183,166,84,84,49,49,48,53,51,56,51,84,244,141,183,167,84,84,49,49,48,53,51,56,52,84,244,141,183,168,84,84,49,49,48,53,51,56,53,84,244,141,183,169,84,84,49,49,48,53,51,56,54,84,244,141,183,170,84,84,49,49,48,53,51,56,55,84,244,141,183,171,84,84,49,49,48,53,51,56,56,84,244,141,183,172,84,84,49,49,48,53,51,56,57,84,244,141,183,173,84,84,49,49,48,53,51,57,48,84,244,141,183,174,84,84,49,49,48,53,51,57,49,84,244,141,183,175,84,84,49,49,48,53,51,57,50,84,244,141,183,176,84,84,49,49,48,53,51,57,51,84,244,141,183,177,84,84,49,49,48,53,51,57,52,84,244,141,183,178,84,84,49,49,48,53,51,57,53,84,244,141,183,179,84,84,49,49,48,53,51,57,54,84,244,141,183,180,84,84,49,49,48,53,51,57,55,84,244,141,183,181,84,84,49,49,48,53,51,57,56,84,244,141,183,182,84,84,49,49,48,53,51,57,57,84,244,141,183,183,84,84,49,49,48,53,52,48,48,84,244,141,183,184,84,84,49,49,48,53,52,48,49,84,244,141,183,185,84,84,49,49,48,53,52,48,50,84,244,141,183,186,84,84,49,49,48,53,52,48,51,84,244,141,183,187,84,84,49,49,48,53,52,48,52,84,244,141,183,188,84,84,49,49,48,53,52,48,53,84,244,141,183,189,84,84,49,49,48,53,52,48,54,84,244,141,183,190,84,84,49,49,48,53,52,48,55,84,244,141,183,191,84,84,49,49,48,53,52,48,56,84,244,141,184,128,84,84,49,49,48,53,52,48,57,84,244,141,184,129,84,84,49,49,48,53,52,49,48,84,244,141,184,130,84,84,49,49,48,53,52,49,49,84,244,141,184,131,84,84,49,49,48,53,52,49,50,84,244,141,184,132,84,84,49,49,48,53,52,49,51,84,244,141,184,133,84,84,49,49,48,53,52,49,52,84,244,141,184,134,84,84,49,49,48,53,52,49,53,84,244,141,184,135,84,84,49,49,48,53,52,49,54,84,244,141,184,136,84,84,49,49,48,53,52,49,55,84,244,141,184,137,84,84,49,49,48,53,52,49,56,84,244,141,184,138,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19862 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19862_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19862_s.txt", Encoding.UTF8);

    public Test19862() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers7032abc4111d4702bce9d36696a0a648",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,49,56,51,51,56,84,243,160,141,130,84,84,57,49,56,51,51,57,84,243,160,141,131,84,84,57,49,56,51,52,48,84,243,160,141,132,84,84,57,49,56,51,52,49,84,243,160,141,133,84,84,57,49,56,51,52,50,84,243,160,141,134,84,84,57,49,56,51,52,51,84,243,160,141,135,84,84,57,49,56,51,52,52,84,243,160,141,136,84,84,57,49,56,51,52,53,84,243,160,141,137,84,84,57,49,56,51,52,54,84,243,160,141,138,84,84,57,49,56,51,52,55,84,243,160,141,139,84,84,57,49,56,51,52,56,84,243,160,141,140,84,84,57,49,56,51,52,57,84,243,160,141,141,84,84,57,49,56,51,53,48,84,243,160,141,142,84,84,57,49,56,51,53,49,84,243,160,141,143,84,84,57,49,56,51,53,50,84,243,160,141,144,84,84,57,49,56,51,53,51,84,243,160,141,145,84,84,57,49,56,51,53,52,84,243,160,141,146,84,84,57,49,56,51,53,53,84,243,160,141,147,84,84,57,49,56,51,53,54,84,243,160,141,148,84,84,57,49,56,51,53,55,84,243,160,141,149,84,84,57,49,56,51,53,56,84,243,160,141,150,84,84,57,49,56,51,53,57,84,243,160,141,151,84,84,57,49,56,51,54,48,84,243,160,141,152,84,84,57,49,56,51,54,49,84,243,160,141,153,84,84,57,49,56,51,54,50,84,243,160,141,154,84,84,57,49,56,51,54,51,84,243,160,141,155,84,84,57,49,56,51,54,52,84,243,160,141,156,84,84,57,49,56,51,54,53,84,243,160,141,157,84,84,57,49,56,51,54,54,84,243,160,141,158,84,84,57,49,56,51,54,55,84,243,160,141,159,84,84,57,49,56,51,54,56,84,243,160,141,160,84,84,57,49,56,51,54,57,84,243,160,141,161,84,84,57,49,56,51,55,48,84,243,160,141,162,84,84,57,49,56,51,55,49,84,243,160,141,163,84,84,57,49,56,51,55,50,84,243,160,141,164,84,84,57,49,56,51,55,51,84,243,160,141,165,84,84,57,49,56,51,55,52,84,243,160,141,166,84,84,57,49,56,51,55,53,84,243,160,141,167,84,84,57,49,56,51,55,54,84,243,160,141,168,84,84,57,49,56,51,55,55,84,243,160,141,169,84,84,57,49,56,51,55,56,84,243,160,141,170,84,84,57,49,56,51,55,57,84,243,160,141,171,84,84,57,49,56,51,56,48,84,243,160,141,172,84,84,57,49,56,51,56,49,84,243,160,141,173,84,84,57,49,56,51,56,50,84,243,160,141,174,84,84,57,49,56,51,56,51,84,243,160,141,175,84,84,57,49,56,51,56,52,84,243,160,141,176,84,84,57,49,56,51,56,53,84,243,160,141,177,84,84,57,49,56,51,56,54,84,243,160,141,178,84,84,57,49,56,51,56,55,84,243,160,141,179,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20884 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20884_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20884_s.txt", Encoding.UTF8);

    public Test20884() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersdd41d3a5bb7f42709f7cec587f1a204a",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,52,49,49,57,84,244,141,163,183,84,84,49,49,48,52,49,50,48,84,244,141,163,184,84,84,49,49,48,52,49,50,49,84,244,141,163,185,84,84,49,49,48,52,49,50,50,84,244,141,163,186,84,84,49,49,48,52,49,50,51,84,244,141,163,187,84,84,49,49,48,52,49,50,52,84,244,141,163,188,84,84,49,49,48,52,49,50,53,84,244,141,163,189,84,84,49,49,48,52,49,50,54,84,244,141,163,190,84,84,49,49,48,52,49,50,55,84,244,141,163,191,84,84,49,49,48,52,49,50,56,84,244,141,164,128,84,84,49,49,48,52,49,50,57,84,244,141,164,129,84,84,49,49,48,52,49,51,48,84,244,141,164,130,84,84,49,49,48,52,49,51,49,84,244,141,164,131,84,84,49,49,48,52,49,51,50,84,244,141,164,132,84,84,49,49,48,52,49,51,51,84,244,141,164,133,84,84,49,49,48,52,49,51,52,84,244,141,164,134,84,84,49,49,48,52,49,51,53,84,244,141,164,135,84,84,49,49,48,52,49,51,54,84,244,141,164,136,84,84,49,49,48,52,49,51,55,84,244,141,164,137,84,84,49,49,48,52,49,51,56,84,244,141,164,138,84,84,49,49,48,52,49,51,57,84,244,141,164,139,84,84,49,49,48,52,49,52,48,84,244,141,164,140,84,84,49,49,48,52,49,52,49,84,244,141,164,141,84,84,49,49,48,52,49,52,50,84,244,141,164,142,84,84,49,49,48,52,49,52,51,84,244,141,164,143,84,84,49,49,48,52,49,52,52,84,244,141,164,144,84,84,49,49,48,52,49,52,53,84,244,141,164,145,84,84,49,49,48,52,49,52,54,84,244,141,164,146,84,84,49,49,48,52,49,52,55,84,244,141,164,147,84,84,49,49,48,52,49,52,56,84,244,141,164,148,84,84,49,49,48,52,49,52,57,84,244,141,164,149,84,84,49,49,48,52,49,53,48,84,244,141,164,150,84,84,49,49,48,52,49,53,49,84,244,141,164,151,84,84,49,49,48,52,49,53,50,84,244,141,164,152,84,84,49,49,48,52,49,53,51,84,244,141,164,153,84,84,49,49,48,52,49,53,52,84,244,141,164,154,84,84,49,49,48,52,49,53,53,84,244,141,164,155,84,84,49,49,48,52,49,53,54,84,244,141,164,156,84,84,49,49,48,52,49,53,55,84,244,141,164,157,84,84,49,49,48,52,49,53,56,84,244,141,164,158,84,84,49,49,48,52,49,53,57,84,244,141,164,159,84,84,49,49,48,52,49,54,48,84,244,141,164,160,84,84,49,49,48,52,49,54,49,84,244,141,164,161,84,84,49,49,48,52,49,54,50,84,244,141,164,162,84,84,49,49,48,52,49,54,51,84,244,141,164,163,84,84,49,49,48,52,49,54,52,84,244,141,164,164,84,84,49,49,48,52,49,54,53,84,244,141,164,165,84,84,49,49,48,52,49,54,54,84,244,141,164,166,84,84,49,49,48,52,49,54,55,84,244,141,164,167,84,84,49,49,48,52,49,54,56,84,244,141,164,168,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21076 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21076_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21076_s.txt", Encoding.UTF8);

    public Test21076() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers79aa3dd90e344ebe9466f3cb0c56378a",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,50,49,48,48,84,244,143,160,164,84,84,49,49,49,50,49,48,49,84,244,143,160,165,84,84,49,49,49,50,49,48,50,84,244,143,160,166,84,84,49,49,49,50,49,48,51,84,244,143,160,167,84,84,49,49,49,50,49,48,52,84,244,143,160,168,84,84,49,49,49,50,49,48,53,84,244,143,160,169,84,84,49,49,49,50,49,48,54,84,244,143,160,170,84,84,49,49,49,50,49,48,55,84,244,143,160,171,84,84,49,49,49,50,49,48,56,84,244,143,160,172,84,84,49,49,49,50,49,48,57,84,244,143,160,173,84,84,49,49,49,50,49,49,48,84,244,143,160,174,84,84,49,49,49,50,49,49,49,84,244,143,160,175,84,84,49,49,49,50,49,49,50,84,244,143,160,176,84,84,49,49,49,50,49,49,51,84,244,143,160,177,84,84,49,49,49,50,49,49,52,84,244,143,160,178,84,84,49,49,49,50,49,49,53,84,244,143,160,179,84,84,49,49,49,50,49,49,54,84,244,143,160,180,84,84,49,49,49,50,49,49,55,84,244,143,160,181,84,84,49,49,49,50,49,49,56,84,244,143,160,182,84,84,49,49,49,50,49,49,57,84,244,143,160,183,84,84,49,49,49,50,49,50,48,84,244,143,160,184,84,84,49,49,49,50,49,50,49,84,244,143,160,185,84,84,49,49,49,50,49,50,50,84,244,143,160,186,84,84,49,49,49,50,49,50,51,84,244,143,160,187,84,84,49,49,49,50,49,50,52,84,244,143,160,188,84,84,49,49,49,50,49,50,53,84,244,143,160,189,84,84,49,49,49,50,49,50,54,84,244,143,160,190,84,84,49,49,49,50,49,50,55,84,244,143,160,191,84,84,49,49,49,50,49,50,56,84,244,143,161,128,84,84,49,49,49,50,49,50,57,84,244,143,161,129,84,84,49,49,49,50,49,51,48,84,244,143,161,130,84,84,49,49,49,50,49,51,49,84,244,143,161,131,84,84,49,49,49,50,49,51,50,84,244,143,161,132,84,84,49,49,49,50,49,51,51,84,244,143,161,133,84,84,49,49,49,50,49,51,52,84,244,143,161,134,84,84,49,49,49,50,49,51,53,84,244,143,161,135,84,84,49,49,49,50,49,51,54,84,244,143,161,136,84,84,49,49,49,50,49,51,55,84,244,143,161,137,84,84,49,49,49,50,49,51,56,84,244,143,161,138,84,84,49,49,49,50,49,51,57,84,244,143,161,139,84,84,49,49,49,50,49,52,48,84,244,143,161,140,84,84,49,49,49,50,49,52,49,84,244,143,161,141,84,84,49,49,49,50,49,52,50,84,244,143,161,142,84,84,49,49,49,50,49,52,51,84,244,143,161,143,84,84,49,49,49,50,49,52,52,84,244,143,161,144,84,84,49,49,49,50,49,52,53,84,244,143,161,145,84,84,49,49,49,50,49,52,54,84,244,143,161,146,84,84,49,49,49,50,49,52,55,84,244,143,161,147,84,84,49,49,49,50,49,52,56,84,244,143,161,148,84,84,49,49,49,50,49,52,57,84,244,143,161,149,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21136 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21136_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21136_s.txt", Encoding.UTF8);

    public Test21136() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers56d1c908d8f44b69abe6817b1847a0f6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,51,53,53,48,84,244,143,183,142,84,84,49,49,49,51,53,53,49,84,244,143,183,143,84,84,49,49,49,51,53,53,50,84,244,143,183,144,84,84,49,49,49,51,53,53,51,84,244,143,183,145,84,84,49,49,49,51,53,53,52,84,244,143,183,146,84,84,49,49,49,51,53,53,53,84,244,143,183,147,84,84,49,49,49,51,53,53,54,84,244,143,183,148,84,84,49,49,49,51,53,53,55,84,244,143,183,149,84,84,49,49,49,51,53,53,56,84,244,143,183,150,84,84,49,49,49,51,53,53,57,84,244,143,183,151,84,84,49,49,49,51,53,54,48,84,244,143,183,152,84,84,49,49,49,51,53,54,49,84,244,143,183,153,84,84,49,49,49,51,53,54,50,84,244,143,183,154,84,84,49,49,49,51,53,54,51,84,244,143,183,155,84,84,49,49,49,51,53,54,52,84,244,143,183,156,84,84,49,49,49,51,53,54,53,84,244,143,183,157,84,84,49,49,49,51,53,54,54,84,244,143,183,158,84,84,49,49,49,51,53,54,55,84,244,143,183,159,84,84,49,49,49,51,53,54,56,84,244,143,183,160,84,84,49,49,49,51,53,54,57,84,244,143,183,161,84,84,49,49,49,51,53,55,48,84,244,143,183,162,84,84,49,49,49,51,53,55,49,84,244,143,183,163,84,84,49,49,49,51,53,55,50,84,244,143,183,164,84,84,49,49,49,51,53,55,51,84,244,143,183,165,84,84,49,49,49,51,53,55,52,84,244,143,183,166,84,84,49,49,49,51,53,55,53,84,244,143,183,167,84,84,49,49,49,51,53,55,54,84,244,143,183,168,84,84,49,49,49,51,53,55,55,84,244,143,183,169,84,84,49,49,49,51,53,55,56,84,244,143,183,170,84,84,49,49,49,51,53,55,57,84,244,143,183,171,84,84,49,49,49,51,53,56,48,84,244,143,183,172,84,84,49,49,49,51,53,56,49,84,244,143,183,173,84,84,49,49,49,51,53,56,50,84,244,143,183,174,84,84,49,49,49,51,53,56,51,84,244,143,183,175,84,84,49,49,49,51,53,56,52,84,244,143,183,176,84,84,49,49,49,51,53,56,53,84,244,143,183,177,84,84,49,49,49,51,53,56,54,84,244,143,183,178,84,84,49,49,49,51,53,56,55,84,244,143,183,179,84,84,49,49,49,51,53,56,56,84,244,143,183,180,84,84,49,49,49,51,53,56,57,84,244,143,183,181,84,84,49,49,49,51,53,57,48,84,244,143,183,182,84,84,49,49,49,51,53,57,49,84,244,143,183,183,84,84,49,49,49,51,53,57,50,84,244,143,183,184,84,84,49,49,49,51,53,57,51,84,244,143,183,185,84,84,49,49,49,51,53,57,52,84,244,143,183,186,84,84,49,49,49,51,53,57,53,84,244,143,183,187,84,84,49,49,49,51,53,57,54,84,244,143,183,188,84,84,49,49,49,51,53,57,55,84,244,143,183,189,84,84,49,49,49,51,53,57,56,84,244,143,183,190,84,84,49,49,49,51,53,57,57,84,244,143,183,191,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20213 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20213_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20213_s.txt", Encoding.UTF8);

    public Test20213() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers2b6cdd6684eb4500abcaa682adc323b7",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,51,52,48,57,56,84,243,188,157,178,84,84,49,48,51,52,48,57,57,84,243,188,157,179,84,84,49,48,51,52,49,48,48,84,243,188,157,180,84,84,49,48,51,52,49,48,49,84,243,188,157,181,84,84,49,48,51,52,49,48,50,84,243,188,157,182,84,84,49,48,51,52,49,48,51,84,243,188,157,183,84,84,49,48,51,52,49,48,52,84,243,188,157,184,84,84,49,48,51,52,49,48,53,84,243,188,157,185,84,84,49,48,51,52,49,48,54,84,243,188,157,186,84,84,49,48,51,52,49,48,55,84,243,188,157,187,84,84,49,48,51,52,49,48,56,84,243,188,157,188,84,84,49,48,51,52,49,48,57,84,243,188,157,189,84,84,49,48,51,52,49,49,48,84,243,188,157,190,84,84,49,48,51,52,49,49,49,84,243,188,157,191,84,84,49,48,51,52,49,49,51,84,243,188,158,129,84,84,49,48,51,52,49,50,53,84,243,188,158,141,84,84,49,48,51,52,49,50,55,84,243,188,158,143,84,84,49,48,51,52,49,50,56,84,243,188,158,144,84,84,49,48,51,52,49,52,49,84,243,188,158,157,84,84,49,48,51,52,49,55,55,84,243,188,159,129,84,84,49,48,51,52,49,56,57,84,243,188,159,141,84,84,49,48,51,52,49,57,49,84,243,188,159,143,84,84,49,48,51,52,49,57,50,84,243,188,159,144,84,84,49,48,51,52,50,48,53,84,243,188,159,157,84,84,49,48,51,52,50,52,49,84,243,188,160,129,84,84,49,48,51,52,50,53,51,84,243,188,160,141,84,84,49,48,51,52,50,53,53,84,243,188,160,143,84,84,49,48,51,52,50,53,54,84,243,188,160,144,84,84,49,48,51,52,50,54,57,84,243,188,160,157,84,84,49,48,51,52,51,48,53,84,243,188,161,129,84,84,49,48,51,52,51,49,55,84,243,188,161,141,84,84,49,48,51,52,51,49,57,84,243,188,161,143,84,84,49,48,51,52,51,50,48,84,243,188,161,144,84,84,49,48,51,52,51,51,51,84,243,188,161,157,84,84,49,48,51,52,51,54,57,84,243,188,162,129,84,84,49,48,51,52,51,56,49,84,243,188,162,141,84,84,49,48,51,52,51,56,51,84,243,188,162,143,84,84,49,48,51,52,51,56,52,84,243,188,162,144,84,84,49,48,51,52,51,57,55,84,243,188,162,157,84,84,49,48,51,52,52,51,51,84,243,188,163,129,84,84,49,48,51,52,52,52,53,84,243,188,163,141,84,84,49,48,51,52,52,52,55,84,243,188,163,143,84,84,49,48,51,52,52,52,56,84,243,188,163,144,84,84,49,48,51,52,52,54,49,84,243,188,163,157,84,84,49,48,51,52,52,57,55,84,243,188,164,129,84,84,49,48,51,52,53,48,57,84,243,188,164,141,84,84,49,48,51,52,53,49,49,84,243,188,164,143,84,84,49,48,51,52,53,49,50,84,243,188,164,144,84,84,49,48,51,52,53,50,53,84,243,188,164,157,84,84,49,48,51,52,53,54,49,84,243,188,165,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20378 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20378_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20378_s.txt", Encoding.UTF8);

    public Test20378() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers319eca44915441a6b60a6025f5eab2bd",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,51,57,50,56,84,244,129,147,168,84,84,49,48,53,51,57,50,57,84,244,129,147,169,84,84,49,48,53,51,57,51,48,84,244,129,147,170,84,84,49,48,53,51,57,51,49,84,244,129,147,171,84,84,49,48,53,51,57,51,50,84,244,129,147,172,84,84,49,48,53,51,57,51,51,84,244,129,147,173,84,84,49,48,53,51,57,51,52,84,244,129,147,174,84,84,49,48,53,51,57,51,53,84,244,129,147,175,84,84,49,48,53,51,57,51,54,84,244,129,147,176,84,84,49,48,53,51,57,51,55,84,244,129,147,177,84,84,49,48,53,51,57,51,56,84,244,129,147,178,84,84,49,48,53,51,57,51,57,84,244,129,147,179,84,84,49,48,53,51,57,52,48,84,244,129,147,180,84,84,49,48,53,51,57,52,49,84,244,129,147,181,84,84,49,48,53,51,57,52,50,84,244,129,147,182,84,84,49,48,53,51,57,52,51,84,244,129,147,183,84,84,49,48,53,51,57,52,52,84,244,129,147,184,84,84,49,48,53,51,57,52,53,84,244,129,147,185,84,84,49,48,53,51,57,52,54,84,244,129,147,186,84,84,49,48,53,51,57,52,55,84,244,129,147,187,84,84,49,48,53,51,57,52,56,84,244,129,147,188,84,84,49,48,53,51,57,52,57,84,244,129,147,189,84,84,49,48,53,51,57,53,48,84,244,129,147,190,84,84,49,48,53,51,57,53,49,84,244,129,147,191,84,84,49,48,53,51,57,53,50,84,244,129,148,128,84,84,49,48,53,51,57,53,51,84,244,129,148,129,84,84,49,48,53,51,57,53,52,84,244,129,148,130,84,84,49,48,53,51,57,53,53,84,244,129,148,131,84,84,49,48,53,51,57,53,54,84,244,129,148,132,84,84,49,48,53,51,57,53,55,84,244,129,148,133,84,84,49,48,53,51,57,53,56,84,244,129,148,134,84,84,49,48,53,51,57,53,57,84,244,129,148,135,84,84,49,48,53,51,57,54,48,84,244,129,148,136,84,84,49,48,53,51,57,54,49,84,244,129,148,137,84,84,49,48,53,51,57,54,50,84,244,129,148,138,84,84,49,48,53,51,57,54,51,84,244,129,148,139,84,84,49,48,53,51,57,54,52,84,244,129,148,140,84,84,49,48,53,51,57,54,53,84,244,129,148,141,84,84,49,48,53,51,57,54,54,84,244,129,148,142,84,84,49,48,53,51,57,54,55,84,244,129,148,143,84,84,49,48,53,51,57,54,56,84,244,129,148,144,84,84,49,48,53,51,57,54,57,84,244,129,148,145,84,84,49,48,53,51,57,55,48,84,244,129,148,146,84,84,49,48,53,51,57,55,49,84,244,129,148,147,84,84,49,48,53,51,57,55,50,84,244,129,148,148,84,84,49,48,53,51,57,55,51,84,244,129,148,149,84,84,49,48,53,51,57,55,52,84,244,129,148,150,84,84,49,48,53,51,57,55,53,84,244,129,148,151,84,84,49,48,53,51,57,55,54,84,244,129,148,152,84,84,49,48,53,51,57,55,55,84,244,129,148,153,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19991 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19991_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19991_s.txt", Encoding.UTF8);

    public Test19991() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersc5d3e7c5509046d2aa3f8bb095571b82",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,57,57,57,53,49,84,243,180,136,143,84,84,57,57,57,57,53,50,84,243,180,136,144,84,84,57,57,57,57,54,53,84,243,180,136,157,84,84,49,48,48,48,48,48,49,84,243,180,137,129,84,84,49,48,48,48,48,49,51,84,243,180,137,141,84,84,49,48,48,48,48,49,53,84,243,180,137,143,84,84,49,48,48,48,48,49,54,84,243,180,137,144,84,84,49,48,48,48,48,50,57,84,243,180,137,157,84,84,49,48,48,48,48,54,53,84,243,180,138,129,84,84,49,48,48,48,48,55,55,84,243,180,138,141,84,84,49,48,48,48,48,55,57,84,243,180,138,143,84,84,49,48,48,48,48,56,48,84,243,180,138,144,84,84,49,48,48,48,48,57,51,84,243,180,138,157,84,84,49,48,48,48,49,50,57,84,243,180,139,129,84,84,49,48,48,48,49,52,49,84,243,180,139,141,84,84,49,48,48,48,49,52,51,84,243,180,139,143,84,84,49,48,48,48,49,52,52,84,243,180,139,144,84,84,49,48,48,48,49,53,55,84,243,180,139,157,84,84,49,48,48,48,49,57,51,84,243,180,140,129,84,84,49,48,48,48,50,48,53,84,243,180,140,141,84,84,49,48,48,48,50,48,55,84,243,180,140,143,84,84,49,48,48,48,50,48,56,84,243,180,140,144,84,84,49,48,48,48,50,50,49,84,243,180,140,157,84,84,49,48,48,48,50,53,54,84,243,180,141,128,84,84,49,48,48,48,50,53,55,84,243,180,141,129,84,84,49,48,48,48,50,53,56,84,243,180,141,130,84,84,49,48,48,48,50,53,57,84,243,180,141,131,84,84,49,48,48,48,50,54,48,84,243,180,141,132,84,84,49,48,48,48,50,54,49,84,243,180,141,133,84,84,49,48,48,48,50,54,50,84,243,180,141,134,84,84,49,48,48,48,50,54,51,84,243,180,141,135,84,84,49,48,48,48,50,54,52,84,243,180,141,136,84,84,49,48,48,48,50,54,53,84,243,180,141,137,84,84,49,48,48,48,50,54,54,84,243,180,141,138,84,84,49,48,48,48,50,54,55,84,243,180,141,139,84,84,49,48,48,48,50,54,56,84,243,180,141,140,84,84,49,48,48,48,50,54,57,84,243,180,141,141,84,84,49,48,48,48,50,55,48,84,243,180,141,142,84,84,49,48,48,48,50,55,49,84,243,180,141,143,84,84,49,48,48,48,50,55,50,84,243,180,141,144,84,84,49,48,48,48,50,55,51,84,243,180,141,145,84,84,49,48,48,48,50,55,52,84,243,180,141,146,84,84,49,48,48,48,50,55,53,84,243,180,141,147,84,84,49,48,48,48,50,55,54,84,243,180,141,148,84,84,49,48,48,48,50,55,55,84,243,180,141,149,84,84,49,48,48,48,50,55,56,84,243,180,141,150,84,84,49,48,48,48,50,55,57,84,243,180,141,151,84,84,49,48,48,48,50,56,48,84,243,180,141,152,84,84,49,48,48,48,50,56,49,84,243,180,141,153,84,84,49,48,48,48,50,56,50,84,243,180,141,154,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20725 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20725_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20725_s.txt", Encoding.UTF8);

    public Test20725() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers0bb7ae45edef4594997d97499d26b519",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,57,49,52,48,49,84,244,138,157,137,84,84,49,48,57,49,52,48,50,84,244,138,157,138,84,84,49,48,57,49,52,48,51,84,244,138,157,139,84,84,49,48,57,49,52,48,52,84,244,138,157,140,84,84,49,48,57,49,52,48,53,84,244,138,157,141,84,84,49,48,57,49,52,48,54,84,244,138,157,142,84,84,49,48,57,49,52,48,55,84,244,138,157,143,84,84,49,48,57,49,52,48,56,84,244,138,157,144,84,84,49,48,57,49,52,48,57,84,244,138,157,145,84,84,49,48,57,49,52,49,48,84,244,138,157,146,84,84,49,48,57,49,52,49,49,84,244,138,157,147,84,84,49,48,57,49,52,49,50,84,244,138,157,148,84,84,49,48,57,49,52,49,51,84,244,138,157,149,84,84,49,48,57,49,52,49,52,84,244,138,157,150,84,84,49,48,57,49,52,49,53,84,244,138,157,151,84,84,49,48,57,49,52,49,54,84,244,138,157,152,84,84,49,48,57,49,52,49,55,84,244,138,157,153,84,84,49,48,57,49,52,49,56,84,244,138,157,154,84,84,49,48,57,49,52,49,57,84,244,138,157,155,84,84,49,48,57,49,52,50,48,84,244,138,157,156,84,84,49,48,57,49,52,50,49,84,244,138,157,157,84,84,49,48,57,49,52,50,50,84,244,138,157,158,84,84,49,48,57,49,52,50,51,84,244,138,157,159,84,84,49,48,57,49,52,50,52,84,244,138,157,160,84,84,49,48,57,49,52,50,53,84,244,138,157,161,84,84,49,48,57,49,52,50,54,84,244,138,157,162,84,84,49,48,57,49,52,50,55,84,244,138,157,163,84,84,49,48,57,49,52,50,56,84,244,138,157,164,84,84,49,48,57,49,52,50,57,84,244,138,157,165,84,84,49,48,57,49,52,51,48,84,244,138,157,166,84,84,49,48,57,49,52,51,49,84,244,138,157,167,84,84,49,48,57,49,52,51,50,84,244,138,157,168,84,84,49,48,57,49,52,51,51,84,244,138,157,169,84,84,49,48,57,49,52,51,52,84,244,138,157,170,84,84,49,48,57,49,52,51,53,84,244,138,157,171,84,84,49,48,57,49,52,51,54,84,244,138,157,172,84,84,49,48,57,49,52,51,55,84,244,138,157,173,84,84,49,48,57,49,52,51,56,84,244,138,157,174,84,84,49,48,57,49,52,51,57,84,244,138,157,175,84,84,49,48,57,49,52,52,48,84,244,138,157,176,84,84,49,48,57,49,52,52,49,84,244,138,157,177,84,84,49,48,57,49,52,52,50,84,244,138,157,178,84,84,49,48,57,49,52,52,51,84,244,138,157,179,84,84,49,48,57,49,52,52,52,84,244,138,157,180,84,84,49,48,57,49,52,52,53,84,244,138,157,181,84,84,49,48,57,49,52,52,54,84,244,138,157,182,84,84,49,48,57,49,52,52,55,84,244,138,157,183,84,84,49,48,57,49,52,52,56,84,244,138,157,184,84,84,49,48,57,49,52,52,57,84,244,138,157,185,84,84,49,48,57,49,52,53,48,84,244,138,157,186,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21001 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21001_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21001_s.txt", Encoding.UTF8);

    public Test21001() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersd35ea9f156764511b97173ebc769448f",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,48,51,53,48,84,244,143,133,142,84,84,49,49,49,48,51,53,49,84,244,143,133,143,84,84,49,49,49,48,51,53,50,84,244,143,133,144,84,84,49,49,49,48,51,53,51,84,244,143,133,145,84,84,49,49,49,48,51,53,52,84,244,143,133,146,84,84,49,49,49,48,51,53,53,84,244,143,133,147,84,84,49,49,49,48,51,53,54,84,244,143,133,148,84,84,49,49,49,48,51,53,55,84,244,143,133,149,84,84,49,49,49,48,51,53,56,84,244,143,133,150,84,84,49,49,49,48,51,53,57,84,244,143,133,151,84,84,49,49,49,48,51,54,48,84,244,143,133,152,84,84,49,49,49,48,51,54,49,84,244,143,133,153,84,84,49,49,49,48,51,54,50,84,244,143,133,154,84,84,49,49,49,48,51,54,51,84,244,143,133,155,84,84,49,49,49,48,51,54,52,84,244,143,133,156,84,84,49,49,49,48,51,54,53,84,244,143,133,157,84,84,49,49,49,48,51,54,54,84,244,143,133,158,84,84,49,49,49,48,51,54,55,84,244,143,133,159,84,84,49,49,49,48,51,54,56,84,244,143,133,160,84,84,49,49,49,48,51,54,57,84,244,143,133,161,84,84,49,49,49,48,51,55,48,84,244,143,133,162,84,84,49,49,49,48,51,55,49,84,244,143,133,163,84,84,49,49,49,48,51,55,50,84,244,143,133,164,84,84,49,49,49,48,51,55,51,84,244,143,133,165,84,84,49,49,49,48,51,55,52,84,244,143,133,166,84,84,49,49,49,48,51,55,53,84,244,143,133,167,84,84,49,49,49,48,51,55,54,84,244,143,133,168,84,84,49,49,49,48,51,55,55,84,244,143,133,169,84,84,49,49,49,48,51,55,56,84,244,143,133,170,84,84,49,49,49,48,51,55,57,84,244,143,133,171,84,84,49,49,49,48,51,56,48,84,244,143,133,172,84,84,49,49,49,48,51,56,49,84,244,143,133,173,84,84,49,49,49,48,51,56,50,84,244,143,133,174,84,84,49,49,49,48,51,56,51,84,244,143,133,175,84,84,49,49,49,48,51,56,52,84,244,143,133,176,84,84,49,49,49,48,51,56,53,84,244,143,133,177,84,84,49,49,49,48,51,56,54,84,244,143,133,178,84,84,49,49,49,48,51,56,55,84,244,143,133,179,84,84,49,49,49,48,51,56,56,84,244,143,133,180,84,84,49,49,49,48,51,56,57,84,244,143,133,181,84,84,49,49,49,48,51,57,48,84,244,143,133,182,84,84,49,49,49,48,51,57,49,84,244,143,133,183,84,84,49,49,49,48,51,57,50,84,244,143,133,184,84,84,49,49,49,48,51,57,51,84,244,143,133,185,84,84,49,49,49,48,51,57,52,84,244,143,133,186,84,84,49,49,49,48,51,57,53,84,244,143,133,187,84,84,49,49,49,48,51,57,54,84,244,143,133,188,84,84,49,49,49,48,51,57,55,84,244,143,133,189,84,84,49,49,49,48,51,57,56,84,244,143,133,190,84,84,49,49,49,48,51,57,57,84,244,143,133,191,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19864 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19864_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19864_s.txt", Encoding.UTF8);

    public Test19864() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers7032abc4111d4702bce9d36696a0a648",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,49,56,51,56,56,84,243,160,141,180,84,84,57,49,56,51,56,57,84,243,160,141,181,84,84,57,49,56,51,57,48,84,243,160,141,182,84,84,57,49,56,51,57,49,84,243,160,141,183,84,84,57,49,56,51,57,50,84,243,160,141,184,84,84,57,49,56,51,57,51,84,243,160,141,185,84,84,57,49,56,51,57,52,84,243,160,141,186,84,84,57,49,56,51,57,53,84,243,160,141,187,84,84,57,49,56,51,57,54,84,243,160,141,188,84,84,57,49,56,51,57,55,84,243,160,141,189,84,84,57,49,56,51,57,56,84,243,160,141,190,84,84,57,49,56,51,57,57,84,243,160,141,191,84,84,57,49,56,52,48,49,84,243,160,142,129,84,84,57,49,56,52,49,51,84,243,160,142,141,84,84,57,49,56,52,49,53,84,243,160,142,143,84,84,57,49,56,52,49,54,84,243,160,142,144,84,84,57,49,56,52,50,57,84,243,160,142,157,84,84,57,49,56,52,54,52,84,243,160,143,128,84,84,57,49,56,52,54,53,84,243,160,143,129,84,84,57,49,56,52,54,54,84,243,160,143,130,84,84,57,49,56,52,54,55,84,243,160,143,131,84,84,57,49,56,52,54,56,84,243,160,143,132,84,84,57,49,56,52,54,57,84,243,160,143,133,84,84,57,49,56,52,55,48,84,243,160,143,134,84,84,57,49,56,52,55,49,84,243,160,143,135,84,84,57,49,56,52,55,50,84,243,160,143,136,84,84,57,49,56,52,55,51,84,243,160,143,137,84,84,57,49,56,52,55,52,84,243,160,143,138,84,84,57,49,56,52,55,53,84,243,160,143,139,84,84,57,49,56,52,55,54,84,243,160,143,140,84,84,57,49,56,52,55,55,84,243,160,143,141,84,84,57,49,56,52,55,56,84,243,160,143,142,84,84,57,49,56,52,55,57,84,243,160,143,143,84,84,57,49,56,52,56,48,84,243,160,143,144,84,84,57,49,56,52,56,49,84,243,160,143,145,84,84,57,49,56,52,56,50,84,243,160,143,146,84,84,57,49,56,52,56,51,84,243,160,143,147,84,84,57,49,56,52,56,52,84,243,160,143,148,84,84,57,49,56,52,56,53,84,243,160,143,149,84,84,57,49,56,52,56,54,84,243,160,143,150,84,84,57,49,56,52,56,55,84,243,160,143,151,84,84,57,49,56,52,56,56,84,243,160,143,152,84,84,57,49,56,52,56,57,84,243,160,143,153,84,84,57,49,56,52,57,48,84,243,160,143,154,84,84,57,49,56,52,57,49,84,243,160,143,155,84,84,57,49,56,52,57,50,84,243,160,143,156,84,84,57,49,56,52,57,51,84,243,160,143,157,84,84,57,49,56,52,57,52,84,243,160,143,158,84,84,57,49,56,52,57,53,84,243,160,143,159,84,84,57,49,56,52,57,54,84,243,160,143,160,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20659 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20659_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20659_s.txt", Encoding.UTF8);

    public Test20659() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers9df780a74f2549dda8f9f337dadb7946",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,56,49,52,50,51,84,244,136,129,143,84,84,49,48,56,49,52,50,52,84,244,136,129,144,84,84,49,48,56,49,52,50,53,84,244,136,129,145,84,84,49,48,56,49,52,50,54,84,244,136,129,146,84,84,49,48,56,49,52,50,55,84,244,136,129,147,84,84,49,48,56,49,52,50,56,84,244,136,129,148,84,84,49,48,56,49,52,50,57,84,244,136,129,149,84,84,49,48,56,49,52,51,48,84,244,136,129,150,84,84,49,48,56,49,52,51,49,84,244,136,129,151,84,84,49,48,56,49,52,51,50,84,244,136,129,152,84,84,49,48,56,49,52,51,51,84,244,136,129,153,84,84,49,48,56,49,52,51,52,84,244,136,129,154,84,84,49,48,56,49,52,51,53,84,244,136,129,155,84,84,49,48,56,49,52,51,54,84,244,136,129,156,84,84,49,48,56,49,52,51,55,84,244,136,129,157,84,84,49,48,56,49,52,51,56,84,244,136,129,158,84,84,49,48,56,49,52,51,57,84,244,136,129,159,84,84,49,48,56,49,52,52,48,84,244,136,129,160,84,84,49,48,56,49,52,52,49,84,244,136,129,161,84,84,49,48,56,49,52,52,50,84,244,136,129,162,84,84,49,48,56,49,52,52,51,84,244,136,129,163,84,84,49,48,56,49,52,52,52,84,244,136,129,164,84,84,49,48,56,49,52,52,53,84,244,136,129,165,84,84,49,48,56,49,52,52,54,84,244,136,129,166,84,84,49,48,56,49,52,52,55,84,244,136,129,167,84,84,49,48,56,49,52,52,56,84,244,136,129,168,84,84,49,48,56,49,52,52,57,84,244,136,129,169,84,84,49,48,56,49,52,53,48,84,244,136,129,170,84,84,49,48,56,49,52,53,49,84,244,136,129,171,84,84,49,48,56,49,52,53,50,84,244,136,129,172,84,84,49,48,56,49,52,53,51,84,244,136,129,173,84,84,49,48,56,49,52,53,52,84,244,136,129,174,84,84,49,48,56,49,52,53,53,84,244,136,129,175,84,84,49,48,56,49,52,53,54,84,244,136,129,176,84,84,49,48,56,49,52,53,55,84,244,136,129,177,84,84,49,48,56,49,52,53,56,84,244,136,129,178,84,84,49,48,56,49,52,53,57,84,244,136,129,179,84,84,49,48,56,49,52,54,48,84,244,136,129,180,84,84,49,48,56,49,52,54,49,84,244,136,129,181,84,84,49,48,56,49,52,54,50,84,244,136,129,182,84,84,49,48,56,49,52,54,51,84,244,136,129,183,84,84,49,48,56,49,52,54,52,84,244,136,129,184,84,84,49,48,56,49,52,54,53,84,244,136,129,185,84,84,49,48,56,49,52,54,54,84,244,136,129,186,84,84,49,48,56,49,52,54,55,84,244,136,129,187,84,84,49,48,56,49,52,54,56,84,244,136,129,188,84,84,49,48,56,49,52,54,57,84,244,136,129,189,84,84,49,48,56,49,52,55,48,84,244,136,129,190,84,84,49,48,56,49,52,55,49,84,244,136,129,191,84,84,49,48,56,49,52,55,51,84,244,136,130,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20473 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20473_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20473_s.txt", Encoding.UTF8);

    public Test20473() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersee5ddc6232b847869028904d3d06a0f3",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,53,54,49,55,56,84,244,129,182,178,84,84,49,48,53,54,49,55,57,84,244,129,182,179,84,84,49,48,53,54,49,56,48,84,244,129,182,180,84,84,49,48,53,54,49,56,49,84,244,129,182,181,84,84,49,48,53,54,49,56,50,84,244,129,182,182,84,84,49,48,53,54,49,56,51,84,244,129,182,183,84,84,49,48,53,54,49,56,52,84,244,129,182,184,84,84,49,48,53,54,49,56,53,84,244,129,182,185,84,84,49,48,53,54,49,56,54,84,244,129,182,186,84,84,49,48,53,54,49,56,55,84,244,129,182,187,84,84,49,48,53,54,49,56,56,84,244,129,182,188,84,84,49,48,53,54,49,56,57,84,244,129,182,189,84,84,49,48,53,54,49,57,48,84,244,129,182,190,84,84,49,48,53,54,49,57,49,84,244,129,182,191,84,84,49,48,53,54,49,57,50,84,244,129,183,128,84,84,49,48,53,54,49,57,51,84,244,129,183,129,84,84,49,48,53,54,49,57,52,84,244,129,183,130,84,84,49,48,53,54,49,57,53,84,244,129,183,131,84,84,49,48,53,54,49,57,54,84,244,129,183,132,84,84,49,48,53,54,49,57,55,84,244,129,183,133,84,84,49,48,53,54,49,57,56,84,244,129,183,134,84,84,49,48,53,54,49,57,57,84,244,129,183,135,84,84,49,48,53,54,50,48,48,84,244,129,183,136,84,84,49,48,53,54,50,48,49,84,244,129,183,137,84,84,49,48,53,54,50,48,50,84,244,129,183,138,84,84,49,48,53,54,50,48,51,84,244,129,183,139,84,84,49,48,53,54,50,48,52,84,244,129,183,140,84,84,49,48,53,54,50,48,53,84,244,129,183,141,84,84,49,48,53,54,50,48,54,84,244,129,183,142,84,84,49,48,53,54,50,48,55,84,244,129,183,143,84,84,49,48,53,54,50,48,56,84,244,129,183,144,84,84,49,48,53,54,50,48,57,84,244,129,183,145,84,84,49,48,53,54,50,49,48,84,244,129,183,146,84,84,49,48,53,54,50,49,49,84,244,129,183,147,84,84,49,48,53,54,50,49,50,84,244,129,183,148,84,84,49,48,53,54,50,49,51,84,244,129,183,149,84,84,49,48,53,54,50,49,52,84,244,129,183,150,84,84,49,48,53,54,50,49,53,84,244,129,183,151,84,84,49,48,53,54,50,49,54,84,244,129,183,152,84,84,49,48,53,54,50,49,55,84,244,129,183,153,84,84,49,48,53,54,50,49,56,84,244,129,183,154,84,84,49,48,53,54,50,49,57,84,244,129,183,155,84,84,49,48,53,54,50,50,48,84,244,129,183,156,84,84,49,48,53,54,50,50,49,84,244,129,183,157,84,84,49,48,53,54,50,50,50,84,244,129,183,158,84,84,49,48,53,54,50,50,51,84,244,129,183,159,84,84,49,48,53,54,50,50,52,84,244,129,183,160,84,84,49,48,53,54,50,50,53,84,244,129,183,161,84,84,49,48,53,54,50,50,54,84,244,129,183,162,84,84,49,48,53,54,50,50,55,84,244,129,183,163,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20058 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20058_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20058_s.txt", Encoding.UTF8);

    public Test20058() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersb3c703c6e551430d9c914c24c3792dd5",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,48,57,53,49,50,84,243,182,157,168,84,84,49,48,48,57,53,49,51,84,243,182,157,169,84,84,49,48,48,57,53,49,52,84,243,182,157,170,84,84,49,48,48,57,53,49,53,84,243,182,157,171,84,84,49,48,48,57,53,49,54,84,243,182,157,172,84,84,49,48,48,57,53,49,55,84,243,182,157,173,84,84,49,48,48,57,53,49,56,84,243,182,157,174,84,84,49,48,48,57,53,49,57,84,243,182,157,175,84,84,49,48,48,57,53,50,48,84,243,182,157,176,84,84,49,48,48,57,53,50,49,84,243,182,157,177,84,84,49,48,48,57,53,50,50,84,243,182,157,178,84,84,49,48,48,57,53,50,51,84,243,182,157,179,84,84,49,48,48,57,53,50,52,84,243,182,157,180,84,84,49,48,48,57,53,50,53,84,243,182,157,181,84,84,49,48,48,57,53,50,54,84,243,182,157,182,84,84,49,48,48,57,53,50,55,84,243,182,157,183,84,84,49,48,48,57,53,50,56,84,243,182,157,184,84,84,49,48,48,57,53,50,57,84,243,182,157,185,84,84,49,48,48,57,53,51,48,84,243,182,157,186,84,84,49,48,48,57,53,51,49,84,243,182,157,187,84,84,49,48,48,57,53,51,50,84,243,182,157,188,84,84,49,48,48,57,53,51,51,84,243,182,157,189,84,84,49,48,48,57,53,51,52,84,243,182,157,190,84,84,49,48,48,57,53,51,53,84,243,182,157,191,84,84,49,48,48,57,53,51,55,84,243,182,158,129,84,84,49,48,48,57,53,52,57,84,243,182,158,141,84,84,49,48,48,57,53,53,49,84,243,182,158,143,84,84,49,48,48,57,53,53,50,84,243,182,158,144,84,84,49,48,48,57,53,54,53,84,243,182,158,157,84,84,49,48,48,57,54,48,49,84,243,182,159,129,84,84,49,48,48,57,54,49,51,84,243,182,159,141,84,84,49,48,48,57,54,49,53,84,243,182,159,143,84,84,49,48,48,57,54,49,54,84,243,182,159,144,84,84,49,48,48,57,54,50,57,84,243,182,159,157,84,84,49,48,48,57,54,54,53,84,243,182,160,129,84,84,49,48,48,57,54,55,55,84,243,182,160,141,84,84,49,48,48,57,54,55,57,84,243,182,160,143,84,84,49,48,48,57,54,56,48,84,243,182,160,144,84,84,49,48,48,57,54,57,51,84,243,182,160,157,84,84,49,48,48,57,55,50,57,84,243,182,161,129,84,84,49,48,48,57,55,52,49,84,243,182,161,141,84,84,49,48,48,57,55,52,51,84,243,182,161,143,84,84,49,48,48,57,55,52,52,84,243,182,161,144,84,84,49,48,48,57,55,53,55,84,243,182,161,157,84,84,49,48,48,57,55,57,51,84,243,182,162,129,84,84,49,48,48,57,56,48,53,84,243,182,162,141,84,84,49,48,48,57,56,48,55,84,243,182,162,143,84,84,49,48,48,57,56,48,56,84,243,182,162,144,84,84,49,48,48,57,56,50,49,84,243,182,162,157,84,84,49,48,48,57,56,53,55,84,243,182,163,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21078 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21078_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21078_s.txt", Encoding.UTF8);

    public Test21078() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers79aa3dd90e344ebe9466f3cb0c56378a",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,50,49,53,48,84,244,143,161,150,84,84,49,49,49,50,49,53,49,84,244,143,161,151,84,84,49,49,49,50,49,53,50,84,244,143,161,152,84,84,49,49,49,50,49,53,51,84,244,143,161,153,84,84,49,49,49,50,49,53,52,84,244,143,161,154,84,84,49,49,49,50,49,53,53,84,244,143,161,155,84,84,49,49,49,50,49,53,54,84,244,143,161,156,84,84,49,49,49,50,49,53,55,84,244,143,161,157,84,84,49,49,49,50,49,53,56,84,244,143,161,158,84,84,49,49,49,50,49,53,57,84,244,143,161,159,84,84,49,49,49,50,49,54,48,84,244,143,161,160,84,84,49,49,49,50,49,54,49,84,244,143,161,161,84,84,49,49,49,50,49,54,50,84,244,143,161,162,84,84,49,49,49,50,49,54,51,84,244,143,161,163,84,84,49,49,49,50,49,54,52,84,244,143,161,164,84,84,49,49,49,50,49,54,53,84,244,143,161,165,84,84,49,49,49,50,49,54,54,84,244,143,161,166,84,84,49,49,49,50,49,54,55,84,244,143,161,167,84,84,49,49,49,50,49,54,56,84,244,143,161,168,84,84,49,49,49,50,49,54,57,84,244,143,161,169,84,84,49,49,49,50,49,55,48,84,244,143,161,170,84,84,49,49,49,50,49,55,49,84,244,143,161,171,84,84,49,49,49,50,49,55,50,84,244,143,161,172,84,84,49,49,49,50,49,55,51,84,244,143,161,173,84,84,49,49,49,50,49,55,52,84,244,143,161,174,84,84,49,49,49,50,49,55,53,84,244,143,161,175,84,84,49,49,49,50,49,55,54,84,244,143,161,176,84,84,49,49,49,50,49,55,55,84,244,143,161,177,84,84,49,49,49,50,49,55,56,84,244,143,161,178,84,84,49,49,49,50,49,55,57,84,244,143,161,179,84,84,49,49,49,50,49,56,48,84,244,143,161,180,84,84,49,49,49,50,49,56,49,84,244,143,161,181,84,84,49,49,49,50,49,56,50,84,244,143,161,182,84,84,49,49,49,50,49,56,51,84,244,143,161,183,84,84,49,49,49,50,49,56,52,84,244,143,161,184,84,84,49,49,49,50,49,56,53,84,244,143,161,185,84,84,49,49,49,50,49,56,54,84,244,143,161,186,84,84,49,49,49,50,49,56,55,84,244,143,161,187,84,84,49,49,49,50,49,56,56,84,244,143,161,188,84,84,49,49,49,50,49,56,57,84,244,143,161,189,84,84,49,49,49,50,49,57,48,84,244,143,161,190,84,84,49,49,49,50,49,57,49,84,244,143,161,191,84,84,49,49,49,50,49,57,50,84,244,143,162,128,84,84,49,49,49,50,49,57,51,84,244,143,162,129,84,84,49,49,49,50,49,57,52,84,244,143,162,130,84,84,49,49,49,50,49,57,53,84,244,143,162,131,84,84,49,49,49,50,49,57,54,84,244,143,162,132,84,84,49,49,49,50,49,57,55,84,244,143,162,133,84,84,49,49,49,50,49,57,56,84,244,143,162,134,84,84,49,49,49,50,49,57,57,84,244,143,162,135,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20820 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20820_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20820_s.txt", Encoding.UTF8);

    public Test20820() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersf4b0dcea8f7b4ccf92e1f36b952ddf93",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,50,53,54,57,84,244,141,139,169,84,84,49,49,48,50,53,55,48,84,244,141,139,170,84,84,49,49,48,50,53,55,49,84,244,141,139,171,84,84,49,49,48,50,53,55,50,84,244,141,139,172,84,84,49,49,48,50,53,55,51,84,244,141,139,173,84,84,49,49,48,50,53,55,52,84,244,141,139,174,84,84,49,49,48,50,53,55,53,84,244,141,139,175,84,84,49,49,48,50,53,55,54,84,244,141,139,176,84,84,49,49,48,50,53,55,55,84,244,141,139,177,84,84,49,49,48,50,53,55,56,84,244,141,139,178,84,84,49,49,48,50,53,55,57,84,244,141,139,179,84,84,49,49,48,50,53,56,48,84,244,141,139,180,84,84,49,49,48,50,53,56,49,84,244,141,139,181,84,84,49,49,48,50,53,56,50,84,244,141,139,182,84,84,49,49,48,50,53,56,51,84,244,141,139,183,84,84,49,49,48,50,53,56,52,84,244,141,139,184,84,84,49,49,48,50,53,56,53,84,244,141,139,185,84,84,49,49,48,50,53,56,54,84,244,141,139,186,84,84,49,49,48,50,53,56,55,84,244,141,139,187,84,84,49,49,48,50,53,56,56,84,244,141,139,188,84,84,49,49,48,50,53,56,57,84,244,141,139,189,84,84,49,49,48,50,53,57,48,84,244,141,139,190,84,84,49,49,48,50,53,57,49,84,244,141,139,191,84,84,49,49,48,50,53,57,50,84,244,141,140,128,84,84,49,49,48,50,53,57,51,84,244,141,140,129,84,84,49,49,48,50,53,57,52,84,244,141,140,130,84,84,49,49,48,50,53,57,53,84,244,141,140,131,84,84,49,49,48,50,53,57,54,84,244,141,140,132,84,84,49,49,48,50,53,57,55,84,244,141,140,133,84,84,49,49,48,50,53,57,56,84,244,141,140,134,84,84,49,49,48,50,53,57,57,84,244,141,140,135,84,84,49,49,48,50,54,48,48,84,244,141,140,136,84,84,49,49,48,50,54,48,49,84,244,141,140,137,84,84,49,49,48,50,54,48,50,84,244,141,140,138,84,84,49,49,48,50,54,48,51,84,244,141,140,139,84,84,49,49,48,50,54,48,52,84,244,141,140,140,84,84,49,49,48,50,54,48,53,84,244,141,140,141,84,84,49,49,48,50,54,48,54,84,244,141,140,142,84,84,49,49,48,50,54,48,55,84,244,141,140,143,84,84,49,49,48,50,54,48,56,84,244,141,140,144,84,84,49,49,48,50,54,48,57,84,244,141,140,145,84,84,49,49,48,50,54,49,48,84,244,141,140,146,84,84,49,49,48,50,54,49,49,84,244,141,140,147,84,84,49,49,48,50,54,49,50,84,244,141,140,148,84,84,49,49,48,50,54,49,51,84,244,141,140,149,84,84,49,49,48,50,54,49,52,84,244,141,140,150,84,84,49,49,48,50,54,49,53,84,244,141,140,151,84,84,49,49,48,50,54,49,54,84,244,141,140,152,84,84,49,49,48,50,54,49,55,84,244,141,140,153,84,84,49,49,48,50,54,49,56,84,244,141,140,154,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20886 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20886_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20886_s.txt", Encoding.UTF8);

    public Test20886() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersdd41d3a5bb7f42709f7cec587f1a204a",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,52,49,54,57,84,244,141,164,169,84,84,49,49,48,52,49,55,48,84,244,141,164,170,84,84,49,49,48,52,49,55,49,84,244,141,164,171,84,84,49,49,48,52,49,55,50,84,244,141,164,172,84,84,49,49,48,52,49,55,51,84,244,141,164,173,84,84,49,49,48,52,49,55,52,84,244,141,164,174,84,84,49,49,48,52,49,55,53,84,244,141,164,175,84,84,49,49,48,52,49,55,54,84,244,141,164,176,84,84,49,49,48,52,49,55,55,84,244,141,164,177,84,84,49,49,48,52,49,55,56,84,244,141,164,178,84,84,49,49,48,52,49,55,57,84,244,141,164,179,84,84,49,49,48,52,49,56,48,84,244,141,164,180,84,84,49,49,48,52,49,56,49,84,244,141,164,181,84,84,49,49,48,52,49,56,50,84,244,141,164,182,84,84,49,49,48,52,49,56,51,84,244,141,164,183,84,84,49,49,48,52,49,56,52,84,244,141,164,184,84,84,49,49,48,52,49,56,53,84,244,141,164,185,84,84,49,49,48,52,49,56,54,84,244,141,164,186,84,84,49,49,48,52,49,56,55,84,244,141,164,187,84,84,49,49,48,52,49,56,56,84,244,141,164,188,84,84,49,49,48,52,49,56,57,84,244,141,164,189,84,84,49,49,48,52,49,57,48,84,244,141,164,190,84,84,49,49,48,52,49,57,49,84,244,141,164,191,84,84,49,49,48,52,49,57,50,84,244,141,165,128,84,84,49,49,48,52,49,57,51,84,244,141,165,129,84,84,49,49,48,52,49,57,52,84,244,141,165,130,84,84,49,49,48,52,49,57,53,84,244,141,165,131,84,84,49,49,48,52,49,57,54,84,244,141,165,132,84,84,49,49,48,52,49,57,55,84,244,141,165,133,84,84,49,49,48,52,49,57,56,84,244,141,165,134,84,84,49,49,48,52,49,57,57,84,244,141,165,135,84,84,49,49,48,52,50,48,48,84,244,141,165,136,84,84,49,49,48,52,50,48,49,84,244,141,165,137,84,84,49,49,48,52,50,48,50,84,244,141,165,138,84,84,49,49,48,52,50,48,51,84,244,141,165,139,84,84,49,49,48,52,50,48,52,84,244,141,165,140,84,84,49,49,48,52,50,48,53,84,244,141,165,141,84,84,49,49,48,52,50,48,54,84,244,141,165,142,84,84,49,49,48,52,50,48,55,84,244,141,165,143,84,84,49,49,48,52,50,48,56,84,244,141,165,144,84,84,49,49,48,52,50,48,57,84,244,141,165,145,84,84,49,49,48,52,50,49,48,84,244,141,165,146,84,84,49,49,48,52,50,49,49,84,244,141,165,147,84,84,49,49,48,52,50,49,50,84,244,141,165,148,84,84,49,49,48,52,50,49,51,84,244,141,165,149,84,84,49,49,48,52,50,49,52,84,244,141,165,150,84,84,49,49,48,52,50,49,53,84,244,141,165,151,84,84,49,49,48,52,50,49,54,84,244,141,165,152,84,84,49,49,48,52,50,49,55,84,244,141,165,153,84,84,49,49,48,52,50,49,56,84,244,141,165,154,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20727 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20727_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20727_s.txt", Encoding.UTF8);

    public Test20727() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers0bb7ae45edef4594997d97499d26b519",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,57,49,52,53,49,84,244,138,157,187,84,84,49,48,57,49,52,53,50,84,244,138,157,188,84,84,49,48,57,49,52,53,51,84,244,138,157,189,84,84,49,48,57,49,52,53,52,84,244,138,157,190,84,84,49,48,57,49,52,53,53,84,244,138,157,191,84,84,49,48,57,49,52,53,55,84,244,138,158,129,84,84,49,48,57,49,52,54,57,84,244,138,158,141,84,84,49,48,57,49,52,55,49,84,244,138,158,143,84,84,49,48,57,49,52,55,50,84,244,138,158,144,84,84,49,48,57,49,52,56,53,84,244,138,158,157,84,84,49,48,57,49,53,50,49,84,244,138,159,129,84,84,49,48,57,49,53,51,51,84,244,138,159,141,84,84,49,48,57,49,53,51,53,84,244,138,159,143,84,84,49,48,57,49,53,51,54,84,244,138,159,144,84,84,49,48,57,49,53,52,57,84,244,138,159,157,84,84,49,48,57,49,53,56,53,84,244,138,160,129,84,84,49,48,57,49,53,57,55,84,244,138,160,141,84,84,49,48,57,49,53,57,57,84,244,138,160,143,84,84,49,48,57,49,54,48,48,84,244,138,160,144,84,84,49,48,57,49,54,49,51,84,244,138,160,157,84,84,49,48,57,49,54,52,57,84,244,138,161,129,84,84,49,48,57,49,54,54,49,84,244,138,161,141,84,84,49,48,57,49,54,54,51,84,244,138,161,143,84,84,49,48,57,49,54,54,52,84,244,138,161,144,84,84,49,48,57,49,54,55,55,84,244,138,161,157,84,84,49,48,57,49,55,49,51,84,244,138,162,129,84,84,49,48,57,49,55,50,53,84,244,138,162,141,84,84,49,48,57,49,55,50,55,84,244,138,162,143,84,84,49,48,57,49,55,50,56,84,244,138,162,144,84,84,49,48,57,49,55,52,49,84,244,138,162,157,84,84,49,48,57,49,55,55,55,84,244,138,163,129,84,84,49,48,57,49,55,56,57,84,244,138,163,141,84,84,49,48,57,49,55,57,49,84,244,138,163,143,84,84,49,48,57,49,55,57,50,84,244,138,163,144,84,84,49,48,57,49,56,48,53,84,244,138,163,157,84,84,49,48,57,49,56,52,49,84,244,138,164,129,84,84,49,48,57,49,56,53,51,84,244,138,164,141,84,84,49,48,57,49,56,53,53,84,244,138,164,143,84,84,49,48,57,49,56,53,54,84,244,138,164,144,84,84,49,48,57,49,56,54,57,84,244,138,164,157,84,84,49,48,57,49,57,48,53,84,244,138,165,129,84,84,49,48,57,49,57,49,55,84,244,138,165,141,84,84,49,48,57,49,57,49,57,84,244,138,165,143,84,84,49,48,57,49,57,50,48,84,244,138,165,144,84,84,49,48,57,49,57,51,51,84,244,138,165,157,84,84,49,48,57,49,57,54,57,84,244,138,166,129,84,84,49,48,57,49,57,56,49,84,244,138,166,141,84,84,49,48,57,49,57,56,51,84,244,138,166,143,84,84,49,48,57,49,57,56,52,84,244,138,166,144,84,84,49,48,57,49,57,57,55,84,244,138,166,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21138 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21138_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21138_s.txt", Encoding.UTF8);

    public Test21138() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers56d1c908d8f44b69abe6817b1847a0f6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,51,54,48,48,84,244,143,184,128,84,84,49,49,49,51,54,48,49,84,244,143,184,129,84,84,49,49,49,51,54,48,50,84,244,143,184,130,84,84,49,49,49,51,54,48,51,84,244,143,184,131,84,84,49,49,49,51,54,48,52,84,244,143,184,132,84,84,49,49,49,51,54,48,53,84,244,143,184,133,84,84,49,49,49,51,54,48,54,84,244,143,184,134,84,84,49,49,49,51,54,48,55,84,244,143,184,135,84,84,49,49,49,51,54,48,56,84,244,143,184,136,84,84,49,49,49,51,54,48,57,84,244,143,184,137,84,84,49,49,49,51,54,49,48,84,244,143,184,138,84,84,49,49,49,51,54,49,49,84,244,143,184,139,84,84,49,49,49,51,54,49,50,84,244,143,184,140,84,84,49,49,49,51,54,49,51,84,244,143,184,141,84,84,49,49,49,51,54,49,52,84,244,143,184,142,84,84,49,49,49,51,54,49,53,84,244,143,184,143,84,84,49,49,49,51,54,49,54,84,244,143,184,144,84,84,49,49,49,51,54,49,55,84,244,143,184,145,84,84,49,49,49,51,54,49,56,84,244,143,184,146,84,84,49,49,49,51,54,49,57,84,244,143,184,147,84,84,49,49,49,51,54,50,48,84,244,143,184,148,84,84,49,49,49,51,54,50,49,84,244,143,184,149,84,84,49,49,49,51,54,50,50,84,244,143,184,150,84,84,49,49,49,51,54,50,51,84,244,143,184,151,84,84,49,49,49,51,54,50,52,84,244,143,184,152,84,84,49,49,49,51,54,50,53,84,244,143,184,153,84,84,49,49,49,51,54,50,54,84,244,143,184,154,84,84,49,49,49,51,54,50,55,84,244,143,184,155,84,84,49,49,49,51,54,50,56,84,244,143,184,156,84,84,49,49,49,51,54,50,57,84,244,143,184,157,84,84,49,49,49,51,54,51,48,84,244,143,184,158,84,84,49,49,49,51,54,51,49,84,244,143,184,159,84,84,49,49,49,51,54,51,50,84,244,143,184,160,84,84,49,49,49,51,54,51,51,84,244,143,184,161,84,84,49,49,49,51,54,51,52,84,244,143,184,162,84,84,49,49,49,51,54,51,53,84,244,143,184,163,84,84,49,49,49,51,54,51,54,84,244,143,184,164,84,84,49,49,49,51,54,51,55,84,244,143,184,165,84,84,49,49,49,51,54,51,56,84,244,143,184,166,84,84,49,49,49,51,54,51,57,84,244,143,184,167,84,84,49,49,49,51,54,52,48,84,244,143,184,168,84,84,49,49,49,51,54,52,49,84,244,143,184,169,84,84,49,49,49,51,54,52,50,84,244,143,184,170,84,84,49,49,49,51,54,52,51,84,244,143,184,171,84,84,49,49,49,51,54,52,52,84,244,143,184,172,84,84,49,49,49,51,54,52,53,84,244,143,184,173,84,84,49,49,49,51,54,52,54,84,244,143,184,174,84,84,49,49,49,51,54,52,55,84,244,143,184,175,84,84,49,49,49,51,54,52,56,84,244,143,184,176,84,84,49,49,49,51,54,52,57,84,244,143,184,177,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19993 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19993_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19993_s.txt", Encoding.UTF8);

    public Test19993() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersc5d3e7c5509046d2aa3f8bb095571b82",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,48,48,50,56,51,84,243,180,141,155,84,84,49,48,48,48,50,56,52,84,243,180,141,156,84,84,49,48,48,48,50,56,53,84,243,180,141,157,84,84,49,48,48,48,50,56,54,84,243,180,141,158,84,84,49,48,48,48,50,56,55,84,243,180,141,159,84,84,49,48,48,48,50,56,56,84,243,180,141,160,84,84,49,48,48,48,50,56,57,84,243,180,141,161,84,84,49,48,48,48,50,57,48,84,243,180,141,162,84,84,49,48,48,48,50,57,49,84,243,180,141,163,84,84,49,48,48,48,50,57,50,84,243,180,141,164,84,84,49,48,48,48,50,57,51,84,243,180,141,165,84,84,49,48,48,48,50,57,52,84,243,180,141,166,84,84,49,48,48,48,50,57,53,84,243,180,141,167,84,84,49,48,48,48,50,57,54,84,243,180,141,168,84,84,49,48,48,48,50,57,55,84,243,180,141,169,84,84,49,48,48,48,50,57,56,84,243,180,141,170,84,84,49,48,48,48,50,57,57,84,243,180,141,171,84,84,49,48,48,48,51,48,48,84,243,180,141,172,84,84,49,48,48,48,51,48,49,84,243,180,141,173,84,84,49,48,48,48,51,48,50,84,243,180,141,174,84,84,49,48,48,48,51,48,51,84,243,180,141,175,84,84,49,48,48,48,51,48,52,84,243,180,141,176,84,84,49,48,48,48,51,48,53,84,243,180,141,177,84,84,49,48,48,48,51,48,54,84,243,180,141,178,84,84,49,48,48,48,51,48,55,84,243,180,141,179,84,84,49,48,48,48,51,48,56,84,243,180,141,180,84,84,49,48,48,48,51,48,57,84,243,180,141,181,84,84,49,48,48,48,51,49,48,84,243,180,141,182,84,84,49,48,48,48,51,49,49,84,243,180,141,183,84,84,49,48,48,48,51,49,50,84,243,180,141,184,84,84,49,48,48,48,51,49,51,84,243,180,141,185,84,84,49,48,48,48,51,49,52,84,243,180,141,186,84,84,49,48,48,48,51,49,53,84,243,180,141,187,84,84,49,48,48,48,51,49,54,84,243,180,141,188,84,84,49,48,48,48,51,49,55,84,243,180,141,189,84,84,49,48,48,48,51,49,56,84,243,180,141,190,84,84,49,48,48,48,51,49,57,84,243,180,141,191,84,84,49,48,48,48,51,50,49,84,243,180,142,129,84,84,49,48,48,48,51,51,51,84,243,180,142,141,84,84,49,48,48,48,51,51,53,84,243,180,142,143,84,84,49,48,48,48,51,51,54,84,243,180,142,144,84,84,49,48,48,48,51,52,57,84,243,180,142,157,84,84,49,48,48,48,51,56,52,84,243,180,143,128,84,84,49,48,48,48,51,56,53,84,243,180,143,129,84,84,49,48,48,48,51,56,54,84,243,180,143,130,84,84,49,48,48,48,51,56,55,84,243,180,143,131,84,84,49,48,48,48,51,56,56,84,243,180,143,132,84,84,49,48,48,48,51,56,57,84,243,180,143,133,84,84,49,48,48,48,51,57,48,84,243,180,143,134,84,84,49,48,48,48,51,57,49,84,243,180,143,135,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20939 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20939_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20939_s.txt", Encoding.UTF8);

    public Test20939() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers9e891393b2624599aedf317812121dcf",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,53,52,49,57,84,244,141,184,139,84,84,49,49,48,53,52,50,48,84,244,141,184,140,84,84,49,49,48,53,52,50,49,84,244,141,184,141,84,84,49,49,48,53,52,50,50,84,244,141,184,142,84,84,49,49,48,53,52,50,51,84,244,141,184,143,84,84,49,49,48,53,52,50,52,84,244,141,184,144,84,84,49,49,48,53,52,50,53,84,244,141,184,145,84,84,49,49,48,53,52,50,54,84,244,141,184,146,84,84,49,49,48,53,52,50,55,84,244,141,184,147,84,84,49,49,48,53,52,50,56,84,244,141,184,148,84,84,49,49,48,53,52,50,57,84,244,141,184,149,84,84,49,49,48,53,52,51,48,84,244,141,184,150,84,84,49,49,48,53,52,51,49,84,244,141,184,151,84,84,49,49,48,53,52,51,50,84,244,141,184,152,84,84,49,49,48,53,52,51,51,84,244,141,184,153,84,84,49,49,48,53,52,51,52,84,244,141,184,154,84,84,49,49,48,53,52,51,53,84,244,141,184,155,84,84,49,49,48,53,52,51,54,84,244,141,184,156,84,84,49,49,48,53,52,51,55,84,244,141,184,157,84,84,49,49,48,53,52,51,56,84,244,141,184,158,84,84,49,49,48,53,52,51,57,84,244,141,184,159,84,84,49,49,48,53,52,52,48,84,244,141,184,160,84,84,49,49,48,53,52,52,49,84,244,141,184,161,84,84,49,49,48,53,52,52,50,84,244,141,184,162,84,84,49,49,48,53,52,52,51,84,244,141,184,163,84,84,49,49,48,53,52,52,52,84,244,141,184,164,84,84,49,49,48,53,52,52,53,84,244,141,184,165,84,84,49,49,48,53,52,52,54,84,244,141,184,166,84,84,49,49,48,53,52,52,55,84,244,141,184,167,84,84,49,49,48,53,52,52,56,84,244,141,184,168,84,84,49,49,48,53,52,52,57,84,244,141,184,169,84,84,49,49,48,53,52,53,48,84,244,141,184,170,84,84,49,49,48,53,52,53,49,84,244,141,184,171,84,84,49,49,48,53,52,53,50,84,244,141,184,172,84,84,49,49,48,53,52,53,51,84,244,141,184,173,84,84,49,49,48,53,52,53,52,84,244,141,184,174,84,84,49,49,48,53,52,53,53,84,244,141,184,175,84,84,49,49,48,53,52,53,54,84,244,141,184,176,84,84,49,49,48,53,52,53,55,84,244,141,184,177,84,84,49,49,48,53,52,53,56,84,244,141,184,178,84,84,49,49,48,53,52,53,57,84,244,141,184,179,84,84,49,49,48,53,52,54,48,84,244,141,184,180,84,84,49,49,48,53,52,54,49,84,244,141,184,181,84,84,49,49,48,53,52,54,50,84,244,141,184,182,84,84,49,49,48,53,52,54,51,84,244,141,184,183,84,84,49,49,48,53,52,54,52,84,244,141,184,184,84,84,49,49,48,53,52,54,53,84,244,141,184,185,84,84,49,49,48,53,52,54,54,84,244,141,184,186,84,84,49,49,48,53,52,54,55,84,244,141,184,187,84,84,49,49,48,53,52,54,56,84,244,141,184,188,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20215 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20215_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20215_s.txt", Encoding.UTF8);

    public Test20215() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers2b6cdd6684eb4500abcaa682adc323b7",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,51,52,53,55,51,84,243,188,165,141,84,84,49,48,51,52,53,55,53,84,243,188,165,143,84,84,49,48,51,52,53,55,54,84,243,188,165,144,84,84,49,48,51,52,53,56,57,84,243,188,165,157,84,84,49,48,51,52,54,50,53,84,243,188,166,129,84,84,49,48,51,52,54,51,55,84,243,188,166,141,84,84,49,48,51,52,54,51,57,84,243,188,166,143,84,84,49,48,51,52,54,52,48,84,243,188,166,144,84,84,49,48,51,52,54,53,51,84,243,188,166,157,84,84,49,48,51,52,54,56,57,84,243,188,167,129,84,84,49,48,51,52,55,48,49,84,243,188,167,141,84,84,49,48,51,52,55,48,51,84,243,188,167,143,84,84,49,48,51,52,55,48,52,84,243,188,167,144,84,84,49,48,51,52,55,49,55,84,243,188,167,157,84,84,49,48,51,52,55,53,51,84,243,188,168,129,84,84,49,48,51,52,55,54,53,84,243,188,168,141,84,84,49,48,51,52,55,54,55,84,243,188,168,143,84,84,49,48,51,52,55,54,56,84,243,188,168,144,84,84,49,48,51,52,55,56,49,84,243,188,168,157,84,84,49,48,51,52,56,49,55,84,243,188,169,129,84,84,49,48,51,52,56,50,57,84,243,188,169,141,84,84,49,48,51,52,56,51,49,84,243,188,169,143,84,84,49,48,51,52,56,51,50,84,243,188,169,144,84,84,49,48,51,52,56,52,53,84,243,188,169,157,84,84,49,48,51,52,56,56,49,84,243,188,170,129,84,84,49,48,51,52,56,57,51,84,243,188,170,141,84,84,49,48,51,52,56,57,53,84,243,188,170,143,84,84,49,48,51,52,56,57,54,84,243,188,170,144,84,84,49,48,51,52,57,48,57,84,243,188,170,157,84,84,49,48,51,52,57,52,53,84,243,188,171,129,84,84,49,48,51,52,57,53,55,84,243,188,171,141,84,84,49,48,51,52,57,53,57,84,243,188,171,143,84,84,49,48,51,52,57,54,48,84,243,188,171,144,84,84,49,48,51,52,57,55,51,84,243,188,171,157,84,84,49,48,51,53,48,48,57,84,243,188,172,129,84,84,49,48,51,53,48,50,49,84,243,188,172,141,84,84,49,48,51,53,48,50,51,84,243,188,172,143,84,84,49,48,51,53,48,50,52,84,243,188,172,144,84,84,49,48,51,53,48,51,55,84,243,188,172,157,84,84,49,48,51,53,48,55,51,84,243,188,173,129,84,84,49,48,51,53,48,56,53,84,243,188,173,141,84,84,49,48,51,53,48,56,55,84,243,188,173,143,84,84,49,48,51,53,48,56,56,84,243,188,173,144,84,84,49,48,51,53,49,48,49,84,243,188,173,157,84,84,49,48,51,53,49,51,55,84,243,188,174,129,84,84,49,48,51,53,49,52,57,84,243,188,174,141,84,84,49,48,51,53,49,53,49,84,243,188,174,143,84,84,49,48,51,53,49,53,50,84,243,188,174,144,84,84,49,48,51,53,49,54,53,84,243,188,174,157,84,84,49,48,51,53,50,48,49,84,243,188,175,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20661 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20661_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20661_s.txt", Encoding.UTF8);

    public Test20661() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers9df780a74f2549dda8f9f337dadb7946",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,56,49,52,56,53,84,244,136,130,141,84,84,49,48,56,49,52,56,55,84,244,136,130,143,84,84,49,48,56,49,52,56,56,84,244,136,130,144,84,84,49,48,56,49,53,48,49,84,244,136,130,157,84,84,49,48,56,49,53,51,55,84,244,136,131,129,84,84,49,48,56,49,53,52,57,84,244,136,131,141,84,84,49,48,56,49,53,53,49,84,244,136,131,143,84,84,49,48,56,49,53,53,50,84,244,136,131,144,84,84,49,48,56,49,53,54,53,84,244,136,131,157,84,84,49,48,56,49,54,48,49,84,244,136,132,129,84,84,49,48,56,49,54,49,51,84,244,136,132,141,84,84,49,48,56,49,54,49,53,84,244,136,132,143,84,84,49,48,56,49,54,49,54,84,244,136,132,144,84,84,49,48,56,49,54,50,57,84,244,136,132,157,84,84,49,48,56,49,54,54,53,84,244,136,133,129,84,84,49,48,56,49,54,55,55,84,244,136,133,141,84,84,49,48,56,49,54,55,57,84,244,136,133,143,84,84,49,48,56,49,54,56,48,84,244,136,133,144,84,84,49,48,56,49,54,57,51,84,244,136,133,157,84,84,49,48,56,49,55,50,57,84,244,136,134,129,84,84,49,48,56,49,55,52,49,84,244,136,134,141,84,84,49,48,56,49,55,52,51,84,244,136,134,143,84,84,49,48,56,49,55,52,52,84,244,136,134,144,84,84,49,48,56,49,55,53,55,84,244,136,134,157,84,84,49,48,56,49,55,57,51,84,244,136,135,129,84,84,49,48,56,49,56,48,53,84,244,136,135,141,84,84,49,48,56,49,56,48,55,84,244,136,135,143,84,84,49,48,56,49,56,48,56,84,244,136,135,144,84,84,49,48,56,49,56,50,49,84,244,136,135,157,84,84,49,48,56,49,56,53,55,84,244,136,136,129,84,84,49,48,56,49,56,54,57,84,244,136,136,141,84,84,49,48,56,49,56,55,49,84,244,136,136,143,84,84,49,48,56,49,56,55,50,84,244,136,136,144,84,84,49,48,56,49,56,56,53,84,244,136,136,157,84,84,49,48,56,49,57,50,49,84,244,136,137,129,84,84,49,48,56,49,57,51,51,84,244,136,137,141,84,84,49,48,56,49,57,51,53,84,244,136,137,143,84,84,49,48,56,49,57,51,54,84,244,136,137,144,84,84,49,48,56,49,57,52,57,84,244,136,137,157,84,84,49,48,56,49,57,56,53,84,244,136,138,129,84,84,49,48,56,49,57,57,55,84,244,136,138,141,84,84,49,48,56,49,57,57,57,84,244,136,138,143,84,84,49,48,56,50,48,48,48,84,244,136,138,144,84,84,49,48,56,50,48,49,51,84,244,136,138,157,84,84,49,48,56,50,48,52,57,84,244,136,139,129,84,84,49,48,56,50,48,54,49,84,244,136,139,141,84,84,49,48,56,50,48,54,51,84,244,136,139,143,84,84,49,48,56,50,48,54,52,84,244,136,139,144,84,84,49,48,56,50,48,55,55,84,244,136,139,157,84,84,49,48,56,50,49,49,51,84,244,136,140,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20729 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20729_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20729_s.txt", Encoding.UTF8);

    public Test20729() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers0bb7ae45edef4594997d97499d26b519",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,57,50,48,51,51,84,244,138,167,129,84,84,49,48,57,50,48,52,53,84,244,138,167,141,84,84,49,48,57,50,48,52,55,84,244,138,167,143,84,84,49,48,57,50,48,52,56,84,244,138,167,144,84,84,49,48,57,50,48,54,49,84,244,138,167,157,84,84,49,48,57,50,48,57,55,84,244,138,168,129,84,84,49,48,57,50,49,48,57,84,244,138,168,141,84,84,49,48,57,50,49,49,49,84,244,138,168,143,84,84,49,48,57,50,49,49,50,84,244,138,168,144,84,84,49,48,57,50,49,50,53,84,244,138,168,157,84,84,49,48,57,50,49,54,49,84,244,138,169,129,84,84,49,48,57,50,49,55,51,84,244,138,169,141,84,84,49,48,57,50,49,55,53,84,244,138,169,143,84,84,49,48,57,50,49,55,54,84,244,138,169,144,84,84,49,48,57,50,49,56,57,84,244,138,169,157,84,84,49,48,57,50,50,50,53,84,244,138,170,129,84,84,49,48,57,50,50,51,55,84,244,138,170,141,84,84,49,48,57,50,50,51,57,84,244,138,170,143,84,84,49,48,57,50,50,52,48,84,244,138,170,144,84,84,49,48,57,50,50,53,51,84,244,138,170,157,84,84,49,48,57,50,50,56,57,84,244,138,171,129,84,84,49,48,57,50,51,48,49,84,244,138,171,141,84,84,49,48,57,50,51,48,51,84,244,138,171,143,84,84,49,48,57,50,51,48,52,84,244,138,171,144,84,84,49,48,57,50,51,49,55,84,244,138,171,157,84,84,49,48,57,50,51,53,51,84,244,138,172,129,84,84,49,48,57,50,51,54,53,84,244,138,172,141,84,84,49,48,57,50,51,54,55,84,244,138,172,143,84,84,49,48,57,50,51,54,56,84,244,138,172,144,84,84,49,48,57,50,51,56,49,84,244,138,172,157,84,84,49,48,57,50,52,49,55,84,244,138,173,129,84,84,49,48,57,50,52,50,57,84,244,138,173,141,84,84,49,48,57,50,52,51,49,84,244,138,173,143,84,84,49,48,57,50,52,51,50,84,244,138,173,144,84,84,49,48,57,50,52,52,53,84,244,138,173,157,84,84,49,48,57,50,52,56,49,84,244,138,174,129,84,84,49,48,57,50,52,57,51,84,244,138,174,141,84,84,49,48,57,50,52,57,53,84,244,138,174,143,84,84,49,48,57,50,52,57,54,84,244,138,174,144,84,84,49,48,57,50,53,48,57,84,244,138,174,157,84,84,49,48,57,50,53,52,53,84,244,138,175,129,84,84,49,48,57,50,53,53,55,84,244,138,175,141,84,84,49,48,57,50,53,53,57,84,244,138,175,143,84,84,49,48,57,50,53,54,48,84,244,138,175,144,84,84,49,48,57,50,53,55,51,84,244,138,175,157,84,84,49,48,57,50,54,48,57,84,244,138,176,129,84,84,49,48,57,50,54,50,49,84,244,138,176,141,84,84,49,48,57,50,54,50,51,84,244,138,176,143,84,84,49,48,57,50,54,50,52,84,244,138,176,144,84,84,49,48,57,50,54,51,55,84,244,138,176,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19866 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19866_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19866_s.txt", Encoding.UTF8);

    public Test19866() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers7032abc4111d4702bce9d36696a0a648",
                        blob: Encoding.UTF8.GetString(new byte[]{84,57,49,56,52,57,55,84,243,160,143,161,84,84,57,49,56,52,57,56,84,243,160,143,162,84,84,57,49,56,52,57,57,84,243,160,143,163,84,84,57,49,56,53,48,48,84,243,160,143,164,84,84,57,49,56,53,48,49,84,243,160,143,165,84,84,57,49,56,53,48,50,84,243,160,143,166,84,84,57,49,56,53,48,51,84,243,160,143,167,84,84,57,49,56,53,48,52,84,243,160,143,168,84,84,57,49,56,53,48,53,84,243,160,143,169,84,84,57,49,56,53,48,54,84,243,160,143,170,84,84,57,49,56,53,48,55,84,243,160,143,171,84,84,57,49,56,53,48,56,84,243,160,143,172,84,84,57,49,56,53,48,57,84,243,160,143,173,84,84,57,49,56,53,49,48,84,243,160,143,174,84,84,57,49,56,53,49,49,84,243,160,143,175,84,84,57,49,56,53,49,50,84,243,160,143,176,84,84,57,49,56,53,49,51,84,243,160,143,177,84,84,57,49,56,53,49,52,84,243,160,143,178,84,84,57,49,56,53,49,53,84,243,160,143,179,84,84,57,49,56,53,49,54,84,243,160,143,180,84,84,57,49,56,53,49,55,84,243,160,143,181,84,84,57,49,56,53,49,56,84,243,160,143,182,84,84,57,49,56,53,49,57,84,243,160,143,183,84,84,57,49,56,53,50,48,84,243,160,143,184,84,84,57,49,56,53,50,49,84,243,160,143,185,84,84,57,49,56,53,50,50,84,243,160,143,186,84,84,57,49,56,53,50,51,84,243,160,143,187,84,84,57,49,56,53,50,52,84,243,160,143,188,84,84,57,49,56,53,50,53,84,243,160,143,189,84,84,57,49,56,53,50,54,84,243,160,143,190,84,84,57,49,56,53,50,55,84,243,160,143,191,84,84,57,49,56,53,50,56,84,243,160,144,128,84,84,57,49,56,53,50,57,84,243,160,144,129,84,84,57,49,56,53,51,48,84,243,160,144,130,84,84,57,49,56,53,51,49,84,243,160,144,131,84,84,57,49,56,53,51,50,84,243,160,144,132,84,84,57,49,56,53,51,51,84,243,160,144,133,84,84,57,49,56,53,51,52,84,243,160,144,134,84,84,57,49,56,53,51,53,84,243,160,144,135,84,84,57,49,56,53,51,54,84,243,160,144,136,84,84,57,49,56,53,51,55,84,243,160,144,137,84,84,57,49,56,53,51,56,84,243,160,144,138,84,84,57,49,56,53,51,57,84,243,160,144,139,84,84,57,49,56,53,52,48,84,243,160,144,140,84,84,57,49,56,53,52,49,84,243,160,144,141,84,84,57,49,56,53,52,50,84,243,160,144,142,84,84,57,49,56,53,52,51,84,243,160,144,143,84,84,57,49,56,53,52,52,84,243,160,144,144,84,84,57,49,56,53,52,53,84,243,160,144,145,84,84,57,49,56,53,52,54,84,243,160,144,146,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21003 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21003_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21003_s.txt", Encoding.UTF8);

    public Test21003() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersd35ea9f156764511b97173ebc769448f",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,48,52,48,48,84,244,143,134,128,84,84,49,49,49,48,52,48,49,84,244,143,134,129,84,84,49,49,49,48,52,48,50,84,244,143,134,130,84,84,49,49,49,48,52,48,51,84,244,143,134,131,84,84,49,49,49,48,52,48,52,84,244,143,134,132,84,84,49,49,49,48,52,48,53,84,244,143,134,133,84,84,49,49,49,48,52,48,54,84,244,143,134,134,84,84,49,49,49,48,52,48,55,84,244,143,134,135,84,84,49,49,49,48,52,48,56,84,244,143,134,136,84,84,49,49,49,48,52,48,57,84,244,143,134,137,84,84,49,49,49,48,52,49,48,84,244,143,134,138,84,84,49,49,49,48,52,49,49,84,244,143,134,139,84,84,49,49,49,48,52,49,50,84,244,143,134,140,84,84,49,49,49,48,52,49,51,84,244,143,134,141,84,84,49,49,49,48,52,49,52,84,244,143,134,142,84,84,49,49,49,48,52,49,53,84,244,143,134,143,84,84,49,49,49,48,52,49,54,84,244,143,134,144,84,84,49,49,49,48,52,49,55,84,244,143,134,145,84,84,49,49,49,48,52,49,56,84,244,143,134,146,84,84,49,49,49,48,52,49,57,84,244,143,134,147,84,84,49,49,49,48,52,50,48,84,244,143,134,148,84,84,49,49,49,48,52,50,49,84,244,143,134,149,84,84,49,49,49,48,52,50,50,84,244,143,134,150,84,84,49,49,49,48,52,50,51,84,244,143,134,151,84,84,49,49,49,48,52,50,52,84,244,143,134,152,84,84,49,49,49,48,52,50,53,84,244,143,134,153,84,84,49,49,49,48,52,50,54,84,244,143,134,154,84,84,49,49,49,48,52,50,55,84,244,143,134,155,84,84,49,49,49,48,52,50,56,84,244,143,134,156,84,84,49,49,49,48,52,50,57,84,244,143,134,157,84,84,49,49,49,48,52,51,48,84,244,143,134,158,84,84,49,49,49,48,52,51,49,84,244,143,134,159,84,84,49,49,49,48,52,51,50,84,244,143,134,160,84,84,49,49,49,48,52,51,51,84,244,143,134,161,84,84,49,49,49,48,52,51,52,84,244,143,134,162,84,84,49,49,49,48,52,51,53,84,244,143,134,163,84,84,49,49,49,48,52,51,54,84,244,143,134,164,84,84,49,49,49,48,52,51,55,84,244,143,134,165,84,84,49,49,49,48,52,51,56,84,244,143,134,166,84,84,49,49,49,48,52,51,57,84,244,143,134,167,84,84,49,49,49,48,52,52,48,84,244,143,134,168,84,84,49,49,49,48,52,52,49,84,244,143,134,169,84,84,49,49,49,48,52,52,50,84,244,143,134,170,84,84,49,49,49,48,52,52,51,84,244,143,134,171,84,84,49,49,49,48,52,52,52,84,244,143,134,172,84,84,49,49,49,48,52,52,53,84,244,143,134,173,84,84,49,49,49,48,52,52,54,84,244,143,134,174,84,84,49,49,49,48,52,52,55,84,244,143,134,175,84,84,49,49,49,48,52,52,56,84,244,143,134,176,84,84,49,49,49,48,52,52,57,84,244,143,134,177,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20822 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20822_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20822_s.txt", Encoding.UTF8);

    public Test20822() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersf4b0dcea8f7b4ccf92e1f36b952ddf93",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,50,54,49,57,84,244,141,140,155,84,84,49,49,48,50,54,50,48,84,244,141,140,156,84,84,49,49,48,50,54,50,49,84,244,141,140,157,84,84,49,49,48,50,54,50,50,84,244,141,140,158,84,84,49,49,48,50,54,50,51,84,244,141,140,159,84,84,49,49,48,50,54,50,52,84,244,141,140,160,84,84,49,49,48,50,54,50,53,84,244,141,140,161,84,84,49,49,48,50,54,50,54,84,244,141,140,162,84,84,49,49,48,50,54,50,55,84,244,141,140,163,84,84,49,49,48,50,54,50,56,84,244,141,140,164,84,84,49,49,48,50,54,50,57,84,244,141,140,165,84,84,49,49,48,50,54,51,48,84,244,141,140,166,84,84,49,49,48,50,54,51,49,84,244,141,140,167,84,84,49,49,48,50,54,51,50,84,244,141,140,168,84,84,49,49,48,50,54,51,51,84,244,141,140,169,84,84,49,49,48,50,54,51,52,84,244,141,140,170,84,84,49,49,48,50,54,51,53,84,244,141,140,171,84,84,49,49,48,50,54,51,54,84,244,141,140,172,84,84,49,49,48,50,54,51,55,84,244,141,140,173,84,84,49,49,48,50,54,51,56,84,244,141,140,174,84,84,49,49,48,50,54,51,57,84,244,141,140,175,84,84,49,49,48,50,54,52,48,84,244,141,140,176,84,84,49,49,48,50,54,52,49,84,244,141,140,177,84,84,49,49,48,50,54,52,50,84,244,141,140,178,84,84,49,49,48,50,54,52,51,84,244,141,140,179,84,84,49,49,48,50,54,52,52,84,244,141,140,180,84,84,49,49,48,50,54,52,53,84,244,141,140,181,84,84,49,49,48,50,54,52,54,84,244,141,140,182,84,84,49,49,48,50,54,52,55,84,244,141,140,183,84,84,49,49,48,50,54,52,56,84,244,141,140,184,84,84,49,49,48,50,54,52,57,84,244,141,140,185,84,84,49,49,48,50,54,53,48,84,244,141,140,186,84,84,49,49,48,50,54,53,49,84,244,141,140,187,84,84,49,49,48,50,54,53,50,84,244,141,140,188,84,84,49,49,48,50,54,53,51,84,244,141,140,189,84,84,49,49,48,50,54,53,52,84,244,141,140,190,84,84,49,49,48,50,54,53,53,84,244,141,140,191,84,84,49,49,48,50,54,53,54,84,244,141,141,128,84,84,49,49,48,50,54,53,55,84,244,141,141,129,84,84,49,49,48,50,54,53,56,84,244,141,141,130,84,84,49,49,48,50,54,53,57,84,244,141,141,131,84,84,49,49,48,50,54,54,48,84,244,141,141,132,84,84,49,49,48,50,54,54,49,84,244,141,141,133,84,84,49,49,48,50,54,54,50,84,244,141,141,134,84,84,49,49,48,50,54,54,51,84,244,141,141,135,84,84,49,49,48,50,54,54,52,84,244,141,141,136,84,84,49,49,48,50,54,54,53,84,244,141,141,137,84,84,49,49,48,50,54,54,54,84,244,141,141,138,84,84,49,49,48,50,54,54,55,84,244,141,141,139,84,84,49,49,48,50,54,54,56,84,244,141,141,140,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20217 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20217_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20217_s.txt", Encoding.UTF8);

    public Test20217() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers2b6cdd6684eb4500abcaa682adc323b7",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,51,53,50,49,51,84,243,188,175,141,84,84,49,48,51,53,50,49,53,84,243,188,175,143,84,84,49,48,51,53,50,49,54,84,243,188,175,144,84,84,49,48,51,53,50,50,57,84,243,188,175,157,84,84,49,48,51,53,50,54,53,84,243,188,176,129,84,84,49,48,51,53,50,55,55,84,243,188,176,141,84,84,49,48,51,53,50,55,57,84,243,188,176,143,84,84,49,48,51,53,50,56,48,84,243,188,176,144,84,84,49,48,51,53,50,57,51,84,243,188,176,157,84,84,49,48,51,53,51,50,57,84,243,188,177,129,84,84,49,48,51,53,51,52,49,84,243,188,177,141,84,84,49,48,51,53,51,52,51,84,243,188,177,143,84,84,49,48,51,53,51,52,52,84,243,188,177,144,84,84,49,48,51,53,51,53,55,84,243,188,177,157,84,84,49,48,51,53,51,57,51,84,243,188,178,129,84,84,49,48,51,53,52,48,53,84,243,188,178,141,84,84,49,48,51,53,52,48,55,84,243,188,178,143,84,84,49,48,51,53,52,48,56,84,243,188,178,144,84,84,49,48,51,53,52,50,49,84,243,188,178,157,84,84,49,48,51,53,52,53,55,84,243,188,179,129,84,84,49,48,51,53,52,54,57,84,243,188,179,141,84,84,49,48,51,53,52,55,49,84,243,188,179,143,84,84,49,48,51,53,52,55,50,84,243,188,179,144,84,84,49,48,51,53,52,56,53,84,243,188,179,157,84,84,49,48,51,53,53,50,49,84,243,188,180,129,84,84,49,48,51,53,53,51,51,84,243,188,180,141,84,84,49,48,51,53,53,51,53,84,243,188,180,143,84,84,49,48,51,53,53,51,54,84,243,188,180,144,84,84,49,48,51,53,53,52,57,84,243,188,180,157,84,84,49,48,51,53,53,56,53,84,243,188,181,129,84,84,49,48,51,53,53,57,55,84,243,188,181,141,84,84,49,48,51,53,53,57,57,84,243,188,181,143,84,84,49,48,51,53,54,48,48,84,243,188,181,144,84,84,49,48,51,53,54,49,51,84,243,188,181,157,84,84,49,48,51,53,54,52,57,84,243,188,182,129,84,84,49,48,51,53,54,54,49,84,243,188,182,141,84,84,49,48,51,53,54,54,51,84,243,188,182,143,84,84,49,48,51,53,54,54,52,84,243,188,182,144,84,84,49,48,51,53,54,55,55,84,243,188,182,157,84,84,49,48,51,53,55,49,51,84,243,188,183,129,84,84,49,48,51,53,55,50,53,84,243,188,183,141,84,84,49,48,51,53,55,50,55,84,243,188,183,143,84,84,49,48,51,53,55,50,56,84,243,188,183,144,84,84,49,48,51,53,55,52,49,84,243,188,183,157,84,84,49,48,51,53,55,55,55,84,243,188,184,129,84,84,49,48,51,53,55,56,57,84,243,188,184,141,84,84,49,48,51,53,55,57,49,84,243,188,184,143,84,84,49,48,51,53,55,57,50,84,243,188,184,144,84,84,49,48,51,53,56,48,53,84,243,188,184,157,84,84,49,48,51,53,56,52,49,84,243,188,185,129,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21080 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21080_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21080_s.txt", Encoding.UTF8);

    public Test21080() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers79aa3dd90e344ebe9466f3cb0c56378a",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,50,50,48,48,84,244,143,162,136,84,84,49,49,49,50,50,48,49,84,244,143,162,137,84,84,49,49,49,50,50,48,50,84,244,143,162,138,84,84,49,49,49,50,50,48,51,84,244,143,162,139,84,84,49,49,49,50,50,48,52,84,244,143,162,140,84,84,49,49,49,50,50,48,53,84,244,143,162,141,84,84,49,49,49,50,50,48,54,84,244,143,162,142,84,84,49,49,49,50,50,48,55,84,244,143,162,143,84,84,49,49,49,50,50,48,56,84,244,143,162,144,84,84,49,49,49,50,50,48,57,84,244,143,162,145,84,84,49,49,49,50,50,49,48,84,244,143,162,146,84,84,49,49,49,50,50,49,49,84,244,143,162,147,84,84,49,49,49,50,50,49,50,84,244,143,162,148,84,84,49,49,49,50,50,49,51,84,244,143,162,149,84,84,49,49,49,50,50,49,52,84,244,143,162,150,84,84,49,49,49,50,50,49,53,84,244,143,162,151,84,84,49,49,49,50,50,49,54,84,244,143,162,152,84,84,49,49,49,50,50,49,55,84,244,143,162,153,84,84,49,49,49,50,50,49,56,84,244,143,162,154,84,84,49,49,49,50,50,49,57,84,244,143,162,155,84,84,49,49,49,50,50,50,48,84,244,143,162,156,84,84,49,49,49,50,50,50,49,84,244,143,162,157,84,84,49,49,49,50,50,50,50,84,244,143,162,158,84,84,49,49,49,50,50,50,51,84,244,143,162,159,84,84,49,49,49,50,50,50,52,84,244,143,162,160,84,84,49,49,49,50,50,50,53,84,244,143,162,161,84,84,49,49,49,50,50,50,54,84,244,143,162,162,84,84,49,49,49,50,50,50,55,84,244,143,162,163,84,84,49,49,49,50,50,50,56,84,244,143,162,164,84,84,49,49,49,50,50,50,57,84,244,143,162,165,84,84,49,49,49,50,50,51,48,84,244,143,162,166,84,84,49,49,49,50,50,51,49,84,244,143,162,167,84,84,49,49,49,50,50,51,50,84,244,143,162,168,84,84,49,49,49,50,50,51,51,84,244,143,162,169,84,84,49,49,49,50,50,51,52,84,244,143,162,170,84,84,49,49,49,50,50,51,53,84,244,143,162,171,84,84,49,49,49,50,50,51,54,84,244,143,162,172,84,84,49,49,49,50,50,51,55,84,244,143,162,173,84,84,49,49,49,50,50,51,56,84,244,143,162,174,84,84,49,49,49,50,50,51,57,84,244,143,162,175,84,84,49,49,49,50,50,52,48,84,244,143,162,176,84,84,49,49,49,50,50,52,49,84,244,143,162,177,84,84,49,49,49,50,50,52,50,84,244,143,162,178,84,84,49,49,49,50,50,52,51,84,244,143,162,179,84,84,49,49,49,50,50,52,52,84,244,143,162,180,84,84,49,49,49,50,50,52,53,84,244,143,162,181,84,84,49,49,49,50,50,52,54,84,244,143,162,182,84,84,49,49,49,50,50,52,55,84,244,143,162,183,84,84,49,49,49,50,50,52,56,84,244,143,162,184,84,84,49,49,49,50,50,52,57,84,244,143,162,185,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21140 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21140_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21140_s.txt", Encoding.UTF8);

    public Test21140() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers56d1c908d8f44b69abe6817b1847a0f6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,51,54,53,48,84,244,143,184,178,84,84,49,49,49,51,54,53,49,84,244,143,184,179,84,84,49,49,49,51,54,53,50,84,244,143,184,180,84,84,49,49,49,51,54,53,51,84,244,143,184,181,84,84,49,49,49,51,54,53,52,84,244,143,184,182,84,84,49,49,49,51,54,53,53,84,244,143,184,183,84,84,49,49,49,51,54,53,54,84,244,143,184,184,84,84,49,49,49,51,54,53,55,84,244,143,184,185,84,84,49,49,49,51,54,53,56,84,244,143,184,186,84,84,49,49,49,51,54,53,57,84,244,143,184,187,84,84,49,49,49,51,54,54,48,84,244,143,184,188,84,84,49,49,49,51,54,54,49,84,244,143,184,189,84,84,49,49,49,51,54,54,50,84,244,143,184,190,84,84,49,49,49,51,54,54,51,84,244,143,184,191,84,84,49,49,49,51,54,54,52,84,244,143,185,128,84,84,49,49,49,51,54,54,53,84,244,143,185,129,84,84,49,49,49,51,54,54,54,84,244,143,185,130,84,84,49,49,49,51,54,54,55,84,244,143,185,131,84,84,49,49,49,51,54,54,56,84,244,143,185,132,84,84,49,49,49,51,54,54,57,84,244,143,185,133,84,84,49,49,49,51,54,55,48,84,244,143,185,134,84,84,49,49,49,51,54,55,49,84,244,143,185,135,84,84,49,49,49,51,54,55,50,84,244,143,185,136,84,84,49,49,49,51,54,55,51,84,244,143,185,137,84,84,49,49,49,51,54,55,52,84,244,143,185,138,84,84,49,49,49,51,54,55,53,84,244,143,185,139,84,84,49,49,49,51,54,55,54,84,244,143,185,140,84,84,49,49,49,51,54,55,55,84,244,143,185,141,84,84,49,49,49,51,54,55,56,84,244,143,185,142,84,84,49,49,49,51,54,55,57,84,244,143,185,143,84,84,49,49,49,51,54,56,48,84,244,143,185,144,84,84,49,49,49,51,54,56,49,84,244,143,185,145,84,84,49,49,49,51,54,56,50,84,244,143,185,146,84,84,49,49,49,51,54,56,51,84,244,143,185,147,84,84,49,49,49,51,54,56,52,84,244,143,185,148,84,84,49,49,49,51,54,56,53,84,244,143,185,149,84,84,49,49,49,51,54,56,54,84,244,143,185,150,84,84,49,49,49,51,54,56,55,84,244,143,185,151,84,84,49,49,49,51,54,56,56,84,244,143,185,152,84,84,49,49,49,51,54,56,57,84,244,143,185,153,84,84,49,49,49,51,54,57,48,84,244,143,185,154,84,84,49,49,49,51,54,57,49,84,244,143,185,155,84,84,49,49,49,51,54,57,50,84,244,143,185,156,84,84,49,49,49,51,54,57,51,84,244,143,185,157,84,84,49,49,49,51,54,57,52,84,244,143,185,158,84,84,49,49,49,51,54,57,53,84,244,143,185,159,84,84,49,49,49,51,54,57,54,84,244,143,185,160,84,84,49,49,49,51,54,57,55,84,244,143,185,161,84,84,49,49,49,51,54,57,56,84,244,143,185,162,84,84,49,49,49,51,54,57,57,84,244,143,185,163,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20941 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20941_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20941_s.txt", Encoding.UTF8);

    public Test20941() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers9e891393b2624599aedf317812121dcf",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,53,52,54,57,84,244,141,184,189,84,84,49,49,48,53,52,55,48,84,244,141,184,190,84,84,49,49,48,53,52,55,49,84,244,141,184,191,84,84,49,49,48,53,52,55,50,84,244,141,185,128,84,84,49,49,48,53,52,55,51,84,244,141,185,129,84,84,49,49,48,53,52,55,52,84,244,141,185,130,84,84,49,49,48,53,52,55,53,84,244,141,185,131,84,84,49,49,48,53,52,55,54,84,244,141,185,132,84,84,49,49,48,53,52,55,55,84,244,141,185,133,84,84,49,49,48,53,52,55,56,84,244,141,185,134,84,84,49,49,48,53,52,55,57,84,244,141,185,135,84,84,49,49,48,53,52,56,48,84,244,141,185,136,84,84,49,49,48,53,52,56,49,84,244,141,185,137,84,84,49,49,48,53,52,56,50,84,244,141,185,138,84,84,49,49,48,53,52,56,51,84,244,141,185,139,84,84,49,49,48,53,52,56,52,84,244,141,185,140,84,84,49,49,48,53,52,56,53,84,244,141,185,141,84,84,49,49,48,53,52,56,54,84,244,141,185,142,84,84,49,49,48,53,52,56,55,84,244,141,185,143,84,84,49,49,48,53,52,56,56,84,244,141,185,144,84,84,49,49,48,53,52,56,57,84,244,141,185,145,84,84,49,49,48,53,52,57,48,84,244,141,185,146,84,84,49,49,48,53,52,57,49,84,244,141,185,147,84,84,49,49,48,53,52,57,50,84,244,141,185,148,84,84,49,49,48,53,52,57,51,84,244,141,185,149,84,84,49,49,48,53,52,57,52,84,244,141,185,150,84,84,49,49,48,53,52,57,53,84,244,141,185,151,84,84,49,49,48,53,52,57,54,84,244,141,185,152,84,84,49,49,48,53,52,57,55,84,244,141,185,153,84,84,49,49,48,53,52,57,56,84,244,141,185,154,84,84,49,49,48,53,52,57,57,84,244,141,185,155,84,84,49,49,48,53,53,48,48,84,244,141,185,156,84,84,49,49,48,53,53,48,49,84,244,141,185,157,84,84,49,49,48,53,53,48,50,84,244,141,185,158,84,84,49,49,48,53,53,48,51,84,244,141,185,159,84,84,49,49,48,53,53,48,52,84,244,141,185,160,84,84,49,49,48,53,53,48,53,84,244,141,185,161,84,84,49,49,48,53,53,48,54,84,244,141,185,162,84,84,49,49,48,53,53,48,55,84,244,141,185,163,84,84,49,49,48,53,53,48,56,84,244,141,185,164,84,84,49,49,48,53,53,48,57,84,244,141,185,165,84,84,49,49,48,53,53,49,48,84,244,141,185,166,84,84,49,49,48,53,53,49,49,84,244,141,185,167,84,84,49,49,48,53,53,49,50,84,244,141,185,168,84,84,49,49,48,53,53,49,51,84,244,141,185,169,84,84,49,49,48,53,53,49,52,84,244,141,185,170,84,84,49,49,48,53,53,49,53,84,244,141,185,171,84,84,49,49,48,53,53,49,54,84,244,141,185,172,84,84,49,49,48,53,53,49,55,84,244,141,185,173,84,84,49,49,48,53,53,49,56,84,244,141,185,174,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test19447 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19447_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\19447_s.txt", Encoding.UTF8);

    public Test19447() : base(recordedRequest, recordedResponse, "accounts8d43a024a0ff30a")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "accounts8d43a024a0ff30a",
                        container: "$root",
                        blob: "foo",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 512,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20888 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20888_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20888_s.txt", Encoding.UTF8);

    public Test20888() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersdd41d3a5bb7f42709f7cec587f1a204a",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,52,50,49,57,84,244,141,165,155,84,84,49,49,48,52,50,50,48,84,244,141,165,156,84,84,49,49,48,52,50,50,49,84,244,141,165,157,84,84,49,49,48,52,50,50,50,84,244,141,165,158,84,84,49,49,48,52,50,50,51,84,244,141,165,159,84,84,49,49,48,52,50,50,52,84,244,141,165,160,84,84,49,49,48,52,50,50,53,84,244,141,165,161,84,84,49,49,48,52,50,50,54,84,244,141,165,162,84,84,49,49,48,52,50,50,55,84,244,141,165,163,84,84,49,49,48,52,50,50,56,84,244,141,165,164,84,84,49,49,48,52,50,50,57,84,244,141,165,165,84,84,49,49,48,52,50,51,48,84,244,141,165,166,84,84,49,49,48,52,50,51,49,84,244,141,165,167,84,84,49,49,48,52,50,51,50,84,244,141,165,168,84,84,49,49,48,52,50,51,51,84,244,141,165,169,84,84,49,49,48,52,50,51,52,84,244,141,165,170,84,84,49,49,48,52,50,51,53,84,244,141,165,171,84,84,49,49,48,52,50,51,54,84,244,141,165,172,84,84,49,49,48,52,50,51,55,84,244,141,165,173,84,84,49,49,48,52,50,51,56,84,244,141,165,174,84,84,49,49,48,52,50,51,57,84,244,141,165,175,84,84,49,49,48,52,50,52,48,84,244,141,165,176,84,84,49,49,48,52,50,52,49,84,244,141,165,177,84,84,49,49,48,52,50,52,50,84,244,141,165,178,84,84,49,49,48,52,50,52,51,84,244,141,165,179,84,84,49,49,48,52,50,52,52,84,244,141,165,180,84,84,49,49,48,52,50,52,53,84,244,141,165,181,84,84,49,49,48,52,50,52,54,84,244,141,165,182,84,84,49,49,48,52,50,52,55,84,244,141,165,183,84,84,49,49,48,52,50,52,56,84,244,141,165,184,84,84,49,49,48,52,50,52,57,84,244,141,165,185,84,84,49,49,48,52,50,53,48,84,244,141,165,186,84,84,49,49,48,52,50,53,49,84,244,141,165,187,84,84,49,49,48,52,50,53,50,84,244,141,165,188,84,84,49,49,48,52,50,53,51,84,244,141,165,189,84,84,49,49,48,52,50,53,52,84,244,141,165,190,84,84,49,49,48,52,50,53,53,84,244,141,165,191,84,84,49,49,48,52,50,53,54,84,244,141,166,128,84,84,49,49,48,52,50,53,55,84,244,141,166,129,84,84,49,49,48,52,50,53,56,84,244,141,166,130,84,84,49,49,48,52,50,53,57,84,244,141,166,131,84,84,49,49,48,52,50,54,48,84,244,141,166,132,84,84,49,49,48,52,50,54,49,84,244,141,166,133,84,84,49,49,48,52,50,54,50,84,244,141,166,134,84,84,49,49,48,52,50,54,51,84,244,141,166,135,84,84,49,49,48,52,50,54,52,84,244,141,166,136,84,84,49,49,48,52,50,54,53,84,244,141,166,137,84,84,49,49,48,52,50,54,54,84,244,141,166,138,84,84,49,49,48,52,50,54,55,84,244,141,166,139,84,84,49,49,48,52,50,54,56,84,244,141,166,140,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20943 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20943_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20943_s.txt", Encoding.UTF8);

    public Test20943() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers9e891393b2624599aedf317812121dcf",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,53,53,49,57,84,244,141,185,175,84,84,49,49,48,53,53,50,48,84,244,141,185,176,84,84,49,49,48,53,53,50,49,84,244,141,185,177,84,84,49,49,48,53,53,50,50,84,244,141,185,178,84,84,49,49,48,53,53,50,51,84,244,141,185,179,84,84,49,49,48,53,53,50,52,84,244,141,185,180,84,84,49,49,48,53,53,50,53,84,244,141,185,181,84,84,49,49,48,53,53,50,54,84,244,141,185,182,84,84,49,49,48,53,53,50,55,84,244,141,185,183,84,84,49,49,48,53,53,50,56,84,244,141,185,184,84,84,49,49,48,53,53,50,57,84,244,141,185,185,84,84,49,49,48,53,53,51,48,84,244,141,185,186,84,84,49,49,48,53,53,51,49,84,244,141,185,187,84,84,49,49,48,53,53,51,50,84,244,141,185,188,84,84,49,49,48,53,53,51,51,84,244,141,185,189,84,84,49,49,48,53,53,51,52,84,244,141,185,190,84,84,49,49,48,53,53,51,53,84,244,141,185,191,84,84,49,49,48,53,53,51,54,84,244,141,186,128,84,84,49,49,48,53,53,51,55,84,244,141,186,129,84,84,49,49,48,53,53,51,56,84,244,141,186,130,84,84,49,49,48,53,53,51,57,84,244,141,186,131,84,84,49,49,48,53,53,52,48,84,244,141,186,132,84,84,49,49,48,53,53,52,49,84,244,141,186,133,84,84,49,49,48,53,53,52,50,84,244,141,186,134,84,84,49,49,48,53,53,52,51,84,244,141,186,135,84,84,49,49,48,53,53,52,52,84,244,141,186,136,84,84,49,49,48,53,53,52,53,84,244,141,186,137,84,84,49,49,48,53,53,52,54,84,244,141,186,138,84,84,49,49,48,53,53,52,55,84,244,141,186,139,84,84,49,49,48,53,53,52,56,84,244,141,186,140,84,84,49,49,48,53,53,52,57,84,244,141,186,141,84,84,49,49,48,53,53,53,48,84,244,141,186,142,84,84,49,49,48,53,53,53,49,84,244,141,186,143,84,84,49,49,48,53,53,53,50,84,244,141,186,144,84,84,49,49,48,53,53,53,51,84,244,141,186,145,84,84,49,49,48,53,53,53,52,84,244,141,186,146,84,84,49,49,48,53,53,53,53,84,244,141,186,147,84,84,49,49,48,53,53,53,54,84,244,141,186,148,84,84,49,49,48,53,53,53,55,84,244,141,186,149,84,84,49,49,48,53,53,53,56,84,244,141,186,150,84,84,49,49,48,53,53,53,57,84,244,141,186,151,84,84,49,49,48,53,53,54,48,84,244,141,186,152,84,84,49,49,48,53,53,54,49,84,244,141,186,153,84,84,49,49,48,53,53,54,50,84,244,141,186,154,84,84,49,49,48,53,53,54,51,84,244,141,186,155,84,84,49,49,48,53,53,54,52,84,244,141,186,156,84,84,49,49,48,53,53,54,53,84,244,141,186,157,84,84,49,49,48,53,53,54,54,84,244,141,186,158,84,84,49,49,48,53,53,54,55,84,244,141,186,159,84,84,49,49,48,53,53,54,56,84,244,141,186,160,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21082 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21082_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21082_s.txt", Encoding.UTF8);

    public Test21082() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers79aa3dd90e344ebe9466f3cb0c56378a",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,50,50,53,48,84,244,143,162,186,84,84,49,49,49,50,50,53,49,84,244,143,162,187,84,84,49,49,49,50,50,53,50,84,244,143,162,188,84,84,49,49,49,50,50,53,51,84,244,143,162,189,84,84,49,49,49,50,50,53,52,84,244,143,162,190,84,84,49,49,49,50,50,53,53,84,244,143,162,191,84,84,49,49,49,50,50,53,54,84,244,143,163,128,84,84,49,49,49,50,50,53,55,84,244,143,163,129,84,84,49,49,49,50,50,53,56,84,244,143,163,130,84,84,49,49,49,50,50,53,57,84,244,143,163,131,84,84,49,49,49,50,50,54,48,84,244,143,163,132,84,84,49,49,49,50,50,54,49,84,244,143,163,133,84,84,49,49,49,50,50,54,50,84,244,143,163,134,84,84,49,49,49,50,50,54,51,84,244,143,163,135,84,84,49,49,49,50,50,54,52,84,244,143,163,136,84,84,49,49,49,50,50,54,53,84,244,143,163,137,84,84,49,49,49,50,50,54,54,84,244,143,163,138,84,84,49,49,49,50,50,54,55,84,244,143,163,139,84,84,49,49,49,50,50,54,56,84,244,143,163,140,84,84,49,49,49,50,50,54,57,84,244,143,163,141,84,84,49,49,49,50,50,55,48,84,244,143,163,142,84,84,49,49,49,50,50,55,49,84,244,143,163,143,84,84,49,49,49,50,50,55,50,84,244,143,163,144,84,84,49,49,49,50,50,55,51,84,244,143,163,145,84,84,49,49,49,50,50,55,52,84,244,143,163,146,84,84,49,49,49,50,50,55,53,84,244,143,163,147,84,84,49,49,49,50,50,55,54,84,244,143,163,148,84,84,49,49,49,50,50,55,55,84,244,143,163,149,84,84,49,49,49,50,50,55,56,84,244,143,163,150,84,84,49,49,49,50,50,55,57,84,244,143,163,151,84,84,49,49,49,50,50,56,48,84,244,143,163,152,84,84,49,49,49,50,50,56,49,84,244,143,163,153,84,84,49,49,49,50,50,56,50,84,244,143,163,154,84,84,49,49,49,50,50,56,51,84,244,143,163,155,84,84,49,49,49,50,50,56,52,84,244,143,163,156,84,84,49,49,49,50,50,56,53,84,244,143,163,157,84,84,49,49,49,50,50,56,54,84,244,143,163,158,84,84,49,49,49,50,50,56,55,84,244,143,163,159,84,84,49,49,49,50,50,56,56,84,244,143,163,160,84,84,49,49,49,50,50,56,57,84,244,143,163,161,84,84,49,49,49,50,50,57,48,84,244,143,163,162,84,84,49,49,49,50,50,57,49,84,244,143,163,163,84,84,49,49,49,50,50,57,50,84,244,143,163,164,84,84,49,49,49,50,50,57,51,84,244,143,163,165,84,84,49,49,49,50,50,57,52,84,244,143,163,166,84,84,49,49,49,50,50,57,53,84,244,143,163,167,84,84,49,49,49,50,50,57,54,84,244,143,163,168,84,84,49,49,49,50,50,57,55,84,244,143,163,169,84,84,49,49,49,50,50,57,56,84,244,143,163,170,84,84,49,49,49,50,50,57,57,84,244,143,163,171,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21005 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21005_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21005_s.txt", Encoding.UTF8);

    public Test21005() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersd35ea9f156764511b97173ebc769448f",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,48,52,53,48,84,244,143,134,178,84,84,49,49,49,48,52,53,49,84,244,143,134,179,84,84,49,49,49,48,52,53,50,84,244,143,134,180,84,84,49,49,49,48,52,53,51,84,244,143,134,181,84,84,49,49,49,48,52,53,52,84,244,143,134,182,84,84,49,49,49,48,52,53,53,84,244,143,134,183,84,84,49,49,49,48,52,53,54,84,244,143,134,184,84,84,49,49,49,48,52,53,55,84,244,143,134,185,84,84,49,49,49,48,52,53,56,84,244,143,134,186,84,84,49,49,49,48,52,53,57,84,244,143,134,187,84,84,49,49,49,48,52,54,48,84,244,143,134,188,84,84,49,49,49,48,52,54,49,84,244,143,134,189,84,84,49,49,49,48,52,54,50,84,244,143,134,190,84,84,49,49,49,48,52,54,51,84,244,143,134,191,84,84,49,49,49,48,52,54,52,84,244,143,135,128,84,84,49,49,49,48,52,54,53,84,244,143,135,129,84,84,49,49,49,48,52,54,54,84,244,143,135,130,84,84,49,49,49,48,52,54,55,84,244,143,135,131,84,84,49,49,49,48,52,54,56,84,244,143,135,132,84,84,49,49,49,48,52,54,57,84,244,143,135,133,84,84,49,49,49,48,52,55,48,84,244,143,135,134,84,84,49,49,49,48,52,55,49,84,244,143,135,135,84,84,49,49,49,48,52,55,50,84,244,143,135,136,84,84,49,49,49,48,52,55,51,84,244,143,135,137,84,84,49,49,49,48,52,55,52,84,244,143,135,138,84,84,49,49,49,48,52,55,53,84,244,143,135,139,84,84,49,49,49,48,52,55,54,84,244,143,135,140,84,84,49,49,49,48,52,55,55,84,244,143,135,141,84,84,49,49,49,48,52,55,56,84,244,143,135,142,84,84,49,49,49,48,52,55,57,84,244,143,135,143,84,84,49,49,49,48,52,56,48,84,244,143,135,144,84,84,49,49,49,48,52,56,49,84,244,143,135,145,84,84,49,49,49,48,52,56,50,84,244,143,135,146,84,84,49,49,49,48,52,56,51,84,244,143,135,147,84,84,49,49,49,48,52,56,52,84,244,143,135,148,84,84,49,49,49,48,52,56,53,84,244,143,135,149,84,84,49,49,49,48,52,56,54,84,244,143,135,150,84,84,49,49,49,48,52,56,55,84,244,143,135,151,84,84,49,49,49,48,52,56,56,84,244,143,135,152,84,84,49,49,49,48,52,56,57,84,244,143,135,153,84,84,49,49,49,48,52,57,48,84,244,143,135,154,84,84,49,49,49,48,52,57,49,84,244,143,135,155,84,84,49,49,49,48,52,57,50,84,244,143,135,156,84,84,49,49,49,48,52,57,51,84,244,143,135,157,84,84,49,49,49,48,52,57,52,84,244,143,135,158,84,84,49,49,49,48,52,57,53,84,244,143,135,159,84,84,49,49,49,48,52,57,54,84,244,143,135,160,84,84,49,49,49,48,52,57,55,84,244,143,135,161,84,84,49,49,49,48,52,57,56,84,244,143,135,162,84,84,49,49,49,48,52,57,57,84,244,143,135,163,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20824 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20824_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20824_s.txt", Encoding.UTF8);

    public Test20824() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersf4b0dcea8f7b4ccf92e1f36b952ddf93",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,50,54,54,57,84,244,141,141,141,84,84,49,49,48,50,54,55,48,84,244,141,141,142,84,84,49,49,48,50,54,55,49,84,244,141,141,143,84,84,49,49,48,50,54,55,50,84,244,141,141,144,84,84,49,49,48,50,54,55,51,84,244,141,141,145,84,84,49,49,48,50,54,55,52,84,244,141,141,146,84,84,49,49,48,50,54,55,53,84,244,141,141,147,84,84,49,49,48,50,54,55,54,84,244,141,141,148,84,84,49,49,48,50,54,55,55,84,244,141,141,149,84,84,49,49,48,50,54,55,56,84,244,141,141,150,84,84,49,49,48,50,54,55,57,84,244,141,141,151,84,84,49,49,48,50,54,56,48,84,244,141,141,152,84,84,49,49,48,50,54,56,49,84,244,141,141,153,84,84,49,49,48,50,54,56,50,84,244,141,141,154,84,84,49,49,48,50,54,56,51,84,244,141,141,155,84,84,49,49,48,50,54,56,52,84,244,141,141,156,84,84,49,49,48,50,54,56,53,84,244,141,141,157,84,84,49,49,48,50,54,56,54,84,244,141,141,158,84,84,49,49,48,50,54,56,55,84,244,141,141,159,84,84,49,49,48,50,54,56,56,84,244,141,141,160,84,84,49,49,48,50,54,56,57,84,244,141,141,161,84,84,49,49,48,50,54,57,48,84,244,141,141,162,84,84,49,49,48,50,54,57,49,84,244,141,141,163,84,84,49,49,48,50,54,57,50,84,244,141,141,164,84,84,49,49,48,50,54,57,51,84,244,141,141,165,84,84,49,49,48,50,54,57,52,84,244,141,141,166,84,84,49,49,48,50,54,57,53,84,244,141,141,167,84,84,49,49,48,50,54,57,54,84,244,141,141,168,84,84,49,49,48,50,54,57,55,84,244,141,141,169,84,84,49,49,48,50,54,57,56,84,244,141,141,170,84,84,49,49,48,50,54,57,57,84,244,141,141,171,84,84,49,49,48,50,55,48,48,84,244,141,141,172,84,84,49,49,48,50,55,48,49,84,244,141,141,173,84,84,49,49,48,50,55,48,50,84,244,141,141,174,84,84,49,49,48,50,55,48,51,84,244,141,141,175,84,84,49,49,48,50,55,48,52,84,244,141,141,176,84,84,49,49,48,50,55,48,53,84,244,141,141,177,84,84,49,49,48,50,55,48,54,84,244,141,141,178,84,84,49,49,48,50,55,48,55,84,244,141,141,179,84,84,49,49,48,50,55,48,56,84,244,141,141,180,84,84,49,49,48,50,55,48,57,84,244,141,141,181,84,84,49,49,48,50,55,49,48,84,244,141,141,182,84,84,49,49,48,50,55,49,49,84,244,141,141,183,84,84,49,49,48,50,55,49,50,84,244,141,141,184,84,84,49,49,48,50,55,49,51,84,244,141,141,185,84,84,49,49,48,50,55,49,52,84,244,141,141,186,84,84,49,49,48,50,55,49,53,84,244,141,141,187,84,84,49,49,48,50,55,49,54,84,244,141,141,188,84,84,49,49,48,50,55,49,55,84,244,141,141,189,84,84,49,49,48,50,55,49,56,84,244,141,141,190,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20663 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20663_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20663_s.txt", Encoding.UTF8);

    public Test20663() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers9df780a74f2549dda8f9f337dadb7946",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,56,50,49,50,53,84,244,136,140,141,84,84,49,48,56,50,49,50,55,84,244,136,140,143,84,84,49,48,56,50,49,50,56,84,244,136,140,144,84,84,49,48,56,50,49,52,49,84,244,136,140,157,84,84,49,48,56,50,49,55,54,84,244,136,141,128,84,84,49,48,56,50,49,55,55,84,244,136,141,129,84,84,49,48,56,50,49,55,56,84,244,136,141,130,84,84,49,48,56,50,49,55,57,84,244,136,141,131,84,84,49,48,56,50,49,56,48,84,244,136,141,132,84,84,49,48,56,50,49,56,49,84,244,136,141,133,84,84,49,48,56,50,49,56,50,84,244,136,141,134,84,84,49,48,56,50,49,56,51,84,244,136,141,135,84,84,49,48,56,50,49,56,52,84,244,136,141,136,84,84,49,48,56,50,49,56,53,84,244,136,141,137,84,84,49,48,56,50,49,56,54,84,244,136,141,138,84,84,49,48,56,50,49,56,55,84,244,136,141,139,84,84,49,48,56,50,49,56,56,84,244,136,141,140,84,84,49,48,56,50,49,56,57,84,244,136,141,141,84,84,49,48,56,50,49,57,48,84,244,136,141,142,84,84,49,48,56,50,49,57,49,84,244,136,141,143,84,84,49,48,56,50,49,57,50,84,244,136,141,144,84,84,49,48,56,50,49,57,51,84,244,136,141,145,84,84,49,48,56,50,49,57,52,84,244,136,141,146,84,84,49,48,56,50,49,57,53,84,244,136,141,147,84,84,49,48,56,50,49,57,54,84,244,136,141,148,84,84,49,48,56,50,49,57,55,84,244,136,141,149,84,84,49,48,56,50,49,57,56,84,244,136,141,150,84,84,49,48,56,50,49,57,57,84,244,136,141,151,84,84,49,48,56,50,50,48,48,84,244,136,141,152,84,84,49,48,56,50,50,48,49,84,244,136,141,153,84,84,49,48,56,50,50,48,50,84,244,136,141,154,84,84,49,48,56,50,50,48,51,84,244,136,141,155,84,84,49,48,56,50,50,48,52,84,244,136,141,156,84,84,49,48,56,50,50,48,53,84,244,136,141,157,84,84,49,48,56,50,50,48,54,84,244,136,141,158,84,84,49,48,56,50,50,48,55,84,244,136,141,159,84,84,49,48,56,50,50,48,56,84,244,136,141,160,84,84,49,48,56,50,50,48,57,84,244,136,141,161,84,84,49,48,56,50,50,49,48,84,244,136,141,162,84,84,49,48,56,50,50,49,49,84,244,136,141,163,84,84,49,48,56,50,50,49,50,84,244,136,141,164,84,84,49,48,56,50,50,49,51,84,244,136,141,165,84,84,49,48,56,50,50,49,52,84,244,136,141,166,84,84,49,48,56,50,50,49,53,84,244,136,141,167,84,84,49,48,56,50,50,49,54,84,244,136,141,168,84,84,49,48,56,50,50,49,55,84,244,136,141,169,84,84,49,48,56,50,50,49,56,84,244,136,141,170,84,84,49,48,56,50,50,49,57,84,244,136,141,171,84,84,49,48,56,50,50,50,48,84,244,136,141,172,84,84,49,48,56,50,50,50,49,84,244,136,141,173,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21007 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21007_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21007_s.txt", Encoding.UTF8);

    public Test21007() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersd35ea9f156764511b97173ebc769448f",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,48,53,48,48,84,244,143,135,164,84,84,49,49,49,48,53,48,49,84,244,143,135,165,84,84,49,49,49,48,53,48,50,84,244,143,135,166,84,84,49,49,49,48,53,48,51,84,244,143,135,167,84,84,49,49,49,48,53,48,52,84,244,143,135,168,84,84,49,49,49,48,53,48,53,84,244,143,135,169,84,84,49,49,49,48,53,48,54,84,244,143,135,170,84,84,49,49,49,48,53,48,55,84,244,143,135,171,84,84,49,49,49,48,53,48,56,84,244,143,135,172,84,84,49,49,49,48,53,48,57,84,244,143,135,173,84,84,49,49,49,48,53,49,48,84,244,143,135,174,84,84,49,49,49,48,53,49,49,84,244,143,135,175,84,84,49,49,49,48,53,49,50,84,244,143,135,176,84,84,49,49,49,48,53,49,51,84,244,143,135,177,84,84,49,49,49,48,53,49,52,84,244,143,135,178,84,84,49,49,49,48,53,49,53,84,244,143,135,179,84,84,49,49,49,48,53,49,54,84,244,143,135,180,84,84,49,49,49,48,53,49,55,84,244,143,135,181,84,84,49,49,49,48,53,49,56,84,244,143,135,182,84,84,49,49,49,48,53,49,57,84,244,143,135,183,84,84,49,49,49,48,53,50,48,84,244,143,135,184,84,84,49,49,49,48,53,50,49,84,244,143,135,185,84,84,49,49,49,48,53,50,50,84,244,143,135,186,84,84,49,49,49,48,53,50,51,84,244,143,135,187,84,84,49,49,49,48,53,50,52,84,244,143,135,188,84,84,49,49,49,48,53,50,53,84,244,143,135,189,84,84,49,49,49,48,53,50,54,84,244,143,135,190,84,84,49,49,49,48,53,50,55,84,244,143,135,191,84,84,49,49,49,48,53,50,56,84,244,143,136,128,84,84,49,49,49,48,53,50,57,84,244,143,136,129,84,84,49,49,49,48,53,51,48,84,244,143,136,130,84,84,49,49,49,48,53,51,49,84,244,143,136,131,84,84,49,49,49,48,53,51,50,84,244,143,136,132,84,84,49,49,49,48,53,51,51,84,244,143,136,133,84,84,49,49,49,48,53,51,52,84,244,143,136,134,84,84,49,49,49,48,53,51,53,84,244,143,136,135,84,84,49,49,49,48,53,51,54,84,244,143,136,136,84,84,49,49,49,48,53,51,55,84,244,143,136,137,84,84,49,49,49,48,53,51,56,84,244,143,136,138,84,84,49,49,49,48,53,51,57,84,244,143,136,139,84,84,49,49,49,48,53,52,48,84,244,143,136,140,84,84,49,49,49,48,53,52,49,84,244,143,136,141,84,84,49,49,49,48,53,52,50,84,244,143,136,142,84,84,49,49,49,48,53,52,51,84,244,143,136,143,84,84,49,49,49,48,53,52,52,84,244,143,136,144,84,84,49,49,49,48,53,52,53,84,244,143,136,145,84,84,49,49,49,48,53,52,54,84,244,143,136,146,84,84,49,49,49,48,53,52,55,84,244,143,136,147,84,84,49,49,49,48,53,52,56,84,244,143,136,148,84,84,49,49,49,48,53,52,57,84,244,143,136,149,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21142 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21142_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21142_s.txt", Encoding.UTF8);

    public Test21142() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers56d1c908d8f44b69abe6817b1847a0f6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,51,55,48,48,84,244,143,185,164,84,84,49,49,49,51,55,48,49,84,244,143,185,165,84,84,49,49,49,51,55,48,50,84,244,143,185,166,84,84,49,49,49,51,55,48,51,84,244,143,185,167,84,84,49,49,49,51,55,48,52,84,244,143,185,168,84,84,49,49,49,51,55,48,53,84,244,143,185,169,84,84,49,49,49,51,55,48,54,84,244,143,185,170,84,84,49,49,49,51,55,48,55,84,244,143,185,171,84,84,49,49,49,51,55,48,56,84,244,143,185,172,84,84,49,49,49,51,55,48,57,84,244,143,185,173,84,84,49,49,49,51,55,49,48,84,244,143,185,174,84,84,49,49,49,51,55,49,49,84,244,143,185,175,84,84,49,49,49,51,55,49,50,84,244,143,185,176,84,84,49,49,49,51,55,49,51,84,244,143,185,177,84,84,49,49,49,51,55,49,52,84,244,143,185,178,84,84,49,49,49,51,55,49,53,84,244,143,185,179,84,84,49,49,49,51,55,49,54,84,244,143,185,180,84,84,49,49,49,51,55,49,55,84,244,143,185,181,84,84,49,49,49,51,55,49,56,84,244,143,185,182,84,84,49,49,49,51,55,49,57,84,244,143,185,183,84,84,49,49,49,51,55,50,48,84,244,143,185,184,84,84,49,49,49,51,55,50,49,84,244,143,185,185,84,84,49,49,49,51,55,50,50,84,244,143,185,186,84,84,49,49,49,51,55,50,51,84,244,143,185,187,84,84,49,49,49,51,55,50,52,84,244,143,185,188,84,84,49,49,49,51,55,50,53,84,244,143,185,189,84,84,49,49,49,51,55,50,54,84,244,143,185,190,84,84,49,49,49,51,55,50,55,84,244,143,185,191,84,84,49,49,49,51,55,50,56,84,244,143,186,128,84,84,49,49,49,51,55,50,57,84,244,143,186,129,84,84,49,49,49,51,55,51,48,84,244,143,186,130,84,84,49,49,49,51,55,51,49,84,244,143,186,131,84,84,49,49,49,51,55,51,50,84,244,143,186,132,84,84,49,49,49,51,55,51,51,84,244,143,186,133,84,84,49,49,49,51,55,51,52,84,244,143,186,134,84,84,49,49,49,51,55,51,53,84,244,143,186,135,84,84,49,49,49,51,55,51,54,84,244,143,186,136,84,84,49,49,49,51,55,51,55,84,244,143,186,137,84,84,49,49,49,51,55,51,56,84,244,143,186,138,84,84,49,49,49,51,55,51,57,84,244,143,186,139,84,84,49,49,49,51,55,52,48,84,244,143,186,140,84,84,49,49,49,51,55,52,49,84,244,143,186,141,84,84,49,49,49,51,55,52,50,84,244,143,186,142,84,84,49,49,49,51,55,52,51,84,244,143,186,143,84,84,49,49,49,51,55,52,52,84,244,143,186,144,84,84,49,49,49,51,55,52,53,84,244,143,186,145,84,84,49,49,49,51,55,52,54,84,244,143,186,146,84,84,49,49,49,51,55,52,55,84,244,143,186,147,84,84,49,49,49,51,55,52,56,84,244,143,186,148,84,84,49,49,49,51,55,52,57,84,244,143,186,149,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20890 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20890_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20890_s.txt", Encoding.UTF8);

    public Test20890() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersdd41d3a5bb7f42709f7cec587f1a204a",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,52,50,54,57,84,244,141,166,141,84,84,49,49,48,52,50,55,48,84,244,141,166,142,84,84,49,49,48,52,50,55,49,84,244,141,166,143,84,84,49,49,48,52,50,55,50,84,244,141,166,144,84,84,49,49,48,52,50,55,51,84,244,141,166,145,84,84,49,49,48,52,50,55,52,84,244,141,166,146,84,84,49,49,48,52,50,55,53,84,244,141,166,147,84,84,49,49,48,52,50,55,54,84,244,141,166,148,84,84,49,49,48,52,50,55,55,84,244,141,166,149,84,84,49,49,48,52,50,55,56,84,244,141,166,150,84,84,49,49,48,52,50,55,57,84,244,141,166,151,84,84,49,49,48,52,50,56,48,84,244,141,166,152,84,84,49,49,48,52,50,56,49,84,244,141,166,153,84,84,49,49,48,52,50,56,50,84,244,141,166,154,84,84,49,49,48,52,50,56,51,84,244,141,166,155,84,84,49,49,48,52,50,56,52,84,244,141,166,156,84,84,49,49,48,52,50,56,53,84,244,141,166,157,84,84,49,49,48,52,50,56,54,84,244,141,166,158,84,84,49,49,48,52,50,56,55,84,244,141,166,159,84,84,49,49,48,52,50,56,56,84,244,141,166,160,84,84,49,49,48,52,50,56,57,84,244,141,166,161,84,84,49,49,48,52,50,57,48,84,244,141,166,162,84,84,49,49,48,52,50,57,49,84,244,141,166,163,84,84,49,49,48,52,50,57,50,84,244,141,166,164,84,84,49,49,48,52,50,57,51,84,244,141,166,165,84,84,49,49,48,52,50,57,52,84,244,141,166,166,84,84,49,49,48,52,50,57,53,84,244,141,166,167,84,84,49,49,48,52,50,57,54,84,244,141,166,168,84,84,49,49,48,52,50,57,55,84,244,141,166,169,84,84,49,49,48,52,50,57,56,84,244,141,166,170,84,84,49,49,48,52,50,57,57,84,244,141,166,171,84,84,49,49,48,52,51,48,48,84,244,141,166,172,84,84,49,49,48,52,51,48,49,84,244,141,166,173,84,84,49,49,48,52,51,48,50,84,244,141,166,174,84,84,49,49,48,52,51,48,51,84,244,141,166,175,84,84,49,49,48,52,51,48,52,84,244,141,166,176,84,84,49,49,48,52,51,48,53,84,244,141,166,177,84,84,49,49,48,52,51,48,54,84,244,141,166,178,84,84,49,49,48,52,51,48,55,84,244,141,166,179,84,84,49,49,48,52,51,48,56,84,244,141,166,180,84,84,49,49,48,52,51,48,57,84,244,141,166,181,84,84,49,49,48,52,51,49,48,84,244,141,166,182,84,84,49,49,48,52,51,49,49,84,244,141,166,183,84,84,49,49,48,52,51,49,50,84,244,141,166,184,84,84,49,49,48,52,51,49,51,84,244,141,166,185,84,84,49,49,48,52,51,49,52,84,244,141,166,186,84,84,49,49,48,52,51,49,53,84,244,141,166,187,84,84,49,49,48,52,51,49,54,84,244,141,166,188,84,84,49,49,48,52,51,49,55,84,244,141,166,189,84,84,49,49,48,52,51,49,56,84,244,141,166,190,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20665 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20665_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20665_s.txt", Encoding.UTF8);

    public Test20665() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers9df780a74f2549dda8f9f337dadb7946",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,48,56,50,50,50,50,84,244,136,141,174,84,84,49,48,56,50,50,50,51,84,244,136,141,175,84,84,49,48,56,50,50,50,52,84,244,136,141,176,84,84,49,48,56,50,50,50,53,84,244,136,141,177,84,84,49,48,56,50,50,50,54,84,244,136,141,178,84,84,49,48,56,50,50,50,55,84,244,136,141,179,84,84,49,48,56,50,50,50,56,84,244,136,141,180,84,84,49,48,56,50,50,50,57,84,244,136,141,181,84,84,49,48,56,50,50,51,48,84,244,136,141,182,84,84,49,48,56,50,50,51,49,84,244,136,141,183,84,84,49,48,56,50,50,51,50,84,244,136,141,184,84,84,49,48,56,50,50,51,51,84,244,136,141,185,84,84,49,48,56,50,50,51,52,84,244,136,141,186,84,84,49,48,56,50,50,51,53,84,244,136,141,187,84,84,49,48,56,50,50,51,54,84,244,136,141,188,84,84,49,48,56,50,50,51,55,84,244,136,141,189,84,84,49,48,56,50,50,51,56,84,244,136,141,190,84,84,49,48,56,50,50,51,57,84,244,136,141,191,84,84,49,48,56,50,50,52,49,84,244,136,142,129,84,84,49,48,56,50,50,53,51,84,244,136,142,141,84,84,49,48,56,50,50,53,53,84,244,136,142,143,84,84,49,48,56,50,50,53,54,84,244,136,142,144,84,84,49,48,56,50,50,54,57,84,244,136,142,157,84,84,49,48,56,50,51,48,52,84,244,136,143,128,84,84,49,48,56,50,51,48,53,84,244,136,143,129,84,84,49,48,56,50,51,48,54,84,244,136,143,130,84,84,49,48,56,50,51,48,55,84,244,136,143,131,84,84,49,48,56,50,51,48,56,84,244,136,143,132,84,84,49,48,56,50,51,48,57,84,244,136,143,133,84,84,49,48,56,50,51,49,48,84,244,136,143,134,84,84,49,48,56,50,51,49,49,84,244,136,143,135,84,84,49,48,56,50,51,49,50,84,244,136,143,136,84,84,49,48,56,50,51,49,51,84,244,136,143,137,84,84,49,48,56,50,51,49,52,84,244,136,143,138,84,84,49,48,56,50,51,49,53,84,244,136,143,139,84,84,49,48,56,50,51,49,54,84,244,136,143,140,84,84,49,48,56,50,51,49,55,84,244,136,143,141,84,84,49,48,56,50,51,49,56,84,244,136,143,142,84,84,49,48,56,50,51,49,57,84,244,136,143,143,84,84,49,48,56,50,51,50,48,84,244,136,143,144,84,84,49,48,56,50,51,50,49,84,244,136,143,145,84,84,49,48,56,50,51,50,50,84,244,136,143,146,84,84,49,48,56,50,51,50,51,84,244,136,143,147,84,84,49,48,56,50,51,50,52,84,244,136,143,148,84,84,49,48,56,50,51,50,53,84,244,136,143,149,84,84,49,48,56,50,51,50,54,84,244,136,143,150,84,84,49,48,56,50,51,50,55,84,244,136,143,151,84,84,49,48,56,50,51,50,56,84,244,136,143,152,84,84,49,48,56,50,51,50,57,84,244,136,143,153,84,84,49,48,56,50,51,51,48,84,244,136,143,154,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21144 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21144_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21144_s.txt", Encoding.UTF8);

    public Test21144() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers56d1c908d8f44b69abe6817b1847a0f6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,51,55,53,48,84,244,143,186,150,84,84,49,49,49,51,55,53,49,84,244,143,186,151,84,84,49,49,49,51,55,53,50,84,244,143,186,152,84,84,49,49,49,51,55,53,51,84,244,143,186,153,84,84,49,49,49,51,55,53,52,84,244,143,186,154,84,84,49,49,49,51,55,53,53,84,244,143,186,155,84,84,49,49,49,51,55,53,54,84,244,143,186,156,84,84,49,49,49,51,55,53,55,84,244,143,186,157,84,84,49,49,49,51,55,53,56,84,244,143,186,158,84,84,49,49,49,51,55,53,57,84,244,143,186,159,84,84,49,49,49,51,55,54,48,84,244,143,186,160,84,84,49,49,49,51,55,54,49,84,244,143,186,161,84,84,49,49,49,51,55,54,50,84,244,143,186,162,84,84,49,49,49,51,55,54,51,84,244,143,186,163,84,84,49,49,49,51,55,54,52,84,244,143,186,164,84,84,49,49,49,51,55,54,53,84,244,143,186,165,84,84,49,49,49,51,55,54,54,84,244,143,186,166,84,84,49,49,49,51,55,54,55,84,244,143,186,167,84,84,49,49,49,51,55,54,56,84,244,143,186,168,84,84,49,49,49,51,55,54,57,84,244,143,186,169,84,84,49,49,49,51,55,55,48,84,244,143,186,170,84,84,49,49,49,51,55,55,49,84,244,143,186,171,84,84,49,49,49,51,55,55,50,84,244,143,186,172,84,84,49,49,49,51,55,55,51,84,244,143,186,173,84,84,49,49,49,51,55,55,52,84,244,143,186,174,84,84,49,49,49,51,55,55,53,84,244,143,186,175,84,84,49,49,49,51,55,55,54,84,244,143,186,176,84,84,49,49,49,51,55,55,55,84,244,143,186,177,84,84,49,49,49,51,55,55,56,84,244,143,186,178,84,84,49,49,49,51,55,55,57,84,244,143,186,179,84,84,49,49,49,51,55,56,48,84,244,143,186,180,84,84,49,49,49,51,55,56,49,84,244,143,186,181,84,84,49,49,49,51,55,56,50,84,244,143,186,182,84,84,49,49,49,51,55,56,51,84,244,143,186,183,84,84,49,49,49,51,55,56,52,84,244,143,186,184,84,84,49,49,49,51,55,56,53,84,244,143,186,185,84,84,49,49,49,51,55,56,54,84,244,143,186,186,84,84,49,49,49,51,55,56,55,84,244,143,186,187,84,84,49,49,49,51,55,56,56,84,244,143,186,188,84,84,49,49,49,51,55,56,57,84,244,143,186,189,84,84,49,49,49,51,55,57,48,84,244,143,186,190,84,84,49,49,49,51,55,57,49,84,244,143,186,191,84,84,49,49,49,51,55,57,50,84,244,143,187,128,84,84,49,49,49,51,55,57,51,84,244,143,187,129,84,84,49,49,49,51,55,57,52,84,244,143,187,130,84,84,49,49,49,51,55,57,53,84,244,143,187,131,84,84,49,49,49,51,55,57,54,84,244,143,187,132,84,84,49,49,49,51,55,57,55,84,244,143,187,133,84,84,49,49,49,51,55,57,56,84,244,143,187,134,84,84,49,49,49,51,55,57,57,84,244,143,187,135,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21009 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21009_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21009_s.txt", Encoding.UTF8);

    public Test21009() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersd35ea9f156764511b97173ebc769448f",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,48,53,53,48,84,244,143,136,150,84,84,49,49,49,48,53,53,49,84,244,143,136,151,84,84,49,49,49,48,53,53,50,84,244,143,136,152,84,84,49,49,49,48,53,53,51,84,244,143,136,153,84,84,49,49,49,48,53,53,52,84,244,143,136,154,84,84,49,49,49,48,53,53,53,84,244,143,136,155,84,84,49,49,49,48,53,53,54,84,244,143,136,156,84,84,49,49,49,48,53,53,55,84,244,143,136,157,84,84,49,49,49,48,53,53,56,84,244,143,136,158,84,84,49,49,49,48,53,53,57,84,244,143,136,159,84,84,49,49,49,48,53,54,48,84,244,143,136,160,84,84,49,49,49,48,53,54,49,84,244,143,136,161,84,84,49,49,49,48,53,54,50,84,244,143,136,162,84,84,49,49,49,48,53,54,51,84,244,143,136,163,84,84,49,49,49,48,53,54,52,84,244,143,136,164,84,84,49,49,49,48,53,54,53,84,244,143,136,165,84,84,49,49,49,48,53,54,54,84,244,143,136,166,84,84,49,49,49,48,53,54,55,84,244,143,136,167,84,84,49,49,49,48,53,54,56,84,244,143,136,168,84,84,49,49,49,48,53,54,57,84,244,143,136,169,84,84,49,49,49,48,53,55,48,84,244,143,136,170,84,84,49,49,49,48,53,55,49,84,244,143,136,171,84,84,49,49,49,48,53,55,50,84,244,143,136,172,84,84,49,49,49,48,53,55,51,84,244,143,136,173,84,84,49,49,49,48,53,55,52,84,244,143,136,174,84,84,49,49,49,48,53,55,53,84,244,143,136,175,84,84,49,49,49,48,53,55,54,84,244,143,136,176,84,84,49,49,49,48,53,55,55,84,244,143,136,177,84,84,49,49,49,48,53,55,56,84,244,143,136,178,84,84,49,49,49,48,53,55,57,84,244,143,136,179,84,84,49,49,49,48,53,56,48,84,244,143,136,180,84,84,49,49,49,48,53,56,49,84,244,143,136,181,84,84,49,49,49,48,53,56,50,84,244,143,136,182,84,84,49,49,49,48,53,56,51,84,244,143,136,183,84,84,49,49,49,48,53,56,52,84,244,143,136,184,84,84,49,49,49,48,53,56,53,84,244,143,136,185,84,84,49,49,49,48,53,56,54,84,244,143,136,186,84,84,49,49,49,48,53,56,55,84,244,143,136,187,84,84,49,49,49,48,53,56,56,84,244,143,136,188,84,84,49,49,49,48,53,56,57,84,244,143,136,189,84,84,49,49,49,48,53,57,48,84,244,143,136,190,84,84,49,49,49,48,53,57,49,84,244,143,136,191,84,84,49,49,49,48,53,57,50,84,244,143,137,128,84,84,49,49,49,48,53,57,51,84,244,143,137,129,84,84,49,49,49,48,53,57,52,84,244,143,137,130,84,84,49,49,49,48,53,57,53,84,244,143,137,131,84,84,49,49,49,48,53,57,54,84,244,143,137,132,84,84,49,49,49,48,53,57,55,84,244,143,137,133,84,84,49,49,49,48,53,57,56,84,244,143,137,134,84,84,49,49,49,48,53,57,57,84,244,143,137,135,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20826 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20826_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20826_s.txt", Encoding.UTF8);

    public Test20826() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersf4b0dcea8f7b4ccf92e1f36b952ddf93",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,50,55,49,57,84,244,141,141,191,84,84,49,49,48,50,55,50,48,84,244,141,142,128,84,84,49,49,48,50,55,50,49,84,244,141,142,129,84,84,49,49,48,50,55,50,50,84,244,141,142,130,84,84,49,49,48,50,55,50,51,84,244,141,142,131,84,84,49,49,48,50,55,50,52,84,244,141,142,132,84,84,49,49,48,50,55,50,53,84,244,141,142,133,84,84,49,49,48,50,55,50,54,84,244,141,142,134,84,84,49,49,48,50,55,50,55,84,244,141,142,135,84,84,49,49,48,50,55,50,56,84,244,141,142,136,84,84,49,49,48,50,55,50,57,84,244,141,142,137,84,84,49,49,48,50,55,51,48,84,244,141,142,138,84,84,49,49,48,50,55,51,49,84,244,141,142,139,84,84,49,49,48,50,55,51,50,84,244,141,142,140,84,84,49,49,48,50,55,51,51,84,244,141,142,141,84,84,49,49,48,50,55,51,52,84,244,141,142,142,84,84,49,49,48,50,55,51,53,84,244,141,142,143,84,84,49,49,48,50,55,51,54,84,244,141,142,144,84,84,49,49,48,50,55,51,55,84,244,141,142,145,84,84,49,49,48,50,55,51,56,84,244,141,142,146,84,84,49,49,48,50,55,51,57,84,244,141,142,147,84,84,49,49,48,50,55,52,48,84,244,141,142,148,84,84,49,49,48,50,55,52,49,84,244,141,142,149,84,84,49,49,48,50,55,52,50,84,244,141,142,150,84,84,49,49,48,50,55,52,51,84,244,141,142,151,84,84,49,49,48,50,55,52,52,84,244,141,142,152,84,84,49,49,48,50,55,52,53,84,244,141,142,153,84,84,49,49,48,50,55,52,54,84,244,141,142,154,84,84,49,49,48,50,55,52,55,84,244,141,142,155,84,84,49,49,48,50,55,52,56,84,244,141,142,156,84,84,49,49,48,50,55,52,57,84,244,141,142,157,84,84,49,49,48,50,55,53,48,84,244,141,142,158,84,84,49,49,48,50,55,53,49,84,244,141,142,159,84,84,49,49,48,50,55,53,50,84,244,141,142,160,84,84,49,49,48,50,55,53,51,84,244,141,142,161,84,84,49,49,48,50,55,53,52,84,244,141,142,162,84,84,49,49,48,50,55,53,53,84,244,141,142,163,84,84,49,49,48,50,55,53,54,84,244,141,142,164,84,84,49,49,48,50,55,53,55,84,244,141,142,165,84,84,49,49,48,50,55,53,56,84,244,141,142,166,84,84,49,49,48,50,55,53,57,84,244,141,142,167,84,84,49,49,48,50,55,54,48,84,244,141,142,168,84,84,49,49,48,50,55,54,49,84,244,141,142,169,84,84,49,49,48,50,55,54,50,84,244,141,142,170,84,84,49,49,48,50,55,54,51,84,244,141,142,171,84,84,49,49,48,50,55,54,52,84,244,141,142,172,84,84,49,49,48,50,55,54,53,84,244,141,142,173,84,84,49,49,48,50,55,54,54,84,244,141,142,174,84,84,49,49,48,50,55,54,55,84,244,141,142,175,84,84,49,49,48,50,55,54,56,84,244,141,142,176,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20947 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20947_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20947_s.txt", Encoding.UTF8);

    public Test20947() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersdf87e0f5374149afa792ac52b484870e",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,53,53,54,57,84,244,141,186,161,84,84,49,49,48,53,53,55,48,84,244,141,186,162,84,84,49,49,48,53,53,55,49,84,244,141,186,163,84,84,49,49,48,53,53,55,50,84,244,141,186,164,84,84,49,49,48,53,53,55,51,84,244,141,186,165,84,84,49,49,48,53,53,55,52,84,244,141,186,166,84,84,49,49,48,53,53,55,53,84,244,141,186,167,84,84,49,49,48,53,53,55,54,84,244,141,186,168,84,84,49,49,48,53,53,55,55,84,244,141,186,169,84,84,49,49,48,53,53,55,56,84,244,141,186,170,84,84,49,49,48,53,53,55,57,84,244,141,186,171,84,84,49,49,48,53,53,56,48,84,244,141,186,172,84,84,49,49,48,53,53,56,49,84,244,141,186,173,84,84,49,49,48,53,53,56,50,84,244,141,186,174,84,84,49,49,48,53,53,56,51,84,244,141,186,175,84,84,49,49,48,53,53,56,52,84,244,141,186,176,84,84,49,49,48,53,53,56,53,84,244,141,186,177,84,84,49,49,48,53,53,56,54,84,244,141,186,178,84,84,49,49,48,53,53,56,55,84,244,141,186,179,84,84,49,49,48,53,53,56,56,84,244,141,186,180,84,84,49,49,48,53,53,56,57,84,244,141,186,181,84,84,49,49,48,53,53,57,48,84,244,141,186,182,84,84,49,49,48,53,53,57,49,84,244,141,186,183,84,84,49,49,48,53,53,57,50,84,244,141,186,184,84,84,49,49,48,53,53,57,51,84,244,141,186,185,84,84,49,49,48,53,53,57,52,84,244,141,186,186,84,84,49,49,48,53,53,57,53,84,244,141,186,187,84,84,49,49,48,53,53,57,54,84,244,141,186,188,84,84,49,49,48,53,53,57,55,84,244,141,186,189,84,84,49,49,48,53,53,57,56,84,244,141,186,190,84,84,49,49,48,53,53,57,57,84,244,141,186,191,84,84,49,49,48,53,54,48,48,84,244,141,187,128,84,84,49,49,48,53,54,48,49,84,244,141,187,129,84,84,49,49,48,53,54,48,50,84,244,141,187,130,84,84,49,49,48,53,54,48,51,84,244,141,187,131,84,84,49,49,48,53,54,48,52,84,244,141,187,132,84,84,49,49,48,53,54,48,53,84,244,141,187,133,84,84,49,49,48,53,54,48,54,84,244,141,187,134,84,84,49,49,48,53,54,48,55,84,244,141,187,135,84,84,49,49,48,53,54,48,56,84,244,141,187,136,84,84,49,49,48,53,54,48,57,84,244,141,187,137,84,84,49,49,48,53,54,49,48,84,244,141,187,138,84,84,49,49,48,53,54,49,49,84,244,141,187,139,84,84,49,49,48,53,54,49,50,84,244,141,187,140,84,84,49,49,48,53,54,49,51,84,244,141,187,141,84,84,49,49,48,53,54,49,52,84,244,141,187,142,84,84,49,49,48,53,54,49,53,84,244,141,187,143,84,84,49,49,48,53,54,49,54,84,244,141,187,144,84,84,49,49,48,53,54,49,55,84,244,141,187,145,84,84,49,49,48,53,54,49,56,84,244,141,187,146,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21011 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21011_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21011_s.txt", Encoding.UTF8);

    public Test21011() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersd35ea9f156764511b97173ebc769448f",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,48,54,48,48,84,244,143,137,136,84,84,49,49,49,48,54,48,49,84,244,143,137,137,84,84,49,49,49,48,54,48,50,84,244,143,137,138,84,84,49,49,49,48,54,48,51,84,244,143,137,139,84,84,49,49,49,48,54,48,52,84,244,143,137,140,84,84,49,49,49,48,54,48,53,84,244,143,137,141,84,84,49,49,49,48,54,48,54,84,244,143,137,142,84,84,49,49,49,48,54,48,55,84,244,143,137,143,84,84,49,49,49,48,54,48,56,84,244,143,137,144,84,84,49,49,49,48,54,48,57,84,244,143,137,145,84,84,49,49,49,48,54,49,48,84,244,143,137,146,84,84,49,49,49,48,54,49,49,84,244,143,137,147,84,84,49,49,49,48,54,49,50,84,244,143,137,148,84,84,49,49,49,48,54,49,51,84,244,143,137,149,84,84,49,49,49,48,54,49,52,84,244,143,137,150,84,84,49,49,49,48,54,49,53,84,244,143,137,151,84,84,49,49,49,48,54,49,54,84,244,143,137,152,84,84,49,49,49,48,54,49,55,84,244,143,137,153,84,84,49,49,49,48,54,49,56,84,244,143,137,154,84,84,49,49,49,48,54,49,57,84,244,143,137,155,84,84,49,49,49,48,54,50,48,84,244,143,137,156,84,84,49,49,49,48,54,50,49,84,244,143,137,157,84,84,49,49,49,48,54,50,50,84,244,143,137,158,84,84,49,49,49,48,54,50,51,84,244,143,137,159,84,84,49,49,49,48,54,50,52,84,244,143,137,160,84,84,49,49,49,48,54,50,53,84,244,143,137,161,84,84,49,49,49,48,54,50,54,84,244,143,137,162,84,84,49,49,49,48,54,50,55,84,244,143,137,163,84,84,49,49,49,48,54,50,56,84,244,143,137,164,84,84,49,49,49,48,54,50,57,84,244,143,137,165,84,84,49,49,49,48,54,51,48,84,244,143,137,166,84,84,49,49,49,48,54,51,49,84,244,143,137,167,84,84,49,49,49,48,54,51,50,84,244,143,137,168,84,84,49,49,49,48,54,51,51,84,244,143,137,169,84,84,49,49,49,48,54,51,52,84,244,143,137,170,84,84,49,49,49,48,54,51,53,84,244,143,137,171,84,84,49,49,49,48,54,51,54,84,244,143,137,172,84,84,49,49,49,48,54,51,55,84,244,143,137,173,84,84,49,49,49,48,54,51,56,84,244,143,137,174,84,84,49,49,49,48,54,51,57,84,244,143,137,175,84,84,49,49,49,48,54,52,48,84,244,143,137,176,84,84,49,49,49,48,54,52,49,84,244,143,137,177,84,84,49,49,49,48,54,52,50,84,244,143,137,178,84,84,49,49,49,48,54,52,51,84,244,143,137,179,84,84,49,49,49,48,54,52,52,84,244,143,137,180,84,84,49,49,49,48,54,52,53,84,244,143,137,181,84,84,49,49,49,48,54,52,54,84,244,143,137,182,84,84,49,49,49,48,54,52,55,84,244,143,137,183,84,84,49,49,49,48,54,52,56,84,244,143,137,184,84,84,49,49,49,48,54,52,57,84,244,143,137,185,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21146 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21146_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21146_s.txt", Encoding.UTF8);

    public Test21146() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers56d1c908d8f44b69abe6817b1847a0f6",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,51,56,48,48,84,244,143,187,136,84,84,49,49,49,51,56,48,49,84,244,143,187,137,84,84,49,49,49,51,56,48,50,84,244,143,187,138,84,84,49,49,49,51,56,48,51,84,244,143,187,139,84,84,49,49,49,51,56,48,52,84,244,143,187,140,84,84,49,49,49,51,56,48,53,84,244,143,187,141,84,84,49,49,49,51,56,48,54,84,244,143,187,142,84,84,49,49,49,51,56,48,55,84,244,143,187,143,84,84,49,49,49,51,56,48,56,84,244,143,187,144,84,84,49,49,49,51,56,48,57,84,244,143,187,145,84,84,49,49,49,51,56,49,48,84,244,143,187,146,84,84,49,49,49,51,56,49,49,84,244,143,187,147,84,84,49,49,49,51,56,49,50,84,244,143,187,148,84,84,49,49,49,51,56,49,51,84,244,143,187,149,84,84,49,49,49,51,56,49,52,84,244,143,187,150,84,84,49,49,49,51,56,49,53,84,244,143,187,151,84,84,49,49,49,51,56,49,54,84,244,143,187,152,84,84,49,49,49,51,56,49,55,84,244,143,187,153,84,84,49,49,49,51,56,49,56,84,244,143,187,154,84,84,49,49,49,51,56,49,57,84,244,143,187,155,84,84,49,49,49,51,56,50,48,84,244,143,187,156,84,84,49,49,49,51,56,50,49,84,244,143,187,157,84,84,49,49,49,51,56,50,50,84,244,143,187,158,84,84,49,49,49,51,56,50,51,84,244,143,187,159,84,84,49,49,49,51,56,50,52,84,244,143,187,160,84,84,49,49,49,51,56,50,53,84,244,143,187,161,84,84,49,49,49,51,56,50,54,84,244,143,187,162,84,84,49,49,49,51,56,50,55,84,244,143,187,163,84,84,49,49,49,51,56,50,56,84,244,143,187,164,84,84,49,49,49,51,56,50,57,84,244,143,187,165,84,84,49,49,49,51,56,51,48,84,244,143,187,166,84,84,49,49,49,51,56,51,49,84,244,143,187,167,84,84,49,49,49,51,56,51,50,84,244,143,187,168,84,84,49,49,49,51,56,51,51,84,244,143,187,169,84,84,49,49,49,51,56,51,52,84,244,143,187,170,84,84,49,49,49,51,56,51,53,84,244,143,187,171,84,84,49,49,49,51,56,51,54,84,244,143,187,172,84,84,49,49,49,51,56,51,55,84,244,143,187,173,84,84,49,49,49,51,56,51,56,84,244,143,187,174,84,84,49,49,49,51,56,51,57,84,244,143,187,175,84,84,49,49,49,51,56,52,48,84,244,143,187,176,84,84,49,49,49,51,56,52,49,84,244,143,187,177,84,84,49,49,49,51,56,52,50,84,244,143,187,178,84,84,49,49,49,51,56,52,51,84,244,143,187,179,84,84,49,49,49,51,56,52,52,84,244,143,187,180,84,84,49,49,49,51,56,52,53,84,244,143,187,181,84,84,49,49,49,51,56,52,54,84,244,143,187,182,84,84,49,49,49,51,56,52,55,84,244,143,187,183,84,84,49,49,49,51,56,52,56,84,244,143,187,184,84,84,49,49,49,51,56,52,57,84,244,143,187,185,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20949 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20949_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20949_s.txt", Encoding.UTF8);

    public Test20949() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersdf87e0f5374149afa792ac52b484870e",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,53,54,49,57,84,244,141,187,147,84,84,49,49,48,53,54,50,48,84,244,141,187,148,84,84,49,49,48,53,54,50,49,84,244,141,187,149,84,84,49,49,48,53,54,50,50,84,244,141,187,150,84,84,49,49,48,53,54,50,51,84,244,141,187,151,84,84,49,49,48,53,54,50,52,84,244,141,187,152,84,84,49,49,48,53,54,50,53,84,244,141,187,153,84,84,49,49,48,53,54,50,54,84,244,141,187,154,84,84,49,49,48,53,54,50,55,84,244,141,187,155,84,84,49,49,48,53,54,50,56,84,244,141,187,156,84,84,49,49,48,53,54,50,57,84,244,141,187,157,84,84,49,49,48,53,54,51,48,84,244,141,187,158,84,84,49,49,48,53,54,51,49,84,244,141,187,159,84,84,49,49,48,53,54,51,50,84,244,141,187,160,84,84,49,49,48,53,54,51,51,84,244,141,187,161,84,84,49,49,48,53,54,51,52,84,244,141,187,162,84,84,49,49,48,53,54,51,53,84,244,141,187,163,84,84,49,49,48,53,54,51,54,84,244,141,187,164,84,84,49,49,48,53,54,51,55,84,244,141,187,165,84,84,49,49,48,53,54,51,56,84,244,141,187,166,84,84,49,49,48,53,54,51,57,84,244,141,187,167,84,84,49,49,48,53,54,52,48,84,244,141,187,168,84,84,49,49,48,53,54,52,49,84,244,141,187,169,84,84,49,49,48,53,54,52,50,84,244,141,187,170,84,84,49,49,48,53,54,52,51,84,244,141,187,171,84,84,49,49,48,53,54,52,52,84,244,141,187,172,84,84,49,49,48,53,54,52,53,84,244,141,187,173,84,84,49,49,48,53,54,52,54,84,244,141,187,174,84,84,49,49,48,53,54,52,55,84,244,141,187,175,84,84,49,49,48,53,54,52,56,84,244,141,187,176,84,84,49,49,48,53,54,52,57,84,244,141,187,177,84,84,49,49,48,53,54,53,48,84,244,141,187,178,84,84,49,49,48,53,54,53,49,84,244,141,187,179,84,84,49,49,48,53,54,53,50,84,244,141,187,180,84,84,49,49,48,53,54,53,51,84,244,141,187,181,84,84,49,49,48,53,54,53,52,84,244,141,187,182,84,84,49,49,48,53,54,53,53,84,244,141,187,183,84,84,49,49,48,53,54,53,54,84,244,141,187,184,84,84,49,49,48,53,54,53,55,84,244,141,187,185,84,84,49,49,48,53,54,53,56,84,244,141,187,186,84,84,49,49,48,53,54,53,57,84,244,141,187,187,84,84,49,49,48,53,54,54,48,84,244,141,187,188,84,84,49,49,48,53,54,54,49,84,244,141,187,189,84,84,49,49,48,53,54,54,50,84,244,141,187,190,84,84,49,49,48,53,54,54,51,84,244,141,187,191,84,84,49,49,48,53,54,54,52,84,244,141,188,128,84,84,49,49,48,53,54,54,53,84,244,141,188,129,84,84,49,49,48,53,54,54,54,84,244,141,188,130,84,84,49,49,48,53,54,54,55,84,244,141,188,131,84,84,49,49,48,53,54,54,56,84,244,141,188,132,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21013 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21013_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21013_s.txt", Encoding.UTF8);

    public Test21013() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersd35ea9f156764511b97173ebc769448f",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,48,54,53,48,84,244,143,137,186,84,84,49,49,49,48,54,53,49,84,244,143,137,187,84,84,49,49,49,48,54,53,50,84,244,143,137,188,84,84,49,49,49,48,54,53,51,84,244,143,137,189,84,84,49,49,49,48,54,53,52,84,244,143,137,190,84,84,49,49,49,48,54,53,53,84,244,143,137,191,84,84,49,49,49,48,54,53,54,84,244,143,138,128,84,84,49,49,49,48,54,53,55,84,244,143,138,129,84,84,49,49,49,48,54,53,56,84,244,143,138,130,84,84,49,49,49,48,54,53,57,84,244,143,138,131,84,84,49,49,49,48,54,54,48,84,244,143,138,132,84,84,49,49,49,48,54,54,49,84,244,143,138,133,84,84,49,49,49,48,54,54,50,84,244,143,138,134,84,84,49,49,49,48,54,54,51,84,244,143,138,135,84,84,49,49,49,48,54,54,52,84,244,143,138,136,84,84,49,49,49,48,54,54,53,84,244,143,138,137,84,84,49,49,49,48,54,54,54,84,244,143,138,138,84,84,49,49,49,48,54,54,55,84,244,143,138,139,84,84,49,49,49,48,54,54,56,84,244,143,138,140,84,84,49,49,49,48,54,54,57,84,244,143,138,141,84,84,49,49,49,48,54,55,48,84,244,143,138,142,84,84,49,49,49,48,54,55,49,84,244,143,138,143,84,84,49,49,49,48,54,55,50,84,244,143,138,144,84,84,49,49,49,48,54,55,51,84,244,143,138,145,84,84,49,49,49,48,54,55,52,84,244,143,138,146,84,84,49,49,49,48,54,55,53,84,244,143,138,147,84,84,49,49,49,48,54,55,54,84,244,143,138,148,84,84,49,49,49,48,54,55,55,84,244,143,138,149,84,84,49,49,49,48,54,55,56,84,244,143,138,150,84,84,49,49,49,48,54,55,57,84,244,143,138,151,84,84,49,49,49,48,54,56,48,84,244,143,138,152,84,84,49,49,49,48,54,56,49,84,244,143,138,153,84,84,49,49,49,48,54,56,50,84,244,143,138,154,84,84,49,49,49,48,54,56,51,84,244,143,138,155,84,84,49,49,49,48,54,56,52,84,244,143,138,156,84,84,49,49,49,48,54,56,53,84,244,143,138,157,84,84,49,49,49,48,54,56,54,84,244,143,138,158,84,84,49,49,49,48,54,56,55,84,244,143,138,159,84,84,49,49,49,48,54,56,56,84,244,143,138,160,84,84,49,49,49,48,54,56,57,84,244,143,138,161,84,84,49,49,49,48,54,57,48,84,244,143,138,162,84,84,49,49,49,48,54,57,49,84,244,143,138,163,84,84,49,49,49,48,54,57,50,84,244,143,138,164,84,84,49,49,49,48,54,57,51,84,244,143,138,165,84,84,49,49,49,48,54,57,52,84,244,143,138,166,84,84,49,49,49,48,54,57,53,84,244,143,138,167,84,84,49,49,49,48,54,57,54,84,244,143,138,168,84,84,49,49,49,48,54,57,55,84,244,143,138,169,84,84,49,49,49,48,54,57,56,84,244,143,138,170,84,84,49,49,49,48,54,57,57,84,244,143,138,171,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20951 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20951_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20951_s.txt", Encoding.UTF8);

    public Test20951() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersdf87e0f5374149afa792ac52b484870e",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,53,54,54,57,84,244,141,188,133,84,84,49,49,48,53,54,55,48,84,244,141,188,134,84,84,49,49,48,53,54,55,49,84,244,141,188,135,84,84,49,49,48,53,54,55,50,84,244,141,188,136,84,84,49,49,48,53,54,55,51,84,244,141,188,137,84,84,49,49,48,53,54,55,52,84,244,141,188,138,84,84,49,49,48,53,54,55,53,84,244,141,188,139,84,84,49,49,48,53,54,55,54,84,244,141,188,140,84,84,49,49,48,53,54,55,55,84,244,141,188,141,84,84,49,49,48,53,54,55,56,84,244,141,188,142,84,84,49,49,48,53,54,55,57,84,244,141,188,143,84,84,49,49,48,53,54,56,48,84,244,141,188,144,84,84,49,49,48,53,54,56,49,84,244,141,188,145,84,84,49,49,48,53,54,56,50,84,244,141,188,146,84,84,49,49,48,53,54,56,51,84,244,141,188,147,84,84,49,49,48,53,54,56,52,84,244,141,188,148,84,84,49,49,48,53,54,56,53,84,244,141,188,149,84,84,49,49,48,53,54,56,54,84,244,141,188,150,84,84,49,49,48,53,54,56,55,84,244,141,188,151,84,84,49,49,48,53,54,56,56,84,244,141,188,152,84,84,49,49,48,53,54,56,57,84,244,141,188,153,84,84,49,49,48,53,54,57,48,84,244,141,188,154,84,84,49,49,48,53,54,57,49,84,244,141,188,155,84,84,49,49,48,53,54,57,50,84,244,141,188,156,84,84,49,49,48,53,54,57,51,84,244,141,188,157,84,84,49,49,48,53,54,57,52,84,244,141,188,158,84,84,49,49,48,53,54,57,53,84,244,141,188,159,84,84,49,49,48,53,54,57,54,84,244,141,188,160,84,84,49,49,48,53,54,57,55,84,244,141,188,161,84,84,49,49,48,53,54,57,56,84,244,141,188,162,84,84,49,49,48,53,54,57,57,84,244,141,188,163,84,84,49,49,48,53,55,48,48,84,244,141,188,164,84,84,49,49,48,53,55,48,49,84,244,141,188,165,84,84,49,49,48,53,55,48,50,84,244,141,188,166,84,84,49,49,48,53,55,48,51,84,244,141,188,167,84,84,49,49,48,53,55,48,52,84,244,141,188,168,84,84,49,49,48,53,55,48,53,84,244,141,188,169,84,84,49,49,48,53,55,48,54,84,244,141,188,170,84,84,49,49,48,53,55,48,55,84,244,141,188,171,84,84,49,49,48,53,55,48,56,84,244,141,188,172,84,84,49,49,48,53,55,48,57,84,244,141,188,173,84,84,49,49,48,53,55,49,48,84,244,141,188,174,84,84,49,49,48,53,55,49,49,84,244,141,188,175,84,84,49,49,48,53,55,49,50,84,244,141,188,176,84,84,49,49,48,53,55,49,51,84,244,141,188,177,84,84,49,49,48,53,55,49,52,84,244,141,188,178,84,84,49,49,48,53,55,49,53,84,244,141,188,179,84,84,49,49,48,53,55,49,54,84,244,141,188,180,84,84,49,49,48,53,55,49,55,84,244,141,188,181,84,84,49,49,48,53,55,49,56,84,244,141,188,182,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21015 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21015_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21015_s.txt", Encoding.UTF8);

    public Test21015() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersd35ea9f156764511b97173ebc769448f",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,48,55,48,48,84,244,143,138,172,84,84,49,49,49,48,55,48,49,84,244,143,138,173,84,84,49,49,49,48,55,48,50,84,244,143,138,174,84,84,49,49,49,48,55,48,51,84,244,143,138,175,84,84,49,49,49,48,55,48,52,84,244,143,138,176,84,84,49,49,49,48,55,48,53,84,244,143,138,177,84,84,49,49,49,48,55,48,54,84,244,143,138,178,84,84,49,49,49,48,55,48,55,84,244,143,138,179,84,84,49,49,49,48,55,48,56,84,244,143,138,180,84,84,49,49,49,48,55,48,57,84,244,143,138,181,84,84,49,49,49,48,55,49,48,84,244,143,138,182,84,84,49,49,49,48,55,49,49,84,244,143,138,183,84,84,49,49,49,48,55,49,50,84,244,143,138,184,84,84,49,49,49,48,55,49,51,84,244,143,138,185,84,84,49,49,49,48,55,49,52,84,244,143,138,186,84,84,49,49,49,48,55,49,53,84,244,143,138,187,84,84,49,49,49,48,55,49,54,84,244,143,138,188,84,84,49,49,49,48,55,49,55,84,244,143,138,189,84,84,49,49,49,48,55,49,56,84,244,143,138,190,84,84,49,49,49,48,55,49,57,84,244,143,138,191,84,84,49,49,49,48,55,50,48,84,244,143,139,128,84,84,49,49,49,48,55,50,49,84,244,143,139,129,84,84,49,49,49,48,55,50,50,84,244,143,139,130,84,84,49,49,49,48,55,50,51,84,244,143,139,131,84,84,49,49,49,48,55,50,52,84,244,143,139,132,84,84,49,49,49,48,55,50,53,84,244,143,139,133,84,84,49,49,49,48,55,50,54,84,244,143,139,134,84,84,49,49,49,48,55,50,55,84,244,143,139,135,84,84,49,49,49,48,55,50,56,84,244,143,139,136,84,84,49,49,49,48,55,50,57,84,244,143,139,137,84,84,49,49,49,48,55,51,48,84,244,143,139,138,84,84,49,49,49,48,55,51,49,84,244,143,139,139,84,84,49,49,49,48,55,51,50,84,244,143,139,140,84,84,49,49,49,48,55,51,51,84,244,143,139,141,84,84,49,49,49,48,55,51,52,84,244,143,139,142,84,84,49,49,49,48,55,51,53,84,244,143,139,143,84,84,49,49,49,48,55,51,54,84,244,143,139,144,84,84,49,49,49,48,55,51,55,84,244,143,139,145,84,84,49,49,49,48,55,51,56,84,244,143,139,146,84,84,49,49,49,48,55,51,57,84,244,143,139,147,84,84,49,49,49,48,55,52,48,84,244,143,139,148,84,84,49,49,49,48,55,52,49,84,244,143,139,149,84,84,49,49,49,48,55,52,50,84,244,143,139,150,84,84,49,49,49,48,55,52,51,84,244,143,139,151,84,84,49,49,49,48,55,52,52,84,244,143,139,152,84,84,49,49,49,48,55,52,53,84,244,143,139,153,84,84,49,49,49,48,55,52,54,84,244,143,139,154,84,84,49,49,49,48,55,52,55,84,244,143,139,155,84,84,49,49,49,48,55,52,56,84,244,143,139,156,84,84,49,49,49,48,55,52,57,84,244,143,139,157,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21498 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21498_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21498_s.txt", Encoding.UTF8);

    public Test21498() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containers36bebe1b8ff94a3ab031529594ebcfa6",
                        blob: "Blobb1c26fd3140048cab706a3e56ca19bc8",
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 0,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test21017 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21017_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\21017_s.txt", Encoding.UTF8);

    public Test21017() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersd35ea9f156764511b97173ebc769448f",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,49,48,55,53,48,84,244,143,139,158,84,84,49,49,49,48,55,53,49,84,244,143,139,159,84,84,49,49,49,48,55,53,50,84,244,143,139,160,84,84,49,49,49,48,55,53,51,84,244,143,139,161,84,84,49,49,49,48,55,53,52,84,244,143,139,162,84,84,49,49,49,48,55,53,53,84,244,143,139,163,84,84,49,49,49,48,55,53,54,84,244,143,139,164,84,84,49,49,49,48,55,53,55,84,244,143,139,165,84,84,49,49,49,48,55,53,56,84,244,143,139,166,84,84,49,49,49,48,55,53,57,84,244,143,139,167,84,84,49,49,49,48,55,54,48,84,244,143,139,168,84,84,49,49,49,48,55,54,49,84,244,143,139,169,84,84,49,49,49,48,55,54,50,84,244,143,139,170,84,84,49,49,49,48,55,54,51,84,244,143,139,171,84,84,49,49,49,48,55,54,52,84,244,143,139,172,84,84,49,49,49,48,55,54,53,84,244,143,139,173,84,84,49,49,49,48,55,54,54,84,244,143,139,174,84,84,49,49,49,48,55,54,55,84,244,143,139,175,84,84,49,49,49,48,55,54,56,84,244,143,139,176,84,84,49,49,49,48,55,54,57,84,244,143,139,177,84,84,49,49,49,48,55,55,48,84,244,143,139,178,84,84,49,49,49,48,55,55,49,84,244,143,139,179,84,84,49,49,49,48,55,55,50,84,244,143,139,180,84,84,49,49,49,48,55,55,51,84,244,143,139,181,84,84,49,49,49,48,55,55,52,84,244,143,139,182,84,84,49,49,49,48,55,55,53,84,244,143,139,183,84,84,49,49,49,48,55,55,54,84,244,143,139,184,84,84,49,49,49,48,55,55,55,84,244,143,139,185,84,84,49,49,49,48,55,55,56,84,244,143,139,186,84,84,49,49,49,48,55,55,57,84,244,143,139,187,84,84,49,49,49,48,55,56,48,84,244,143,139,188,84,84,49,49,49,48,55,56,49,84,244,143,139,189,84,84,49,49,49,48,55,56,50,84,244,143,139,190,84,84,49,49,49,48,55,56,51,84,244,143,139,191,84,84,49,49,49,48,55,56,52,84,244,143,140,128,84,84,49,49,49,48,55,56,53,84,244,143,140,129,84,84,49,49,49,48,55,56,54,84,244,143,140,130,84,84,49,49,49,48,55,56,55,84,244,143,140,131,84,84,49,49,49,48,55,56,56,84,244,143,140,132,84,84,49,49,49,48,55,56,57,84,244,143,140,133,84,84,49,49,49,48,55,57,48,84,244,143,140,134,84,84,49,49,49,48,55,57,49,84,244,143,140,135,84,84,49,49,49,48,55,57,50,84,244,143,140,136,84,84,49,49,49,48,55,57,51,84,244,143,140,137,84,84,49,49,49,48,55,57,52,84,244,143,140,138,84,84,49,49,49,48,55,57,53,84,244,143,140,139,84,84,49,49,49,48,55,57,54,84,244,143,140,140,84,84,49,49,49,48,55,57,55,84,244,143,140,141,84,84,49,49,49,48,55,57,56,84,244,143,140,142,84,84,49,49,49,48,55,57,57,84,244,143,140,143,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}

//<dump disabled/>

public class Test20953 : TestBase
{
    private static readonly string recordedRequest = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20953_c.txt", Encoding.UTF8);
    private static readonly string recordedResponse = File.ReadAllText("E:\\BlobStorageTests\\ALL\\20953_s.txt", Encoding.UTF8);

    public Test20953() : base(recordedRequest, recordedResponse, "testaccount1")
    { }

    [Fact]
    public void Execute()
    {
        // start server
        StartServer();

        try
        {
            // create and use client
            var serviceClient = new AzureStorageClient(this.Credentials);
            serviceClient.BaseUri = new UriBuilder("http", "localhost", Port).Uri.ToString();
            System.IO.Stream body; body = new MemoryStream(Encoding.UTF8.GetBytes(""));
            try
            {
                serviceClient.HttpClient.DefaultRequestHeaders.ExpectContinue = false;
                var cancellationToken = Debugger.IsAttached
                    ? new CancellationToken()
                    : new CancellationTokenSource(3000).Token;
                var result = serviceClient.Blobs.PutWithHttpMessagesAsync(
                        accountName: "testaccount1",
                        container: "containersdf87e0f5374149afa792ac52b484870e",
                        blob: Encoding.UTF8.GetString(new byte[]{84,49,49,48,53,55,49,57,84,244,141,188,183,84,84,49,49,48,53,55,50,48,84,244,141,188,184,84,84,49,49,48,53,55,50,49,84,244,141,188,185,84,84,49,49,48,53,55,50,50,84,244,141,188,186,84,84,49,49,48,53,55,50,51,84,244,141,188,187,84,84,49,49,48,53,55,50,52,84,244,141,188,188,84,84,49,49,48,53,55,50,53,84,244,141,188,189,84,84,49,49,48,53,55,50,54,84,244,141,188,190,84,84,49,49,48,53,55,50,55,84,244,141,188,191,84,84,49,49,48,53,55,50,56,84,244,141,189,128,84,84,49,49,48,53,55,50,57,84,244,141,189,129,84,84,49,49,48,53,55,51,48,84,244,141,189,130,84,84,49,49,48,53,55,51,49,84,244,141,189,131,84,84,49,49,48,53,55,51,50,84,244,141,189,132,84,84,49,49,48,53,55,51,51,84,244,141,189,133,84,84,49,49,48,53,55,51,52,84,244,141,189,134,84,84,49,49,48,53,55,51,53,84,244,141,189,135,84,84,49,49,48,53,55,51,54,84,244,141,189,136,84,84,49,49,48,53,55,51,55,84,244,141,189,137,84,84,49,49,48,53,55,51,56,84,244,141,189,138,84,84,49,49,48,53,55,51,57,84,244,141,189,139,84,84,49,49,48,53,55,52,48,84,244,141,189,140,84,84,49,49,48,53,55,52,49,84,244,141,189,141,84,84,49,49,48,53,55,52,50,84,244,141,189,142,84,84,49,49,48,53,55,52,51,84,244,141,189,143,84,84,49,49,48,53,55,52,52,84,244,141,189,144,84,84,49,49,48,53,55,52,53,84,244,141,189,145,84,84,49,49,48,53,55,52,54,84,244,141,189,146,84,84,49,49,48,53,55,52,55,84,244,141,189,147,84,84,49,49,48,53,55,52,56,84,244,141,189,148,84,84,49,49,48,53,55,52,57,84,244,141,189,149,84,84,49,49,48,53,55,53,48,84,244,141,189,150,84,84,49,49,48,53,55,53,49,84,244,141,189,151,84,84,49,49,48,53,55,53,50,84,244,141,189,152,84,84,49,49,48,53,55,53,51,84,244,141,189,153,84,84,49,49,48,53,55,53,52,84,244,141,189,154,84,84,49,49,48,53,55,53,53,84,244,141,189,155,84,84,49,49,48,53,55,53,54,84,244,141,189,156,84,84,49,49,48,53,55,53,55,84,244,141,189,157,84,84,49,49,48,53,55,53,56,84,244,141,189,158,84,84,49,49,48,53,55,53,57,84,244,141,189,159,84,84,49,49,48,53,55,54,48,84,244,141,189,160,84,84,49,49,48,53,55,54,49,84,244,141,189,161,84,84,49,49,48,53,55,54,50,84,244,141,189,162,84,84,49,49,48,53,55,54,51,84,244,141,189,163,84,84,49,49,48,53,55,54,52,84,244,141,189,164,84,84,49,49,48,53,55,54,53,84,244,141,189,165,84,84,49,49,48,53,55,54,54,84,244,141,189,166,84,84,49,49,48,53,55,54,55,84,244,141,189,167,84,84,49,49,48,53,55,54,56,84,244,141,189,168,84}),
                        blobType: "PageBlob".ParseBlobType() ?? (BlobType)Enum.Parse(typeof(BlobType), "PageBlob"),
                        body: body,
                        timeout: 30,
                        xMsBlobContentLength: 1024,
                        cancellationToken: cancellationToken).GetAwaiter().GetResult();
                Assert.True(false); // expected exception
                
            }
            catch (CloudException)
            {
                

                // validate e.Body or similar?
            }
            catch (ValidationException)
            {
                
            }
            catch (ArgumentException)
            {
                
            }
        }
        catch
        {
            // prioritize! The server exception might have caused the exception on this thread (but get's swallowed by VS and such)
            if (ServerException != null)
                /*expecting failure*/;
            else
                throw;
        }
        finally
        {
            // stop server
            StopServer();
        }
    }
}
